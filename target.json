{
    "id": "stm32iotnode",
    "platformid": "codal",
    "nickname": "lets-steam",
    "name": "MakeCode Let's STEAM",
    "title": "MakeCode Let's STEAM - Blocks / Javascript editor",
    "description": "A Blocks / JavaScript code editor for the Let's STEAM project",
    "corepkg": "core",
    "bundleddirs": [
        "libs/base",
        "libs/core",
        "libs/core---stm32",
        "libs/stm32-discovery-DISCO_L475VG_IOT",
        "libs/buttons",
        "libs/music",
        "libs/serial",
        "libs/lcd",
        "libs/accelerometer---lsm6dsl",
        "libs/barometer---lps22hb",
        "libs/distance---vl53l0x",
        "libs/thermometer---hts221",
        "libs/thermometer---lps22hb",
        "libs/hygrometer---hts221",
        "libs/oled",
        "libs/wifi",
        "libs/magnetics",
        "libs/datalogger",
        "libs/hcsr04",
        "libs/lcd_i2c",
        "libs/mh_z19b",
        "libs/soil-hygrometer"
    ],
    "cloud": {
        "workspace": false,
        "sharing": true,
        "thumbnails": true,
        "importing": true,
        "packages": true,
        "publishing": true,
        "preferredPackages": [],
        "cloudProviders": {
            "github": {}
        }
    },
    "serial": {
        "nameFilter": "^(mbed Serial Port|DAPLink CMSIS-DAP|STM32L475 CMSIS-DAP)",
        "useHF2": false,
        "useEditor": true,
        "log": true,
        "editorTheme": {
            "graphBackground": "#d9d9d9",
            "lineColors": [
                "#CC2936",
                "#FFC914",
                "#2EB7ED",
                "#FB48C7",
                "#08415C",
                "#C200C0"
            ]
        },
        "vendorId": "0x0d28",
        "productId": "0x0204",
        "rawHID": true
    },
    "simulator": {
        "autoRun": true,
        "streams": false,
        "aspectRatio": 1,
        "parts": true,
        "partsAspectRatio": 0.69,
        "dynamicBoardDefinition": true,
        "messageSimulators": {
            "jacdac": {
                "url": "https://microsoft.github.io/jacdac-docs/tools/makecode-sim?webusb=0&parentOrigin=$PARENT_ORIGIN$",
                "localHostUrl": "http://localhost:8000/tools/makecode-sim?webusb=0&parentOrigin=$PARENT_ORIGIN$",
                "aspectRatio": 0.89,
                "permanent": true
            }
        }
    },
    "runtime": {
        "mathBlocks": true,
        "loopsBlocks": true,
        "logicBlocks": true,
        "variablesBlocks": true,
        "textBlocks": true,
        "listsBlocks": true,
        "functionBlocks": true,
        "functionsOptions": {
            "useNewFunctions": true,
            "extraFunctionEditorTypes": []
        },
        "onStartWeight": 100,
        "pauseUntilBlock": {},
        "breakBlock": true,
        "continueBlock": true
    },
    "compile": {
        "isNative": false,
        "useUF2": false,
        "webUSB": true,
        "hasHex": true,
        "deployDrives": ".*",
        "deployFileMarker": "MBED.HTM",
        "driveName": "DIS_L4IOT",
        "openocdScript": "source [find interface/cmsis-dap.cfg]; source [find target/stm32l4x.cfg]",
        "flashCodeAlign": 1024,
        "flashChecksumAddr": 0,
        "gc": false,
        "utf8": false,
        "floatingPoint": true,
        "taggedInts": true,
        "nativeType": "thumb",
        "switches": {},
        "jsRefCounting": false,
        "noSourceInFlash": true
    },
    "compileService": {
        "buildEngine": "codal",
        "codalTarget": {
            "name": "codal-stm32-DISCO_L475VG_IOT",
            "url": "https://github.com/letssteam/codal-stm32-DISCO_L475VG_IOT",
            "branch": "v1.0.22",
            "type": "git",
            "dev": true
        },
        "codalBinary": "STM32",
        "githubCorePackage": "lancaster-university/codal",
        "gittag": "v0.8.0",
        "serviceId": "codal2stm32",
        "dockerImage": "pext/yotta:latest"
    },
    "variants": {
        "stm32-DISCO_L475VG_IOT": {
            "compile": {
                "hasHex": true,
                "deployFileMarker": "MBED.HTM",
                "driveName": "DIS_L4IOT",
                "uf2Family": "0x57755a57",
                "openocdScript": "source [find interface/cmsis-dap.cfg]; source [find target/stm32l4x.cfg]"
            },
            "compileService": {
                "codalTarget": {
                    "name": "codal-stm32-DISCO_L475VG_IOT",
                    "url": "https://github.com/letssteam/codal-stm32-DISCO_L475VG_IOT",
                    "branch": "v1.0.22",
                    "type": "git",
                    "dev": true
                },
                "codalBinary": "STM32",
                "serviceId": "codal2stm32",
                "dockerImage": "pext/yotta:latest"
            }
        }
    },
    "appTheme": {
        "accentColor": "#0089BF",
        "logoUrl": "https://github.com/letssteam/pxt-lets-steam",
        "logo": "docs/static/logo.svg",
        "docsLogo": "docs/static/logo.svg",
        "docsHeader": "Microsoft MakeCode STM32",
        "portraitLogo": "docs/static/logo.svg",
        "footerLogo": "docs/static/logo.svg",
        "organization": "Microsoft MakeCode",
        "organizationUrl": "https://makecode.com/",
        "organizationLogo": "docs/static/Microsoft-logo_rgb_c-gray-square.png",
        "organizationWideLogo": "docs/static/Microsoft-logo_rgb_c-white.png",
        "homeUrl": "/",
        "privacyUrl": "https://go.microsoft.com/fwlink/?LinkId=521839",
        "termsOfUseUrl": "https://go.microsoft.com/fwlink/?LinkID=206977",
        "githubUrl": "https://github.com/letssteam/pxt-lets-steam",
        "feedbackUrl": "https://forum.makecode.com/",
        "betaUrl": "https://github.com/letssteam/pxt-lets-steam",
        "boardName": "board",
        "homeScreenHero": "docs/static/hero.svg",
        "debugger": true,
        "print": true,
        "chooseBoardOnNewProject": true,
        "lightToc": true,
        "instructions": true,
        "extendEditor": true,
        "extendFieldEditors": false,
        "docMenu": [
            {
                "name": "About",
                "path": "/docs/about"
            },
            {
                "name": "Forum",
                "path": "https://forum.makecode.com"
            },
            {
                "name": "Boards",
                "path": "/docs/boards"
            },
            {
                "name": "Blocks",
                "path": "/docs/blocks"
            },
            {
                "name": "JavaScript",
                "path": "/docs/javascript"
            },
            {
                "name": "Reference",
                "path": "/docs/reference"
            },
            {
                "name": "GitHub",
                "path": "https://github.com/letssteam/pxt-lets-steam"
            }
        ],
        "invertedMenu": true,
        "invertedToolbox": true,
        "invertedMonaco": true,
        "monacoToolbox": true,
        "highContrast": true,
        "greenScreen": true,
        "blocksCollapsing": true,
        "accessibleBlocks": true,
        "simAnimationEnter": "fly right in",
        "simAnimationExit": "fly right out",
        "hasAudio": true,
        "disableBlockIcons": true,
        "disableAPICache": true,
        "blocklyOptions": {
            "grid": {
                "spacing": 20,
                "length": 2,
                "colour": "rgba(189, 195, 199, 0.20)",
                "snap": true
            }
        },
        "blockColors": {
            "input": "#E9407F",
            "loops": "#61b22f",
            "logic": "#fdc400",
            "math": "#62549f",
            "variables": "#140e4e",
            "text": "#3BBDD6",
            "advanced": "#00272B",
            "functions": "#005a9e",
            "arrays": "#8A1C7C"
        },
        "monacoColors": {
            "editor.background": "#39474e"
        },
        "allowPackageExtensions": true,
        "scriptManager": true,
        "simScreenshot": false,
        "simGif": false,
        "qrCode": true,
        "python": true,
        "pythonToolbox": true,
        "addNewTypeScriptFile": true,
        "nameProjectFirst": true,
        "showProjectSettings": true,
        "tutorialBlocksDiff": true,
        "tutorialExplicitHints": true,
        "chooseLanguageRestrictionOnNewProject": true,
        "openProjectNewTab": true,
        "errorList": true,
        "crowdinProject": "kindscript",
        "selectLanguage": true,
        "availableLocales": [
            "en",
            "fr",
            "it",
            "el",
            "nl",
            "ca",
            "es-ES",
            "bg"
        ],
        "TOC": [
            {
                "name": "About",
                "path": "/about",
                "subitems": []
            },
            {
                "name": "FAQ",
                "path": "/faq",
                "subitems": []
            },
            {
                "name": "Projects",
                "path": "/projects",
                "subitems": []
            },
            {
                "name": "GitHub",
                "path": "/github",
                "subitems": []
            },
            {
                "name": "Blocks",
                "path": "/blocks",
                "subitems": [
                    {
                        "name": "On Start",
                        "path": "/blocks/on-start",
                        "subitems": []
                    },
                    {
                        "name": "Loops",
                        "path": "/blocks/loops",
                        "subitems": [
                            {
                                "name": "repeat",
                                "path": "/blocks/loops/repeat",
                                "subitems": []
                            },
                            {
                                "name": "for",
                                "path": "/blocks/loops/for",
                                "subitems": []
                            },
                            {
                                "name": "while",
                                "path": "/blocks/loops/while",
                                "subitems": []
                            },
                            {
                                "name": "for of",
                                "path": "/blocks/loops/for-of",
                                "subitems": []
                            }
                        ]
                    },
                    {
                        "name": "Logic",
                        "path": "/blocks/logic",
                        "subitems": [
                            {
                                "name": "if",
                                "path": "/blocks/logic/if",
                                "subitems": []
                            },
                            {
                                "name": "Boolean",
                                "path": "/blocks/logic/boolean",
                                "subitems": []
                            }
                        ]
                    },
                    {
                        "name": "Variables",
                        "path": "/blocks/variables",
                        "subitems": [
                            {
                                "name": "assign",
                                "path": "/blocks/variables/assign",
                                "subitems": []
                            },
                            {
                                "name": "change var",
                                "path": "/blocks/variables/change",
                                "subitems": []
                            },
                            {
                                "name": "var",
                                "path": "/blocks/variables/var",
                                "subitems": []
                            }
                        ]
                    },
                    {
                        "name": "Math",
                        "path": "/blocks/math",
                        "subitems": []
                    },
                    {
                        "name": "JavaScript blocks",
                        "path": "/blocks/javascript-blocks",
                        "subitems": []
                    },
                    {
                        "name": "Custom blocks",
                        "path": "/blocks/custom",
                        "subitems": []
                    }
                ]
            },
            {
                "name": "Python",
                "path": "/python",
                "subitems": [
                    {
                        "name": "Calling",
                        "path": "/python/call",
                        "subitems": []
                    },
                    {
                        "name": "Sequencing",
                        "path": "/python/sequence",
                        "subitems": []
                    },
                    {
                        "name": "Variables",
                        "path": "/python/variables",
                        "subitems": []
                    },
                    {
                        "name": "Operators",
                        "path": "/python/operators",
                        "subitems": []
                    },
                    {
                        "name": "Statements",
                        "path": "/python/statements",
                        "subitems": []
                    },
                    {
                        "name": "Functions",
                        "path": "/python/functions",
                        "subitems": []
                    },
                    {
                        "name": "Classes",
                        "path": "/python/classes",
                        "subitems": []
                    }
                ]
            },
            {
                "name": "JavaScript",
                "path": "/javascript",
                "subitems": [
                    {
                        "name": "Calling",
                        "path": "/javascript/call",
                        "subitems": []
                    },
                    {
                        "name": "Sequencing",
                        "path": "/javascript/sequence",
                        "subitems": []
                    },
                    {
                        "name": "Variables",
                        "path": "/javascript/variables",
                        "subitems": []
                    },
                    {
                        "name": "Operators",
                        "path": "/javascript/operators",
                        "subitems": []
                    },
                    {
                        "name": "Statements",
                        "path": "/javascript/statements",
                        "subitems": []
                    },
                    {
                        "name": "Functions",
                        "path": "/javascript/functions",
                        "subitems": []
                    },
                    {
                        "name": "Types",
                        "path": "/javascript/types",
                        "subitems": []
                    },
                    {
                        "name": "Classes",
                        "path": "/javascript/classes",
                        "subitems": []
                    },
                    {
                        "name": "Interfaces",
                        "path": "/javascript/interfaces",
                        "subitems": []
                    },
                    {
                        "name": "Generics",
                        "path": "/javascript/generics",
                        "subitems": []
                    }
                ]
            },
            {
                "name": "Types",
                "path": "/types",
                "subitems": [
                    {
                        "name": "Number",
                        "path": "/types/number",
                        "subitems": []
                    },
                    {
                        "name": "String",
                        "path": "/types/string",
                        "subitems": []
                    },
                    {
                        "name": "Boolean",
                        "path": "/types/boolean",
                        "subitems": []
                    },
                    {
                        "name": "Array",
                        "path": "/types/array",
                        "subitems": []
                    },
                    {
                        "name": "Function",
                        "path": "/types/function",
                        "subitems": []
                    }
                ]
            },
            {
                "name": "Miscellaneous",
                "path": "",
                "subitems": [
                    {
                        "name": "About",
                        "path": "/about",
                        "subitems": []
                    },
                    {
                        "name": "Support",
                        "path": "/support",
                        "subitems": []
                    },
                    {
                        "name": "Translate",
                        "path": "/translate",
                        "subitems": []
                    },
                    {
                        "name": "Sharing projects",
                        "path": "/share",
                        "subitems": []
                    },
                    {
                        "name": "Offline support",
                        "path": "/offline",
                        "subitems": []
                    },
                    {
                        "name": "Save",
                        "path": "/save",
                        "subitems": []
                    }
                ]
            },
            {
                "name": "Developers",
                "path": "",
                "subitems": [
                    {
                        "name": "Command Line Interface",
                        "path": "/cli",
                        "subitems": []
                    },
                    {
                        "name": "Visual Studio Code support",
                        "path": "/code",
                        "subitems": []
                    },
                    {
                        "name": "Blocks Embed",
                        "path": "/blocks-embed",
                        "subitems": []
                    }
                ]
            }
        ],
        "embedUrl": "http://makecode.st.com/",
        "id": "stm32iotnode",
        "title": "MakeCode Let's STEAM - Blocks / Javascript editor",
        "name": "MakeCode Let's STEAM",
        "description": "A Blocks / JavaScript code editor for the Let's STEAM project",
        "htmlDocIncludes": {}
    },
    "ignoreDocsErrors": true,
    "uploadDocs": true,
    "versions": {
        "branch": "main",
        "commits": "https://github.com/letssteam/pxt-lets-steam/commits/cbf20ff3d86e5ab84b4ab617ae6386ef296ff1d9",
        "target": "1.0.32",
        "pxt": "7.4.12"
    },
    "blocksprj": {
        "id": "blocksprj",
        "config": {
            "name": "{0} block",
            "dependencies": {
                "core": "*"
            },
            "description": "",
            "files": [
                "main.blocks",
                "main.ts",
                "README.md"
            ],
            "additionalFilePaths": []
        },
        "files": {
            "README.md": "",
            "main.blocks": "<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n  <block type=\"forever\" x=\"176\" y=\"0\"></block>\n</xml>\n",
            "main.ts": "\n"
        }
    },
    "tsprj": {
        "id": "tsprj",
        "config": {
            "name": "{0} block",
            "dependencies": {
                "core": "*"
            },
            "description": "",
            "files": [
                "main.ts",
                "README.md"
            ],
            "additionalFilePaths": []
        },
        "files": {
            "README.md": "",
            "main.ts": "\n"
        }
    },
    "bundledpkgs": {
        "base": {
            "README.md": "# base\n\nThe base library, shared by all C++ targets (not only Codal-based).\n\n\n",
            "advmath.cpp": "#include \"pxtbase.h\"\n\nusing namespace std;\n\n#define SINGLE(op) return fromDouble(::op(toDouble(x)));\n\nnamespace Math_ {\n\n//%\nTNumber log2(TNumber x){SINGLE(log2)}\n//%\nTNumber exp(TNumber x){SINGLE(exp)}\n//%\nTNumber tanh(TNumber x){SINGLE(tanh)}\n//%\nTNumber sinh(TNumber x){SINGLE(sinh)}\n//%\nTNumber cosh(TNumber x){SINGLE(cosh)}\n//%\nTNumber atanh(TNumber x){SINGLE(atanh)}\n//%\nTNumber asinh(TNumber x){SINGLE(asinh)}\n//%\nTNumber acosh(TNumber x){SINGLE(acosh)}\n\n}",
            "buffer.cpp": "#include \"pxtbase.h\"\n#include <limits.h>\n\nusing namespace std;\n\n//% indexerGet=BufferMethods::getByte indexerSet=BufferMethods::setByte\nnamespace BufferMethods {\n//%\nuint8_t *getBytes(Buffer buf) {\n    return buf->data;\n}\n\n//%\nint getByte(Buffer buf, int off) {\n    if (buf && 0 <= off && off < buf->length)\n        return buf->data[off];\n    return 0;\n}\n\n//%\nvoid setByte(Buffer buf, int off, int v) {\n    if (buf && 0 <= off && off < buf->length)\n        buf->data[off] = v;\n}\n\n/**\n * Reads an unsigned byte at a particular location\n */\n//%\nint getUint8(Buffer buf, int off) {\n    return getByte(buf, off);\n}\n\n/**\n * Returns false when the buffer can be written to.\n */\n//%\nbool isReadOnly(Buffer buf) {\n    return buf->isReadOnly();\n}\n\n/**\n * Writes an unsigned byte at a particular location\n */\n//%\nvoid setUint8(Buffer buf, int off, int v) {\n    setByte(buf, off, v);\n}\n\nint writeBuffer(Buffer buf, int dstOffset, Buffer src, int srcOffset = 0, int length = -1) {\n    if (length < 0)\n        length = src->length;\n\n    if (srcOffset < 0 || dstOffset < 0 || dstOffset > buf->length)\n        return -1;\n\n    length = pxt::min(src->length - srcOffset, buf->length - dstOffset);\n\n    if (length < 0)\n        return -1;\n\n    if (buf == src) {\n        memmove(buf->data + dstOffset, src->data + srcOffset, length);\n    } else {\n        memcpy(buf->data + dstOffset, src->data + srcOffset, length);\n    }\n\n    return 0;\n}\n\n/**\n * Write a number in specified format in the buffer.\n */\n//%\nvoid setNumber(Buffer buf, NumberFormat format, int offset, TNumber value) {\n    if (offset < 0)\n        return;\n    setNumberCore(buf->data + offset, buf->length - offset, format, value);\n}\n\n/**\n * Read a number in specified format from the buffer.\n */\n//%\nTNumber getNumber(Buffer buf, NumberFormat format, int offset) {\n    if (offset < 0)\n        return fromInt(0);\n    return getNumberCore(buf->data + offset, buf->length - offset, format);\n}\n\n/** Returns the length of a Buffer object. */\n//% property\nint length(Buffer s) {\n    return s->length;\n}\n\n/**\n * Fill (a fragment) of the buffer with given value.\n */\n//%\nvoid fill(Buffer buf, int value, int offset = 0, int length = -1) {\n    if (offset < 0 || offset > buf->length)\n        return; // DEVICE_INVALID_PARAMETER;\n    if (length < 0)\n        length = buf->length;\n    length = pxt::min(length, buf->length - offset);\n    memset(buf->data + offset, value, length);\n}\n\n/**\n * Return a copy of a fragment of a buffer.\n */\n//%\nBuffer slice(Buffer buf, int offset = 0, int length = -1) {\n    offset = pxt::min((int)buf->length, offset);\n    if (length < 0)\n        length = buf->length;\n    length = pxt::min(length, buf->length - offset);\n    return mkBuffer(buf->data + offset, length);\n}\n\n/**\n * Shift buffer left in place, with zero padding.\n * @param offset number of bytes to shift; use negative value to shift right\n * @param start start offset in buffer. Default is 0.\n * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n * start. eg: -1\n */\n//%\nvoid shift(Buffer buf, int offset, int start = 0, int length = -1) {\n    if (length < 0)\n        length = buf->length - start;\n    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||\n        offset == 0 || offset == INT_MIN)\n        return;\n    if (offset <= -length || offset >= length) {\n        fill(buf, 0);\n        return;\n    }\n\n    uint8_t *data = buf->data + start;\n    if (offset < 0) {\n        offset = -offset;\n        memmove(data + offset, data, length - offset);\n        memset(data, 0, offset);\n    } else {\n        length = length - offset;\n        memmove(data, data + offset, length);\n        memset(data + length, 0, offset);\n    }\n}\n\n/**\n * Convert a buffer to string assuming UTF8 encoding\n */\n//%\nString toString(Buffer buf) {\n    return mkString((char *)buf->data, buf->length);\n}\n\n/**\n * Convert a buffer to its hexadecimal representation.\n */\n//%\nString toHex(Buffer buf) {\n    const char *hex = \"0123456789abcdef\";\n    auto res = mkStringCore(NULL, buf->length * 2);\n    for (int i = 0; i < buf->length; ++i) {\n        res->ascii.data[i << 1] = hex[buf->data[i] >> 4];\n        res->ascii.data[(i << 1) + 1] = hex[buf->data[i] & 0xf];\n    }\n    return res;\n}\n\n/**\n * Rotate buffer left in place.\n * @param offset number of bytes to shift; use negative value to shift right\n * @param start start offset in buffer. Default is 0.\n * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n * start. eg: -1\n */\n//%\nvoid rotate(Buffer buf, int offset, int start = 0, int length = -1) {\n    if (length < 0)\n        length = buf->length - start;\n    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||\n        offset == 0 || offset == INT_MIN)\n        return;\n\n    if (offset < 0)\n        offset += length << 8; // try to make it positive\n    offset %= length;\n    if (offset < 0)\n        offset += length;\n\n    uint8_t *data = buf->data + start;\n\n    uint8_t *n_first = data + offset;\n    uint8_t *first = data;\n    uint8_t *next = n_first;\n    uint8_t *last = data + length;\n\n    while (first != next) {\n        uint8_t tmp = *first;\n        *first++ = *next;\n        *next++ = tmp;\n        if (next == last) {\n            next = n_first;\n        } else if (first == n_first) {\n            n_first = next;\n        }\n    }\n}\n\n/**\n * Write contents of `src` at `dstOffset` in current buffer.\n */\n//%\nvoid write(Buffer buf, int dstOffset, Buffer src) {\n    // srcOff and length not supported, we only do up to 4 args :/\n    writeBuffer(buf, dstOffset, src, 0, -1);\n}\n\n/**\n * Compute k-bit FNV-1 non-cryptographic hash of the buffer.\n */\n//%\nuint32_t hash(Buffer buf, int bits) {\n    if (bits < 1)\n        return 0;\n    uint32_t h = hash_fnv1(buf->data, buf->length);\n    if (bits >= 32)\n        return h;\n    else\n        return ((h ^ (h >> bits)) & ((1 << bits) - 1));\n}\n\n} // namespace BufferMethods\n\nbool BoxedBuffer::isInstance(TValue v) {\n    return getAnyVTable(v) == &buffer_vt;\n}\n\n// The functions below are deprecated in control namespace, but they are referenced\n// in Buffer namespaces via explicit shim=...\nnamespace control {\n/**\n * Create a new zero-initialized buffer.\n * @param size number of bytes in the buffer\n */\n//% deprecated=1\nBuffer createBuffer(int size) {\n    return mkBuffer(NULL, size);\n}\n\n/**\n * Create a new buffer with UTF8-encoded string\n * @param str the string to put in the buffer\n */\n//% deprecated=1\nBuffer createBufferFromUTF8(String str) {\n#if PXT_UTF8\n    auto sz = toRealUTF8(str, NULL);\n    auto r = mkBuffer(NULL, sz);\n    toRealUTF8(str, r->data);\n    return r;\n#else\n    return mkBuffer((const uint8_t *)str->getUTF8Data(), str->getUTF8Size());\n#endif\n}\n} // namespace control\n\nnamespace pxt {\nstatic int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {\n    if (szLeft < length) {\n        return -1;\n    }\n\n    if (swapBytes) {\n        uint8_t *p = dst + length;\n        for (int i = 0; i < length; ++i)\n            *--p = src[i];\n    } else {\n        if (length == 4 && ((uintptr_t)dst & 3) == 0)\n            *(uint32_t *)dst = *(uint32_t *)src;\n        else if (length == 2 && ((uintptr_t)dst & 1) == 0)\n            *(uint16_t *)dst = *(uint16_t *)src;\n        else\n            memcpy(dst, src, length);\n    }\n\n    return 0;\n}\n\nstatic int readBytes(uint8_t *src, uint8_t *dst, int length, bool swapBytes, int szLeft) {\n    if (szLeft < length) {\n        memset(dst, 0, length);\n        return -1;\n    }\n\n    if (swapBytes) {\n        uint8_t *p = src + length;\n        for (int i = 0; i < length; ++i)\n            dst[i] = *--p;\n    } else {\n        if (length == 4 && ((uintptr_t)src & 3) == 0)\n            *(uint32_t *)dst = *(uint32_t *)src;\n        else if (length == 2 && ((uintptr_t)src & 1) == 0)\n            *(uint16_t *)dst = *(uint16_t *)src;\n        else\n            memcpy(dst, src, length);\n    }\n\n    return 0;\n}\n\nvoid setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {\n    int8_t i8;\n    uint8_t u8;\n    int16_t i16;\n    uint16_t u16;\n    int32_t i32;\n    uint32_t u32;\n    float f32;\n    double f64;\n\n// Assume little endian\n#define WRITEBYTES(isz, swap, toInt)                                                               \\\n    isz = toInt(value);                                                                            \\\n    writeBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                   \\\n    break\n\n    switch (format) {\n    case NumberFormat::Int8LE:\n        WRITEBYTES(i8, false, toInt);\n    case NumberFormat::UInt8LE:\n        WRITEBYTES(u8, false, toInt);\n    case NumberFormat::Int16LE:\n        WRITEBYTES(i16, false, toInt);\n    case NumberFormat::UInt16LE:\n        WRITEBYTES(u16, false, toInt);\n    case NumberFormat::Int32LE:\n        WRITEBYTES(i32, false, toInt);\n    case NumberFormat::UInt32LE:\n        WRITEBYTES(u32, false, toUInt);\n\n    case NumberFormat::Int8BE:\n        WRITEBYTES(i8, true, toInt);\n    case NumberFormat::UInt8BE:\n        WRITEBYTES(u8, true, toInt);\n    case NumberFormat::Int16BE:\n        WRITEBYTES(i16, true, toInt);\n    case NumberFormat::UInt16BE:\n        WRITEBYTES(u16, true, toInt);\n    case NumberFormat::Int32BE:\n        WRITEBYTES(i32, true, toInt);\n    case NumberFormat::UInt32BE:\n        WRITEBYTES(u32, true, toUInt);\n\n    case NumberFormat::Float32LE:\n        WRITEBYTES(f32, false, toFloat);\n    case NumberFormat::Float32BE:\n        WRITEBYTES(f32, true, toFloat);\n    case NumberFormat::Float64LE:\n        WRITEBYTES(f64, false, toDouble);\n    case NumberFormat::Float64BE:\n        WRITEBYTES(f64, true, toDouble);\n    }\n}\n\nTNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {\n    int8_t i8;\n    uint8_t u8;\n    int16_t i16;\n    uint16_t u16;\n    int32_t i32;\n    uint32_t u32;\n    float f32;\n    double f64;\n\n// Assume little endian\n#define READBYTES(isz, swap, conv)                                                                 \\\n    readBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                    \\\n    return conv(isz)\n\n    switch (format) {\n    case NumberFormat::Int8LE:\n        READBYTES(i8, false, fromInt);\n    case NumberFormat::UInt8LE:\n        READBYTES(u8, false, fromInt);\n    case NumberFormat::Int16LE:\n        READBYTES(i16, false, fromInt);\n    case NumberFormat::UInt16LE:\n        READBYTES(u16, false, fromInt);\n    case NumberFormat::Int32LE:\n        READBYTES(i32, false, fromInt);\n    case NumberFormat::UInt32LE:\n        READBYTES(u32, false, fromUInt);\n\n    case NumberFormat::Int8BE:\n        READBYTES(i8, true, fromInt);\n    case NumberFormat::UInt8BE:\n        READBYTES(u8, true, fromInt);\n    case NumberFormat::Int16BE:\n        READBYTES(i16, true, fromInt);\n    case NumberFormat::UInt16BE:\n        READBYTES(u16, true, fromInt);\n    case NumberFormat::Int32BE:\n        READBYTES(i32, true, fromInt);\n    case NumberFormat::UInt32BE:\n        READBYTES(u32, true, fromUInt);\n\n    case NumberFormat::Float32LE:\n        READBYTES(f32, false, fromFloat);\n    case NumberFormat::Float32BE:\n        READBYTES(f32, true, fromFloat);\n    case NumberFormat::Float64LE:\n        READBYTES(f64, false, fromDouble);\n    case NumberFormat::Float64BE:\n        READBYTES(f64, true, fromDouble);\n    }\n\n    return 0;\n}\n} // namespace pxt\n",
            "buffer.ts": "namespace pins {\n    //% deprecated=1\n    export function sizeOf(format: NumberFormat) {\n        return Buffer.sizeOfNumberFormat(format)\n    }\n\n    //% deprecated=1\n    export function createBufferFromArray(bytes: number[]) {\n        return Buffer.fromArray(bytes)\n    }\n\n    //% deprecated=1\n    export function packedSize(format: string) {\n        return Buffer.packedSize(format)\n    }\n\n    //% deprecated=1\n    export function packBuffer(format: string, nums: number[]) {\n        return Buffer.pack(format, nums)\n    }\n\n    //% deprecated=1\n    export function packIntoBuffer(format: string, buf: Buffer, offset: number, nums: number[]) {\n        buf.packAt(offset, format, nums)\n    }\n\n    //% deprecated=1\n    export function unpackBuffer(format: string, buf: Buffer, offset = 0) {\n        return buf.unpack(format, offset)\n    }\n\n    //% deprecated=1\n    export function concatBuffers(bufs: Buffer[]) {\n        return Buffer.concat(bufs)\n    }\n}\n\n// see http://msgpack.org/ for the spec\n// it currently only implements numbers and their sequances\n// once we handle any type and typeof expressions we can do more\n\nnamespace msgpack {\n    function tagFormat(tag: number) {\n        switch (tag) {\n            case 0xCB: return NumberFormat.Float64BE\n            case 0xCC: return NumberFormat.UInt8BE\n            case 0xCD: return NumberFormat.UInt16BE\n            case 0xCE: return NumberFormat.UInt32BE\n            case 0xD0: return NumberFormat.Int8BE\n            case 0xD1: return NumberFormat.Int16BE\n            case 0xD2: return NumberFormat.Int32BE\n            default:\n                return null\n        }\n    }\n\n    function packNumberCore(buf: Buffer, offset: number, num: number) {\n        let tag = 0xCB\n        if (num == (num << 0) || num == (num >>> 0)) {\n            if (-31 <= num && num <= 127) {\n                if (buf) buf[offset] = num\n                return 1\n            } else if (0 <= num) {\n                if (num <= 0xff) {\n                    tag = 0xCC\n                } else if (num <= 0xffff) {\n                    tag = 0xCD\n                } else {\n                    tag = 0xCE\n                }\n            } else {\n                if (-0x7f <= num) {\n                    tag = 0xD0\n                } else if (-0x7fff <= num) {\n                    tag = 0xD1\n                } else {\n                    tag = 0xD2\n                }\n            }\n        }\n        let fmt = tagFormat(tag)\n        if (buf) {\n            buf[offset] = tag\n            buf.setNumber(fmt, offset + 1, num)\n        }\n        return pins.sizeOf(fmt) + 1\n    }\n\n    /**\n     * Unpacks a buffer into a number array.\n     */\n    export function unpackNumberArray(buf: Buffer, offset = 0): number[] {\n        let res: number[] = []\n\n        while (offset < buf.length) {\n            let fmt = tagFormat(buf[offset++])\n            if (fmt === null) {\n                let v = buf.getNumber(NumberFormat.Int8BE, offset - 1)\n                if (-31 <= v && v <= 127)\n                    res.push(v)\n                else\n                    return null\n            } else {\n                res.push(buf.getNumber(fmt, offset))\n                offset += pins.sizeOf(fmt)\n            }\n            // padding at the end\n            while (buf[offset] === 0xc1) offset++;\n        }\n\n        return res\n    }\n\n    /**\n     * Pack a number array into a buffer.\n     * @param nums the numbers to be packed\n     */\n    export function packNumberArray(nums: number[]): Buffer {\n        let off = 0\n        for (let n of nums) {\n            off += packNumberCore(null, off, n)\n        }\n        let buf = Buffer.create(off)\n        off = 0\n        for (let n of nums) {\n            off += packNumberCore(buf, off, n)\n        }\n        return buf\n    }\n}\n\nnamespace helpers {\n    export function bufferConcat(a: Buffer, b: Buffer) {\n        const r = Buffer.create(a.length + b.length)\n        r.write(0, a)\n        r.write(a.length, b)\n        return r\n    }\n\n    export function bufferEquals(l: Buffer, r: Buffer) {\n        if (!l || !r) return !!l == !!r;\n        if (l.length != r.length) return false;\n        for (let i = 0; i < l.length; ++i) {\n            if (l[i] != r[i])\n                return false;\n        }\n        return true;\n    }\n\n    export function bufferIndexOf(a: Buffer, b: Buffer) {\n        for (let i = 0; i <= a.length - b.length; ++i) {\n            if (a[i] == b[0]) {\n                let j = 0\n                while (j < b.length) {\n                    if (a[i + j] != b[j])\n                        break\n                    j++\n                }\n                if (j >= b.length)\n                    return i\n            }\n        }\n        return -1\n    }\n\n    export function bufferUnpack(buf: Buffer, format: string, offset?: number) {\n        if (!offset) offset = 0\n        let res: number[] = []\n        Buffer.__packUnpackCore(format, res, buf, false, offset)\n        return res\n    }\n\n    export function bufferPackAt(buf: Buffer, offset: number, format: string, nums: number[]) {\n        Buffer.__packUnpackCore(format, nums, buf, true, offset)\n    }\n\n    export function bufferChunked(buf: Buffer, maxBytes: number) {\n        if (buf.length <= maxBytes) return [buf]\n        else {\n            const r: Buffer[] = []\n            for (let i = 0; i < buf.length; i += maxBytes)\n                r.push(buf.slice(i, maxBytes))\n            return r\n        }\n    }\n\n    export function bufferToArray(buf: Buffer, format: NumberFormat) {\n        const sz = Buffer.sizeOfNumberFormat(format)\n        const len = buf.length - sz\n        const r: number[] = []\n        for (let i = 0; i <= len; i += sz)\n            r.push(buf.getNumber(format, i))\n        return r\n    }\n\n    export const _b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n    export function bufferToBase64(buf: Buffer) {\n        const len = buf.length\n        let r = \"\"\n        for (let i = 0; i < len; i += 3) {\n            const x0 = buf[i]\n            r += _b64[x0 >> 2]\n            if (i + 1 >= len) {\n                r += _b64[(x0 & 3) << 4] + \"==\"\n            } else {\n                const x1 = buf[i + 1]\n                r += _b64[(x0 & 3) << 4 | (x1 >> 4)]\n                if (i + 2 >= len) {\n                    r += _b64[(x1 & 15) << 2] + \"=\"\n                } else {\n                    const x2 = buf[i + 2]\n                    r += _b64[(x1 & 15) << 2 | (x2 >> 6)]\n                    r += _b64[x2 & 63]\n                }\n            }\n        }\n        return r\n    }\n}\n\ninterface Buffer {\n    [index: number]: number;\n\n    /**\n     * Return concatenation of current buffer and the given buffer\n     */\n    //% helper=bufferConcat\n    concat(other: Buffer): Buffer;\n\n    /**\n     * Return position of other buffer in current buffer\n     */\n    //% helper=bufferIndexOf\n    indexOf(other: Buffer): number;\n\n    /**\n     * Reads numbers from the buffer according to the format\n     */\n    //% helper=bufferUnpack\n    unpack(format: string, offset?: number): number[];\n\n    /**\n     * Writes numbers to the buffer according to the format\n     */\n    //% helper=bufferPackAt\n    packAt(offset: number, format: string, nums: number[]): void;\n\n    /**\n     * Returns true if this and the other buffer hold the same data\n     */\n    //% helper=bufferEquals\n    equals(other: Buffer): boolean;\n\n    /**\n     * Splits buffer into parts no larger than specified\n     */\n    //% helper=bufferChunked\n    chunked(maxSize: number): Buffer[];\n\n    /**\n     * Read contents of buffer as an array in specified format\n     */\n    //% helper=bufferToArray\n    toArray(format: NumberFormat): number[];\n\n    /**\n     * Convert buffer to ASCII base64 encoding.\n     */\n    //% helper=bufferToBase64\n    toBase64(): string;\n\n    // rest defined in buffer.cpp\n}\n\nnamespace Buffer {\n    /**\n     * Allocate a new buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% shim=control::createBuffer\n    export declare function create(size: number): Buffer;\n\n    /**\n     * Create a new buffer, decoding a hex string\n     */\n    export function fromHex(hex: string) {\n        const hexStr = \"0123456789abcdef\"\n        const res = Buffer.create(hex.length >> 1)\n        hex = hex.toLowerCase()\n        for (let i = 0; i < hex.length; i += 2) {\n            const p0 = hexStr.indexOf(hex.charAt(i))\n            const p1 = hexStr.indexOf(hex.charAt(i + 1))\n            if (p0 < 0 || p1 < 0)\n                throw \"Invalid hex\"\n            res[i >> 1] = (p0 << 4) | p1\n        }\n        return res\n    }\n\n    function b64Idx(c: string) {\n        if (c === undefined || c == \"=\") return -1\n\n        // handle base64url\n        if (c == \"-\") return 62\n        if (c == \"_\") return 63\n\n        const r = helpers._b64.indexOf(c)\n        if (r < 0)\n            throw \"Invalid Base64\"\n        return r\n    }\n\n    function fromBase64Core(trg: Buffer, b64: string) {\n        const len = b64.length\n        let dp = 0\n        for (let i = 0; i < len; i += 4) {\n            const x0 = b64Idx(b64[i])\n            const x1 = b64Idx(b64[i + 1])\n            const x2 = b64Idx(b64[i + 2])\n            const x3 = b64Idx(b64[i + 3])\n            if (x0 < 0 || x1 < 0) throw \"Invalid Base64\"\n            if (trg)\n                trg[dp] = (x0 << 2) | (x1 >> 4)\n            dp++\n            if (x2 >= 0) {\n                if (trg)\n                    trg[dp] = (x1 << 4) | (x2 >> 2)\n                dp++\n                if (x3 >= 0) {\n                    if (trg)\n                        trg[dp] = (x2 << 6) | x3\n                    dp++\n                }\n            } else {\n                if (x3 >= 0 || i + 4 < len)\n                    throw \"Invalid Base64\"\n            }\n        }\n        return dp\n    }\n\n    /**\n     * Create a new buffer, decoding a Base64 string\n     */\n    export function fromBase64(b64: string) {\n        const sz = fromBase64Core(null, b64)\n        const res = create(sz)\n        fromBase64Core(res, b64)\n        return res\n    }\n\n    /**\n     * Create a new buffer from an UTF8-encoded string\n     * @param str the string to put in the buffer\n     */\n    //% shim=control::createBufferFromUTF8\n    export declare function fromUTF8(str: string): Buffer;\n\n    function chunkLen(s: string, off: number, maxlen: number) {\n        let L = Math.idiv(maxlen, 3)\n        let R = maxlen\n\n        if (fromUTF8(s.slice(off, off + R)).length <= maxlen)\n            return R\n\n        while (L < R) {\n            const m = (L + R) >> 1\n            if (m == L)\n                break\n            const ll = fromUTF8(s.slice(off, off + m)).length\n            if (ll <= maxlen)\n                L = m\n            else\n                R = m\n        }\n\n        return L\n    }\n\n    export function chunkedFromUTF8(str: string, maxBytes: number) {\n        if (maxBytes < 3)\n            throw \"Oops\"\n        const chunks: Buffer[] = []\n        let pos = 0\n        while (pos < str.length) {\n            const len = chunkLen(str, pos, maxBytes)\n            chunks.push(fromUTF8(str.slice(pos, pos + len)))\n            pos += len\n        }\n        return chunks\n    }\n\n    /**\n     * Create a new buffer initialized to bytes from given array.\n     * @param bytes data to initialize with\n     */\n    export function fromArray(bytes: number[]) {\n        let buf = Buffer.create(bytes.length)\n        for (let i = 0; i < bytes.length; ++i)\n            buf[i] = bytes[i]\n        return buf\n    }\n\n    /**\n     * Concatenates all buffers in the list\n     */\n    export function concat(buffers: Buffer[]) {\n        let len = 0\n        for (let b of buffers)\n            len += b.length\n        const r = Buffer.create(len)\n        len = 0\n        for (let b of buffers) {\n            r.write(len, b)\n            len += b.length\n        }\n        return r\n    }\n\n    // Python-like packing, see https://docs.python.org/3/library/struct.html\n\n    export function packedSize(format: string) {\n        return __packUnpackCore(format, null, null, true)\n    }\n\n    export function pack(format: string, nums: number[]) {\n        let buf = Buffer.create(packedSize(format))\n        __packUnpackCore(format, nums, buf, true)\n        return buf\n    }\n\n    function getFormat(pychar: string, isBig: boolean) {\n        switch (pychar) {\n            case 'B':\n                return NumberFormat.UInt8LE\n            case 'b':\n                return NumberFormat.Int8LE\n            case 'H':\n                return isBig ? NumberFormat.UInt16BE : NumberFormat.UInt16LE\n            case 'h':\n                return isBig ? NumberFormat.Int16BE : NumberFormat.Int16LE\n            case 'I':\n            case 'L':\n                return isBig ? NumberFormat.UInt32BE : NumberFormat.UInt32LE\n            case 'i':\n            case 'l':\n                return isBig ? NumberFormat.Int32BE : NumberFormat.Int32LE\n            case 'f':\n                return isBig ? NumberFormat.Float32BE : NumberFormat.Float32LE\n            case 'd':\n                return isBig ? NumberFormat.Float64BE : NumberFormat.Float64LE\n            default:\n                return null as NumberFormat\n        }\n    }\n\n    function isDigit(ch: string) {\n        const code = ch.charCodeAt(0)\n        return 0x30 <= code && code <= 0x39\n    }\n\n    export function __packUnpackCore(format: string, nums: number[], buf: Buffer, isPack: boolean, off = 0) {\n        let isBig = false\n        let idx = 0\n        for (let i = 0; i < format.length; ++i) {\n            switch (format[i]) {\n                case ' ':\n                case '<':\n                case '=':\n                    isBig = false\n                    break\n                case '>':\n                case '!':\n                    isBig = true\n                    break\n                default:\n                    const i0 = i\n                    while (isDigit(format[i])) i++\n                    let reps = 1\n                    if (i0 != i)\n                        reps = parseInt(format.slice(i0, i))\n                    if (format[i] == 'x')\n                        off += reps\n                    else\n                        while (reps--) {\n                            let fmt = getFormat(format[i], isBig)\n                            if (fmt === null) {\n                                control.fail(\"Unsupported format character: \" + format[i])\n                            } else {\n                                if (buf) {\n                                    if (isPack)\n                                        buf.setNumber(fmt, off, nums[idx++])\n                                    else\n                                        nums.push(buf.getNumber(fmt, off))\n                                }\n\n                                off += sizeOfNumberFormat(fmt)\n                            }\n                        }\n                    break\n            }\n        }\n        return off\n    }\n\n    /**\n     * Get the size in bytes of specified number format.\n     */\n    export function sizeOfNumberFormat(format: NumberFormat) {\n        switch (format) {\n            case NumberFormat.Int8LE:\n            case NumberFormat.UInt8LE:\n            case NumberFormat.Int8BE:\n            case NumberFormat.UInt8BE:\n                return 1;\n            case NumberFormat.Int16LE:\n            case NumberFormat.UInt16LE:\n            case NumberFormat.Int16BE:\n            case NumberFormat.UInt16BE:\n                return 2;\n            case NumberFormat.Int32LE:\n            case NumberFormat.Int32BE:\n            case NumberFormat.UInt32BE:\n            case NumberFormat.UInt32LE:\n            case NumberFormat.Float32BE:\n            case NumberFormat.Float32LE:\n                return 4;\n            case NumberFormat.Float64BE:\n            case NumberFormat.Float64LE:\n                return 8;\n        }\n        return 0;\n    }\n}\n",
            "configkeys.h": "#ifndef __PXT_CONFIGKEYS_H\n#define __PXT_CONFIGKEYS_H\n\n// used by pins.cpp to mask off the pin name from any config\n// lower 16 pins of value are the pin name\n#define CFG_PIN_NAME_MSK 0x0000ffff\n// upper 16 bits of value is any configuration of the pin.\n#define CFG_PIN_CONFIG_MSK 0xffff0000\n\n// begin optional pin configurations\n#define CFG_PIN_CONFIG_ACTIVE_LO 0x10000\n\n\n#define CFG_MAGIC0 0x1e9e10f1\n#define CFG_MAGIC1 0x20227a79\n\n// these define keys for getConfig() function\n#define CFG_PIN_ACCELEROMETER_INT 1\n#define CFG_PIN_ACCELEROMETER_SCL 2\n#define CFG_PIN_ACCELEROMETER_SDA 3\n#define CFG_PIN_BTN_A 4\n#define CFG_PIN_BTN_B 5\n#define CFG_PIN_BTN_SLIDE 6\n#define CFG_PIN_DOTSTAR_CLOCK 7\n#define CFG_PIN_DOTSTAR_DATA 8\n#define CFG_PIN_FLASH_CS 9\n#define CFG_PIN_FLASH_MISO 10\n#define CFG_PIN_FLASH_MOSI 11\n#define CFG_PIN_FLASH_SCK 12\n#define CFG_PIN_LED 13\n#define CFG_PIN_LIGHT 14\n#define CFG_PIN_MICROPHONE 15\n#define CFG_PIN_MIC_CLOCK 16\n#define CFG_PIN_MIC_DATA 17\n#define CFG_PIN_MISO 18\n#define CFG_PIN_MOSI 19\n// the preferred pin to drive an external neopixel strip\n#define CFG_PIN_NEOPIXEL 20\n#define CFG_PIN_RX 21\n#define CFG_PIN_RXLED 22\n#define CFG_PIN_SCK 23\n#define CFG_PIN_SCL 24\n#define CFG_PIN_SDA 25\n#define CFG_PIN_SPEAKER_AMP 26\n#define CFG_PIN_TEMPERATURE 27\n#define CFG_PIN_TX 28\n#define CFG_PIN_TXLED 29\n#define CFG_PIN_IR_OUT 30\n#define CFG_PIN_IR_IN 31\n#define CFG_PIN_DISPLAY_SCK 32\n#define CFG_PIN_DISPLAY_MISO 33\n#define CFG_PIN_DISPLAY_MOSI 34\n#define CFG_PIN_DISPLAY_CS 35\n#define CFG_PIN_DISPLAY_DC 36\n#define CFG_DISPLAY_WIDTH 37\n#define CFG_DISPLAY_HEIGHT 38\n#define CFG_DISPLAY_CFG0 39\n#define CFG_DISPLAY_CFG1 40\n#define CFG_DISPLAY_CFG2 41\n#define CFG_DISPLAY_CFG3 42\n#define CFG_PIN_DISPLAY_RST 43\n#define CFG_PIN_DISPLAY_BL 44\n#define CFG_PIN_SERVO_1 45\n#define CFG_PIN_SERVO_2 46\n#define CFG_PIN_BTN_LEFT 47\n#define CFG_PIN_BTN_RIGHT 48\n#define CFG_PIN_BTN_UP 49\n#define CFG_PIN_BTN_DOWN 50\n#define CFG_PIN_BTN_MENU 51\n#define CFG_PIN_LED_R 52\n#define CFG_PIN_LED_G 53\n#define CFG_PIN_LED_B 54\n#define CFG_PIN_LED1 55\n#define CFG_PIN_LED2 56\n#define CFG_PIN_LED3 57\n#define CFG_PIN_LED4 58\n#define CFG_SPEAKER_VOLUME 59\n\n#define CFG_PIN_JACK_TX 60\n#define CFG_PIN_JACK_SENSE 61\n#define CFG_PIN_JACK_HPEN 62\n#define CFG_PIN_JACK_BZEN 63\n#define CFG_PIN_JACK_PWREN 64\n#define CFG_PIN_JACK_SND 65\n#define CFG_PIN_JACK_BUSLED 66\n#define CFG_PIN_JACK_COMMLED 67\n\n#define CFG_PIN_BTN_SOFT_RESET 69\n#define CFG_ACCELEROMETER_TYPE 70\n#define CFG_PIN_BTNMX_LATCH 71\n#define CFG_PIN_BTNMX_CLOCK 72\n#define CFG_PIN_BTNMX_DATA 73\n#define CFG_PIN_BTN_MENU2 74\n#define CFG_PIN_BATTSENSE 75\n#define CFG_PIN_VIBRATION 76\n#define CFG_PIN_PWREN 77\n#define CFG_DISPLAY_TYPE 78\n\n#define CFG_PIN_ROTARY_ENCODER_A 79\n#define CFG_PIN_ROTARY_ENCODER_B 80\n\n#define CFG_ACCELEROMETER_SPACE 81\n\n#define CFG_PIN_WIFI_MOSI 82\n#define CFG_PIN_WIFI_MISO 83\n#define CFG_PIN_WIFI_SCK 84\n#define CFG_PIN_WIFI_TX 85\n#define CFG_PIN_WIFI_RX 86\n#define CFG_PIN_WIFI_CS 87\n#define CFG_PIN_WIFI_BUSY 88\n#define CFG_PIN_WIFI_RESET 89\n#define CFG_PIN_WIFI_GPIO0 90\n#define CFG_PIN_WIFI_AT_TX 91\n#define CFG_PIN_WIFI_AT_RX 92\n\n#define CFG_PIN_USB_POWER 93\n\n// default I2C address\n#define ACCELEROMETER_TYPE_LIS3DH 0x32\n#define ACCELEROMETER_TYPE_LIS3DH_ALT 0x30\n#define ACCELEROMETER_TYPE_MMA8453 0x38\n#define ACCELEROMETER_TYPE_FXOS8700 0x3C\n#define ACCELEROMETER_TYPE_MMA8653 0x3A\n#define ACCELEROMETER_TYPE_MSA300 0x4C\n#define ACCELEROMETER_TYPE_MPU6050 0x68\n\n#define DISPLAY_TYPE_ST7735 7735\n#define DISPLAY_TYPE_ILI9341 9341\n#define DISPLAY_TYPE_SMART 4242\n\n#define CFG_PIN_A0 100\n#define CFG_PIN_A1 101\n#define CFG_PIN_A2 102\n#define CFG_PIN_A3 103\n#define CFG_PIN_A4 104\n#define CFG_PIN_A5 105\n#define CFG_PIN_A6 106\n#define CFG_PIN_A7 107\n#define CFG_PIN_A8 108\n#define CFG_PIN_A9 109\n#define CFG_PIN_A10 110\n#define CFG_PIN_A11 111\n#define CFG_PIN_A12 112\n#define CFG_PIN_A13 113\n#define CFG_PIN_A14 114\n#define CFG_PIN_A15 115\n#define CFG_PIN_A16 116\n#define CFG_PIN_A17 117\n#define CFG_PIN_A18 118\n#define CFG_PIN_A19 119\n#define CFG_PIN_A20 120\n#define CFG_PIN_A21 121\n#define CFG_PIN_A22 122\n#define CFG_PIN_A23 123\n#define CFG_PIN_A24 124\n#define CFG_PIN_A25 125\n#define CFG_PIN_A26 126\n#define CFG_PIN_A27 127\n#define CFG_PIN_A28 128\n#define CFG_PIN_A29 129\n#define CFG_PIN_A30 130\n#define CFG_PIN_A31 131\n\n#define CFG_PIN_D0 150\n#define CFG_PIN_D1 151\n#define CFG_PIN_D2 152\n#define CFG_PIN_D3 153\n#define CFG_PIN_D4 154\n#define CFG_PIN_D5 155\n#define CFG_PIN_D6 156\n#define CFG_PIN_D7 157\n#define CFG_PIN_D8 158\n#define CFG_PIN_D9 159\n#define CFG_PIN_D10 160\n#define CFG_PIN_D11 161\n#define CFG_PIN_D12 162\n#define CFG_PIN_D13 163\n#define CFG_PIN_D14 164\n#define CFG_PIN_D15 165\n#define CFG_PIN_D16 166\n#define CFG_PIN_D17 167\n#define CFG_PIN_D18 168\n#define CFG_PIN_D19 169\n#define CFG_PIN_D20 170\n#define CFG_PIN_D21 171\n#define CFG_PIN_D22 172\n#define CFG_PIN_D23 173\n#define CFG_PIN_D24 174\n#define CFG_PIN_D25 175\n#define CFG_PIN_D26 176\n#define CFG_PIN_D27 177\n#define CFG_PIN_D28 178\n#define CFG_PIN_D29 179\n#define CFG_PIN_D30 180\n#define CFG_PIN_D31 181\n\n#define CFG_NUM_NEOPIXELS 200\n#define CFG_NUM_DOTSTARS 201\n#define CFG_DEFAULT_BUTTON_MODE 202\n#define CFG_SWD_ENABLED 203\n#define CFG_FLASH_BYTES 204\n#define CFG_RAM_BYTES 205\n#define CFG_SYSTEM_HEAP_BYTES 206\n#define CFG_LOW_MEM_SIMULATION_KB 207\n#define CFG_BOOTLOADER_BOARD_ID 208\n#define CFG_UF2_FAMILY 209\n#define CFG_PINS_PORT_SIZE 210\n#define CFG_BOOTLOADER_PROTECTION 211\n#define CFG_POWER_DEEPSLEEP_TIMEOUT 212\n#define CFG_ANALOG_BUTTON_THRESHOLD 213\n#define CFG_CPU_MHZ 214\n#define CFG_CONTROLLER_LIGHT_MAX_BRIGHTNESS 215\n#define CFG_ANALOG_JOYSTICK_MIN 216\n#define CFG_ANALOG_JOYSTICK_MAX 217\n#define CFG_TIMERS_TO_USE 218\n// configs to specify the onboard (built-in) dotstar or neopixel strips\n// some boards have a combination of dotstar, neopixel strips like neotrellis\n#define CFG_PIN_ONBOARD_DOTSTAR_CLOCK 219\n#define CFG_PIN_ONBOARD_DOTSTAR_DATA 220\n#define CFG_NUM_ONBOARD_DOTSTARS 221\n#define CFG_PIN_ONBOARD_NEOPIXEL 222\n#define CFG_NUM_ONBOARD_NEOPIXELS 223\n\n#define CFG_MATRIX_KEYPAD_MESSAGE_ID 239\n#define CFG_NUM_MATRIX_KEYPAD_ROWS 240\n#define CFG_PIN_MATRIX_KEYPAD_ROW0 241\n#define CFG_PIN_MATRIX_KEYPAD_ROW1 242\n#define CFG_PIN_MATRIX_KEYPAD_ROW2 243\n#define CFG_PIN_MATRIX_KEYPAD_ROW3 244\n#define CFG_PIN_MATRIX_KEYPAD_ROW4 245\n#define CFG_PIN_MATRIX_KEYPAD_ROW5 246\n#define CFG_PIN_MATRIX_KEYPAD_ROW6 247\n#define CFG_PIN_MATRIX_KEYPAD_ROW7 248\n#define CFG_NUM_MATRIX_KEYPAD_COLS 250\n#define CFG_PIN_MATRIX_KEYPAD_COL0 251\n#define CFG_PIN_MATRIX_KEYPAD_COL1 252\n#define CFG_PIN_MATRIX_KEYPAD_COL2 253\n#define CFG_PIN_MATRIX_KEYPAD_COL3 254\n#define CFG_PIN_MATRIX_KEYPAD_COL4 255\n#define CFG_PIN_MATRIX_KEYPAD_COL5 256\n#define CFG_PIN_MATRIX_KEYPAD_COL6 257\n#define CFG_PIN_MATRIX_KEYPAD_COL7 258\n\n#define CFG_PIN_B0 300\n#define CFG_PIN_B1 301\n#define CFG_PIN_B2 302\n#define CFG_PIN_B3 303\n#define CFG_PIN_B4 304\n#define CFG_PIN_B5 305\n#define CFG_PIN_B6 306\n#define CFG_PIN_B7 307\n#define CFG_PIN_B8 308\n#define CFG_PIN_B9 309\n#define CFG_PIN_B10 310\n#define CFG_PIN_B11 311\n#define CFG_PIN_B12 312\n#define CFG_PIN_B13 313\n#define CFG_PIN_B14 314\n#define CFG_PIN_B15 315\n#define CFG_PIN_B16 316\n#define CFG_PIN_B17 317\n#define CFG_PIN_B18 318\n#define CFG_PIN_B19 319\n#define CFG_PIN_B20 320\n#define CFG_PIN_B21 321\n#define CFG_PIN_B22 322\n#define CFG_PIN_B23 323\n#define CFG_PIN_B24 324\n#define CFG_PIN_B25 325\n#define CFG_PIN_B26 326\n#define CFG_PIN_B27 327\n#define CFG_PIN_B28 328\n#define CFG_PIN_B29 329\n#define CFG_PIN_B30 330\n#define CFG_PIN_B31 331\n\n#define CFG_PIN_C0 350\n#define CFG_PIN_C1 351\n#define CFG_PIN_C2 352\n#define CFG_PIN_C3 353\n#define CFG_PIN_C4 354\n#define CFG_PIN_C5 355\n#define CFG_PIN_C6 356\n#define CFG_PIN_C7 357\n#define CFG_PIN_C8 358\n#define CFG_PIN_C9 359\n#define CFG_PIN_C10 360\n#define CFG_PIN_C11 361\n#define CFG_PIN_C12 362\n#define CFG_PIN_C13 363\n#define CFG_PIN_C14 364\n#define CFG_PIN_C15 365\n#define CFG_PIN_C16 366\n#define CFG_PIN_C17 367\n#define CFG_PIN_C18 368\n#define CFG_PIN_C19 369\n#define CFG_PIN_C20 370\n#define CFG_PIN_C21 371\n#define CFG_PIN_C22 372\n#define CFG_PIN_C23 373\n#define CFG_PIN_C24 374\n#define CFG_PIN_C25 375\n#define CFG_PIN_C26 376\n#define CFG_PIN_C27 377\n#define CFG_PIN_C28 378\n#define CFG_PIN_C29 379\n#define CFG_PIN_C30 380\n#define CFG_PIN_C31 381\n\n#define CFG_PIN_P0 400\n#define CFG_PIN_P1 401\n#define CFG_PIN_P2 402\n#define CFG_PIN_P3 403\n#define CFG_PIN_P4 404\n#define CFG_PIN_P5 405\n#define CFG_PIN_P6 406\n#define CFG_PIN_P7 407\n#define CFG_PIN_P8 408\n#define CFG_PIN_P9 409\n#define CFG_PIN_P10 410\n#define CFG_PIN_P11 411\n#define CFG_PIN_P12 412\n#define CFG_PIN_P13 413\n#define CFG_PIN_P14 414\n#define CFG_PIN_P15 415\n#define CFG_PIN_P16 416\n#define CFG_PIN_P17 417\n#define CFG_PIN_P18 418\n#define CFG_PIN_P19 419\n#define CFG_PIN_P20 420\n#define CFG_PIN_P21 421\n#define CFG_PIN_P22 422\n#define CFG_PIN_P23 423\n#define CFG_PIN_P24 424\n#define CFG_PIN_P25 425\n#define CFG_PIN_P26 426\n#define CFG_PIN_P27 427\n#define CFG_PIN_P28 428\n#define CFG_PIN_P29 429\n#define CFG_PIN_P30 430\n#define CFG_PIN_P31 431\n#define CFG_PIN_P32 432\n#define CFG_PIN_P33 433\n#define CFG_PIN_P34 434\n#define CFG_PIN_P35 435\n#define CFG_PIN_P36 436\n#define CFG_PIN_P37 437\n#define CFG_PIN_P38 438\n#define CFG_PIN_P39 439\n#define CFG_PIN_P40 440\n#define CFG_PIN_P41 441\n#define CFG_PIN_P42 442\n#define CFG_PIN_P43 443\n#define CFG_PIN_P44 444\n#define CFG_PIN_P45 445\n#define CFG_PIN_P46 446\n#define CFG_PIN_P47 447\n#define CFG_PIN_P48 448\n#define CFG_PIN_P49 449\n#define CFG_PIN_P50 450\n#define CFG_PIN_P51 451\n#define CFG_PIN_P52 452\n#define CFG_PIN_P53 453\n#define CFG_PIN_P54 454\n#define CFG_PIN_P55 455\n#define CFG_PIN_P56 456\n#define CFG_PIN_P57 457\n#define CFG_PIN_P58 458\n#define CFG_PIN_P59 459\n#define CFG_PIN_P60 460\n#define CFG_PIN_P61 461\n#define CFG_PIN_P62 462\n#define CFG_PIN_P63 463\n\n#define CFG_PIN_LORA_MISO 1001\n#define CFG_PIN_LORA_MOSI 1002\n#define CFG_PIN_LORA_SCK 1003\n#define CFG_PIN_LORA_CS 1004\n#define CFG_PIN_LORA_BOOT 1005\n#define CFG_PIN_LORA_RESET 1006\n#define CFG_PIN_IRRXLED 1007\n#define CFG_PIN_IRTXLED 1008\n#define CFG_PIN_LCD_RESET 1009\n#define CFG_PIN_LCD_ENABLE 1010\n#define CFG_PIN_LCD_DATALINE4 1011\n#define CFG_PIN_LCD_DATALINE5 1012\n#define CFG_PIN_LCD_DATALINE6 1013\n#define CFG_PIN_LCD_DATALINE7 1014\n#define CFG_NUM_LCD_COLUMNS 1015\n#define CFG_NUM_LCD_ROWS 1016\n\n//RoboHAT MM1 pinout\n#define CFG_PIN_RCC0 1017\n#define CFG_PIN_RCC1 1018\n#define CFG_PIN_RCC2 1019\n#define CFG_PIN_RCC3 1020\n#define CFG_PIN_RCC4 1021\n#define CFG_PIN_RCC5 1022\n#define CFG_PIN_RCC6 1023\n#define CFG_PIN_RCC7 1024\n#define CFG_PIN_SERVO0 1025\n#define CFG_PIN_SERVO1 1026\n#define CFG_PIN_SERVO2 1027\n#define CFG_PIN_SERVO3 1028\n#define CFG_PIN_SERVO4 1029\n#define CFG_PIN_SERVO5 1030\n#define CFG_PIN_SERVO6 1031\n#define CFG_PIN_SERVO7 1032\n#define CFG_PIN_SERVO8 1033\n#define CFG_PIN_PI_TX 1034\n#define CFG_PIN_PI_RX 1035\n#define CFG_PIN_GPS_SDA 1036\n#define CFG_PIN_GPS_SCL 1037\n#define CFG_PIN_GPS_TX 1038\n#define CFG_PIN_GPS_RX 1039\n#define CFG_PIN_GROVE0 1040\n#define CFG_PIN_GROVE1 1041\n#define CFG_PIN_SS 1042\n\n// Adafruit Grand Central M4\n#define CFG_PIN_D33 183\n#define CFG_PIN_D34 184\n#define CFG_PIN_D35 185\n#define CFG_PIN_D36 186\n#define CFG_PIN_D37 187\n#define CFG_PIN_D38 188\n#define CFG_PIN_D39 189\n#define CFG_PIN_D40 190\n#define CFG_PIN_D41 191\n#define CFG_PIN_D42 192\n#define CFG_PIN_D43 193\n#define CFG_PIN_D44 194\n#define CFG_PIN_D45 195\n#define CFG_PIN_D46 196\n#define CFG_PIN_D47 197\n#define CFG_PIN_D48 198\n#define CFG_PIN_D49 199\n#define CFG_PIN_D50 259\n#define CFG_PIN_D51 260\n#define CFG_PIN_D52 261\n#define CFG_PIN_D53 262\n\n#define CFG_PIN_TX1 263\n#define CFG_PIN_TX2 264\n#define CFG_PIN_TX3 265\n#define CFG_PIN_RX1 266\n#define CFG_PIN_RX2 267\n#define CFG_PIN_RX3 268\n#define CFG_PIN_SCL1 269\n#define CFG_PIN_SDA1 270\n#define CFG_PIN_PCC_D0 271\n#define CFG_PIN_PCC_D1 272\n#define CFG_PIN_PCC_D2 273\n#define CFG_PIN_PCC_D3 274\n#define CFG_PIN_PCC_D4 275\n#define CFG_PIN_PCC_D5 276\n#define CFG_PIN_PCC_D6 277\n#define CFG_PIN_PCC_D7 278\n#define CFG_PIN_PCC_D8 279\n#define CFG_PIN_PCC_D9 280\n#define CFG_PIN_PCC_D10 281\n#define CFG_PIN_PCC_D11 282\n#define CFG_PIN_PCC_D12 283\n#define CFG_PIN_PCC_D13 284\n#define CFG_PIN_CC_DEN1 285\n#define CFG_PIN_CC_DEN2 286\n#define CFG_PIN_CC_CLK 287\n#define CFG_PIN_XCC_CLK 288\n\n\n#define CFG_PIN_JDPWR_PRE_SENSE 1100\n#define CFG_PIN_JDPWR_GND_SENSE 1101\n#define CFG_PIN_JDPWR_PULSE 1102\n#define CFG_PIN_JDPWR_OVERLOAD_LED 1103\n#define CFG_PIN_JDPWR_ENABLE 1104\n#define CFG_PIN_JDPWR_FAULT 1105\n\n#endif\n",
            "console.ts": "/// <reference no-default-lib=\"true\"/>\n\nenum ConsolePriority {\n    Debug = 0,\n    Log = 1,\n    Warning = 2,\n    Error = 3,\n    Silent = 4\n}\n\n/**\n * Reading and writing data to the console output.\n */\n//% weight=12 color=#002050 icon=\"\\uf120\"\n//% advanced=true\nnamespace console {\n    type Listener = (priority: ConsolePriority, text: string) => void;\n\n    /**\n     * Minimum priority to send messages to listeners\n     */\n    export let minPriority = ConsolePriority.Log;\n\n    //% whenUsed\n    const listeners: Listener[] = [\n        function (priority: ConsolePriority, text: string) { control.__log(priority, text); }\n    ];\n\n    export function add(priority: ConsolePriority, message: any) {\n        if (priority < minPriority) return;\n        let text = inspect(message);\n        // add new line\n        text += \"\\n\";\n        // send to listeners\n        for (let i = 0; i < listeners.length; ++i)\n            listeners[i](priority, text);\n    }\n\n    export function debug(text: any) {\n        add(ConsolePriority.Debug, text);\n    }\n\n    export function warn(text: any) {\n        add(ConsolePriority.Warning, text);\n    }\n\n    export function error(text: any) {\n        add(ConsolePriority.Error, text);\n    }\n\n    /**\n     * Write a line of text to the console output.\n     * @param value to send\n     */\n    //% weight=90\n    //% help=console/log blockGap=8\n    //% blockId=console_log block=\"console log $value\"\n    //% value.shadow=text\n    export function log(value: any): void {\n        add(ConsolePriority.Log, value);\n    }\n\n    /**\n     * Write a name:value pair as a line of text to the console output.\n     * @param name name of the value stream, eg: \"x\"\n     * @param value to write\n     */\n    //% weight=88 blockGap=8\n    //% help=console/log-value\n    //% blockId=console_log_value block=\"console|log value %name|= %value\"\n    //% name.shadow=text\n    //% value.shadow=math_number\n    export function logValue(name: any, value: any): void {\n        log(name ? `${inspect(name)}: ${inspect(value)}` : `${inspect(value)}`)\n    }\n\n    /**\n     * Convert any object or value to a string representation\n     * @param obj value to be converted to a string\n     * @param maxElements [optional] max number values in an object to include in output\n     */\n    export function inspect(obj: any, maxElements = 20): string {\n        if (typeof obj == \"string\") {\n            return obj;\n        } else if (typeof obj == \"number\") {\n            return \"\" + obj;\n        } else if (Array.isArray(obj)) {\n            const asArr = (obj as Array<string>);\n            if (asArr.length <= maxElements) {\n                return asArr.join(\",\");\n            } else {\n                return `${asArr.slice(0, maxElements).join(\",\")}...`;\n            }\n        } else {\n            const asString = obj + \"\";\n            if (asString != \"[object Object]\"\n                && asString != \"[Object]\") { // on arcade at least, default toString is [Object] on hardware instead of standard\n                return asString;\n            }\n\n            let keys = Object.keys(obj);\n            const snipped = keys.length > maxElements;\n            if (snipped) {\n                keys = keys.slice(0, maxElements);\n            }\n\n            return `{${\n                keys.reduce(\n                    (prev, currKey) => prev + `\\n    ${currKey}: ${obj[currKey]}`,\n                    \"\"\n                ) + (snipped ? \"\\n    ...\" : \"\")\n            }\n}`;\n        }\n    }\n\n    /**\n     * Adds a listener for the log messages\n     * @param listener\n     */\n    //%\n    export function addListener(listener: (priority: ConsolePriority, text: string) => void) {\n        if (!listener || listeners.indexOf(listener) > -1) return;\n        listeners.push(listener);\n    }\n\n    /**\n     * Removes a listener\n     * @param listener\n     */\n    //%\n    export function removeListener(listener: (priority: ConsolePriority, text: string) => void) {\n        if (!listener) return;\n        const i = listeners.indexOf(listener);\n        if (i > -1)\n            listeners.splice(i, 1);\n    }\n}",
            "control.cpp": "#include \"pxtbase.h\"\n\n\nnamespace control {\n    /**\n    * Gets the number of milliseconds elapsed since power on.\n    */\n    //% help=control/millis weight=50\n    //% blockId=control_running_time block=\"millis (ms)\"\n    int millis() {\n        return current_time_ms();\n    }\n\n    /**\n    * Gets current time in microseconds. Overflows every ~18 minutes.\n    */\n    //%\n    int micros() {\n        return current_time_us() & 0x3fffffff;\n    }\n\n    /**\n    * Used internally\n    */\n    //%\n    void internalOnEvent(int src, int value, Action handler, int flags = 16) {\n        registerWithDal(src, value, handler, flags);\n    }\n\n    /**\n     * Reset the device.\n     */\n    //% weight=30 async help=control/reset blockGap=8\n    //% blockId=\"control_reset\" block=\"reset\"\n    void reset() {\n        target_reset();\n    }\n\n    /**\n    * Block the current fiber for the given microseconds\n    * @param micros number of micro-seconds to wait. eg: 4\n    */\n    //% help=control/wait-micros weight=29 async\n    //% blockId=\"control_wait_us\" block=\"wait (µs)%micros\"\n    void waitMicros(int micros) {\n        sleep_us(micros);\n    }\n\n    /**\n     * Run other code in the parallel.\n     */\n    //% help=control/run-in-parallel handlerStatement=1\n    //% blockId=\"control_run_in_parallel\" block=\"run in parallel\" blockGap=8\n    void runInParallel(Action a) {\n        pxt::runInParallel(a);\n    }\n\n    /**\n    * Blocks the calling thread until the specified event is raised.\n    */\n    //% help=control/wait-for-event async\n    //% blockId=control_wait_for_event block=\"wait for event|from %src|with value %value\"\n    void waitForEvent(int src, int value) {\n        pxt::waitForEvent(src, value);\n    }\n\n    /**\n    * Derive a unique, consistent serial number of this device from internal data.\n    */\n    //% blockId=\"control_device_serial_number\" block=\"device serial number\" weight=9\n    //% help=control/device-serial-number\n    int deviceSerialNumber() {\n        uint64_t serial_num = pxt::getLongSerialNumber();\n        return hash_fnv1(&serial_num, sizeof(serial_num)) & 0x3fffffff;\n    }\n\n    /**\n    * Derive a unique, consistent 64-bit serial number of this device from internal data.\n    */\n    //% blockId=\"control_device_long_serial_number\" block=\"device long serial number\" weight=9\n    //% help=control/device-long-serial-number\n    Buffer deviceLongSerialNumber() {\n        uint64_t serial_num = pxt::getLongSerialNumber();\n        return mkBuffer((uint8_t*)&serial_num, sizeof(uint64_t));\n    }\n\n    /**\n    *\n    */\n    //%\n    void __log(int prority, String text) {\n        if (NULL == text) return;\n        pxt::sendSerial(text->getUTF8Data(), text->getUTF8Size());\n    }\n\n    /**\n     * Dump internal information about a value.\n     */\n    //%\n    void dmesgValue(TValue v) {\n        anyPrint(v);\n    }\n}\n",
            "control.ts": "/**\n* Program controls and events.\n*/\n//% weight=90 color=\"#FF5722\" icon=\"\\uf110\" advanced=true\nnamespace control {\n    /**\n     * Deprecated, use ``control.runInParallel`` instead.\n     */\n    //% deprecated=1 hidden=1 help=control/run-in-background blockAllowMultiple=1 afterOnStart=true\n    //% blockId=\"control_run_in_background\" block=\"run in background\" blockGap=8 weight=0\n    export function runInBackground(a: () => void) {\n        control.runInParallel(a);\n    }\n\n    export const enum PXT_PANIC {\n        CODAL_OOM = 20,\n        GC_OOM = 21,\n        GC_TOO_BIG_ALLOCATION = 22,\n        CODAL_HEAP_ERROR = 30,\n        CODAL_NULL_DEREFERENCE = 40,\n        CODAL_USB_ERROR = 50,\n        CODAL_HARDWARE_CONFIGURATION_ERROR = 90,\n\n        INVALID_BINARY_HEADER = 901,\n        OUT_OF_BOUNDS = 902,\n        REF_DELETED = 903,\n        SIZE = 904,\n        INVALID_VTABLE = 905,\n        INTERNAL_ERROR = 906,\n        NO_SUCH_CONFIG = 907,\n        NO_SUCH_PIN = 908,\n        INVALID_ARGUMENT = 909,\n        MEMORY_LIMIT_EXCEEDED = 910,\n        SCREEN_ERROR = 911,\n        MISSING_PROPERTY = 912,\n        INVALID_IMAGE = 913,\n        CALLED_FROM_ISR = 914,\n        HEAP_DUMPED = 915,\n        STACK_OVERFLOW = 916,\n        BLOCKING_TO_STRING = 917,\n        VM_ERROR = 918,\n        SETTINGS_CLEARED = 920,\n        SETTINGS_OVERLOAD = 921,\n        SETTINGS_SECRET_MISSING = 922,\n        DELETE_ON_CLASS = 923,\n\n        CAST_FIRST = 980,\n        CAST_FROM_UNDEFINED = 980,\n        CAST_FROM_BOOLEAN = 981,\n        CAST_FROM_NUMBER = 982,\n        CAST_FROM_STRING = 983,\n        CAST_FROM_OBJECT = 984,\n        CAST_FROM_FUNCTION = 985,\n        CAST_FROM_NULL = 989,\n\n        UNHANDLED_EXCEPTION = 999,\n    }\n    /**\n     * Display an error code and stop the program.\n     * @param code an error number to display. eg: 5\n     */\n    //% help=control/panic weight=29\n    //% blockId=\"control_panic\" block=\"panic %code\"\n    //% shim=pxtrt::panic\n    export function panic(code: number) { }\n\n    /**\n     * Display an error code and stop the program when the assertion is `false`.\n     */\n    //% help=control/assert weight=30\n    //% blockId=\"control_assert\" block=\"assert %cond|with value %code\"\n    export function assert(cond: boolean, code: number) {\n        if (!cond) {\n            fail(\"Assertion failed, code=\" + code)\n        }\n    }\n\n    export function fail(message: string) {\n        console.log(\"Fatal failure: \")\n        console.log(message)\n        dmesg(message)\n        panic(108)\n    }\n\n    let _evSource = 0x8000\n    export function allocateEventSource() {\n        return ++_evSource\n    }\n\n    export class AnimationQueue {\n        running: boolean;\n        eventID: number;\n        public interval: number;\n\n        constructor() {\n            this.running = false;\n            this.eventID = control.allocateNotifyEvent();\n            this.interval = 1;\n        }\n\n        /**\n         * Runs 'render' in a loop until it returns false or the 'stop' function is called\n         */\n        runUntilDone(render: () => boolean) {\n            const evid = this.eventID;\n\n            // if other animation, wait for turn\n            if (this.running)\n                control.waitForEvent(DAL.DEVICE_ID_NOTIFY, evid);\n\n            // check if the animation hasn't been cancelled since we've waiting\n            if (this.isCancelled(evid))\n                return;\n\n            // run animation\n            this.running = true;\n            while (this.running\n                && !this.isCancelled(evid)\n                && render()) {\n                pause(this.interval);\n            }\n\n            // check if the animation hasn't been cancelled since we've been waiting\n            if (this.isCancelled(evid))\n                return;\n\n            // we're done\n            this.running = false;\n            // unblock 1 fiber\n            control.raiseEvent(DAL.DEVICE_ID_NOTIFY_ONE, this.eventID);\n        }\n\n        isCancelled(evid: number) {\n            return this.eventID !== evid;\n        }\n\n        /**\n         * Cancels the current running animation and clears the queue\n         */\n        cancel() {\n            if (this.running) {\n                this.running = false;\n                const evid = this.eventID;\n                this.eventID = control.allocateNotifyEvent();\n                // unblock fibers\n                control.raiseEvent(DAL.DEVICE_ID_NOTIFY, evid);\n            }\n        }\n    }\n\n    //% shim=pxt::getConfig\n    export declare function getConfigValue(key: int32, defl: int32): number;\n\n    //% shim=pxt::programHash\n    export declare function programHash(): number;\n\n    //% shim=pxt::programName\n    export declare function programName(): string;\n\n    //% shim=control::_ramSize\n    function _ramSize() {\n        return 32 * 1024 * 1024;\n    }\n\n    /** Returns estimated size of memory in bytes. */\n    export function ramSize() {\n        return getConfigValue(DAL.CFG_RAM_BYTES, 0) || _ramSize();\n    }\n\n    /** Runs the function and returns run time in microseconds. */\n    export function benchmark(f: () => void) {\n        const t0 = micros()\n        f()\n        let t = micros() - t0\n        if (t < 0)\n            t += 0x3fffffff\n        return t\n    }\n}\n\n/**\n * Convert any value to text\n * @param value value to be converted to text\n */\n//% help=text/convert-to-text weight=1\n//% block=\"convert $value=math_number to text\"\n//% blockId=variable_to_text blockNamespace=\"text\"\nfunction convertToText(value: any): string {\n    return \"\" + value;\n}\n",
            "controlgc.cpp": "#include \"pxtbase.h\"\n\n\nnamespace control {\n    /**\n     * Force GC and dump basic information about heap.\n     */\n    //%\n    void gc() {\n        pxt::gc(1);\n    }\n\n    /**\n     * Force GC and halt waiting for debugger to do a full heap dump.\n     */\n    //%\n    void heapDump() {\n        pxt::gc(2);\n        soft_panic(PANIC_HEAP_DUMPED);\n    }\n\n\n    /**\n     * Set flags used when connecting an external debugger.\n     */\n    //%\n    void setDebugFlags(int flags) {\n        debugFlags = flags;\n    }\n\n    /**\n     * Record a heap snapshot to debug memory leaks.\n     */\n    //%\n    void heapSnapshot() {\n        // only in JS backend for now\n    }\n\n    /**\n     * Return true if profiling is enabled in the current build.\n     */\n    //%\n    bool profilingEnabled() {\n#ifdef PXT_PROFILE\n        return true;\n#else\n        return false;\n#endif\n    }\n}\n",
            "controlmessage.ts": "namespace control.simmessages {\n    // these events are raised by JS simulator when messages come in\n    export const CONTROL_MESSAGE_EVT_ID = 2999;\n    export const CONTROL_MESSAGE_RECEIVED = 1;\n\n    //% shim=pxt::sendMessage\n    export declare function send(channel: string, message: Buffer, parentOnly?: boolean) : void;\n\n    //% shim=pxt::peekMessageChannel\n    declare function peekMessageChannel(): string;\n\n    //% shim=pxt::readMessageData\n    declare function readMessageData(): Buffer;\n\n    let handlers: { [channel: string] : (msg: Buffer) => void}\n    function consumeMessages() {\n        while(true) {\n            // peek channel of next message\n            const channel = peekMessageChannel();\n            if (!channel) break;\n            // read next message\n            const msg = readMessageData();\n            // send to handler\n            const handler = handlers && handlers[channel];\n            if (handler)\n                handler(msg);\n        }\n    }\n\n    /**\n     * Registers the handler for a message on a given channel\n     **/\n    export function onReceived(channel: string, handler: (msg: Buffer) => void) {\n        if (!channel) return;\n\n        if (!handlers)\n            handlers = {};\n        handlers[channel] = handler;\n        control.onEvent(CONTROL_MESSAGE_EVT_ID, CONTROL_MESSAGE_RECEIVED, consumeMessages);\n    }\n}",
            "core.cpp": "#include \"pxtbase.h\"\n#include <limits.h>\n#include <stdlib.h>\n\nusing namespace std;\n\n#define p10(v) __builtin_powi(10, v)\n\n// try not to create cons-strings shorter than this\n#define SHORT_CONCAT_STRING 50\n\nnamespace pxt {\n\nPXT_DEF_STRING(emptyString, \"\")\n\nstatic HandlerBinding *handlerBindings;\n\nHandlerBinding *nextBinding(HandlerBinding *curr, int source, int value) {\n    for (auto p = curr; p; p = p->next) {\n        // DEVICE_ID_ANY == DEVICE_EXT_ANY == 0\n        if ((p->source == source || p->source == 0) &&\n            (value == -1 || p->value == value || p->value == 0)) {\n            return p;\n        }\n    }\n    return 0;\n}\n\nHandlerBinding *findBinding(int source, int value) {\n    return nextBinding(handlerBindings, source, value);\n}\n\nvoid setBinding(int source, int value, Action act) {\n    HandlerBinding *curr = NULL;\n    for (auto p = handlerBindings; p; p = p->next) {\n        if ((p->source == source) && (p->value == value)) {\n            curr = p;\n            break;\n        }\n    }\n    if (curr) {\n        curr->action = act;\n        return;\n    }\n    curr = new (app_alloc(sizeof(HandlerBinding))) HandlerBinding();\n    curr->next = handlerBindings;\n    curr->source = source;\n    curr->value = value;\n    curr->action = act;\n    registerGC(&curr->action);\n    handlerBindings = curr;\n}\n\nvoid coreReset() {\n    // these are allocated on GC heap, so they will go away together with the reset\n    handlerBindings = NULL;\n}\n\nstruct EmptyBufferLayout {\n    const void *vtable;\n    // data needs to be word-aligned, so we use 32 bits for length\n    int length;\n    uint8_t data[1];\n};\n\nstatic const EmptyBufferLayout emptyBuffer[1] = {{&pxt::buffer_vt, 0, {0}}};\n\n#if PXT_UTF8\nint utf8Len(const char *data, int size) {\n    int len = 0;\n    for (int i = 0; i < size; ++i) {\n        char c = data[i];\n        len++;\n        if ((c & 0x80) == 0x00) {\n            // skip\n        } else if ((c & 0xe0) == 0xc0) {\n            i++;\n        } else if ((c & 0xf0) == 0xe0) {\n            i += 2;\n        } else {\n            // error; just skip\n        }\n    }\n    return len;\n}\n\nconst char *utf8Skip(const char *data, int size, int skip) {\n    int len = 0;\n    for (int i = 0; i <= size; ++i) {\n        char c = data[i];\n        len++;\n        if (len > skip)\n            return data + i;\n        if ((c & 0x80) == 0x00) {\n            // skip\n        } else if ((c & 0xe0) == 0xc0) {\n            i++;\n        } else if ((c & 0xf0) == 0xe0) {\n            i += 2;\n        } else {\n            // error; just skip over\n        }\n    }\n    return NULL;\n}\n\nstatic char *write3byte(char *dst, uint32_t charCode) {\n    if (dst) {\n        *dst++ = 0xe0 | (charCode >> 12);\n        *dst++ = 0x80 | (0x3f & (charCode >> 6));\n        *dst++ = 0x80 | (0x3f & (charCode >> 0));\n    }\n    return dst;\n}\n\nstatic char *write2byte(char *dst, uint32_t charCode) {\n    if (dst) {\n        *dst++ = 0xc0 | (charCode >> 6);\n        *dst++ = 0x80 | (0x3f & charCode);\n    }\n    return dst;\n}\n\nstatic int utf8canon(char *dst, const char *data, int size) {\n    int outsz = 0;\n    for (int i = 0; i < size;) {\n        uint8_t c = data[i];\n        uint32_t charCode = c;\n        if ((c & 0x80) == 0x00) {\n            charCode = c;\n            i++;\n        } else if ((c & 0xe0) == 0xc0 && i + 1 < size && (data[i + 1] & 0xc0) == 0x80) {\n            charCode = ((c & 0x1f) << 6) | (data[i + 1] & 0x3f);\n            if (charCode < 0x80)\n                goto error;\n            else\n                i += 2;\n        } else if ((c & 0xf0) == 0xe0 && i + 2 < size && (data[i + 1] & 0xc0) == 0x80 &&\n                   (data[i + 2] & 0xc0) == 0x80) {\n            charCode = ((c & 0x0f) << 12) | (data[i + 1] & 0x3f) << 6 | (data[i + 2] & 0x3f);\n            // don't exclude surrogate pairs, since we're generating them\n            if (charCode < 0x800 /*|| (0xd800 <= charCode && charCode <= 0xdfff)*/)\n                goto error;\n            else\n                i += 3;\n        } else if ((c & 0xf8) == 0xf0 && i + 3 < size && (data[i + 1] & 0xc0) == 0x80 &&\n                   (data[i + 2] & 0xc0) == 0x80 && (data[i + 3] & 0xc0) == 0x80) {\n            charCode = ((c & 0x07) << 18) | (data[i + 1] & 0x3f) << 12 | (data[i + 2] & 0x3f) << 6 |\n                       (data[i + 3] & 0x3f);\n            if (charCode < 0x10000 || charCode > 0x10ffff)\n                goto error;\n            else\n                i += 4;\n        } else {\n            goto error;\n        }\n\n        if (charCode < 0x80) {\n            outsz += 1;\n            if (dst)\n                *dst++ = charCode;\n        } else if (charCode < 0x800) {\n            outsz += 2;\n            dst = write2byte(dst, charCode);\n        } else if (charCode < 0x10000) {\n            outsz += 3;\n            dst = write3byte(dst, charCode);\n        } else {\n            outsz += 6; // a surrogate pair\n            charCode -= 0x10000;\n            dst = write3byte(dst, 0xd800 + (charCode >> 10));\n            dst = write3byte(dst, 0xdc00 + (charCode & 0x3ff));\n        }\n\n        continue;\n\n    error:\n        i++;\n        outsz += 2;\n        dst = write2byte(dst, c);\n    }\n    return outsz;\n}\n\nstatic int utf8CharCode(const char *data) {\n    unsigned char c = *data;\n    if ((c & 0x80) == 0) {\n        return c;\n    } else if ((c & 0xe0) == 0xc0) {\n        return ((c & 0x1f) << 6) | (data[1] & 0x3f);\n    } else if ((c & 0xf0) == 0xe0) {\n        return ((c & 0x0f) << 12) | (data[1] & 0x3f) << 6 | (data[2] & 0x3f);\n    } else {\n        return c; // error\n    }\n}\n\nstatic bool isUTF8(const char *data, int len) {\n    for (int i = 0; i < len; ++i) {\n        if (data[i] & 0x80)\n            return true;\n    }\n    return false;\n}\n\nstatic void setupSkipList(String r, const char *data, int packed) {\n    char *dst = (char *)(packed ? PXT_SKIP_DATA_PACK(r) : PXT_SKIP_DATA_IND(r));\n    auto len = r->skip.size;\n    if (data)\n        memcpy(dst, data, len);\n    dst[len] = 0;\n    const char *ptr = dst;\n    auto skipEntries = PXT_NUM_SKIP_ENTRIES(r);\n    auto lst = packed ? r->skip_pack.list : r->skip.list;\n    for (int i = 0; i < skipEntries; ++i) {\n        ptr = utf8Skip(ptr, (int)(len - (ptr - dst)), PXT_STRING_SKIP_INCR);\n        if (!ptr)\n            oops(80);\n        lst[i] = ptr - dst;\n    }\n}\n#endif\n\nString mkStringCore(const char *data, int len) {\n    if (len < 0)\n        len = (int)strlen(data);\n    if (len == 0)\n        return (String)emptyString;\n\n    auto vt = &string_inline_ascii_vt;\n    String r;\n\n#if PXT_UTF8\n    if (data && isUTF8(data, len)) {\n        vt = len >= PXT_STRING_MIN_SKIP ? &string_skiplist16_packed_vt : &string_inline_utf8_vt;\n    }\n    if (vt == &string_skiplist16_packed_vt) {\n        int ulen = utf8Len(data, len);\n        r = new (gcAllocate(sizeof(void *) + 2 + 2 + (ulen / PXT_STRING_SKIP_INCR) * 2 + len + 1))\n            BoxedString(vt);\n        r->skip_pack.size = len;\n        r->skip_pack.length = ulen;\n        setupSkipList(r, data, 1);\n    } else\n#endif\n    {\n        // for ASCII and UTF8 the layout is the same\n        r = new (gcAllocate(sizeof(void *) + 2 + len + 1)) BoxedString(vt);\n        r->ascii.length = len;\n        if (data)\n            memcpy(r->ascii.data, data, len);\n        r->ascii.data[len] = 0;\n    }\n\n    MEMDBG(\"mkString: len=%d => %p\", len, r);\n    return r;\n}\n\nString mkString(const char *data, int len) {\n#if PXT_UTF8\n    if (len < 0)\n        len = (int)strlen(data);\n    if (len == 0)\n        return (String)emptyString;\n\n    int sz = utf8canon(NULL, data, len);\n    if (sz == len)\n        return mkStringCore(data, len);\n    // this could be optimized, but it only kicks in when the string isn't valid utf8\n    // (or we need to introduce surrogate pairs) which is unlikely to be performance critical\n    char *tmp = (char *)app_alloc(sz);\n    utf8canon(tmp, data, len);\n    auto r = mkStringCore(tmp, sz);\n    app_free(tmp);\n    return r;\n#else\n    return mkStringCore(data, len);\n#endif\n}\n\n#if PXT_UTF8\n// This converts surrogate pairs, which are encoded as 2 characters of 3 bytes each\n// into a proper 4 byte utf-8 character.\nuint32_t toRealUTF8(String str, uint8_t *dst) {\n    auto src = str->getUTF8Data();\n    auto len = str->getUTF8Size();\n    auto dlen = 0;\n\n    for (unsigned i = 0; i < len; ++i) {\n        if ((uint8_t)src[i] == 0xED && i + 5 < len) {\n            auto c0 = utf8CharCode(src + i);\n            auto c1 = utf8CharCode(src + i + 3);\n            if (0xd800 <= c0 && c0 < 0xdc00 && 0xdc00 <= c1 && c1 < 0xe000) {\n                i += 5;\n                auto charCode = ((c0 - 0xd800) << 10) + (c1 - 0xdc00) + 0x10000;\n                if (dst) {\n                    dst[dlen] = 0xf0 | (charCode >> 18);\n                    dst[dlen + 1] = 0x80 | (0x3f & (charCode >> 12));\n                    dst[dlen + 2] = 0x80 | (0x3f & (charCode >> 6));\n                    dst[dlen + 3] = 0x80 | (0x3f & (charCode >> 0));\n                }\n                dlen += 4;\n            }\n        } else {\n            if (dst)\n                dst[dlen] = src[i];\n            dlen++;\n        }\n    }\n    return dlen;\n}\n#endif\n\nBuffer mkBuffer(const void *data, int len) {\n    if (len <= 0)\n        return (Buffer)emptyBuffer;\n    Buffer r = new (gcAllocate(sizeof(BoxedBuffer) + len)) BoxedBuffer();\n    r->length = len;\n    if (data)\n        memcpy(r->data, data, len);\n    else\n        memset(r->data, 0, len);\n    MEMDBG(\"mkBuffer: len=%d => %p\", len, r);\n    return r;\n}\n\nstatic unsigned random_value = 0xC0DA1;\n\n//%\nvoid seedRandom(unsigned seed) {\n    random_value = seed;\n}\n\n//% expose\nvoid seedAddRandom(unsigned seed) {\n    random_value ^= 0xCA2557CB * seed;\n}\n\nunsigned getRandom(unsigned max) {\n    unsigned m, result;\n\n    do {\n        m = (unsigned)max;\n        result = 0;\n\n        do {\n            // Cycle the LFSR (Linear Feedback Shift Register).\n            // We use an optimal sequence with a period of 2^32-1, as defined by Bruce Schneier here\n            // (a true legend in the field!),\n            // For those interested, it's documented in his paper:\n            // \"Pseudo-Random Sequence Generator for 32-Bit CPUs: A fast, machine-independent\n            // generator for 32-bit Microprocessors\"\n            // https://www.schneier.com/paper-pseudorandom-sequence.html\n            unsigned r = random_value;\n\n            r = ((((r >> 31) ^ (r >> 6) ^ (r >> 4) ^ (r >> 2) ^ (r >> 1) ^ r) & 1) << 31) |\n                (r >> 1);\n\n            random_value = r;\n\n            result = ((result << 1) | (r & 0x00000001));\n        } while (m >>= 1);\n    } while (result > (unsigned)max);\n\n    return result;\n}\n\nTNumber BoxedString::charCodeAt(int pos) {\n#if PXT_UTF8\n    auto ptr = this->getUTF8DataAt(pos);\n    if (!ptr)\n        return TAG_NAN;\n    auto code = utf8CharCode(ptr);\n    if (!code && ptr == this->getUTF8Data() + this->getUTF8Size())\n        return TAG_NAN;\n    return fromInt(code);\n#else\n    if (0 <= pos && pos < this->ascii.length) {\n        return fromInt(this->ascii.data[pos]);\n    } else {\n        return TAG_NAN;\n    }\n#endif\n}\n\nPXT_DEF_STRING(sTrue, \"true\")\nPXT_DEF_STRING(sFalse, \"false\")\nPXT_DEF_STRING(sUndefined, \"undefined\")\nPXT_DEF_STRING(sNull, \"null\")\nPXT_DEF_STRING(sObject, \"[Object]\")\nPXT_DEF_STRING(sFunction, \"[Function]\")\nPXT_DEF_STRING(sNaN, \"NaN\")\nPXT_DEF_STRING(sInf, \"Infinity\")\nPXT_DEF_STRING(sMInf, \"-Infinity\")\n} // namespace pxt\n\n#ifndef X86_64\n\nnamespace String_ {\n\n//%\nString mkEmpty() {\n    return (String)emptyString;\n}\n\n// TODO support var-args somehow?\n\n//%\nString fromCharCode(int code) {\n#if PXT_UTF8\n    char buf[3];\n    int len;\n    code &= 0xffff; // JS semantics\n    if (code < 0x80) {\n        buf[0] = code;\n        len = 1;\n    } else if (code < 0x800) {\n        buf[0] = 0xc0 | (code >> 6);\n        buf[1] = 0x80 | ((code >> 0) & 0x3f);\n        len = 2;\n    } else {\n        buf[0] = 0xe0 | (code >> 12);\n        buf[1] = 0x80 | ((code >> 6) & 0x3f);\n        buf[2] = 0x80 | ((code >> 0) & 0x3f);\n        len = 3;\n    }\n    return mkStringCore(buf, len);\n#else\n    char buf[] = {(char)code, 0};\n    return mkStringCore(buf, 1);\n#endif\n}\n\n//%\nTNumber charCodeAt(String s, int pos) {\n    if (!s)\n        return TAG_NAN;\n    return s->charCodeAt(pos);\n}\n\n//%\nString charAt(String s, int pos) {\n    auto v = charCodeAt(s, pos);\n    if (v == TAG_NAN)\n        return mkEmpty();\n    if (!isInt(v))\n        oops(81);\n    return fromCharCode(numValue(v));\n}\n\n#define IS_CONS(s) ((s)->vtable == &string_cons_vt)\n#define IS_EMPTY(s) ((s) == (String)emptyString)\n\n//%\nString concat(String s, String other) {\n    if (!s)\n        s = (String)sNull;\n    if (!other)\n        other = (String)sNull;\n    if (IS_EMPTY(s))\n        return other;\n    if (IS_EMPTY(other))\n        return s;\n\n    uint32_t lenA, lenB;\n\n#if PXT_UTF8\n    if (IS_CONS(s)) {\n        // (s->cons.left + s->cons.right) + other = s->cons.left + (s->cons.right + other)\n        if (IS_CONS(other) || IS_CONS(s->cons.right))\n            goto mkCons;\n        auto lenAR = s->cons.right->getUTF8Size();\n        lenB = other->getUTF8Size();\n        if (lenAR + lenB > SHORT_CONCAT_STRING)\n            goto mkCons;\n        // if (s->cons.right + other) is short enough, use associativity\n        // to construct a shallower tree; this should keep the live set reasonable\n        // when someone decides to construct a long string by concatenating\n        // single characters\n\n        // allocate [r] first, and keep it alive\n        String r = new (gcAllocate(3 * sizeof(void *))) BoxedString(&string_cons_vt);\n        registerGCObj(r);\n        r->cons.left = s->cons.left;\n        // this concat() might trigger GC\n        r->cons.right = concat(s->cons.right, other);\n        unregisterGCObj(r);\n        return r;\n    }\n#endif\n\n    lenA = s->getUTF8Size();\n    lenB = other->getUTF8Size();\n#if PXT_UTF8\n    if (lenA + lenB > SHORT_CONCAT_STRING)\n        goto mkCons;\n#endif\n    String r;\n    {\n        auto dataA = s->getUTF8Data();\n        auto dataB = other->getUTF8Data();\n        r = mkStringCore(NULL, lenA + lenB);\n        auto dst = (char *)r->getUTF8Data();\n        memcpy(dst, dataA, lenA);\n        memcpy(dst + lenA, dataB, lenB);\n#if PXT_UTF8\n        if (isUTF8(dst, lenA + lenB))\n            r->vtable = &string_inline_utf8_vt;\n#endif\n        return r;\n    }\n\n#if PXT_UTF8\nmkCons:\n    r = new (gcAllocate(3 * sizeof(void *))) BoxedString(&string_cons_vt);\n    r->cons.left = s;\n    r->cons.right = other;\n    return r;\n#endif\n}\n\nint compare(String a, String b) {\n    if (a == b)\n        return 0;\n\n    auto lenA = a->getUTF8Size();\n    auto lenB = b->getUTF8Size();\n    auto dataA = a->getUTF8Data();\n    auto dataB = b->getUTF8Data();\n    auto len = lenA < lenB ? lenA : lenB;\n\n    // this also works for UTF8, provided canonical encoding\n    // which is guaranteed by the constructor\n    for (unsigned i = 0; i <= len; ++i) {\n        unsigned char cA = dataA[i];\n        unsigned char cB = dataB[i];\n        if (cA == cB)\n            continue;\n        return cA < cB ? -1 : 1;\n    }\n    return 0;\n}\n\n//%\nint length(String s) {\n    return s->getLength();\n}\n\n#define isspace(c) ((c) == ' ')\n#define iswhitespace(c)                                                                            \\\n    ((c) == 0x09 || (c) == 0x0B || (c) == 0x0C || (c) == 0x20 || (uint8_t)(c) == 0xA0 ||           \\\n     (c) == 0x0A || (c) == 0x0D)\n\nNUMBER mystrtod(const char *p, char **endp) {\n    while (iswhitespace(*p))\n        p++;\n    NUMBER m = 1;\n    NUMBER v = 0;\n    int dot = 0;\n    int hasDigit = 0;\n    if (*p == '+')\n        p++;\n    if (*p == '-') {\n        m = -1;\n        p++;\n    }\n\n    while (*p) {\n        int c = *p - '0';\n        if (0 <= c && c <= 9) {\n            v *= 10;\n            v += c;\n            if (dot)\n                m /= 10;\n            hasDigit = 1;\n        } else if (!dot && *p == '.') {\n            dot = 1;\n        } else if (!hasDigit) {\n            return NAN;\n        } else {\n            break;\n        }\n        p++;\n    }\n\n    v *= m;\n\n    if (*p == 'e' || *p == 'E') {\n        p++;\n        int pw = (int)strtol(p, endp, 10);\n        v *= p10(pw);\n    } else {\n        *endp = (char *)p;\n    }\n\n    return v;\n}\n\n//%\nTNumber toNumber(String s) {\n    // JSCHECK\n    char *endptr;\n    auto data = s->getUTF8Data();\n    NUMBER v = mystrtod(data, &endptr);\n    if (v == 0.0 || v == -0.0) {\n        // nothing\n    } else if (!isnormal(v))\n        v = NAN;\n    return fromDouble(v);\n}\n\n//%\nString substr(String s, int start, int length) {\n    if (length <= 0)\n        return mkEmpty();\n    auto slen = (int)s->getLength();\n    if (start < 0)\n        start = pxt::max(slen + start, 0);\n    length = pxt::min(length, slen - start);\n    if (length <= 0)\n        return mkEmpty();\n    auto p = s->getUTF8DataAt(start);\n#if PXT_UTF8\n    auto ep = s->getUTF8DataAt(start + length);\n    if (ep == NULL)\n        oops(82);\n    return mkStringCore(p, (int)(ep - p));\n#else\n    return mkStringCore(p, length);\n#endif\n}\n\n//%\nint indexOf(String s, String searchString, int start) {\n    if (!s || !searchString)\n        return -1;\n\n    if (start < 0)\n        start = 0;\n\n    auto dataA0 = s->getUTF8Data();\n    auto dataA = s->getUTF8DataAt(start);\n    auto offset = dataA - dataA0;\n    auto lenA = s->getUTF8Size() - offset;\n    auto lenB = searchString->getUTF8Size();\n\n    if (dataA == NULL || lenB > lenA)\n        return -1;\n\n    auto dataB = searchString->getUTF8Data();\n    auto firstB = dataB[0];\n    while (lenA >= lenB) {\n        if (*dataA == firstB && !memcmp(dataA, dataB, lenB))\n#if PXT_UTF8\n            return utf8Len(dataA0, (int)(dataA - dataA0));\n#else\n            return dataA - dataA0;\n#endif\n        dataA++;\n        lenA--;\n    }\n    return -1;\n}\n\n//%\nint includes(String s, String searchString, int start) {\n    return -1 != indexOf(s, searchString, start);\n}\n\n} // namespace String_\n\nnamespace Boolean_ {\n//%\nbool bang(bool v) {\n    return v == 0;\n}\n} // namespace Boolean_\n\nnamespace pxt {\n\n// ES5 9.5, 9.6\nunsigned toUInt(TNumber v) {\n    if (isInt(v))\n        return numValue(v);\n    if (isSpecial(v)) {\n        if ((intptr_t)v >> 6)\n            return 1;\n        else\n            return 0;\n    }\n    if (!v)\n        return 0;\n\n    NUMBER num = toDouble(v);\n    if (!isnormal(num))\n        return 0;\n#ifdef PXT_USE_FLOAT\n    float rem = fmodf(truncf(num), 4294967296.0);\n#else\n    double rem = fmod(trunc(num), 4294967296.0);\n#endif\n    if (rem < 0.0)\n        rem += 4294967296.0;\n    return (unsigned)rem;\n}\nint toInt(TNumber v) {\n    return (int)toUInt(v);\n}\n\nNUMBER toDouble(TNumber v) {\n    if (v == TAG_NAN || v == TAG_UNDEFINED)\n        return NAN;\n    if (isTagged(v))\n        return toInt(v);\n\n#ifdef PXT64\n    if (isDouble(v))\n        return doubleVal(v);\n#endif\n\n    ValType t = valType(v);\n\n#ifndef PXT64\n    if (t == ValType::Number) {\n        BoxedNumber *p = (BoxedNumber *)v;\n        return p->num;\n    }\n#endif\n\n    if (t == ValType::String) {\n        // TODO avoid allocation\n        auto tmp = String_::toNumber((String)v);\n        auto r = toDouble(tmp);\n        return r;\n    } else {\n        return NAN;\n    }\n}\n\nfloat toFloat(TNumber v) {\n    if (v == TAG_NAN || v == TAG_UNDEFINED)\n        return NAN;\n    // optimize for the int case - this will avoid software conversion when FPU is present\n    if (isTagged(v))\n        return toInt(v);\n    return (float)toDouble(v);\n}\n\n#if !defined(PXT_HARD_FLOAT) && !defined(PXT_USE_FLOAT)\nunion NumberConv {\n    double v;\n    struct {\n        uint32_t word0;\n        uint32_t word1;\n    };\n};\n\nstatic inline TValue doubleToInt(double x) {\n    NumberConv cnv;\n    cnv.v = x;\n\n    if (cnv.word1 == 0 && cnv.word0 == 0)\n        return TAG_NUMBER(0);\n\n    auto ex = (int)((cnv.word1 << 1) >> 21) - 1023;\n\n    // DMESG(\"v=%d/1000 %p %p %d\", (int)(x * 1000), cnv.word0, cnv.word1, ex);\n\n    if (ex < 0 || ex > 29) {\n        // the 'MININT' case\n        if (ex == 30 && cnv.word0 == 0 && cnv.word1 == 0xC1D00000)\n            return (TValue)(0x80000001);\n        return NULL;\n    }\n\n    int32_t r;\n\n    if (ex <= 20) {\n        if (cnv.word0)\n            return TAG_UNDEFINED;\n        if (cnv.word1 << (ex + 12))\n            return TAG_UNDEFINED;\n        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);\n    } else {\n        if (cnv.word0 << (ex - 20))\n            return TAG_UNDEFINED;\n        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);\n        r |= cnv.word0 >> (32 - (ex - 20));\n    }\n\n    if (cnv.word1 >> 31)\n        return TAG_NUMBER(-r);\n    else\n        return TAG_NUMBER(r);\n}\n#else\nstatic inline TValue doubleToInt(NUMBER r) {\n#ifdef PXT64\n    if ((int)r == r)\n        return TAG_NUMBER((int)r);\n#else\n    int ri = ((int)r) << 1;\n    if ((ri >> 1) == r)\n        return (TNumber)(uintptr_t)(ri | 1);\n#endif\n    return TAG_UNDEFINED;\n}\n#endif\n\nTNumber fromDouble(NUMBER r) {\n#ifndef PXT_BOX_DEBUG\n    auto i = doubleToInt(r);\n    if (i)\n        return i;\n#endif\n    if (isnan(r))\n        return TAG_NAN;\n#ifdef PXT64\n    return tvalueFromDouble(r);\n#else\n    BoxedNumber *p = NEW_GC(BoxedNumber);\n    p->num = r;\n    MEMDBG(\"mkNum: %d/1000 => %p\", (int)(r * 1000), p);\n    return (TNumber)p;\n#endif\n}\n\nTNumber fromFloat(float r) {\n    // TODO optimize\n    return fromDouble(r);\n}\n\nTNumber fromInt(int v) {\n    if (canBeTagged(v))\n        return TAG_NUMBER(v);\n    return fromDouble(v);\n}\n\nTNumber fromUInt(unsigned v) {\n#ifndef PXT_BOX_DEBUG\n    if (v <= 0x3fffffff)\n        return TAG_NUMBER(v);\n#endif\n    return fromDouble(v);\n}\n\nTValue fromBool(bool v) {\n    if (v)\n        return TAG_TRUE;\n    else\n        return TAG_FALSE;\n}\n\nTNumber eqFixup(TNumber v) {\n    if (v == TAG_NULL)\n        return TAG_UNDEFINED;\n    if (v == TAG_TRUE)\n        return TAG_NUMBER(1);\n    if (v == TAG_FALSE)\n        return TAG_NUMBER(0);\n    return v;\n}\n\nstatic inline bool eq_core(TValue a, TValue b, ValType ta) {\n#ifndef PXT_BOX_DEBUG\n    auto aa = (intptr_t)a;\n    auto bb = (intptr_t)b;\n\n    // if at least one of the values is tagged, they are not equal\n    if ((aa | bb) & 3)\n        return false;\n#endif\n\n    if (ta == ValType::String)\n        return String_::compare((String)a, (String)b) == 0;\n    else if (ta == ValType::Number)\n        return toDouble(a) == toDouble(b);\n    else\n        return a == b;\n}\n\nbool eqq_bool(TValue a, TValue b) {\n    if (a == TAG_NAN || b == TAG_NAN)\n        return false;\n\n    if (a == b)\n        return true;\n\n    if (bothNumbers(a, b))\n        return false;\n\n    ValType ta = valType(a);\n    ValType tb = valType(b);\n\n    if (ta != tb)\n        return false;\n\n    return eq_core(a, b, ta);\n}\n\nbool eq_bool(TValue a, TValue b) {\n    if (a == TAG_NAN || b == TAG_NAN)\n        return false;\n\n    if (eqFixup(a) == eqFixup(b))\n        return true;\n\n    if (bothNumbers(a, b))\n        return false;\n\n    ValType ta = valType(a);\n    ValType tb = valType(b);\n\n    if ((ta == ValType::String && tb == ValType::Number) ||\n        (tb == ValType::String && ta == ValType::Number))\n        return toDouble(a) == toDouble(b);\n\n    if (ta == ValType::Boolean) {\n        a = eqFixup(a);\n        ta = ValType::Number;\n    }\n    if (tb == ValType::Boolean) {\n        b = eqFixup(b);\n        tb = ValType::Number;\n    }\n\n    if (ta != tb)\n        return false;\n\n    return eq_core(a, b, ta);\n}\n\n// TODO move to assembly\n//%\nbool switch_eq(TValue a, TValue b) {\n    if (eq_bool(a, b)) {\n        return true;\n    }\n    return false;\n}\n\n} // namespace pxt\n\n#define NUMOP(op) return fromDouble(toDouble(a) op toDouble(b));\n#define BITOP(op) return fromInt(toInt(a) op toInt(b));\nnamespace numops {\n\nint toBool(TValue v) {\n    if (isTagged(v)) {\n        if (v == TAG_FALSE || v == TAG_UNDEFINED || v == TAG_NAN || v == TAG_NULL ||\n            v == TAG_NUMBER(0))\n            return 0;\n        else\n            return 1;\n    }\n\n    ValType t = valType(v);\n    if (t == ValType::String) {\n        String s = (String)v;\n        if (IS_EMPTY(s))\n            return 0;\n    } else if (t == ValType::Number) {\n        auto x = toDouble(v);\n        if (isnan(x) || x == 0.0 || x == -0.0)\n            return 0;\n        else\n            return 1;\n    }\n\n    return 1;\n}\n\nint toBoolDecr(TValue v) {\n    if (v == TAG_TRUE)\n        return 1;\n    if (v == TAG_FALSE)\n        return 0;\n    return toBool(v);\n}\n\n// The integer, non-overflow case for add/sub/bit opts is handled in assembly\n\n#ifdef PXT_VM\n#define NUMOP2(op)                                                                                 \\\n    if (bothNumbers(a, b)) {                                                                       \\\n        auto tmp = (int64_t)numValue(a) op(int64_t) numValue(b);                                   \\\n        if ((int)tmp == tmp)                                                                       \\\n            return TAG_NUMBER((int)tmp);                                                           \\\n    }                                                                                              \\\n    NUMOP(op)\n#else\n#define NUMOP2(op) NUMOP(op)\n#endif\n\n//%\nTNumber adds(TNumber a, TNumber b){NUMOP2(+)}\n\n//%\nTNumber subs(TNumber a, TNumber b){NUMOP2(-)}\n\n//%\nTNumber muls(TNumber a, TNumber b) {\n    if (bothNumbers(a, b)) {\n#ifdef PXT64\n        auto tmp = (int64_t)numValue(a) * (int64_t)numValue(b);\n        if ((int)tmp == tmp)\n            return TAG_NUMBER((int)tmp);\n#else\n        int aa = (int)a;\n        int bb = (int)b;\n        // if both operands fit 15 bits, the result will not overflow int\n        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {\n            // it may overflow 31 bit int though - use fromInt to convert properly\n            return fromInt((aa >> 1) * (bb >> 1));\n        }\n#endif\n    }\n    NUMOP(*)\n}\n\n//%\nTNumber div(TNumber a, TNumber b) {\n    if (b == TAG_NUMBER(1))\n        return a;\n    NUMOP(/)\n}\n\n//%\nTNumber mod(TNumber a, TNumber b) {\n    if (isInt(a) && isInt(b) && numValue(b))\n        BITOP(%)\n    return fromDouble(fmod(toDouble(a), toDouble(b)));\n}\n\n//%\nTNumber lsls(TNumber a, TNumber b) {\n    return fromInt(toInt(a) << (toInt(b) & 0x1f));\n}\n\n//%\nTNumber lsrs(TNumber a, TNumber b) {\n    return fromUInt(toUInt(a) >> (toUInt(b) & 0x1f));\n}\n\n//%\nTNumber asrs(TNumber a, TNumber b) {\n    return fromInt(toInt(a) >> (toInt(b) & 0x1f));\n}\n\n//%\nTNumber eors(TNumber a, TNumber b){BITOP(^)}\n\n//%\nTNumber orrs(TNumber a, TNumber b){BITOP(|)}\n\n//%\nTNumber bnot(TNumber a) {\n    return fromInt(~toInt(a));\n}\n\n//%\nTNumber ands(TNumber a, TNumber b) {\n    BITOP(&)\n}\n\n#ifdef PXT64\n#define CMPOP_RAW(op, t, f)                                                                        \\\n    if (bothNumbers(a, b))                                                                         \\\n        return numValue(a) op numValue(b) ? t : f;                                                 \\\n    int cmp = valCompare(a, b);                                                                    \\\n    return cmp != -2 && cmp op 0 ? t : f;\n#else\n#define CMPOP_RAW(op, t, f)                                                                        \\\n    if (bothNumbers(a, b))                                                                         \\\n        return (intptr_t)a op((intptr_t)b) ? t : f;                                                \\\n    int cmp = valCompare(a, b);                                                                    \\\n    return cmp != -2 && cmp op 0 ? t : f;\n#endif\n\n#define CMPOP(op) CMPOP_RAW(op, TAG_TRUE, TAG_FALSE)\n\n// 7.2.13 Abstract Relational Comparison\nstatic int valCompare(TValue a, TValue b) {\n    if (a == TAG_NAN || b == TAG_NAN)\n        return -2;\n\n    ValType ta = valType(a);\n    ValType tb = valType(b);\n\n    if (ta == ValType::String && tb == ValType::String)\n        return String_::compare((String)a, (String)b);\n\n    if (a == b)\n        return 0;\n\n    auto da = toDouble(a);\n    auto db = toDouble(b);\n\n    if (isnan(da) || isnan(db))\n        return -2;\n\n    if (da < db)\n        return -1;\n    else if (da > db)\n        return 1;\n    else\n        return 0;\n}\n\n//%\nbool lt_bool(TNumber a, TNumber b){CMPOP_RAW(<, true, false)}\n\n//%\nTNumber le(TNumber a, TNumber b){CMPOP(<=)}\n\n//%\nTNumber lt(TNumber a, TNumber b){CMPOP(<)}\n\n//%\nTNumber ge(TNumber a, TNumber b){CMPOP(>=)}\n\n//%\nTNumber gt(TNumber a, TNumber b){CMPOP(>)}\n\n//%\nTNumber eq(TNumber a, TNumber b) {\n    return pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTNumber neq(TNumber a, TNumber b) {\n    return !pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTNumber eqq(TNumber a, TNumber b) {\n    return pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTNumber neqq(TNumber a, TNumber b) {\n    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n// How many significant digits mycvt() should output.\n// This cannot be more than 15, as this is the most that can be accurately represented\n// in 64 bit double. Otherwise this code may crash.\n#define DIGITS 15\n\nstatic const uint64_t pows[] = {\n    1LL,           10LL,           100LL,           1000LL,           10000LL,\n    100000LL,      1000000LL,      10000000LL,      100000000LL,      1000000000LL,\n    10000000000LL, 100000000000LL, 1000000000000LL, 10000000000000LL, 100000000000000LL,\n};\n\n// The basic idea is we convert d to a 64 bit integer with DIGITS\n// digits, and then print it out, putting dot in the right place.\n\nvoid mycvt(NUMBER d, char *buf) {\n    if (d < 0) {\n        *buf++ = '-';\n        d = -d;\n    }\n\n    if (!d) {\n        *buf++ = '0';\n        *buf++ = 0;\n        return;\n    }\n\n    int pw = (int)log10(d);\n    int e = 1;\n\n    // if outside 1e-6 -- 1e21 range, we use the e-notation\n    if (d < 1e-6 || d > 1e21) {\n        // normalize number to 1.XYZ, save e, and reset pw\n        if (pw < 0)\n            d *= p10(-pw);\n        else\n            d /= p10(pw);\n        e = pw;\n        pw = 0;\n    }\n\n    int trailingZ = 0;\n    int dotAfter = pw + 1; // at which position the dot should be in the number\n\n    uint64_t dd;\n\n    // normalize number to be integer with exactly DIGITS digits\n    if (pw >= DIGITS) {\n        // if the number is larger than DIGITS, we need trailing zeroes\n        trailingZ = pw - DIGITS + 1;\n        dd = (uint64_t)(d / p10(trailingZ) + 0.5);\n    } else {\n        dd = (uint64_t)(d * p10(DIGITS - pw - 1) + 0.5);\n    }\n\n    // if number is less than 1, we need 0.00...00 at the beginning\n    if (dotAfter < 1) {\n        *buf++ = '0';\n        *buf++ = '.';\n        int n = -dotAfter;\n        while (n--)\n            *buf++ = '0';\n    }\n\n    // now print out the actual number\n    for (int i = DIGITS - 1; i >= 0; i--) {\n        uint64_t q = pows[i];\n        // this may be faster than fp-division and fmod(); or maybe not\n        // anyways, it works\n        int k = '0';\n        while (dd >= q) {\n            dd -= q;\n            k++;\n        }\n        *buf++ = k;\n        // if we're after dot, and what's left is zeroes, stop\n        if (dd == 0 && (DIGITS - i) >= dotAfter)\n            break;\n        // print the dot, if we arrived at it\n        if ((DIGITS - i) == dotAfter)\n            *buf++ = '.';\n    }\n\n    // print out remaining trailing zeroes if any\n    while (trailingZ-- > 0)\n        *buf++ = '0';\n\n    // if we used e-notation, handle that\n    if (e != 1) {\n        *buf++ = 'e';\n        if (e > 0)\n            *buf++ = '+';\n        itoa(e, buf);\n    } else {\n        *buf = 0;\n    }\n}\n\n#if 0\n//%\nTValue floatAsInt(TValue x) {\n    return doubleToInt(toDouble(x));\n}\n\n//% shim=numops::floatAsInt\nfunction floatAsInt(v: number): number { return 0 }\n\nfunction testInt(i: number) {\n    if (floatAsInt(i) != i)\n        control.panic(101)\n    if (floatAsInt(i + 0.5) != null)\n        control.panic(102)\n    if (floatAsInt(i + 0.00001) != null)\n        control.panic(103)\n}\n\nfunction testFloat(i: number) {\n    if (floatAsInt(i) != null)\n        control.panic(104)\n}\n\nfunction testFloatAsInt() {\n    for (let i = 0; i < 0xffff; ++i) {\n        testInt(i)\n        testInt(-i)\n        testInt(i * 10000)\n        testInt(i << 12)\n        testInt(i + 0x3fff0001)\n        testInt(-i - 0x3fff0002)\n        testFloat(i + 0x3fffffff + 1)\n        testFloat((i + 10000) * 1000000)\n    }\n}\n#endif\n\nString toString(TValue v) {\n    ValType t = valType(v);\n\n    if (t == ValType::String) {\n        return (String)v;\n    } else if (t == ValType::Number) {\n        char buf[64];\n\n        if (isInt(v)) {\n            itoa(numValue(v), buf);\n            return mkStringCore(buf);\n        }\n\n        if (v == TAG_NAN)\n            return (String)(void *)sNaN;\n\n        auto x = toDouble(v);\n\n#ifdef PXT_BOX_DEBUG\n        if (x == (int)x) {\n            itoa((int)x, buf);\n            return mkStringCore(buf);\n        }\n#endif\n\n        if (isinf(x)) {\n            if (x < 0)\n                return (String)(void *)sMInf;\n            else\n                return (String)(void *)sInf;\n        } else if (isnan(x)) {\n            return (String)(void *)sNaN;\n        }\n        mycvt(x, buf);\n\n        return mkStringCore(buf);\n    } else if (t == ValType::Function) {\n        return (String)(void *)sFunction;\n    } else {\n        if (v == TAG_UNDEFINED)\n            return (String)(void *)sUndefined;\n        else if (v == TAG_FALSE)\n            return (String)(void *)sFalse;\n        else if (v == TAG_NAN)\n            return (String)(void *)sNaN;\n        else if (v == TAG_TRUE)\n            return (String)(void *)sTrue;\n        else if (v == TAG_NULL)\n            return (String)(void *)sNull;\n        return (String)(void *)sObject;\n    }\n}\n\n} // namespace numops\n\nnamespace Math_ {\n//%\nTNumber pow(TNumber x, TNumber y) {\n#ifdef PXT_POWI\n    // regular pow() from math.h is 4k of code\n    return fromDouble(__builtin_powi(toDouble(x), toInt(y)));\n#else\n    return fromDouble(::pow(toDouble(x), toDouble(y)));\n#endif\n}\n\nNUMBER randomDouble() {\n    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +\n           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);\n}\n\n//%\nTNumber random() {\n    return fromDouble(randomDouble());\n}\n\n//%\nTNumber randomRange(TNumber min, TNumber max) {\n    if (isInt(min) && isInt(max)) {\n        int mini = numValue(min);\n        int maxi = numValue(max);\n        if (mini > maxi) {\n            int temp = mini;\n            mini = maxi;\n            maxi = temp;\n        }\n        if (maxi == mini)\n            return fromInt(mini);\n        else\n            return fromInt(mini + getRandom(maxi - mini));\n    } else {\n        auto mind = toDouble(min);\n        auto maxd = toDouble(max);\n        if (mind > maxd) {\n            auto temp = mind;\n            mind = maxd;\n            maxd = temp;\n        }\n        if (maxd == mind)\n            return fromDouble(mind);\n        else {\n            return fromDouble(mind + randomDouble() * (maxd - mind));\n        }\n    }\n}\n\n#define SINGLE(op) return fromDouble(::op(toDouble(x)));\n\n//%\nTNumber log(TNumber x){SINGLE(log)}\n\n//%\nTNumber log10(TNumber x){SINGLE(log10)}\n\n//%\nTNumber floor(TNumber x){SINGLE(floor)}\n\n//%\nTNumber ceil(TNumber x){SINGLE(ceil)}\n\n//%\nTNumber trunc(TNumber x){SINGLE(trunc)}\n\n//%\nTNumber round(TNumber x) {\n    // In C++, round(-1.5) == -2, while in JS, round(-1.5) == -1. Align to the JS convention for\n    // consistency between simulator and device. The following does rounding with ties (x.5) going\n    // towards positive infinity.\n    return fromDouble(::floor(toDouble(x) + 0.5));\n}\n\n//%\nint imul(int x, int y) {\n    return x * y;\n}\n\n//%\nint idiv(int x, int y) {\n    return x / y;\n}\n} // namespace Math_\n\nnamespace Array_ {\nRefCollection *mk() {\n    auto r = NEW_GC(RefCollection);\n    MEMDBG(\"mkColl: => %p\", r);\n    return r;\n}\nint length(RefCollection *c) {\n    return c->length();\n}\nvoid setLength(RefCollection *c, int newLength) {\n    c->setLength(newLength);\n}\nvoid push(RefCollection *c, TValue x) {\n    c->head.push(x);\n}\nTValue pop(RefCollection *c) {\n    return c->head.pop();\n}\nTValue getAt(RefCollection *c, int x) {\n    return c->head.get(x);\n}\nvoid setAt(RefCollection *c, int x, TValue y) {\n    c->head.set(x, y);\n}\nTValue removeAt(RefCollection *c, int x) {\n    return c->head.remove(x);\n}\nvoid insertAt(RefCollection *c, int x, TValue value) {\n    c->head.insert(x, value);\n}\nint indexOf(RefCollection *c, TValue x, int start) {\n    auto data = c->head.getData();\n    auto len = c->head.getLength();\n    for (unsigned i = 0; i < len; i++) {\n        if (pxt::eq_bool(data[i], x)) {\n            return (int)i;\n        }\n    }\n    return -1;\n}\nbool removeElement(RefCollection *c, TValue x) {\n    int idx = indexOf(c, x, 0);\n    if (idx >= 0) {\n        decr(removeAt(c, idx));\n        return 1;\n    }\n    return 0;\n}\n} // namespace Array_\n\nnamespace pxt {\nint debugFlags;\n\n//%\nvoid *ptrOfLiteral(int offset);\n\n#ifdef PXT_VM\nunsigned programSize() {\n    return 0;\n}\n#else\n//%\nunsigned programSize() {\n    return bytecode[17] * 8;\n}\n#endif\n\nvoid deepSleep() __attribute__((weak));\n//%\nvoid deepSleep() {}\n\nint *getBootloaderConfigData() __attribute__((weak));\nint *getBootloaderConfigData() {\n    return NULL;\n}\n\n//%\nint getConfig(int key, int defl) {\n#ifdef PXT_VM\n    if (!vmImg)\n        return defl;\n    int *cfgData = vmImg->configData;\n#else\n    int *cfgData = bytecode ? *(int **)&bytecode[18] : NULL;\n#endif\n\n    if (cfgData) {\n        for (int i = 0;; i += 2) {\n            if (cfgData[i] == key)\n                return cfgData[i + 1];\n            if (cfgData[i] == 0)\n                break;\n        }\n    }\n\n    cfgData = getBootloaderConfigData();\n\n    if (cfgData) {\n        for (int i = 0;; i += 2) {\n            if (cfgData[i] == key)\n                return cfgData[i + 1];\n            if (cfgData[i] == 0)\n                break;\n        }\n    }\n\n    return defl;\n}\n\n} // namespace pxt\n\nnamespace pxtrt {\n//%\nTValue ldlocRef(RefRefLocal *r) {\n    return r->v;\n}\n\n//%\nvoid stlocRef(RefRefLocal *r, TValue v) {\n    r->v = v;\n}\n\n//%\nRefRefLocal *mklocRef() {\n    auto r = NEW_GC(RefRefLocal);\n    MEMDBG(\"mklocRef: => %p\", r);\n    return r;\n}\n\n// Store a captured local in a closure. It returns the action, so it can be chained.\n//%\nRefAction *stclo(RefAction *a, int idx, TValue v) {\n    // DBG(\"STCLO \"); a->print(); DBG(\"@%d = %p\\n\", idx, (void*)v);\n    a->stCore(idx, v);\n    return a;\n}\n\n//%\nvoid panic(int code) {\n    soft_panic(code);\n}\n\n//%\nString emptyToNull(String s) {\n    if (!s || IS_EMPTY(s))\n        return NULL;\n    return s;\n}\n\n//%\nint ptrToBool(TValue p) {\n    if (p) {\n        decr(p);\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nRefMap *mkMap() {\n    auto r = NEW_GC(RefMap);\n    MEMDBG(\"mkMap: => %p\", r);\n    return r;\n}\n\nTValue mapGetByString(RefMap *map, String key) {\n    int i = map->findIdx(key);\n    if (i < 0) {\n        return 0;\n    }\n    return map->values.get(i);\n}\n\n#ifdef PXT_VM\n#define IFACE_MEMBER_NAMES vmImg->ifaceMemberNames\n#else\n#define IFACE_MEMBER_NAMES *(uintptr_t **)&bytecode[22]\n#endif\n\nint lookupMapKey(String key) {\n    auto arr = IFACE_MEMBER_NAMES;\n    auto len = *arr++;\n    int l = 1U; // skip index 0 - it's invalid\n    int r = (int)len - 1;\n    auto ikey = (uintptr_t)key;\n    if (arr[l] <= ikey && ikey <= arr[r]) {\n        while (l <= r) {\n            auto m = (l + r) >> 1;\n            if (arr[m] == ikey)\n                return m;\n            else if (arr[m] < ikey)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n    } else {\n        while (l <= r) {\n            int m = (l + r) >> 1;\n            auto cmp = String_::compare((String)arr[m], key);\n            if (cmp == 0)\n                return m;\n            else if (cmp < 0)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n    }\n    return 0;\n}\n\nTValue mapGet(RefMap *map, unsigned key) {\n    auto arr = (String *)IFACE_MEMBER_NAMES;\n    auto r = mapGetByString(map, arr[key + 1]);\n    map->unref();\n    return r;\n}\n\nvoid mapSetByString(RefMap *map, String key, TValue val) {\n    int i = map->findIdx(key);\n    if (i < 0) {\n        map->keys.push((TValue)key);\n        map->values.push(val);\n    } else {\n        map->values.set(i, val);\n    }\n}\n\nvoid mapSet(RefMap *map, unsigned key, TValue val) {\n    auto arr = (String *)IFACE_MEMBER_NAMES;\n    mapSetByString(map, arr[key + 1], val);\n    decr(val);\n    map->unref();\n}\n\n//\n// Debugger\n//\n\n// This is only to be called once at the beginning of lambda function\n//%\nvoid *getGlobalsPtr() {\n#ifdef DEVICE_GROUP_ID_USER\n    fiber_set_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    return globals;\n}\n\n//%\nvoid runtimeWarning(String s) {\n    // noop for now\n}\n} // namespace pxtrt\n#endif\n\nnamespace pxt {\n\nvoid doNothing() {}\n\n//%\nValType valType(TValue v) {\n    if (isTagged(v)) {\n        if (!v)\n            return ValType::Undefined;\n\n        if (isInt(v) || v == TAG_NAN)\n            return ValType::Number;\n        if (v == TAG_TRUE || v == TAG_FALSE)\n            return ValType::Boolean;\n        else if (v == TAG_NULL)\n            return ValType::Object;\n        else {\n            oops(1);\n            return ValType::Object;\n        }\n#ifdef PXT64\n    } else if (isDouble(v)) {\n        return ValType::Number;\n#endif\n    } else {\n        auto vt = getVTable((RefObject *)v);\n        if (vt->magic == VTABLE_MAGIC)\n            return vt->objectType;\n        else\n            return ValType::Object;\n    }\n}\n\nPXT_DEF_STRING(sObjectTp, \"object\")\nPXT_DEF_STRING(sBooleanTp, \"boolean\")\nPXT_DEF_STRING(sStringTp, \"string\")\nPXT_DEF_STRING(sNumberTp, \"number\")\nPXT_DEF_STRING(sFunctionTp, \"function\")\nPXT_DEF_STRING(sUndefinedTp, \"undefined\")\n\n//% expose\nString typeOf(TValue v) {\n    switch (valType(v)) {\n    case ValType::Undefined:\n        return (String)sUndefinedTp;\n    case ValType::Boolean:\n        return (String)sBooleanTp;\n    case ValType::Number:\n        return (String)sNumberTp;\n    case ValType::String:\n        return (String)sStringTp;\n    case ValType::Object:\n        return (String)sObjectTp;\n    case ValType::Function:\n        return (String)sFunctionTp;\n    default:\n        oops(2);\n        return 0;\n    }\n}\n\n// Maybe in future we will want separate print methods; for now ignore\nvoid anyPrint(TValue v) {\n    if (valType(v) == ValType::Object) {\n        if (isRefCounted(v)) {\n            auto o = (RefObject *)v;\n            auto vt = getVTable(o);\n            auto meth = ((RefObjectMethod)vt->methods[1]);\n            if ((void *)meth == (void *)&anyPrint)\n                DMESG(\"[RefObject vt=%p cl=%d sz=%d]\", o->vtable, vt->classNo, vt->numbytes);\n            else\n                meth(o);\n        } else {\n            DMESG(\"[Native %p]\", v);\n        }\n    } else {\n#ifndef X86_64\n        String s = numops::toString(v);\n        DMESG(\"[%s %p = %s]\", pxt::typeOf(v)->getUTF8Data(), v, s->getUTF8Data());\n        decr((TValue)s);\n#endif\n    }\n}\n\nstatic void dtorDoNothing() {}\n\n#define PRIM_VTABLE(name, objectTp, tp, szexpr)                                                    \\\n    static uint32_t name##_size(tp *p) { return TOWORDS(sizeof(tp) + szexpr); }                    \\\n    DEF_VTABLE(name##_vt, tp, objectTp, (void *)&dtorDoNothing, (void *)&anyPrint, 0,              \\\n               (void *)&name##_size)\n\n#define NOOP ((void)0)\n\n#define STRING_VT(name, fix, scan, gcsize, data, utfsize, length, dataAt)                          \\\n    static uint32_t name##_gcsize(BoxedString *p) { return TOWORDS(sizeof(void *) + (gcsize)); }   \\\n    static void name##_gcscan(BoxedString *p) { scan; }                                            \\\n    static const char *name##_data(BoxedString *p) {                                               \\\n        fix;                                                                                       \\\n        return data;                                                                               \\\n    }                                                                                              \\\n    static uint32_t name##_utfsize(BoxedString *p) {                                               \\\n        fix;                                                                                       \\\n        return utfsize;                                                                            \\\n    }                                                                                              \\\n    static uint32_t name##_length(BoxedString *p) {                                                \\\n        fix;                                                                                       \\\n        return length;                                                                             \\\n    }                                                                                              \\\n    static const char *name##_dataAt(BoxedString *p, uint32_t idx) {                               \\\n        fix;                                                                                       \\\n        return dataAt;                                                                             \\\n    }                                                                                              \\\n    DEF_VTABLE(name##_vt, BoxedString, ValType::String, (void *)&dtorDoNothing, (void *)&anyPrint, \\\n               (void *)&name##_gcscan, (void *)&name##_gcsize, (void *)&name##_data,               \\\n               (void *)&name##_utfsize, (void *)&name##_length, (void *)&name##_dataAt)\n\nvoid gcMarkArray(void *data);\nvoid gcScan(TValue v);\n\n#if PXT_UTF8\nstatic const char *skipLookup(BoxedString *p, uint32_t idx, int packed) {\n    if (idx > p->skip.length)\n        return NULL;\n    auto ent = idx / PXT_STRING_SKIP_INCR;\n    auto data = packed ? PXT_SKIP_DATA_PACK(p) : PXT_SKIP_DATA_IND(p);\n    auto size = p->skip.size;\n    if (ent) {\n        auto off = packed ? p->skip_pack.list[ent - 1] : p->skip.list[ent - 1];\n        data += off;\n        size -= off;\n        idx &= PXT_STRING_SKIP_INCR - 1;\n    }\n    return utf8Skip(data, size, idx);\n}\n\nextern LLSegment workQueue;\n\nstatic uint32_t fixSize(BoxedString *p, uint32_t *len) {\n    uint32_t tlen = 0;\n    uint32_t sz = 0;\n    if (workQueue.getLength())\n        oops(81);\n    workQueue.push((TValue)p);\n    while (workQueue.getLength()) {\n        p = (BoxedString *)workQueue.pop();\n        if (IS_CONS(p)) {\n            workQueue.push((TValue)p->cons.right);\n            workQueue.push((TValue)p->cons.left);\n        } else {\n            tlen += p->getLength();\n            sz += p->getUTF8Size();\n        }\n    }\n    *len = tlen;\n    return sz;\n}\n\nstatic void fixCopy(BoxedString *p, char *dst) {\n    if (workQueue.getLength())\n        oops(81);\n\n    workQueue.push((TValue)p);\n    while (workQueue.getLength()) {\n        p = (BoxedString *)workQueue.pop();\n        if (IS_CONS(p)) {\n            workQueue.push((TValue)p->cons.right);\n            workQueue.push((TValue)p->cons.left);\n        } else {\n            auto sz = p->getUTF8Size();\n            memcpy(dst, p->getUTF8Data(), sz);\n            dst += sz;\n        }\n    }\n}\n\n// switches CONS representation into skip list representation\n// does not switch representation of CONS' children\nstatic void fixCons(BoxedString *r) {\n    uint32_t length = 0;\n    auto sz = fixSize(r, &length);\n    auto numSkips = length / PXT_STRING_SKIP_INCR;\n    // allocate first, while [r] still holds references to its children\n    // because allocation might trigger GC\n    auto data = (uint16_t *)gcAllocateArray(numSkips * 2 + sz + 1);\n    // copy, while [r] is still cons\n    fixCopy(r, (char *)(data + numSkips));\n    // now, set [r] up properly\n    r->vtable = &string_skiplist16_vt;\n    r->skip.size = sz;\n    r->skip.length = length;\n    r->skip.list = data;\n    setupSkipList(r, NULL, 0);\n}\n#endif\n\nSTRING_VT(string_inline_ascii, NOOP, NOOP, 2 + p->ascii.length + 1, p->ascii.data, p->ascii.length,\n          p->ascii.length, idx <= p->ascii.length ? p->ascii.data + idx : NULL)\n#if PXT_UTF8\nSTRING_VT(string_inline_utf8, NOOP, NOOP, 2 + p->utf8.size + 1, p->utf8.data, p->utf8.size,\n          utf8Len(p->utf8.data, p->utf8.size), utf8Skip(p->utf8.data, p->utf8.size, idx))\nSTRING_VT(string_skiplist16, NOOP, if (p->skip.list) gcMarkArray(p->skip.list), 2 * sizeof(void *),\n          PXT_SKIP_DATA_IND(p), p->skip.size, p->skip.length, skipLookup(p, idx, 0))\nSTRING_VT(string_skiplist16_packed, NOOP, NOOP,\n          2 + 2 + PXT_NUM_SKIP_ENTRIES(p) * 2 + p->skip.size + 1, PXT_SKIP_DATA_PACK(p),\n          p->skip.size, p->skip.length, skipLookup(p, idx, 1))\nSTRING_VT(string_cons, fixCons(p), (gcScan((TValue)p->cons.left), gcScan((TValue)p->cons.right)),\n          2 * sizeof(void *), PXT_SKIP_DATA_IND(p), p->skip.size, p->skip.length,\n          skipLookup(p, idx, 0))\n#endif\n\nPRIM_VTABLE(number, ValType::Number, BoxedNumber, 0)\nPRIM_VTABLE(buffer, ValType::Object, BoxedBuffer, p->length)\n// PRIM_VTABLE(action, ValType::Function, RefAction, )\n\nvoid failedCast(TValue v, void *addr) {\n    DMESG(\"failed type check for %p @%p\", v, addr);\n    auto vt = getAnyVTable(v);\n    if (vt) {\n        DMESG(\"VT %p - objtype %d classNo %d\", vt, vt->objectType, vt->classNo);\n    }\n\n    int code;\n    if (v == TAG_NULL)\n        code = PANIC_CAST_FROM_NULL;\n    else\n        code = PANIC_CAST_FIRST + (int)valType(v);\n    soft_panic(code);\n}\n\nvoid missingProperty(TValue v) {\n    DMESG(\"missing property on %p\", v);\n    soft_panic(PANIC_MISSING_PROPERTY);\n}\n\n#ifdef PXT_PROFILE\nstruct PerfCounter *perfCounters;\n\nstruct PerfCounterInfo {\n    uint32_t numPerfCounters;\n    char *perfCounterNames[0];\n};\n\n#define PERF_INFO ((PerfCounterInfo *)(((uintptr_t *)bytecode)[13]))\n\nvoid initPerfCounters() {\n    auto n = PERF_INFO->numPerfCounters;\n    perfCounters = new PerfCounter[n];\n    memset(perfCounters, 0, n * sizeof(PerfCounter));\n}\n\nvoid dumpPerfCounters() {\n    auto info = PERF_INFO;\n    DMESG(\"calls,us,name\");\n    for (uint32_t i = 0; i < info->numPerfCounters; ++i) {\n        auto c = &perfCounters[i];\n        DMESG(\"%d,%d,%s\", c->numstops, c->value, info->perfCounterNames[i]);\n    }\n}\n\nvoid startPerfCounter(PerfCounters n) {\n    if (!perfCounters)\n        return;\n    auto c = &perfCounters[(uint32_t)n];\n    if (c->start)\n        oops(50);\n    c->start = PERF_NOW();\n}\n\nvoid stopPerfCounter(PerfCounters n) {\n    if (!perfCounters)\n        return;\n    auto c = &perfCounters[(uint32_t)n];\n    if (!c->start)\n        oops(51);\n    c->value += PERF_NOW() - c->start;\n    c->start = 0;\n    c->numstops++;\n}\n#endif\n\n// Exceptions\n\n#ifndef PXT_EXN_CTX\n#define PXT_EXN_CTX() getThreadContext()\n#endif\n\ntypedef void (*RestoreStateType)(TryFrame *, ThreadContext *);\n#ifndef pxt_restore_exception_state\n#define pxt_restore_exception_state ((RestoreStateType)(((uintptr_t *)bytecode)[14]))\n#endif\n\n//%\nTryFrame *beginTry() {\n    auto ctx = PXT_EXN_CTX();\n    auto frame = (TryFrame *)app_alloc(sizeof(TryFrame));\n    frame->parent = ctx->tryFrame;\n    ctx->tryFrame = frame;\n    return frame;\n}\n\n//% expose\nvoid endTry() {\n    auto ctx = PXT_EXN_CTX();\n    auto f = ctx->tryFrame;\n    if (!f)\n        oops(51);\n    ctx->tryFrame = f->parent;\n    app_free(f);\n}\n\n//% expose\nvoid throwValue(TValue v) {\n    auto ctx = PXT_EXN_CTX();\n    auto f = ctx->tryFrame;\n    if (!f) {\n        DMESG(\"unhandled exception, value:\");\n        anyPrint(v);\n        target_panic(PANIC_UNHANDLED_EXCEPTION);\n    }\n    ctx->tryFrame = f->parent;\n    TryFrame copy = *f;\n    app_free(f);\n    ctx->thrownValue = v;\n    pxt_restore_exception_state(&copy, ctx);\n}\n\n//% expose\nTValue getThrownValue() {\n    auto ctx = PXT_EXN_CTX();\n    auto v = ctx->thrownValue;\n    ctx->thrownValue = TAG_NON_VALUE;\n    if (v == TAG_NON_VALUE)\n        oops(51);\n    return v;\n}\n\n//% expose\nvoid endFinally() {\n    auto ctx = PXT_EXN_CTX();\n    if (ctx->thrownValue == TAG_NON_VALUE)\n        return;\n    throwValue(getThrownValue());\n}\n\n// https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\nuint32_t hash_fnv1(const void *data, unsigned len) {\n    const uint8_t *d = (const uint8_t *)data;\n    uint32_t h = 0x811c9dc5;\n    while (len--)\n        h = (h * 0x1000193) ^ *d++;\n    return h;\n}\n\n// redefined in melody.cpp\n__attribute__((weak)) int redirectSamples(int16_t *dst, int numsamples, int samplerate) {\n    return 0;\n}\n\n} // namespace pxt\n",
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum NumberFormat {\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    }\n\n\n    declare const enum PerfCounters {\n    GC = 0,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "eventcontext.ts": "namespace control {\n    /**\n     * Run code when a registered event happens.\n     * @param id the event compoent id\n     * @param value the event value to match\n     */\n    //% weight=20 blockGap=8 blockId=\"control_on_event\" block=\"on event|from %src|with value %value\"\n    //% blockExternalInputs=1\n    //% help=\"control/on-event\"\n    export function onEvent(src: number, value: number, handler: () => void, flags = 16) { // EVENT_LISTENER_DEFAULT_FLAGS\n        const ctx = control.eventContext();\n        if (!ctx)\n            control.internalOnEvent(src, value, handler, flags);\n        else\n            ctx.registerHandler(src, value, handler, flags);\n    }\n\n    export class FrameCallback {\n        order: number\n        handler: () => void\n    }\n\n    class EventHandler {\n        constructor(\n            public src: number,\n            public value: number,\n            public handler: () => void,\n            public flags: number\n        ) { }\n\n        register() {\n            control.internalOnEvent(this.src, this.value, () => {\n                if (this.handler) this.handler();\n            }, this.flags)\n        }\n\n        unregister() {\n            control.internalOnEvent(this.src, this.value, doNothing, this.flags);\n        }\n    }\n\n    function doNothing() { }\n\n\n\n    export class EventContext {\n        private handlers: EventHandler[];\n        private frameCallbacks: FrameCallback[];\n        private frameWorker: number;\n        private framesInSample: number;\n        private timeInSample: number;\n        public deltaTimeMillis: number;\n        private prevTimeMillis: number;\n        private idleCallbacks: (() => void)[];\n\n        static lastStats: string;\n        static onStats: (stats: string) => void;\n\n        constructor() {\n            this.handlers = [];\n            this.framesInSample = 0;\n            this.timeInSample = 0;\n            this.deltaTimeMillis = 0;\n            this.frameWorker = 0;\n            this.idleCallbacks = undefined;\n            if (!EventContext.lastStats) {\n                EventContext.lastStats = \"\";\n            }\n        }\n\n        get deltaTime() {\n            return this.deltaTimeMillis / 1000;\n        }\n\n        private runCallbacks() {\n            control.enablePerfCounter(\"all frame callbacks\")\n\n            let loopStart = control.millis()\n            this.deltaTimeMillis = loopStart - this.prevTimeMillis;\n            this.prevTimeMillis = loopStart;\n            for (let f of this.frameCallbacks) {\n                f.handler()\n            }\n            let runtime = control.millis() - loopStart\n            this.timeInSample += runtime\n            this.framesInSample++\n            if (this.timeInSample > 1000 || this.framesInSample > 30) {\n                const fps = this.framesInSample / (this.timeInSample / 1000);\n                EventContext.lastStats = `fps:${Math.round(fps)}`;\n                if (fps < 99)\n                    EventContext.lastStats += \".\" + (Math.round(fps * 10) % 10)\n                if (control.ramSize() > 2000000 && control.profilingEnabled()) {\n                    control.dmesg(`${(fps * 100) | 0}/100 fps - ${this.framesInSample} frames`)\n                    control.gc()\n                    control.dmesgPerfCounters()\n                }\n                this.timeInSample = 0\n                this.framesInSample = 0\n            }\n            let delay = Math.max(1, 20 - runtime)\n\n            return delay\n        }\n\n        private runningCallbacks: boolean;\n        private registerFrameCallbacks() {\n            if (!this.frameCallbacks) return;\n\n            const worker = this.frameWorker;\n            control.runInParallel(() => {\n                if (this.runningCallbacks) {\n                    // this context is still running in a different fiber;\n                    // delay until the other fiber doing so has ceased.\n                    pauseUntil(() => !this.runningCallbacks);\n                }\n                this.runningCallbacks = true;\n\n                this.framesInSample = 0;\n                this.timeInSample = 0;\n                this.deltaTimeMillis = 0;\n                this.prevTimeMillis = control.millis();\n\n                while (worker == this.frameWorker) {\n                    let delay = this.runCallbacks()\n                    pause(delay)\n                }\n\n                this.runningCallbacks = false;\n            })\n        }\n\n        register() {\n            for (const h of this.handlers)\n                h.register();\n            this.registerFrameCallbacks();\n        }\n\n        unregister() {\n            for (const h of this.handlers)\n                h.unregister();\n            this.frameWorker++;\n        }\n\n        registerFrameHandler(order: number, handler: () => void): FrameCallback {\n            if (!this.frameCallbacks) {\n                this.frameCallbacks = [];\n                this.registerFrameCallbacks();\n            }\n\n            const fn = new FrameCallback()\n            fn.order = order\n            fn.handler = handler\n            for (let i = 0; i < this.frameCallbacks.length; ++i) {\n                if (this.frameCallbacks[i].order > order) {\n                    this.frameCallbacks.insertAt(i, fn)\n                    return fn;\n                }\n            }\n            this.frameCallbacks.push(fn);\n            return fn;\n        }\n\n        unregisterFrameHandler(fn: FrameCallback) {\n            if (!fn || !this.frameCallbacks) return;\n            const i = this.frameCallbacks.indexOf(fn);\n            if (i > -1)\n                this.frameCallbacks.splice(i, 1);\n        }\n\n        registerHandler(src: number, value: number, handler: () => void, flags: number) {\n            // already there?\n            for (const h of this.handlers) {\n                if (h.src == src && h.value == value) {\n                    h.flags = flags;\n                    h.handler = handler;\n                    return;\n                }\n            }\n            // register and push\n            const hn = new EventHandler(src, value, handler, flags);\n            this.handlers.push(hn);\n            hn.register();\n        }\n\n        addIdleHandler(handler: () => void) {\n            if (!this.idleCallbacks) {\n                this.idleCallbacks = [];\n                this.registerHandler(15/*DAL.DEVICE_ID_SCHEDULER*/, 2/*DAL.DEVICE_SCHEDULER_EVT_IDLE*/, () => this.runIdleHandler(), 16);\n            }\n            this.idleCallbacks.push(handler);\n        }\n\n        removeIdleHandler(handler: () => void) {\n            if (handler && this.idleCallbacks)\n                this.idleCallbacks.removeElement(handler);\n        }\n\n        private runIdleHandler() {\n            if (this.idleCallbacks) {\n                const ics = this.idleCallbacks.slice(0);\n                ics.forEach(ic => ic());\n            }\n        }\n    }\n    let eventContexts: EventContext[];\n\n    /**\n     * Gets the current event context if any\n     */\n    export function eventContext(): EventContext {\n        return eventContexts ? eventContexts[eventContexts.length - 1] : undefined;\n    }\n\n    /**\n     * Pushes a new event context and clears all handlers\n     */\n    export function pushEventContext(): EventContext {\n        if (!eventContexts)\n            eventContexts = [];\n\n        // unregister previous context\n        const ctx = eventContext();\n        if (ctx) ctx.unregister();\n        // register again\n        const n = new EventContext();\n        eventContexts.push(n);\n        return n;\n    }\n\n    /**\n     * Pops the current event context and restore handlers if any previous context\n     */\n    export function popEventContext() {\n        if (!eventContexts) return;\n\n        // clear current context\n        const ctx = eventContexts.pop();\n        if (!ctx) return;\n        ctx.unregister();\n\n        // register old context again\n        const context = eventContexts[eventContexts.length - 1];\n        if (context)\n            context.register();\n        else\n            eventContexts = undefined;\n    }\n\n    let _idleCallbacks: (() => void)[];\n    /**\n     * Registers a function to run when the device is idling\n     * @param handler\n    */\n    export function onIdle(handler: () => void) {\n        if (!handler) return;\n\n        const ctx = eventContext();\n        if (ctx) ctx.addIdleHandler(handler);\n        else {\n            if (!_idleCallbacks) {\n                _idleCallbacks = [];\n                control.runInBackground(function () {\n                    while (_idleCallbacks) {\n                        _idleCallbacks.slice(0).forEach(cb => cb());\n                        pause(20);\n                    }\n                })\n                /*\n                control.internalOnEvent(\n                    15. // DAL.DEVICE_ID_SCHEDULER\n                    2, // DAL.DEVICE_SCHEDULER_EVT_IDLE\n                    function() {\n                        pins.LED.digitalWrite(on = !on);\n                        if (_idleCallbacks)\n                            _idleCallbacks.slice(0).forEach(cb => cb());\n                    }, 192); // MESSAGE_BUS_LISTENER_IMMEDIATE\n                */\n            }\n            _idleCallbacks.push(handler);\n        }\n    }\n\n    export function removeIdleHandler(handler: () => void) {\n        if (!handler) return;\n        const ctx = eventContext();\n        if (ctx) ctx.removeIdleHandler(handler);\n        else if (_idleCallbacks) _idleCallbacks.removeElement(handler);\n    }\n}",
            "fixed.ts": "interface Fx8 {\n    _dummyFx8: string;\n}\n\nfunction Fx8(v: number) {\n    return ((v * 256) | 0) as any as Fx8\n}\n\nnamespace Fx {\n    export const zeroFx8 = 0 as any as Fx8\n    export const oneHalfFx8 = 128 as any as Fx8\n    export const oneFx8 = 256 as any as Fx8\n    export const twoFx8 = 512 as any as Fx8\n\n    export function neg(a: Fx8) {\n        return (-(a as any as number)) as any as Fx8\n    }\n    export function toIntShifted(a: Fx8, n: number) {\n        return (a as any as number) >> (n + 8)\n    }\n    export function add(a: Fx8, b: Fx8) {\n        return ((a as any as number) + (b as any as number)) as any as Fx8\n    }\n    export function iadd(a: number, b: Fx8) {\n        return ((a << 8) + (b as any as number)) as any as Fx8\n    }\n    export function sub(a: Fx8, b: Fx8) {\n        return ((a as any as number) - (b as any as number)) as any as Fx8\n    }\n    export function mul(a: Fx8, b: Fx8) {\n        return (Math.imul((a as any as number), (b as any as number)) >> 8) as any as Fx8\n    }\n    export function imul(a: Fx8, b: number) {\n        return Math.imul((a as any as number), (b as any as number)) as any as Fx8\n    }\n    export function div(a: Fx8, b: Fx8) {\n        return Math.idiv((a as any as number) << 8, b as any as number) as any as Fx8\n    }\n    export function idiv(a: Fx8, b: number) {\n        return Math.idiv((a as any as number), b) as any as Fx8\n    }\n    export function compare(a: Fx8, b: Fx8) {\n        return (a as any as number) - (b as any as number)\n    }\n    export function abs(a: Fx8) {\n        if ((a as any as number) < 0)\n            return (-(a as any as number)) as any as Fx8\n        else\n            return a\n    }\n    export function min(a: Fx8, b: Fx8) {\n        if (a < b)\n            return a\n        else\n            return b\n    }\n    export function max(a: Fx8, b: Fx8) {\n        if (a > b)\n            return a\n        else\n            return b\n    }\n    export function leftShift(a: Fx8, n: number) {\n        return (a as any as number << n) as any as Fx8\n    }\n    export function rightShift(a: Fx8, n: number) {\n        return (a as any as number >> n) as any as Fx8\n    }\n    export function toInt(v: Fx8) {\n        return ((v as any as number) + 128) >> 8\n    }\n    export function toFloat(v: Fx8) {\n        return (v as any as number) / 256\n    }\n}",
            "forever.ts": "/**\n * Repeats the code forever in the background. On each iteration, allows other codes to run.\n * @param body code to execute\n */\n//% help=loops/forever weight=100 afterOnStart=true blockNamespace=\"loops\"\n//% blockId=forever block=\"forever\" blockAllowMultiple=1\nfunction forever(a: () => void): void {\n    loops.forever(a);\n}\n\n// micro:bit compatibility\n// these functions allow some level of reuse\n// between micro:bit and other maker-style editors\nnamespace basic {\n    export function forever(a: () => void) {\n        loops.forever(a);\n    }\n}",
            "gc.cpp": "#include \"pxtbase.h\"\n\n#ifndef GC_BLOCK_SIZE\n#define GC_BLOCK_SIZE (1024 * 16)\n#endif\n\n#ifndef GC_MAX_ALLOC_SIZE\n#define GC_MAX_ALLOC_SIZE (GC_BLOCK_SIZE - 16)\n#endif\n\n#ifndef GC_ALLOC_BLOCK\n#define GC_ALLOC_BLOCK xmalloc\n#endif\n\n#ifdef PXT64\n#define HIGH_SHIFT 48\n#define BYTES_TO_WORDS(x) ((x) >> 3)\n#define WORDS_TO_BYTES(x) ((x) << 3)\n#define ALIGN_TO_WORD(x) (((x) + 7) & (~7ULL))\n#define VAR_BLOCK_WORDS(vt) ((uint32_t)(uint64_t)(vt) >> 2)\n#else\n#define HIGH_SHIFT 28\n#define BYTES_TO_WORDS(x) ((x) >> 2)\n#define WORDS_TO_BYTES(x) ((x) << 2)\n#define ALIGN_TO_WORD(x) (((x) + 3) & (~3U))\n#define VAR_BLOCK_WORDS(vt) (((uint32_t)(vt) << 4) >> (4 + 2))\n#endif\n\n#define FREE_MASK (1ULL << (HIGH_SHIFT + 3))\n#define ARRAY_MASK (1ULL << (HIGH_SHIFT + 2))\n#define PERMA_MASK (1ULL << (HIGH_SHIFT + 1))\n#define MARKED_MASK 0x1\n#define ANY_MARKED_MASK 0x3\n\n// the bit operations should be faster than loading large constants\n#define IS_FREE(vt) ((uintptr_t)(vt) >> (HIGH_SHIFT + 3))\n#define IS_ARRAY(vt) (((uintptr_t)(vt) >> (HIGH_SHIFT + 2)) & 1)\n#define IS_PERMA(vt) (((uintptr_t)(vt) >> (HIGH_SHIFT + 1)) & 1)\n#define IS_VAR_BLOCK(vt) ((uintptr_t)(vt) >> (HIGH_SHIFT + 2))\n#define IS_MARKED(vt) ((uintptr_t)(vt)&MARKED_MASK)\n#define IS_LIVE(vt) (IS_MARKED(vt) || (((uintptr_t)(vt) >> (HIGH_SHIFT)) == 0x6))\n\n//#define PXT_GC_DEBUG 1\n#ifndef PXT_GC_CHECKS\n#define PXT_GC_CHECKS 1\n#endif\n//#define PXT_GC_STRESS 1\n\n//#define PXT_GC_CHECKS 1\n\n#define MARK(v)                                                                                    \\\n    do {                                                                                           \\\n        GC_CHECK(inGCArea(v), 42);                                                                 \\\n        *(uintptr_t *)(v) |= MARKED_MASK;                                                          \\\n    } while (0)\n\n#ifdef PXT_GC_DEBUG\n#define LOG DMESG\n#define VLOG DMESG\n#define VVLOG DMESG\n#else\n#define LOG NOLOG\n#define VLOG NOLOG\n#define VVLOG NOLOG\n#endif\n\n#ifdef PXT_GC_CHECKS\n#define GC_CHECK(cond, code)                                                                       \\\n    if (!(cond))                                                                                   \\\n    oops(code)\n#else\n#define GC_CHECK(cond, code) ((void)0)\n#endif\n\nnamespace pxt {\n\n// keep in sync with base/control.ts, function gcStats()\nstruct GCStats {\n    uint32_t numGC;\n    uint32_t numBlocks;\n    uint32_t totalBytes;\n    uint32_t lastFreeBytes;\n    uint32_t lastMaxBlockBytes;\n    uint32_t minFreeBytes;\n};\n\nstatic GCStats gcStats;\n\n//% expose\nBuffer getGCStats() {\n    return mkBuffer((uint8_t *)&gcStats, sizeof(gcStats));\n}\n\n//%\nvoid popThreadContext(ThreadContext *ctx);\n//%\nThreadContext *pushThreadContext(void *sp, void *endSP);\n\nunsigned RefRecord_gcsize(RefRecord *r) {\n    VTable *tbl = getVTable(r);\n    return BYTES_TO_WORDS(tbl->numbytes);\n}\n\n#ifdef PXT_GC_THREAD_LIST\nThreadContext *threadContexts;\n#endif\n\n#define IN_GC_ALLOC 1\n#define IN_GC_COLLECT 2\n#define IN_GC_FREEZE 4\n#define IN_GC_PREALLOC 8\n\n#ifndef PXT_VM\nstatic TValue *tempRoot;\nstatic uint8_t tempRootLen;\n#endif\n\nuint8_t inGC;\n\nvoid popThreadContext(ThreadContext *ctx) {\n#ifndef PXT_VM\n    VLOG(\"pop: %p\", ctx);\n\n    if (!ctx)\n        return;\n\n    auto n = ctx->stack.next;\n    if (n) {\n        VLOG(\"seg %p\", n);\n        ctx->stack.top = n->top;\n        ctx->stack.bottom = n->bottom;\n        ctx->stack.next = n->next;\n        app_free(n);\n    } else {\n#ifdef PXT_GC_THREAD_LIST\n        if (ctx->next)\n            ctx->next->prev = ctx->prev;\n        if (ctx->prev)\n            ctx->prev->next = ctx->next;\n        else {\n            if (threadContexts != ctx)\n                oops(41);\n            threadContexts = ctx->next;\n            if (threadContexts)\n                threadContexts->prev = NULL;\n        }\n#endif\n        app_free(ctx);\n        setThreadContext(NULL);\n    }\n#endif\n}\n\n#define ALLOC(tp) (tp *)app_alloc(sizeof(tp))\n\nThreadContext *pushThreadContext(void *sp, void *endSP) {\n#ifdef PXT_VM\n    return NULL;\n#else\n    if (PXT_IN_ISR())\n        target_panic(PANIC_CALLED_FROM_ISR);\n\n    auto curr = getThreadContext();\n    tempRoot = (TValue *)endSP;\n    tempRootLen = (uintptr_t *)sp - (uintptr_t *)endSP;\n    if (curr) {\n#ifdef PXT_GC_THREAD_LIST\n#ifdef PXT_GC_DEBUG\n        auto ok = false;\n        for (auto p = threadContexts; p; p = p->next)\n            if (p == curr) {\n                ok = true;\n                break;\n            }\n        if (!ok)\n            oops(49);\n#endif\n#endif\n        auto seg = ALLOC(StackSegment);\n        VLOG(\"stack %p / %p\", seg, curr);\n        seg->top = curr->stack.top;\n        seg->bottom = curr->stack.bottom;\n        seg->next = curr->stack.next;\n        curr->stack.next = seg;\n    } else {\n        curr = ALLOC(ThreadContext);\n        LOG(\"push: %p\", curr);\n        curr->globals = globals;\n        curr->stack.next = NULL;\n        curr->thrownValue = TAG_NON_VALUE;\n        curr->tryFrame = NULL;\n\n#ifdef PXT_GC_THREAD_LIST\n        curr->next = threadContexts;\n        curr->prev = NULL;\n        if (curr->next)\n            curr->next->prev = curr;\n        threadContexts = curr;\n#endif\n        setThreadContext(curr);\n    }\n    tempRootLen = 0;\n    curr->stack.bottom = sp;\n    curr->stack.top = NULL;\n    return curr;\n#endif\n}\n\nclass RefBlock : public RefObject {\n  public:\n    RefBlock *nextFree;\n};\n\nstruct GCBlock {\n    GCBlock *next;\n    uint32_t blockSize;\n    RefObject data[0];\n};\n\nstruct PendingArray {\n    PendingArray *next;\n    TValue *data;\n    unsigned len;\n};\n\n#define PENDING_ARRAY_THR 100\n\nstatic PendingArray *pendingArrays;\nstatic LLSegment gcRoots;\nLLSegment workQueue; // (ab)used by consString making\nstatic GCBlock *firstBlock;\nstatic RefBlock *firstFree;\nstatic uint8_t *midPtr;\n\nstatic bool inGCArea(void *ptr) {\n    for (auto block = firstBlock; block; block = block->next) {\n        if ((void *)block->data <= ptr && ptr < (void *)((uint8_t *)block->data + block->blockSize))\n            return true;\n    }\n    return false;\n}\n\n#define NO_MAGIC(vt) ((VTable *)vt)->magic != VTABLE_MAGIC\n#define VT(p) (*(uintptr_t *)(p))\n#define SKIP_PROCESSING(p)                                                                         \\\n    (isReadOnly(p) || (VT(p) & (ANY_MARKED_MASK | ARRAY_MASK)) || NO_MAGIC(VT(p)))\n\nvoid gcMarkArray(void *data) {\n    auto segBl = (uintptr_t *)data - 1;\n    GC_CHECK(!IS_MARKED(VT(segBl)), 47);\n    MARK(segBl);\n}\n\nvoid gcScan(TValue v) {\n    if (SKIP_PROCESSING(v))\n        return;\n    MARK(v);\n    workQueue.push(v);\n}\n\nvoid gcScanMany(TValue *data, unsigned len) {\n    // VLOG(\"scan: %p %d\", data, len);\n    for (unsigned i = 0; i < len; ++i) {\n        auto v = data[i];\n        // VLOG(\"psh: %p %d %d\", v, isReadOnly(v), (*(uint32_t *)v & 1));\n        if (SKIP_PROCESSING(v))\n            continue;\n        MARK(v);\n        workQueue.push(v);\n        if (workQueue.getLength() > PENDING_ARRAY_THR) {\n            i++;\n            // store rest of the work for later, when we have cleared the queue\n            auto pa = (PendingArray *)xmalloc(sizeof(PendingArray));\n            pa->next = pendingArrays;\n            pa->data = data + i;\n            pa->len = len - i;\n            pendingArrays = pa;\n            break;\n        }\n    }\n}\n\nvoid gcScanSegment(Segment &seg) {\n    auto data = seg.getData();\n    if (!data)\n        return;\n    VVLOG(\"seg %p %d\", data, seg.getLength());\n    gcMarkArray(data);\n    gcScanMany(data, seg.getLength());\n}\n\n#define getScanMethod(vt) ((RefObjectMethod)(((VTable *)(vt))->methods[2]))\n#define getSizeMethod(vt) ((RefObjectSizeMethod)(((VTable *)(vt))->methods[3]))\n\nvoid gcProcess(TValue v) {\n    if (SKIP_PROCESSING(v))\n        return;\n    VVLOG(\"gcProcess: %p\", v);\n    MARK(v);\n    auto scan = getScanMethod(VT(v) & ~ANY_MARKED_MASK);\n    if (scan)\n        scan((RefObject *)v);\n    for (;;) {\n        while (workQueue.getLength()) {\n            auto curr = (RefObject *)workQueue.pop();\n            VVLOG(\" - %p\", curr);\n            scan = getScanMethod(curr->vt() & ~ANY_MARKED_MASK);\n            if (scan)\n                scan(curr);\n        }\n        if (pendingArrays) {\n            auto pa = pendingArrays;\n            pendingArrays = pa->next;\n            auto data = pa->data;\n            auto len = pa->len;\n            xfree(pa);\n            gcScanMany(data, len);\n        } else {\n            break;\n        }\n    }\n}\n\nstatic void mark(int flags) {\n#ifdef PXT_GC_DEBUG\n    flags |= 2;\n#endif\n    auto data = gcRoots.getData();\n    auto len = gcRoots.getLength();\n    if (flags & 2) {\n        DMESG(\"--MARK\");\n        DMESG(\"RP:%p/%d\", data, len);\n    }\n    for (unsigned i = 0; i < len; ++i) {\n        auto d = data[i];\n        if ((uintptr_t)d & 1) {\n            d = *(TValue *)((uintptr_t)d & ~1);\n        }\n        gcProcess(d);\n    }\n\n#ifdef PXT_GC_THREAD_LIST\n    for (auto ctx = threadContexts; ctx; ctx = ctx->next) {\n        gcProcess(ctx->thrownValue);\n        for (auto seg = &ctx->stack; seg; seg = seg->next) {\n            auto ptr = (TValue *)threadAddressFor(ctx, seg->top);\n            auto end = (TValue *)threadAddressFor(ctx, seg->bottom);\n            VLOG(\"mark: %p - %p\", ptr, end);\n            while (ptr < end) {\n                gcProcess(*ptr++);\n            }\n        }\n    }\n#else\n    gcProcessStacks(flags);\n#endif\n\n    if (globals) {\n#ifdef PXT_VM\n        auto nonPtrs = vmImg->infoHeader->nonPointerGlobals;\n#else\n        auto nonPtrs = bytecode[21];\n#endif\n        len = getNumGlobals() - nonPtrs;\n        data = globals + nonPtrs;\n        if (flags & 2)\n            DMESG(\"RG:%p/%d\", data, len);\n        VLOG(\"globals: %p %d\", data, len);\n        for (unsigned i = 0; i < len; ++i) {\n            gcProcess(*data++);\n        }\n    }\n\n#ifndef PXT_VM\n    data = tempRoot;\n    len = tempRootLen;\n    for (unsigned i = 0; i < len; ++i) {\n        gcProcess(*data++);\n    }\n#endif\n}\n\nstatic uint32_t getObjectSize(RefObject *o) {\n    auto vt = o->vt() & ~ANY_MARKED_MASK;\n    uint32_t r;\n    GC_CHECK(vt != 0, 49);\n    if (IS_VAR_BLOCK(vt)) {\n        r = VAR_BLOCK_WORDS(vt);\n    } else {\n        auto sz = getSizeMethod(vt);\n        // GC_CHECK(0x2000 <= (intptr_t)sz && (intptr_t)sz <= 0x100000, 47);\n        r = sz(o);\n    }\n    GC_CHECK(1 <= r && (r <= BYTES_TO_WORDS(GC_MAX_ALLOC_SIZE) || IS_FREE(vt)), 41);\n    return r;\n}\n\nstatic void setupFreeBlock(GCBlock *curr) {\n    gcStats.numBlocks++;\n    gcStats.totalBytes += curr->blockSize;\n    curr->data[0].setVT(FREE_MASK | (TOWORDS(curr->blockSize) << 2));\n    ((RefBlock *)curr->data)[0].nextFree = firstFree;\n    firstFree = (RefBlock *)curr->data;\n    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;\n}\n\nstatic void linkFreeBlock(GCBlock *curr) {\n    // blocks need to be sorted by address for midPtr to work\n    if (!firstBlock || curr < firstBlock) {\n        curr->next = firstBlock;\n        firstBlock = curr;\n    } else {\n        for (auto p = firstBlock; p; p = p->next) {\n            if (!p->next || curr < p->next) {\n                curr->next = p->next;\n                p->next = curr;\n                break;\n            }\n        }\n    }\n}\n\nvoid gcPreAllocateBlock(uint32_t sz) {\n    auto curr = (GCBlock *)GC_ALLOC_BLOCK(sz);\n    curr->blockSize = sz - sizeof(GCBlock);\n    LOG(\"GC pre-alloc: %p\", curr);\n    GC_CHECK((curr->blockSize & 3) == 0, 40);\n    setupFreeBlock(curr);\n    linkFreeBlock(curr);\n}\n\nstatic GCBlock *allocateBlockCore() {\n    int sz = GC_BLOCK_SIZE;\n    void *dummy = NULL;\n#ifdef GC_GET_HEAP_SIZE\n    if (firstBlock) {\n#ifdef GC_STACK_BASE\n        if (!firstBlock->next) {\n            int memSize = getConfig(CFG_RAM_BYTES, 0);\n            int codalEnd = GC_STACK_BASE;\n            // round up to 1k - there is sometimes a few bytes below the stack\n            codalEnd = (codalEnd + 1024) & ~1023;\n            int codalSize = codalEnd & 0xffffff;\n            sz = memSize - codalSize - 4;\n            if (sz > 0) {\n                auto curr = (GCBlock *)codalEnd;\n                curr->blockSize = sz - sizeof(GCBlock);\n                return curr;\n            }\n        }\n#endif\n        gc(2); // dump roots\n        soft_panic(PANIC_GC_OOM);\n    }\n    auto lowMem = getConfig(CFG_LOW_MEM_SIMULATION_KB, 0);\n    auto sysHeapSize = getConfig(CFG_SYSTEM_HEAP_BYTES, 4 * 1024);\n    auto heapSize = GC_GET_HEAP_SIZE();\n    sz = heapSize - sysHeapSize;\n    if (lowMem) {\n        auto memIncrement = 32 * 1024;\n        // get the memory size - assume it's increment of 32k,\n        // and we don't statically allocate more than 32k\n        auto memSize = ((heapSize + memIncrement - 1) / memIncrement) * memIncrement;\n        int fillerSize = memSize - lowMem * 1024;\n        if (fillerSize > 0) {\n            dummy = GC_ALLOC_BLOCK(fillerSize);\n            sz -= fillerSize;\n        }\n    }\n#endif\n    auto curr = (GCBlock *)GC_ALLOC_BLOCK(sz);\n    curr->blockSize = sz - sizeof(GCBlock);\n    // make sure reference to allocated block is stored somewhere, otherwise\n    // GCC optimizes out the call to GC_ALLOC_BLOCK\n    curr->data[4].setVT((uintptr_t)dummy);\n    return curr;\n}\n\n__attribute__((noinline)) static void allocateBlock() {\n    auto curr = allocateBlockCore();\n    DMESG(\"GC block %db @ %p\", curr->blockSize, curr);\n    GC_CHECK((curr->blockSize & 3) == 0, 40);\n    setupFreeBlock(curr);\n    linkFreeBlock(curr);\n}\n\nstatic void sweep(int flags) {\n    RefBlock *prevFreePtr = NULL;\n    uint32_t freeSize = 0;\n    uint32_t totalSize = 0;\n    uint32_t maxFreeBlock = 0;\n    firstFree = NULL;\n\n    gcStats.numGC++;\n\n    for (auto h = firstBlock; h; h = h->next) {\n        auto d = h->data;\n        auto words = BYTES_TO_WORDS(h->blockSize);\n        auto end = d + words;\n        totalSize += words;\n        VLOG(\"sweep: %p - %p\", d, end);\n        while (d < end) {\n            if (IS_LIVE(d->vtable)) {\n                VVLOG(\"Live %p\", d);\n                d->setVT(d->vt() & ~MARKED_MASK);\n                d += getObjectSize(d);\n            } else {\n                auto start = (RefBlock *)d;\n                while (d < end) {\n                    if (IS_FREE(d->vtable)) {\n                        VVLOG(\"Free %p\", d);\n                    } else if (IS_LIVE(d->vtable)) {\n                        break;\n                    } else if (IS_ARRAY(d->vtable)) {\n                        VVLOG(\"Dead Arr %p\", d);\n                    } else {\n                        VVLOG(\"Dead Obj %p\", d);\n                        GC_CHECK(d->vtable->magic == VTABLE_MAGIC, 41);\n                        d->destroyVT();\n                        VVLOG(\"destroyed\");\n                    }\n                    d += getObjectSize(d);\n                }\n                auto sz = d - (RefObject *)start;\n                freeSize += sz;\n                if (sz > (int)maxFreeBlock)\n                    maxFreeBlock = sz;\n#ifdef PXT_GC_CHECKS\n                memset((void *)start, 0xff, WORDS_TO_BYTES(sz));\n#endif\n                start->setVT((sz << 2) | FREE_MASK);\n                if (sz > 1) {\n                    start->nextFree = NULL;\n                    if (!prevFreePtr) {\n                        firstFree = start;\n                    } else {\n                        prevFreePtr->nextFree = start;\n                    }\n                    prevFreePtr = start;\n                }\n            }\n        }\n    }\n\n    if (midPtr) {\n        uint32_t currFree = 0;\n#ifdef PXT_ESP32\n        auto limit = freeSize * 1 / 4;\n#else\n        auto limit = freeSize * 1 / 2;\n#endif\n        for (auto p = firstFree; p; p = p->nextFree) {\n            auto len = VAR_BLOCK_WORDS(p->vtable);\n            currFree += len;\n            if (currFree > limit) {\n                midPtr = (uint8_t *)p + ((limit - currFree + len) << 2);\n                break;\n            }\n        }\n    }\n\n    freeSize = WORDS_TO_BYTES(freeSize);\n    totalSize = WORDS_TO_BYTES(totalSize);\n    maxFreeBlock = WORDS_TO_BYTES(maxFreeBlock);\n\n    gcStats.lastFreeBytes = freeSize;\n    gcStats.lastMaxBlockBytes = maxFreeBlock;\n\n    if (gcStats.minFreeBytes == 0 || gcStats.minFreeBytes > freeSize)\n        gcStats.minFreeBytes = freeSize;\n\n    if (flags & 1)\n        DMESG(\"GC %d/%d free; %d maxBlock\", freeSize, totalSize, maxFreeBlock);\n    else\n        LOG(\"GC %d/%d free; %d maxBlock\", freeSize, totalSize, maxFreeBlock);\n\n#ifndef GC_GET_HEAP_SIZE\n    // if the heap is 90% full, allocate a new block\n    if (freeSize * 10 <= totalSize) {\n        allocateBlock();\n    }\n#endif\n}\n\nvoid gc(int flags) {\n    startPerfCounter(PerfCounters::GC);\n    GC_CHECK(!(inGC & IN_GC_COLLECT), 40);\n    inGC |= IN_GC_COLLECT;\n    VLOG(\"GC mark\");\n    mark(flags);\n    VLOG(\"GC sweep\");\n    sweep(flags);\n    VLOG(\"GC done\");\n    stopPerfCounter(PerfCounters::GC);\n    inGC &= ~IN_GC_COLLECT;\n}\n\n#ifdef GC_GET_HEAP_SIZE\nextern \"C\" void free(void *ptr) {\n    if (!ptr)\n        return;\n    if (inGCArea(ptr))\n        app_free(ptr);\n    else\n        xfree(ptr);\n}\n\nextern \"C\" void *malloc(size_t sz) {\n    if (PXT_IN_ISR() || inGC)\n        return xmalloc(sz);\n    else\n        return app_alloc(sz);\n}\n\nextern \"C\" void *realloc(void *ptr, size_t size) {\n    if (inGCArea(ptr)) {\n        void *mem = malloc(size);\n\n        if (ptr != NULL && mem != NULL) {\n            auto r = (uintptr_t *)ptr;\n            GC_CHECK((r[-1] >> (HIGH_SHIFT + 1)) == 3, 41);\n            size_t blockSize = VAR_BLOCK_WORDS(r[-1]);\n            memcpy(mem, ptr, min(blockSize * sizeof(void *), size));\n            free(ptr);\n        }\n\n        return mem;\n    } else {\n        return device_realloc(ptr, size);\n    }\n}\n#endif\n\nvoid *gcAllocateArray(int numbytes) {\n    numbytes = ALIGN_TO_WORD(numbytes);\n    numbytes += sizeof(void *);\n    auto r = (uintptr_t *)gcAllocate(numbytes);\n    *r = ARRAY_MASK | (TOWORDS(numbytes) << 2);\n    return r + 1;\n}\n\nstatic void *gcAllocAt(void *hint, int numbytes) {\n    gc(0);\n    size_t numwords = BYTES_TO_WORDS(ALIGN_TO_WORD(numbytes));\n\n    for (auto p = firstFree; p; p = p->nextFree) {\n        GC_CHECK(!isReadOnly((TValue)p), 49);\n        auto vt = p->vtable;\n        GC_CHECK(IS_FREE(vt), 43);\n        int offset = BYTES_TO_WORDS((uint8_t *)hint - (uint8_t *)p);\n        int left = (int)(VAR_BLOCK_WORDS(vt) - numwords - offset);\n        // we give ourselves some space here, so we don't get some strange overlaps\n        if (offset >= 8 && left >= 8) {\n            auto nf = (RefBlock *)((void **)p + numwords + offset);\n            nf->setVT((left << 2) | FREE_MASK);\n            nf->nextFree = p->nextFree;\n            p->nextFree = nf;\n            p->setVT((offset << 2) | FREE_MASK);\n            p = (RefBlock *)((void **)p + offset);\n            p->setVT(0);\n            return p;\n        }\n    }\n\n    return NULL;\n}\n\nvoid *app_alloc_at(void *at, int numbytes) {\n    if (numbytes < 8)\n        return NULL;\n    if (!at)\n        return NULL;\n\n    numbytes = ALIGN_TO_WORD(numbytes) + sizeof(void *);\n    auto r = (uintptr_t *)gcAllocAt((uintptr_t *)at - 1, numbytes);\n    if (!r)\n        return NULL;\n    *r = ARRAY_MASK | PERMA_MASK | (TOWORDS(numbytes) << 2);\n    gc(0);\n    return r + 1;\n}\n\nvoid *app_alloc(int numbytes) {\n    if (!numbytes)\n        return NULL;\n\n    // gc(0);\n    auto r = (uintptr_t *)gcAllocateArray(numbytes);\n    r[-1] |= PERMA_MASK;\n    return r;\n}\n\nvoid *app_free(void *ptr) {\n    auto r = (uintptr_t *)ptr;\n    GC_CHECK((r[-1] >> (HIGH_SHIFT + 1)) == 3, 41);\n    r[-1] |= FREE_MASK;\n    return r;\n}\n\nvoid gcFreeze() {\n    inGC |= IN_GC_FREEZE;\n}\n\nvoid gcReset() {\n    inGC &= ~IN_GC_FREEZE;\n\n    gcRoots.setLength(0);\n\n    if (inGC)\n        oops(41);\n\n    if (workQueue.getLength())\n        oops(41);\n\n    memset(&gcStats, 0, sizeof(gcStats));\n    firstFree = NULL;\n    for (auto h = firstBlock; h; h = h->next) {\n        setupFreeBlock(h);\n    }\n}\n\n#ifdef PXT_VM\nvoid gcPreStartup() {\n    inGC |= IN_GC_PREALLOC;\n}\n\nvoid gcStartup() {\n    inGC &= ~IN_GC_PREALLOC;\n}\n#endif\n\nvoid *gcAllocate(int numbytes) {\n    size_t numwords = BYTES_TO_WORDS(ALIGN_TO_WORD(numbytes));\n    // VVLOG(\"alloc %d bytes %d words\", numbytes, numwords);\n\n    if (numbytes > GC_MAX_ALLOC_SIZE)\n        soft_panic(PANIC_GC_TOO_BIG_ALLOCATION);\n\n    if (PXT_IN_ISR() || (inGC & (IN_GC_PREALLOC | IN_GC_ALLOC | IN_GC_COLLECT | IN_GC_FREEZE)))\n        target_panic(PANIC_CALLED_FROM_ISR);\n\n    inGC |= IN_GC_ALLOC;\n\n#if defined(PXT_GC_CHECKS) && !defined(PXT_VM)\n    {\n        auto curr = getThreadContext();\n        if (curr && !curr->stack.top)\n            oops(46);\n    }\n#endif\n\n#ifdef PXT_GC_STRESS\n    gc(0);\n#endif\n\n    for (int i = 0;; ++i) {\n        RefBlock *prev = NULL;\n        for (auto p = firstFree; p; p = p->nextFree) {\n            VVLOG(\"p=%p\", p);\n            if (i == 0 && (uint8_t *)p > midPtr) {\n                VLOG(\"past midptr %p; gc\", midPtr);\n                break;\n            }\n            GC_CHECK(!isReadOnly((TValue)p), 49);\n            auto vt = p->vtable;\n            if (!IS_FREE(vt))\n                oops(43);\n            int left = (int)(VAR_BLOCK_WORDS(vt) - numwords);\n            VVLOG(\"%p %d - %d = %d\", (void *)vt, (int)VAR_BLOCK_WORDS(vt), (int)numwords, left);\n            if (left >= 0) {\n                auto nf = (RefBlock *)((void **)p + numwords);\n                auto nextFree = p->nextFree; // p and nf can overlap when allocating 4 bytes\n                // VVLOG(\"nf=%p nef=%p\", nf, nextFree);\n                if (left)\n                    nf->setVT((left << 2) | FREE_MASK);\n                if (left >= 2) {\n                    nf->nextFree = nextFree;\n                } else {\n                    nf = nextFree;\n                }\n                if (prev)\n                    prev->nextFree = nf;\n                else\n                    firstFree = nf;\n                p->setVT(0);\n                VVLOG(\"GC=>%p %d %p -> %p,%p\", p, numwords, nf, nf ? nf->nextFree : 0,\n                      nf ? (void *)nf->vtable : 0);\n                GC_CHECK(!nf || !nf->nextFree || !isReadOnly((TValue)nf->nextFree), 48);\n                inGC &= ~IN_GC_ALLOC;\n                return p;\n            }\n            prev = p;\n        }\n\n        // we didn't find anything, try GC\n        if (i == 0)\n            gc(0);\n        // GC didn't help, try new block\n        else if (i == 1) {\n            DMESG(\"gcAlloc(%d) (%d/%d free; %d max block) -> new block\", numbytes,\n                  gcStats.lastFreeBytes, gcStats.totalBytes, gcStats.lastMaxBlockBytes);\n            allocateBlock();\n        } else\n            // the block allocated was apparently too small\n            soft_panic(PANIC_GC_OOM);\n    }\n}\n\nstatic void removePtr(TValue v) {\n    int len = gcRoots.getLength();\n    auto data = gcRoots.getData();\n    // scan from the back, as this is often used as a stack\n    for (int i = len - 1; i >= 0; --i) {\n        if (data[i] == v) {\n            if (i == len - 1) {\n                gcRoots.pop();\n            } else {\n                data[i] = gcRoots.pop();\n            }\n            return;\n        }\n    }\n    oops(40);\n}\n\nvoid registerGC(TValue *root, int numwords) {\n    if (!numwords)\n        return;\n\n    if (numwords > 1) {\n        while (numwords-- > 0) {\n            registerGC(root++, 1);\n        }\n        return;\n    }\n\n    gcRoots.push((TValue)((uintptr_t)root | 1));\n}\n\nvoid unregisterGC(TValue *root, int numwords) {\n    if (!numwords)\n        return;\n    if (numwords > 1) {\n        while (numwords-- > 0) {\n            unregisterGC(root++, 1);\n        }\n        return;\n    }\n\n    removePtr((TValue)((uintptr_t)root | 1));\n}\n\nvoid registerGCPtr(TValue ptr) {\n    if (isReadOnly(ptr))\n        return;\n    gcRoots.push(ptr);\n}\n\nvoid unregisterGCPtr(TValue ptr) {\n    if (isReadOnly(ptr))\n        return;\n    removePtr(ptr);\n}\n\nvoid RefImage::scan(RefImage *t) {\n    gcScan((TValue)t->buffer);\n}\n\nvoid RefCollection::scan(RefCollection *t) {\n    gcScanSegment(t->head);\n}\n\nvoid RefAction::scan(RefAction *t) {\n    gcScanMany(t->fields, t->len);\n}\n\nvoid RefRefLocal::scan(RefRefLocal *t) {\n    gcScan(t->v);\n}\n\nvoid RefMap::scan(RefMap *t) {\n    gcScanSegment(t->keys);\n    gcScanSegment(t->values);\n}\n\nvoid RefRecord_scan(RefRecord *r) {\n    VTable *tbl = getVTable(r);\n    gcScanMany(r->fields, BYTES_TO_WORDS(tbl->numbytes - sizeof(RefRecord)));\n}\n\n#define SIZE(off) TOWORDS(sizeof(*t) + (off))\n\nunsigned RefImage::gcsize(RefImage *t) {\n    return SIZE(0);\n}\n\nunsigned RefCollection::gcsize(RefCollection *t) {\n    return SIZE(0);\n}\n\nunsigned RefAction::gcsize(RefAction *t) {\n    return SIZE(WORDS_TO_BYTES(t->len));\n}\n\nunsigned RefRefLocal::gcsize(RefRefLocal *t) {\n    return SIZE(0);\n}\n\nunsigned RefMap::gcsize(RefMap *t) {\n    return SIZE(0);\n}\n\n} // namespace pxt\n",
            "gcstats.ts": "namespace control {\n    //% shim=pxt::getGCStats\n    function getGCStats(): Buffer {\n        return null\n    }\n\n    export interface GCStats {\n        numGC: number;\n        numBlocks: number;\n        totalBytes: number;\n        lastFreeBytes: number;\n        lastMaxBlockBytes: number;\n        minFreeBytes: number;\n    }\n\n    /**\n     * Get various statistics about the garbage collector (GC)\n     */\n    export function gcStats(): GCStats {\n        const buf = getGCStats()\n        if (!buf)\n            return null\n        let off = 0\n        const res: any = {}\n\n        addField(\"numGC\")\n        addField(\"numBlocks\")\n        addField(\"totalBytes\")\n        addField(\"lastFreeBytes\")\n        addField(\"lastMaxBlockBytes\")\n        addField(\"minFreeBytes\")\n\n        return res\n\n        function addField(name: string) {\n            res[name] = buf.getNumber(NumberFormat.UInt32LE, off)\n            off += 4\n        }\n    }    \n}",
            "interval.ts": "namespace control {\n    export enum IntervalMode {\n        Interval,\n        Timeout,\n        Immediate\n    }\n\n    let _intervals: Interval[] = undefined;\n    class Interval {\n\n        id: number;\n        func: () => void;\n        delay: number;\n        mode: IntervalMode;\n\n        constructor(func: () => void, delay: number, mode: IntervalMode) {\n            this.id = _intervals.length == 0\n                ? 1 : _intervals[_intervals.length - 1].id + 1;\n            this.func = func;\n            this.delay = delay;\n            this.mode = mode;\n            _intervals.push(this);\n\n            control.runInParallel(() => this.work());\n        }\n\n        work() {\n            // execute\n            switch (this.mode) {\n                case IntervalMode.Immediate:\n                case IntervalMode.Timeout:\n                    if (this.delay > 0)\n                        pause(this.delay); // timeout\n                    if (this.delay >= 0) // immediate, timeout\n                        this.func();\n                    break;\n                case IntervalMode.Interval:\n                    while (this.delay > 0) {\n                        pause(this.delay);\n                        // might have been cancelled during this duration\n                        if (this.delay > 0)\n                            this.func();\n                    }\n                    break;\n            }\n            // remove from interval array\n            _intervals.removeElement(this);\n        }\n\n        cancel() {\n            this.delay = -1;\n        }\n    }\n\n    export function setInterval(func: () => void, delay: number, mode: IntervalMode): number {\n        if (!func || delay < 0) return 0;\n        if (!_intervals) _intervals = [];\n        const interval = new Interval(func, delay, mode);\n        return interval.id;\n    }\n\n    export function clearInterval(intervalId: number, mode: IntervalMode): void {\n        if (!_intervals) return;\n        for (let i = 0; i < _intervals.length; ++i) {\n            const it = _intervals[i];\n            if (it.id == intervalId && it.mode == mode) {\n                it.cancel();\n                break;\n            }\n        }\n    }\n}",
            "json.ts": "namespace JSON {\n    export function parseIntRadix(s: string, base?: number) {\n        if (base == null || base == 10) {\n            return parseFloat(s) | 0\n        }\n\n        let m = false\n        let r = 0\n        for (let i = 0; i < s.length; ++i) {\n            let c = s.charCodeAt(i)\n            if (c == 0x20 || c == 10 || c == 13 || c == 9)\n                continue\n            if (r == 0 && !m && c == 0x2d) {\n                m = true\n                continue\n            }\n\n            let v = -1\n            if (0x30 <= c && c <= 0x39)\n                v = c - 0x30\n            else {\n                c |= 0x20\n                if (0x61 <= c && c <= 0x7a)\n                    v = c - 0x61 + 10\n            }\n\n            if (0 <= v && v < base) {\n                r *= base\n                r += v\n            } else {\n                return undefined\n            }\n        }\n\n        return m ? -r : r\n    }\n\n\n    class Parser {\n        ptr: number\n        s: string\n        errorMsg: string\n\n        error(msg: string) {\n            if (!this.errorMsg) {\n                this.errorMsg = msg + \" at position \" + this.ptr\n                this.ptr = this.s.length\n            }\n        }\n\n        skipWS() {\n            for (; ;) {\n                const c = this.nextChar()\n                if (c == 0x20 || c == 0x0a || c == 0x0d || c == 0x09) {\n                    // OK\n                } else {\n                    this.ptr--\n                    return c\n                }\n            }\n        }\n\n        nextChar() {\n            if (this.ptr < this.s.length)\n                return this.s.charCodeAt(this.ptr++)\n            return 0\n        }\n\n        doString() {\n            let r = \"\"\n            this.ptr++\n            for (; ;) {\n                const c = this.s.charAt(this.ptr++)\n                if (c == \"\\\"\")\n                    return r\n                if (c == \"\\\\\") {\n                    let q = this.s.charAt(this.ptr++)\n                    if (q == \"b\") q = \"\\b\"\n                    else if (q == \"n\") q = \"\\n\"\n                    else if (q == \"r\") q = \"\\r\"\n                    else if (q == \"t\") q = \"\\t\"\n                    else if (q == \"u\") {\n                        q = String.fromCharCode(parseIntRadix(this.s.slice(this.ptr, this.ptr + 4), 16))\n                        this.ptr += 4\n                    }\n                    r += q\n                } else {\n                    r += c\n                }\n            }\n        }\n\n        doArray(): any[] {\n            const r = []\n            this.ptr++\n            for (; ;) {\n                let c = this.skipWS()\n                if (c == 0x5d) {\n                    this.ptr++\n                    return r\n                }\n                const v = this.value()\n                if (this.errorMsg)\n                    return null\n                r.push(v)\n                c = this.skipWS()\n                if (c == 0x2c) {\n                    this.ptr++\n                    continue\n                }\n                if (c == 0x5d)\n                    continue\n                this.error(\"expecting comma\")\n            }\n        }\n\n        doObject() {\n            const r: any = {}\n            this.ptr++\n            for (; ;) {\n                let c = this.skipWS()\n                if (c == 0x7d) {\n                    this.ptr++\n                    return r\n                }\n                if (c != 0x22) {\n                    this.error(\"expecting key\")\n                    return r\n                }\n                const k = this.doString()\n                c = this.skipWS()\n                if (c != 0x3a) {\n                    this.error(\"expecting colon\")\n                    return r\n                }\n                this.ptr++\n                const v = this.value()\n                if (this.errorMsg)\n                    return null\n                r[k] = v\n                c = this.skipWS()\n                if (c == 0x2c) {\n                    this.ptr++\n                    continue\n                }\n                if (c == 0x7d)\n                    continue\n                this.error(\"expecting comma, got \" + String.fromCharCode(c))\n            }\n        }\n\n        doNumber() {\n            const beg = this.ptr\n            for (; ;) {\n                const c = this.nextChar()\n                if ((0x30 <= c && c <= 0x39) || c == 0x2b || c == 0x2d || c == 0x2e || c == 0x45 || c == 0x65) {\n                    // one more\n                } else {\n                    this.ptr--\n                    break\n                }\n            }\n            const ss = this.s.slice(beg, this.ptr)\n            if (ss.length == 0) {\n                this.error(\"expecting number\")\n                return 0\n            }\n            return parseFloat(ss)\n        }\n\n        checkKw(k: string) {\n            if (this.s.slice(this.ptr, this.ptr + k.length) == k) {\n                this.ptr += k.length\n                return true\n            }\n            return false\n        }\n\n        value() {\n            if (this.errorMsg)\n                return null\n\n            const c = this.skipWS()\n            if (c == 0x7b)\n                return this.doObject()\n            else if (c == 0x5b)\n                return this.doArray()\n            else if ((0x30 <= c && c <= 0x39) || c == 0x2d)\n                return this.doNumber()\n            else if (c == 0x22)\n                return this.doString()\n            else if (c == 0x74 && this.checkKw(\"true\"))\n                return true\n            else if (c == 0x66 && this.checkKw(\"false\"))\n                return false\n            else if (c == 0x6e && this.checkKw(\"null\"))\n                return null\n\n            this.error(\"unexpected token\")\n            return null\n        }\n    }\n\n    class Stringifier {\n        currIndent: string\n        indentStep: string\n        indent: number\n\n        doString(s: string) {\n            let r = \"\\\"\"\n            for (let i = 0; i < s.length; ++i) {\n                let c = s[i]\n                if (c == \"\\n\") c = \"\\\\n\"\n                else if (c == \"\\r\") c = \"\\\\r\"\n                else if (c == \"\\t\") c = \"\\\\t\"\n                else if (c == \"\\b\") c = \"\\\\b\"\n                else if (c == \"\\\\\") c = \"\\\\\\\\\"\n                else if (c == \"\\\"\") c = \"\\\\\\\"\"\n                r += c\n            }\n            return r + \"\\\"\"\n        }\n\n        go(v: any) {\n            const t = typeof v\n            if (t == \"string\")\n                return this.doString(v)\n            else if (t == \"boolean\" || t == \"number\" || v == null)\n                return \"\" + v\n            else if (Array.isArray(v)) {\n                const arr = v as any[]\n                if (arr.length == 0)\n                    return \"[]\"\n                else {\n                    let r = \"[\"\n                    if (this.indent) {\n                        this.currIndent += this.indentStep\n                        r += \"\\n\"\n                    }\n                    for (let i = 0; i < arr.length; ++i) {\n                        r += this.currIndent + this.go(arr[i])\n                        if (i != arr.length - 1)\n                            r += \",\"\n                        if (this.indent)\n                            r += \"\\n\"\n                    }\n                    if (this.indent)\n                        this.currIndent = this.currIndent.slice(this.indent)\n                    r += this.currIndent + \"]\"\n                    return r\n                }\n            } else {\n                const keys = Object.keys(v)\n                if (keys.length == 0)\n                    return \"{}\"\n\n                let r = \"{\"\n                if (this.indent) {\n                    this.currIndent += this.indentStep\n                    r += \"\\n\"\n                }\n                for (let i = 0; i < keys.length; ++i) {\n                    const k = keys[i]\n                    r += this.currIndent + this.doString(k)\n                    if (this.indent)\n                        r += \": \"\n                    else\n                        r += \":\"\n                    r += this.go(v[k])\n                    if (i != keys.length - 1)\n                        r += \",\"\n                    if (this.indent)\n                        r += \"\\n\"\n                }\n                if (this.indent)\n                    this.currIndent = this.currIndent.slice(this.indent)\n                r += this.currIndent + \"}\"\n                return r\n            }\n        }\n    }\n\n    /**\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n     * @param value A JavaScript value, usually an object or array, to be converted.\n     * @param replacer Not supported; use null.\n     * @param indent Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    export function stringify(value: any, replacer: any = null, indent: number = 0) {\n        const ss = new Stringifier()\n        ss.currIndent = \"\"\n        indent |= 0\n        if (indent < 0) indent = 0\n        if (indent > 10) indent = 10\n        ss.indentStep = \"\"\n        ss.currIndent = \"\"\n        ss.indent = indent\n        while (indent-- > 0)\n            ss.indentStep += \" \"\n        return ss.go(value)\n    }\n\n\n    /**\n     * Converts a JavaScript Object Notation (JSON) string into an object.\n     * @param text A valid JSON string.\n     */\n    export function parse(s: string) {\n        const p = new Parser()\n        p.ptr = 0\n        p.s = s\n        const r = p.value()\n        if (p.skipWS()) {\n            p.error(\"excessive input\")\n        }\n        if (p.errorMsg) {\n            control.dmesg(\"Invalid JSON: \" + p.errorMsg)\n            return undefined\n        }\n        return r\n    }\n}\n",
            "loops.cpp": "#include \"pxtbase.h\"\n\nnamespace loops {\n\n/**\n * Repeats the code forever in the background. On each iteration, allows other codes to run.\n * @param body code to execute\n */\n//% help=loops/forever weight=100 afterOnStart=true deprecated=true\n//% blockId=forever_deprecated block=\"forever\" blockAllowMultiple=1\nvoid forever(Action a) {\n    runForever(a);\n}\n\n/**\n * Pause for the specified time in milliseconds\n * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n */\n//% help=loops/pause weight=99 deprecated=true\n//% async block=\"pause %pause=timePicker|ms\"\n//% blockId=device_pause_deprecated\nvoid pause(int ms) {\n    if (ms < 0) return;\n    sleep_ms(ms);\n}\n\n}",
            "math.ts": "namespace Math {\n\n    export const E = 2.718281828459045;\n    export const LN2 = 0.6931471805599453;\n    export const LN10 = 2.302585092994046;\n    export const LOG2E = 1.4426950408889634;\n    export const LOG10E = 0.4342944819032518;\n    export const PI = 3.141592653589793;\n    export const SQRT1_2 = 0.7071067811865476;\n    export const SQRT2 = 1.4142135623730951;\n\n    /**\n     * Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.\n     * @param value value to map in ranges\n     * @param fromLow the lower bound of the value's current range\n     * @param fromHigh the upper bound of the value's current range, eg: 1023\n     * @param toLow the lower bound of the value's target range\n     * @param toHigh the upper bound of the value's target range, eg: 4\n     */\n    //% help=math/map weight=10 blockGap=8\n    //% blockId=math_map block=\"map %value|from low %fromLow|high %fromHigh|to low %toLow|high %toHigh\"\n    //% inlineInputMode=inline\n    export function map(value: number, fromLow: number, fromHigh: number, toLow: number, toHigh: number): number {\n        return ((value - fromLow) * (toHigh - toLow)) / (fromHigh - fromLow) + toLow;\n    }    \n\n    /**\n     * Constrains a number to be within a range\n     * @param x the number to constrain, all data types\n     * @param y the lower end of the range, all data types\n     * @param z the upper end of the range, all data types\n     */\n    //% help=math/constrain weight=11 blockGap=8\n    //% blockId=\"math_constrain_value\" block=\"constrain %value|between %low|and %high\"\n    export function constrain(value: number, low: number, high: number): number {\n        return value < low ? low : value > high ? high : value;\n    }\n\n    const b_m16: number[] = [0, 49, 49, 41, 90, 27, 117, 10]\n    /**\n     * Returns the sine of an input angle. This is an 8-bit approximation.\n     * @param theta input angle from 0-255\n     */\n    //% help=math/isin weight=11 advanced=true blockGap=8\n    export function isin(theta: number) {\n        //reference: based on FASTLed's sin approximation method: [https://github.com/FastLED/FastLED](MIT)\n        let offset = theta;\n        if( theta & 0x40 ) {\n            offset = 255 - offset;\n        }\n        offset &= 0x3F; // 0..63\n\n        let secoffset  = offset & 0x0F; // 0..15\n        if( theta & 0x40) secoffset++;\n\n        let section = offset >> 4; // 0..3\n        let s2 = section * 2;\n\n        let b = b_m16[s2];\n        let m16 = b_m16[s2+1];\n        let mx = (m16 * secoffset) >> 4;\n        \n        let y = mx + b;\n        if( theta & 0x80 ) y = -y;\n\n        y += 128;\n\n        return y;\n    }\n\n    /**\n     * Returns the cosine of an input angle. This is an 8-bit approximation. \n     * @param theta input angle from 0-255\n     */\n    //% help=math/icos weight=10 advanced=true blockGap=8\n    export function icos(theta: number) {\n        return isin(theta + 16384);\n    }\n}\n\nnamespace Number {\n    export const EPSILON = 2.220446049250313e-16;\n}",
            "ns.ts": "\n/**\n * Respond to and read data from buttons and sensors.\n */\n//% color=\"#B4009E\" weight=98 icon=\"\\uf192\"\nnamespace input {\n}\n",
            "pause.ts": "/**\n * Pause for the specified time in milliseconds\n * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n */\n//% help=loops/pause weight=99\n//% async block=\"pause %pause=timePicker|ms\"\n//% blockId=device_pause blockNamespace=\"loops\"\nfunction pause(ms: number): void {\n    loops.pause(ms);\n}\n\n// micro:bit compatibility\n// these functions allow some level of reuse\n// between micro:bit and other maker-style editors\nnamespace basic {\n    export function pause(millis: number) {\n        loops.pause(millis);\n    }\n}",
            "perfcounters.ts": "namespace control {\n    /**\n     * Enable profiling for current function.\n     */\n    //% shim=TD_NOOP shimArgument=perfCounter\n    export function enablePerfCounter(name?: string) { }\n\n    /**\n     * Dump values of profiling performance counters.\n     */\n    //% shim=pxt::dumpPerfCounters\n    export function dmesgPerfCounters() { }\n}\n",
            "poll.ts": "namespace control {\n    class PollEvent {\n        public eid: number;\n        public vid: number;\n        public start: number;\n        public timeOut: number;\n        public condition: () => boolean;\n        public once: boolean;\n        constructor(eid: number, vid: number, start: number, timeOut: number, condition: () => boolean, once: boolean) {\n            this.eid = eid;\n            this.vid = vid;\n            this.start = start;\n            this.timeOut = timeOut;\n            this.condition = condition;\n            this.once = once;\n        }\n    }\n\n    let _pollEventQueue: PollEvent[] = undefined;\n\n    function pollEvents() {\n        while (_pollEventQueue.length > 0) {\n            const now = control.millis();\n            for (let i = 0; i < _pollEventQueue.length; ++i) {\n                const ev = _pollEventQueue[i];\n                if (ev.condition() || (ev.timeOut > 0 && now - ev.start > ev.timeOut)) {\n                    control.raiseEvent(ev.eid, ev.vid);\n                    if (ev.once) {\n                        _pollEventQueue.splice(i, 1);\n                        --i;\n                    }\n                }\n            }\n            pause(50);\n        }\n        // release fiber\n        _pollEventQueue = undefined;\n    }\n\n    export function __queuePollEvent(timeOut: number, condition: () => boolean, handler: () => void) {\n        const ev = new PollEvent(\n            DAL.DEVICE_ID_NOTIFY,\n            control.allocateNotifyEvent(),\n            control.millis(),\n            timeOut,\n            condition,\n            !handler\n        );\n\n        // start polling fiber if needed\n        if (!_pollEventQueue) {\n            _pollEventQueue = [ev];\n            control.runInParallel(pollEvents);\n        }\n        else {\n            // add to the queue\n            _pollEventQueue.push(ev)\n        }\n\n        // register event\n        if (handler)\n            control.onEvent(ev.eid, ev.vid, handler);\n        else // or wait\n            control.waitForEvent(ev.eid, ev.vid);\n    }    \n}\n\n/**\n * Busy wait for a condition to be true\n * @param condition condition to test for\n * @param timeOut if positive, maximum duration to wait for in milliseconds\n */\n//% blockId=\"pxt_pause_until\"\nfunction pauseUntil(condition: () => boolean, timeOut?: number): void {\n    if (!condition || condition()) return; // optimistic path\n    if (!timeOut) timeOut = 0;\n    control.__queuePollEvent(timeOut, condition, undefined);\n}\n",
            "pxt-core.d.ts": "/// <reference no-default-lib=\"true\"/>\n\ninterface Array<T> {\n    /**\n      * Get or set the length of an array. This number is one more than the index of the last element the array.\n      */\n    //% shim=Array_::length weight=84\n    //% blockId=\"lists_length\" block=\"length of %VALUE\" blockBuiltin=true blockNamespace=\"arrays\"\n    length: number;\n\n    /**\n      * Append a new element to an array.\n      * @param items New elements of the Array.\n      */\n    //% help=arrays/push\n    //% shim=Array_::push weight=50\n    //% blockId=\"array_push\" block=\"%list| add value %value| to end\" blockNamespace=\"arrays\"\n    //% group=\"Modify\"\n    push(item: T): void;\n\n    /**\n      * Concatenates the values with another array.\n      * @param arr The other array that is being concatenated with\n      */\n    //% helper=arrayConcat weight=40\n    concat(arr: T[]): T[];\n\n    /**\n      * Remove the last element from an array and return it.\n      */\n    //% help=arrays/pop\n    //% shim=Array_::pop weight=45\n    //% blockId=\"array_pop\" block=\"get and remove last value from %list\" blockNamespace=\"arrays\"\n    //% group=\"Read\"\n    pop(): T;\n\n    /**\n      * Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.\n      */\n    //% help=arrays/reverse\n    //% helper=arrayReverse weight=10\n    //% blockId=\"array_reverse\" block=\"reverse %list\" blockNamespace=\"arrays\"\n    //% group=\"Operations\"\n    reverse(): void;\n\n    /**\n      * Remove the first element from an array and return it. This method changes the length of the array.\n      */\n    //% help=arrays/shift\n    //% helper=arrayShift weight=30\n    //% blockId=\"array_shift\" block=\"get and remove first value from %list\" blockNamespace=\"arrays\"\n    //% group=\"Read\"\n    shift(): T;\n\n    /**\n      * Add one element to the beginning of an array and return the new length of the array.\n      * @param element to insert at the start of the Array.\n      */\n    //% help=arrays/unshift\n    //% helper=arrayUnshift weight=25\n    //% blockId=\"array_unshift\" block=\"%list| insert %value| at beginning\" blockNamespace=\"arrays\"\n    //% group=\"Modify\"\n    //unshift(...values:T[]): number; //rest is not supported in our compiler yet.\n    unshift(value: T): number;\n\n    /**\n      * Return a section of an array.\n      * @param start The beginning of the specified portion of the array. eg: 0\n      * @param end The end of the specified portion of the array. eg: 0\n      */\n    //% help=arrays/slice\n    //% helper=arraySlice weight=41 blockNamespace=\"arrays\"\n    slice(start?: number, end?: number): T[];\n\n    /**\n      * Remove elements from an array.\n      * @param start The zero-based location in the array from which to start removing elements. eg: 0\n      * @param deleteCount The number of elements to remove. eg: 0\n      */\n    //% helper=arraySplice weight=40\n    splice(start: number, deleteCount: number): void;\n\n    /**\n      * joins all elements of an array into a string and returns this string.\n      * @param sep the string separator\n      */\n    //% helper=arrayJoin weight=40\n    join(sep?: string): string;\n\n    /**\n      * Tests whether at least one element in the array passes the test implemented by the provided function.\n      * @param callbackfn A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arraySome weight=40\n    some(callbackfn: (value: T, index: number) => boolean): boolean;\n\n    /**\n      * Tests whether all elements in the array pass the test implemented by the provided function.\n      * @param callbackfn A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayEvery weight=40\n    every(callbackfn: (value: T, index: number) => boolean): boolean;\n\n    /**\n      * Sort the elements of an array in place and returns the array. The sort is not necessarily stable.\n      * @param specifies a function that defines the sort order. If omitted, the array is sorted according to the prmitive type\n      */\n    //% helper=arraySort weight=40\n    sort(callbackfn?: (value1: T, value2: T) => number): T[];\n\n    /**\n      * Call a defined callback function on each element of an array, and return an array containing the results.\n      * @param callbackfn A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayMap weight=40\n    map<U>(callbackfn: (value: T, index: number) => U): U[];\n\n    /**\n      * Call a defined callback function on each element of an array.\n      * @param callbackfn A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayForEach weight=40\n    forEach(callbackfn: (value: T, index: number) => void): void;\n\n    /**\n      * Return the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayFilter weight=40\n    filter(callbackfn: (value: T, index: number) => boolean): T[];\n\n    /**\n      * Fills all the elements of an array from a start index to an end index with a static value. The end index is not included.\n      */\n    //% helper=arrayFill weight=39\n    fill(value: T, start?: number, end?: number): T[];\n\n    /**\n     * Returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.\n     * @param callbackfn\n     */\n    //% helper=arrayFind weight=40\n    find(callbackfn: (value: T, index: number) => boolean): T;\n\n    /**\n      * Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.\n      * @param initialValue Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n      */\n    //% helper=arrayReduce weight=40\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number) => U, initialValue: U): U;\n\n\n    /** Remove the first occurence of an object. Returns true if removed. */\n    //% shim=Array_::removeElement weight=48\n    removeElement(element: T): boolean;\n\n    /** Remove the element at a certain index. */\n    //% help=arrays/remove-at\n    //% shim=Array_::removeAt weight=47\n    //% blockId=\"array_removeat\" block=\"%list| get and remove value at %index\" blockNamespace=\"arrays\"\n    //% group=\"Read\"\n    removeAt(index: number): T;\n\n    /**\n     * Insert the value at a particular index, increases length by 1\n     * @param index the zero-based position in the list to insert the value, eg: 0\n     * @param the value to insert, eg: 0\n     */\n    //% help=arrays/insert-at\n    //% shim=Array_::insertAt weight=20\n    //% blockId=\"array_insertAt\" block=\"%list| insert at %index| value %value\" blockNamespace=\"arrays\"\n    //% group=\"Modify\"\n    insertAt(index: number, value: T): void;\n\n    /**\n      * Return the index of the first occurrence of a value in an array.\n      * @param item The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n      */\n    //% help=arrays/index-of\n    //% shim=Array_::indexOf weight=40\n    //% blockId=\"array_indexof\" block=\"%list| find index of %value\" blockNamespace=\"arrays\"\n    //% group=\"Operations\"\n    indexOf(item: T, fromIndex?: number): number;\n\n    /**\n     * Get the value at a particular index\n     * @param index the zero-based position in the list of the item, eg: 0\n     */\n    //% help=arrays/get\n    //% shim=Array_::getAt weight=85\n    get(index: number): T;\n\n    /**\n     * Store a value at a particular index\n     * @param index the zero-based position in the list to store the value, eg: 0\n     * @param value the value to insert, eg: 0\n     */\n    //% help=arrays/set\n    //% shim=Array_::setAt weight=84\n    set(index: number, value: T): void;\n\n    /**\n     * Return a random value from the array\n     */\n    //% help=arrays/pick-random\n    //% helper=arrayPickRandom weight=25\n    //% blockId=\"array_pickRandom\" block=\"get random value from %list\"\n    //% blockNamespace=\"arrays\"\n    //% group=\"Read\"\n    _pickRandom(): T;\n\n    [n: number]: T;\n\n    /**\n      * Add one element to the beginning of an array and return the new length of the array.\n      * @param element to insert at the start of the Array.\n      */\n    //% help=arrays/unshift\n    //% helper=arrayUnshift weight=24\n    //% blockId=\"array_unshift_statement\" block=\"%list| insert %value| at beginning\" blockNamespace=\"arrays\"\n    //% blockAliasFor=\"Array.unshift\"\n    //% group=\"Modify\"\n    _unshiftStatement(value: T): void;\n\n    /**\n      * Remove the last element from an array and return it.\n      */\n    //% help=arrays/pop\n    //% shim=Array_::pop weight=44\n    //% blockId=\"array_pop_statement\" block=\"remove last value from %list\" blockNamespace=\"arrays\"\n    //% blockAliasFor=\"Array.pop\"\n    //% group=\"Modify\"\n    _popStatement(): void;\n\n    /**\n      * Remove the first element from an array and return it. This method changes the length of the array.\n      */\n    //% help=arrays/shift\n    //% helper=arrayShift weight=29\n    //% blockId=\"array_shift_statement\" block=\"remove first value from %list\" blockNamespace=\"arrays\"\n    //% blockAliasFor=\"Array.shift\"\n    //% group=\"Modify\"\n    _shiftStatement(): void;\n\n    /** Remove the element at a certain index. */\n    //% help=arrays/remove-at\n    //% shim=Array_::removeAt weight=14\n    //% blockId=\"array_removeat_statement\" block=\"%list| remove value at %index\" blockNamespace=\"arrays\"\n    //% blockAliasFor=\"Array.removeAt\"\n    //% group=\"Modify\"\n    _removeAtStatement(index: number): void;\n}\n\ndeclare interface String {\n    // This block is currently disabled in favor of the built-in Blockly \"Create text with\" block, which compiles to \"\" + \"\"\n    // Add % sign back to the block annotation to re-enable\n    /**\n     * Returns a string that contains the concatenation of two or more strings.\n     * @param other The string to append to the end of the string.\n     */\n    //% shim=String_::concat weight=49\n    //% blockId=\"string_concat\" blockNamespace=\"text\"\n    // block=\"join %list=text|%other\"\n    concat(other: string): string;\n\n    /**\n     * Return the character at the specified index.\n     * @param index The zero-based index of the desired character.\n     */\n    //% shim=String_::charAt weight=48\n    //% help=text/char-at\n    //% blockId=\"string_get\" block=\"char from %this=text|at %pos\" blockNamespace=\"text\"\n    charAt(index: number): string;\n\n    /** Returns the length of a String object. */\n    //% property shim=String_::length weight=47\n    //% blockId=\"text_length\" block=\"length of %VALUE\" blockBuiltin=true blockNamespace=\"text\"\n    length: number;\n\n    /**\n     * Return the Unicode value of the character at the specified location.\n     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\n     */\n    //% shim=String_::charCodeAt\n    charCodeAt(index: number): number;\n\n    /**\n     * See how the order of characters in two strings is different (in ASCII encoding).\n     * @param that String to compare to target string\n     */\n    //% shim=String_::compare\n    //% help=text/compare\n    //% blockId=\"string_compare\" block=\"compare %this=text| to %that\" blockNamespace=\"text\"\n    compare(that: string): number;\n\n    /**\n     * Return a substring of the current string.\n     * @param start first character index; can be negative from counting from the end, eg:0\n     * @param length number of characters to extract, eg: 10\n     */\n    //% helper=stringSubstr\n    //% help=text/substr\n    //% blockId=\"string_substr\" block=\"substring of %this=text|from %start|of length %length\" blockNamespace=\"text\"\n    substr(start: number, length?: number): string;\n\n    /**\n     * Return the current string with the first occurence of toReplace\n     * replaced with the replacer\n     * @param toReplace the substring to replace in the current string\n     * @param replacer either the string that replaces toReplace in the current string,\n     *                or a function that accepts the substring and returns the replacement string.\n     */\n    //% helper=stringReplace\n    replace(toReplace: string, replacer: string | ((sub: string) => string)): string;\n\n    /**\n     * Return the current string with each occurence of toReplace\n     * replaced with the replacer\n     * @param toReplace the substring to replace in the current string\n     * @param replacer either the string that replaces toReplace in the current string,\n     *                or a function that accepts the substring and returns the replacement string.\n     */\n    //% helper=stringReplaceAll\n    replaceAll(toReplace: string, replacer: string | ((sub: string) => string)): string;\n\n    /**\n     * Return a substring of the current string.\n     * @param start first character index; can be negative from counting from the end, eg:0\n     * @param end one-past-last character index\n     */\n    //% helper=stringSlice\n    slice(start: number, end?: number): string;\n\n    /** Returns a value indicating if the string is empty */\n    //% helper=stringEmpty\n    //% help=text/is-empty\n    //% blockId=\"string_isempty\" blockNamespace=\"text\"\n    //% block=\"%this=text| is empty\"\n    isEmpty(): boolean;\n\n    /**\n     * Returns the position of the first occurrence of a specified value in a string.\n     * @param searchValue the text to find\n     * @param start optional start index for the search\n     */\n    //% shim=String_::indexOf\n    //% help=text/index-of\n    //% blockId=\"string_indexof\" blockNamespace=\"text\"\n    //% block=\"%this=text|find index of %searchValue\"\n    indexOf(searchValue: string, start?: number): number;\n\n    /**\n     * Determines whether a string contains the characters of a specified string.\n     * @param searchValue the text to find\n     * @param start optional start index for the search\n     */\n    //% shim=String_::includes\n    //% help=text/includes\n    //% blockId=\"string_includes\" blockNamespace=\"text\"\n    //% block=\"%this=text|includes %searchValue\"\n    includes(searchValue: string, start?: number): boolean;\n\n    /**\n     * Splits the string according to the separators\n     * @param separator\n     * @param limit\n     */\n    //% helper=stringSplit\n    //% help=text/split\n    //% blockId=\"string_split\" blockNamespace=\"text\"\n    //% block=\"split %this=text|at %separator\"\n    split(separator?: string, limit?: number): string[];\n\n    /**\n     * Return a substring of the current string with whitespace removed from both ends\n     */\n    //% helper=stringTrim\n    trim(): string;\n\n    /**\n     * Converts the string to upper case characters.\n     */\n    //% helper=stringToUpperCase\n    //% help=text/to-upper-case\n    toUpperCase(): string;\n\n    /**\n     * Converts the string to lower case characters.\n     */\n    //% helper=stringToLowerCase\n    //% help=text/to-lower-case\n    toLowerCase(): string;\n\n    [index: number]: string;\n}\n\n/**\n  * Convert a string to a number.\n  * @param s A string to convert into a number. eg: 123\n  */\n//% shim=String_::toNumber\n//% help=text/parse-float\n//% blockId=\"string_parsefloat\" block=\"parse to number %text\" blockNamespace=\"text\"\n//% text.defl=\"123\"\ndeclare function parseFloat(text: string): number;\n\n/**\n * Returns a pseudorandom number between min and max included.\n * If both numbers are integral, the result is integral.\n * @param min the lower inclusive bound, eg: 0\n * @param max the upper inclusive bound, eg: 10\n */\n//% blockId=\"device_random\" block=\"pick random %min|to %limit\"\n//% blockNamespace=\"Math\"\n//% help=math/randint\n//% shim=Math_::randomRange\ndeclare function randint(min: number, max: number): number;\n\ninterface Object { }\ninterface Function {\n  __assignableToFunction: Function;\n}\ninterface IArguments {\n  __assignableToIArguments: IArguments;\n}\ninterface RegExp {\n  __assignableToRegExp: RegExp;\n}\ntype TemplateStringsArray = Array<string>;\n\ntype uint8 = number;\ntype uint16 = number;\ntype uint32 = number;\ntype int8 = number;\ntype int16 = number;\ntype int32 = number;\n\n\ndeclare interface Boolean {\n    /**\n     * Returns a string representation of an object.\n     */\n    //% shim=numops::toString\n    toString(): string;\n}\n\n/**\n * Combine, split, and search text strings.\n*/\n//% blockNamespace=\"text\"\ndeclare namespace String {\n\n    /**\n     * Make a string from the given ASCII character code.\n     */\n    //% help=math/from-char-code\n    //% shim=String_::fromCharCode weight=1\n    //% blockNamespace=\"text\" blockId=\"stringFromCharCode\" block=\"text from char code %code\"\n    function fromCharCode(code: number): string;\n}\n\ndeclare interface Number {\n    /**\n     * Returns a string representation of a number.\n     */\n    //% shim=numops::toString\n    toString(): string;\n}\n\n/**\n * Add, remove, and replace items in lists.\n*/\n//% blockNamespace=\"Arrays\"\ndeclare namespace Array {\n    /**\n     * Check if a given object is an array.\n     */\n    //% shim=Array_::isArray\n    function isArray(obj: any): boolean;\n}\n\ndeclare namespace Object {\n    /**\n     * Return the field names in an object.\n     */\n    //% shim=pxtrt::keysOf\n    function keys(obj: any): string[];\n}\n\n/**\n * More complex operations with numbers.\n*/\ndeclare namespace Math {\n    /**\n     * Returns the value of a base expression taken to a specified power.\n     * @param x The base value of the expression.\n     * @param y The exponent value of the expression.\n     */\n    //% shim=Math_::pow\n    function pow(x: number, y: number): number;\n\n    /**\n     * Returns a pseudorandom number between 0 and 1.\n     */\n    //% shim=Math_::random\n    //% help=math/random\n    function random(): number;\n\n    /**\n     * Returns a pseudorandom number between min and max included.\n     * If both numbers are integral, the result is integral.\n     * @param min the lower inclusive bound, eg: 0\n     * @param max the upper inclusive bound, eg: 10\n     */\n    //% blockId=\"device_random_deprecated\" block=\"pick random %min|to %limit\"\n    //% help=math/random-range deprecated\n    //% shim=Math_::randomRange\n    function randomRange(min: number, max: number): number;\n\n    /**\n     * Returns the natural logarithm (base e) of a number.\n     * @param x A number\n     */\n    //% shim=Math_::log\n    //% help=math\n    function log(x: number): number;\n\n    /**\n     * Returns returns ``e^x``.\n     * @param x A number\n     */\n    //% shim=Math_::exp\n    //% help=math\n    function exp(x: number): number;\n\n    /**\n     * Returns the sine of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::sin\n    //% help=math/trigonometry\n    function sin(x: number): number;\n\n    /**\n     * Returns the cosine of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::cos\n    //% help=math/trigonometry\n    function cos(x: number): number;\n\n    /**\n     * Returns the tangent of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::tan\n    //% help=math/trigonometry\n    function tan(x: number): number;\n\n    /**\n     * Returns the arcsine (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::asin\n    //% help=math/trigonometry\n    function asin(x: number): number;\n\n    /**\n     * Returns the arccosine (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::acos\n    //% help=math/trigonometry\n    function acos(x: number): number;\n\n    /**\n     * Returns the arctangent (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::atan\n    //% help=math/trigonometry\n    function atan(x: number): number;\n\n    /**\n     * Returns the arctangent of the quotient of its arguments.\n     * @param y A number\n     * @param x A number\n     */\n    //% shim=Math_::atan2\n    //% help=math/trigonometry\n    function atan2(y: number, x: number): number;\n\n    /**\n     * Returns the square root of a number.\n     * @param x A numeric expression.\n     */\n    //% shim=Math_::sqrt\n    //% help=math\n    function sqrt(x: number): number;\n\n    /**\n     * Returns the smallest number greater than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    //% shim=Math_::ceil\n      //% help=math\n    function ceil(x: number): number;\n\n    /**\n      * Returns the greatest number less than or equal to its numeric argument.\n      * @param x A numeric expression.\n      */\n    //% shim=Math_::floor\n      //% help=math\n    function floor(x: number): number;\n\n    /**\n      * Returns the number with the decimal part truncated.\n      * @param x A numeric expression.\n      */\n    //% shim=Math_::trunc\n    //% help=math\n    function trunc(x: number): number;\n\n    /**\n      * Returns a supplied numeric expression rounded to the nearest number.\n      * @param x The value to be rounded to the nearest number.\n      */\n    //% shim=Math_::round\n    //% help=math\n    function round(x: number): number;\n\n    /**\n     * Returns the value of integer signed 32 bit multiplication of two numbers.\n     * @param x The first number\n     * @param y The second number\n     */\n    //% shim=Math_::imul\n    //% help=math\n    function imul(x: number, y: number): number;\n\n    /**\n     * Returns the value of integer signed 32 bit division of two numbers.\n     * @param x The first number\n     * @param y The second number\n     */\n    //% shim=Math_::idiv\n    //% help=math\n    function idiv(x: number, y: number): number;\n}\n\ndeclare namespace control {\n    //% shim=_control::_onCodeStart\n    export function _onCodeStart(arg: any): void;\n\n    //% shim=_control::_onCodeStop\n    export function _onCodeStop(arg: any): void;\n}",
            "pxt-helpers.ts": "type Action = () => void;\n\n/**\n * Constant representing Not-A-Number.\n */\nconst NaN = 0 / 0\n\n/**\n * Constant representing positive infinity.\n */\nconst Infinity = 1 / 0\n\nfunction isNaN(x: number) {\n    x = +x // convert to number\n    return x !== x\n}\n\nnamespace Number {\n    /**\n     * Check if a given value is of type Number and it is a NaN.\n     */\n    export function isNaN(x: any): boolean {\n        return typeof x == \"number\" && x !== x\n    }\n}\n\n/**\n * A dictionary from string key to string values\n */\ninterface StringMap {\n    [index: string]: string;\n}\n\n/**\n  * Convert a string to an integer.\n  * @param text A string to convert into an integral number. eg: \"123\"\n  * @param radix optional A value between 2 and 36 that specifies the base of the number in text.\n  * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n  * All other strings are considered decimal.\n  */\n//% help=text/parse-int\n//% blockId=\"string_parseint\" block=\"parse to integer %text\" blockNamespace=\"text\"\n//% text.defl=\"123\"\n//% blockHidden=1\nfunction parseInt(text: string, radix?: number): number {\n    // roughly based on https://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.2\n    // with some consideration for avoiding unnecessary slices where easy\n    if (!text || (radix != null && (radix < 2 || radix > 36)))\n        return NaN;\n\n    let start = 0;\n    while (start < text.length && helpers.isWhitespace(text.charCodeAt(start)))\n        ++start;\n\n    if (start === text.length)\n        return NaN;\n\n    const numberOffset = 48; // 0\n    const numCount = 10;\n    const letterOffset = 97; // a\n    const letterCount = 26;\n    const lowerCaseMask = 0x20;\n\n    let sign = 1;\n    switch (text.charAt(start)) {\n        case \"-\":\n            sign = -1;\n            // fallthrough\n        case \"+\":\n            ++start;\n    }\n\n    if ((!radix || radix == 16)\n            && \"0\" === text[start]\n            && (\"x\" === text[start + 1] || \"X\" === text[start + 1])) {\n        radix = 16;\n        start += 2;\n    } else if (!radix) {\n        radix = 10;\n    }\n\n    let output = 0;\n    let hasDigit = false;\n    for (let i = start; i < text.length; ++i) {\n        const code = text.charCodeAt(i) | lowerCaseMask;\n        let val: number = undefined;\n\n        if (code >= numberOffset && code < numberOffset + numCount)\n            val = code - numberOffset;\n        else if (code >= letterOffset && code < letterOffset + letterCount)\n            val = numCount + code - letterOffset;\n\n        if (val == undefined || val >= radix) {\n            if (!hasDigit) {\n                return NaN;\n            }\n            break;\n        }\n        hasDigit = true;\n        output = output * radix + val;\n    }\n\n    return sign * output;\n}\n\nnamespace helpers {\n    export function arrayFill<T>(O: T[], value: T, start?: number, end?: number) {\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\n        // Steps 3-5.\n        const len = O.length >>> 0;\n\n        // Steps 6-7.\n        const relativeStart = start === undefined ? 0 : start >> 0;\n\n        // Step 8.\n        let k = relativeStart < 0 ?\n            Math.max(len + relativeStart, 0) :\n            Math.min(relativeStart, len);\n\n        // Steps 9-10.\n        const relativeEnd = end === undefined ? len : end >> 0;\n\n        // Step 11.\n        const final = relativeEnd < 0 ?\n            Math.max(len + relativeEnd, 0) :\n            Math.min(relativeEnd, len);\n\n        // Step 12.\n        while (k < final) {\n            O[k] = value;\n            k++;\n        }\n\n        // Step 13.\n        return O;\n    }\n\n    export function arraySplice<T>(arr: T[], start: number, len: number) {\n        if (start < 0) {\n            return;\n        }\n        for (let i = 0; i < len; ++i) {\n            arr.removeAt(start)\n        }\n    }\n\n    export function arrayReverse<T>(arr: T[]): void {\n        let len = arr.length;\n        for (let i = 0; i < len / 2; i++) {\n            swap(arr, i, len - i - 1);\n        }\n    }\n\n    export function arrayShift<T>(arr: T[]): T {\n        return arr.removeAt(0);\n    }\n\n    export function arrayJoin<T>(arr: T[], sep?: string): string {\n        if (sep === undefined || sep === null) {\n            sep = \",\";\n        }\n\n        let r = \"\";\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            if (i > 0 && sep)\n                r += sep;\n            r += (arr[i] === undefined || arr[i] === null) ? \"\" : arr[i];\n        }\n        return r;\n    }\n\n    /*TODO: Enable this multiple value unshift, after rest is enabled in our compiler.\n        export function arrayUnshift<T>(arr: T[], ...values: T[]) : number {\n            for(let i = values.length; i > 0; --i) {\n                arr.insertAt(0, values[i - 1]);\n            }\n            return arr.length;\n        }\n    */\n    export function arrayUnshift<T>(arr: T[], value: T): number {\n        arr.insertAt(0, value);\n        return arr.length;\n    }\n\n    function swap<T>(arr: T[], i: number, j: number): void {\n        let temp: T = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    function sortHelper<T>(arr: T[], callbackfn?: (value1: T, value2: T) => number): T[] {\n        if (arr.length <= 0 || !callbackfn) {\n            return arr;\n        }\n        let len = arr.length;\n        // simple selection sort.\n        for (let i = 0; i < len - 1; ++i) {\n            for (let j = i + 1; j < len; ++j) {\n                if (callbackfn(arr[i], arr[j]) > 0) {\n                    swap(arr, i, j);\n                }\n            }\n        }\n        return arr;\n    }\n\n    export function arraySort<T>(arr: T[], callbackfn?: (value1: T, value2: T) => number): T[] {\n        if (!callbackfn && arr.length > 1) {\n            callbackfn = (a, b) => {\n                // default is sort as if the element were a string, with null < undefined\n                const aIsUndef = a === undefined;\n                const bIsUndef = b === undefined;\n                if (aIsUndef && bIsUndef) return 0;\n                else if (aIsUndef) return 1;\n                else if (bIsUndef) return -1;\n\n                const aIsNull = a === null;\n                const bIsNull = b === null;\n                if (aIsNull && bIsNull) return 0;\n                else if (aIsNull) return 1;\n                else if (bIsNull) return -1;\n\n                return (a + \"\").compare(b + \"\");\n            }\n        }\n        return sortHelper(arr, callbackfn);\n    }\n\n    export function arrayMap<T, U>(arr: T[], callbackfn: (value: T, index: number) => U): U[] {\n        let res: U[] = []\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            res.push(callbackfn(arr[i], i))\n        }\n        return res\n    }\n\n    export function arraySome<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): boolean {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i)\n            if (callbackfn(arr[i], i))\n                return true;\n        return false;\n    }\n\n    export function arrayEvery<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): boolean {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i)\n            if (!callbackfn(arr[i], i))\n                return false;\n        return true;\n    }\n\n    export function arrayForEach<T>(arr: T[], callbackfn: (value: T, index: number) => void): void {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            callbackfn(arr[i], i);\n        }\n    }\n\n    export function arrayFilter<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): T[] {\n        let res: T[] = []\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            let v = arr[i] // need to cache\n            if (callbackfn(v, i)) res.push(v)\n        }\n        return res\n    }\n\n    export function arrayFind<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): T {\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            let v = arr[i] // need to cache\n            if (callbackfn(v, i)) return v;\n        }\n        return undefined;\n    }\n\n    export function arrayReduce<T, U>(arr: T[], callbackfn: (previousValue: U, currentValue: T, currentIndex: number) => U, initialValue: U): U {\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            initialValue = callbackfn(initialValue, arr[i], i)\n        }\n        return initialValue\n    }\n\n    export function arrayConcat<T>(arr: T[], otherArr: T[]): T[] {\n        let out: T[] = [];\n        for (let value of arr) {\n            out.push(value);\n        }\n        for (let value of otherArr) {\n            out.push(value);\n        }\n        return out;\n    }\n\n    export function arrayPickRandom<T>(arr: T[]): T {\n        return arr[Math.randomRange(0, arr.length - 1)];\n    }\n\n    export function arraySlice<T>(arr: T[], start?: number, end?: number): T[] {\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n        const res: T[] = [];\n        const len = arr.length;\n\n        if (start === undefined)\n            start = 0;\n        else if (start < 0)\n            start = Math.max(len + start, 0);\n\n        if (start > len)\n            return res;\n\n        if (end === undefined)\n            end = len;\n        else if (end < 0)\n            end = len + end;\n\n        if (end > len)\n            end = len;\n\n        for (let i = start; i < end; ++i) {\n            res.push(arr[i]);\n        }\n        return res;\n    }\n\n    export function stringReplace(s: string, toReplace: string, replacer: string | ((sub: string) => string)) {\n        toReplace = toReplace + \"\";\n        const ind = s.indexOf(toReplace);\n        if (ind == -1)\n            return s;\n\n        const begin = s.slice(0, ind);\n        const end = s.slice(ind + toReplace.length);\n\n        if (typeof replacer == \"string\" || !replacer) {\n            return begin + replacer + end;\n        } else {\n            return begin + replacer(toReplace) + end;\n        }\n    }\n\n    export function stringReplaceAll(s: string, toReplace: string, replacer: string | ((sub: string) => string)) {\n        toReplace = toReplace + \"\";\n        const split = s.split(toReplace);\n        const empty = toReplace.isEmpty();\n\n        let output = (empty ? applyReplace(toReplace, replacer) : \"\");\n\n        if (split.length) {\n            output += split[0];\n        }\n\n        for (let i = 1; i < split.length; ++i) {\n            output += applyReplace(toReplace, replacer) + split[i];\n        }\n\n        if (!s.isEmpty() && empty) {\n            output += applyReplace(toReplace, replacer);\n        }\n\n        return output;\n\n        function applyReplace(r: string, replacer: string | ((sub: string) => string)): string {\n            if (typeof replacer == \"string\" || !replacer) {\n                return replacer as string;\n            } else {\n                return replacer(r);\n            }\n        }\n    }\n\n    //% shim=String_::substr\n    declare function stringSubstrHelper(s: string, start: number, length?: number): string;\n\n    export function stringSubstr(s: string, start: number, length?: number): string {\n        length = length === undefined ? s.length : length || 0;\n        return stringSubstrHelper(s, start, length);\n    }\n\n    export function stringSlice(s: string, start: number, end?: number): string {\n        const len = s.length;\n\n        if (start < 0) {\n            start = Math.max(len + start, 0);\n        }\n\n        if (end === undefined) {\n            end = len;\n        } else if (end === null) {\n            end = 0;\n        }\n\n        if (end < 0) {\n            end = len + end;\n        }\n\n        return stringSubstrHelper(s, start, end - start);\n    }\n\n    // also note this doesn't handle unicode, but neither does JS (there's toLocaleUpperCase())\n    export function stringToUpperCase(s: string): string {\n        let r = \"\"\n        let prev = 0\n        for (let i = 0; i < s.length; i++) {\n            const c = s.charCodeAt(i)\n            if (97 <= c && c <= 122) {\n                r += s.slice(prev, i) + String.fromCharCode(c - 32)\n                prev = i + 1\n            }\n        }\n        r += s.slice(prev)\n        return r\n    }\n\n    // also note this doesn't handle unicode, but neither does JS (there's toLocaleLowerCase())\n    export function stringToLowerCase(s: string): string {\n        let r = \"\"\n        let prev = 0\n        for (let i = 0; i < s.length; i++) {\n            const c = s.charCodeAt(i)\n            if (65 <= c && c <= 90) {\n                r += s.slice(prev, i) + String.fromCharCode(c + 32)\n                prev = i + 1\n            }\n        }\n        r += s.slice(prev)\n        return r\n    }\n\n    export function stringSplit(S: string, separator?: string, limit?: number): string[] {\n        // https://www.ecma-international.org/ecma-262/6.0/#sec-string.prototype.split\n        const A: string[] = [];\n        let lim = 0;\n        if (limit === undefined)\n            lim = (1 << 29) - 1; // spec says 1 << 53, leaving it at 29 for constant folding\n        else if (limit < 0)\n            lim = 0;\n        else\n            lim = limit | 0;\n        const s = S.length;\n        let p = 0;\n        const R = separator;\n        if (lim == 0)\n            return A;\n        if (separator === undefined) {\n            A[0] = S;\n            return A;\n        }\n        if (s == 0) {\n            let z = splitMatch(S, 0, R);\n            if (z > -1) return A;\n            A[0] = S;\n            return A;\n        }\n        let T: string;\n        let q = p;\n        while (q != s) {\n            let e = splitMatch(S, q, R);\n            if (e < 0) q++;\n            else {\n                if (e == p) q++;\n                else {\n                    T = stringSlice(S, p, q);\n                    A.push(T);\n                    if (A.length == lim) return A;\n                    p = e;\n                    q = p;\n                }\n            }\n        }\n        T = stringSlice(S, p, q);\n        A.push(T);\n        return A;\n    }\n\n    function splitMatch(S: string, q: number, R: string): number {\n        const r = R.length;\n        const s = S.length;\n        if (q + r > s) return -1;\n        for (let i = 0; i < r; ++i) {\n            if (S[q + i] != R[i])\n                return -1;\n        }\n        return q + r;\n    }\n\n    export function stringTrim(s: string): string {\n        let start = 0;\n        let end = s.length - 1;\n\n        while (start <= end && isWhitespace(s.charCodeAt(start)))\n            ++start;\n\n        while (end > start && isWhitespace(s.charCodeAt(end)))\n            --end;\n        return s.slice(start, end + 1);\n    }\n\n    export function isWhitespace(c: number): boolean {\n        // https://www.ecma-international.org/ecma-262/6.0/#sec-white-space\n        switch (c) {\n            case 0x0009:  // character tab\n            case 0x000B:  // line tab\n            case 0x000C:  // form feed\n            case 0x0020:  // space\n            case 0x00A0:  // no-break space\n            case 0xFEFF:  // zero width no break space\n            case 0x000A:  // line feed\n            case 0x000D:  // carriage return\n            case 0x2028:  // line separator\n            case 0x2029:  // paragraph separator\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    export function stringEmpty(S: string): boolean {\n        return !S;\n    }\n}\n\nnamespace Math {\n    export function clamp(min: number, max: number, value: number): number {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    /**\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\n      * For example, the absolute value of -5 is the same as the absolute value of 5.\n      * @param x A numeric expression for which the absolute value is needed.\n      */\n    //% help=math/abs\n    export function abs(x: number): number {\n        return x < 0 ? -x : x;\n    }\n\n    /**\n      * Returns the sign of the x, indicating whether x is positive, negative or zero.\n      * @param x The numeric expression to test\n      */\n    export function sign(x: number): number {\n        if (x == 0) return 0;\n        if (x > 0) return 1;\n        return -1;\n    }\n\n    /**\n      * Returns the larger of two supplied numeric expressions.\n      */\n    //% help=math/max\n    export function max(a: number, b: number): number {\n        if (a >= b) return a;\n        return b;\n    }\n\n    /**\n      * Returns the smaller of two supplied numeric expressions.\n      */\n    //% help=math/min\n    export function min(a: number, b: number): number {\n        if (a <= b) return a;\n        return b;\n    }\n\n    /**\n     * Rounds ``x`` to a number with the given number of ``digits``\n     * @param x the number to round\n     * @param digits the number of resulting digits\n     */\n    //%\n    export function roundWithPrecision(x: number, digits: number): number {\n        digits = digits | 0;\n        // invalid digits input\n        if (digits <= 0) return Math.round(x);\n        if (x == 0) return 0;\n        let r = 0;\n        do {\n            const d = Math.pow(10, digits);\n            r = Math.round(x * d) / d;\n            digits++;\n        } while (r == 0 && digits < 21);\n        return r;\n    }\n}\n\n\n//% blockHidden=1\nnamespace __internal {\n    /**\n     * A shim to render a boolean as a down/up toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleDownUp block=\"%down\"\n    //% down.fieldEditor=toggledownup\n    //% down.fieldOptions.decompileLiterals=true\n    export function __downUp(down: boolean): boolean {\n        return down;\n    }\n\n    /**\n     * A shim to render a boolean as a up/down toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleUpDown block=\"%up\"\n    //% up.fieldEditor=toggleupdown\n    //% up.fieldOptions.decompileLiterals=true\n    export function __upDown(up: boolean): boolean {\n        return up;\n    }\n\n    /**\n     * A shim to render a boolean as a high/low toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleHighLow block=\"%high\"\n    //% high.fieldEditor=togglehighlow\n    //% high.fieldOptions.decompileLiterals=true\n    export function __highLow(high: boolean): boolean {\n        return high;\n    }\n\n    /**\n     * A shim to render a boolean as a on/off toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleOnOff block=\"%on\"\n    //% on.fieldEditor=toggleonoff\n    //% on.fieldOptions.decompileLiterals=true\n    export function __onOff(on: boolean): boolean {\n        return on;\n    }\n\n    /**\n     * A shim to render a boolean as a yes/no toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleYesNo block=\"%yes\"\n    //% yes.fieldEditor=toggleyesno\n    //% yes.fieldOptions.decompileLiterals=true\n    export function __yesNo(yes: boolean): boolean {\n        return yes;\n    }\n\n    /**\n     * A shim to render a boolean as a win/lose toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleWinLose block=\"%win\"\n    //% win.fieldEditor=togglewinlose\n    //% win.fieldOptions.decompileLiterals=true\n    export function __winLose(win: boolean): boolean {\n        return win;\n    }\n\n    /**\n     * Get the color wheel field editor\n     * @param color color, eg: #ff0000\n     */\n    //% blockId=colorNumberPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colornumber\" value.fieldOptions.decompileLiterals=true\n    //% value.defl='#ff0000'\n    //% value.fieldOptions.colours='[\"#ff0000\",\"#ff8000\",\"#ffff00\",\"#ff9da5\",\"#00ff00\",\"#b09eff\",\"#00ffff\",\"#007fff\",\"#65471f\",\"#0000ff\",\"#7f00ff\",\"#ff0080\",\"#ff00ff\",\"#ffffff\",\"#999999\",\"#000000\"]'\n    //% value.fieldOptions.columns=4 value.fieldOptions.className='rgbColorPicker'\n    export function __colorNumberPicker(value: number) {\n        return value;\n    }\n\n    /**\n     * Get the color wheel field editor\n     * @param value value between 0 to 255 to get a color value, eg: 10\n     */\n    //% blockId=colorWheelPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colorwheel\" value.fieldOptions.decompileLiterals=true\n    //% value.fieldOptions.sliderWidth='200'\n    //% value.fieldOptions.min=0 value.fieldOptions.max=255\n    export function __colorWheelPicker(value: number) {\n        return value;\n    }\n\n    /**\n    * Get the color wheel field editor using HSV values\n    * @param value value between 0 to 255 to get a color value, eg: 10\n    */\n    //% blockId=colorWheelHsvPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colorwheel\" value.fieldOptions.decompileLiterals=true\n    //% value.fieldOptions.sliderWidth='200'\n    //% value.fieldOptions.min=0 value.fieldOptions.max=255\n    //% value.fieldOptions.channel=hsvfast\n    export function __colorWheelHsvPicker(value: number) {\n        return value;\n    }\n\n    /**\n     * A speed picker\n     * @param speed the speed, eg: 50\n     */\n    //% blockId=speedPicker block=\"%speed\" shim=TD_ID\n    //% speed.fieldEditor=\"speed\" colorSecondary=\"#FFFFFF\"\n    //% weight=0 blockHidden=1 speed.fieldOptions.decompileLiterals=1\n    export function __speedPicker(speed: number): number {\n        return speed;\n    }\n\n    /**\n     * A turn ratio picker\n     * @param turnratio the turn ratio, eg: 0\n     */\n    //% blockId=turnRatioPicker block=\"%turnratio\" shim=TD_ID\n    //% turnratio.fieldEditor=\"turnratio\" colorSecondary=\"#FFFFFF\"\n    //% weight=0 blockHidden=1 turnRatio.fieldOptions.decompileLiterals=1\n    export function __turnRatioPicker(turnratio: number): number {\n        return turnratio;\n    }\n\n    /**\n     * A field editor that displays a protractor\n     */\n    //% blockId=protractorPicker block=\"%angle\"\n    //% shim=TD_ID\n    //% angle.fieldEditor=protractor\n    //% angle.fieldOptions.decompileLiterals=1\n    //% colorSecondary=\"#FFFFFF\"\n    //% blockHidden=1\n    export function __protractor(angle: number) {\n        return angle;\n    }\n\n    /**\n      * Get the time field editor\n      * @param ms time duration in milliseconds, eg: 500, 1000\n      */\n    //% blockId=timePicker block=\"%ms\"\n    //% blockHidden=true shim=TD_ID\n    //% colorSecondary=\"#FFFFFF\"\n    //% ms.fieldEditor=\"numberdropdown\" ms.fieldOptions.decompileLiterals=true\n    //% ms.fieldOptions.data='[[\"100 ms\", 100], [\"200 ms\", 200], [\"500 ms\", 500], [\"1 second\", 1000], [\"2 seconds\", 2000], [\"5 seconds\", 5000]]'\n    export function __timePicker(ms: number): number {\n        return ms;\n    }\n}\n",
            "pxt.cpp": "#include \"pxtbase.h\"\n\nusing namespace std;\n\nnamespace pxt {\n\nAction mkAction(int totallen, RefAction *act) {\n    check(getVTable(act)->classNo == BuiltInType::RefAction, PANIC_INVALID_BINARY_HEADER, 1);\n#ifdef PXT_VM\n    check(act->initialLen <= totallen, PANIC_INVALID_BINARY_HEADER, 13);\n#endif\n\n    if (totallen == 0) {\n        return (TValue)act; // no closure needed\n    }\n\n    void *ptr = gcAllocate(sizeof(RefAction) + totallen * sizeof(void *));\n    RefAction *r = new (ptr) RefAction();\n    r->len = totallen;\n#ifdef PXT_VM\n    r->numArgs = act->numArgs;\n    r->initialLen = act->initialLen;\n    r->flags = 0;\n#endif\n    r->func = act->func;\n    memset(r->fields, 0, r->len * sizeof(void *));\n\n    MEMDBG(\"mkAction: start=%p => %p\", act, r);\n\n    return (Action)r;\n}\n\nRefRecord *mkClassInstance(VTable *vtable) {\n    intcheck(vtable->methods[0] == &RefRecord_destroy, PANIC_SIZE, 3);\n    // intcheck(vtable->methods[1] == &RefRecord_print, PANIC_SIZE, 4);\n\n    void *ptr = gcAllocate(vtable->numbytes);\n    RefRecord *r = new (ptr) RefRecord(vtable);\n    memset(r->fields, 0, vtable->numbytes - sizeof(RefRecord));\n    MEMDBG(\"mkClass: vt=%p => %p\", vtable, r);\n    return r;\n}\n\nTValue RefRecord::ld(int idx) {\n    // intcheck((reflen == 255 ? 0 : reflen) <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 1);\n    return fields[idx];\n}\n\nTValue RefRecord::ldref(int idx) {\n    // DMESG(\"LD %p len=%d reflen=%d idx=%d\", this, len, reflen, idx);\n    // intcheck(0 <= idx && idx < reflen, PANIC_OUT_OF_BOUNDS, 2);\n    return fields[idx];\n}\n\nvoid RefRecord::st(int idx, TValue v) {\n    // intcheck((reflen == 255 ? 0 : reflen) <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 3);\n    fields[idx] = v;\n}\n\nvoid RefRecord::stref(int idx, TValue v) {\n    // DMESG(\"ST %p len=%d reflen=%d idx=%d\", this, len, reflen, idx);\n    // intcheck(0 <= idx && idx < reflen, PANIC_OUT_OF_BOUNDS, 4);\n    fields[idx] = v;\n}\n\nvoid RefObject::destroyVT() {\n    ((RefObjectMethod)getVTable(this)->methods[0])(this);\n}\n\n//%\nvoid deleteRefObject(RefObject *obj) {\n    obj->destroyVT();\n}\n\nvoid RefObject::printVT() {\n    ((RefObjectMethod)getVTable(this)->methods[1])(this);\n}\n\nvoid RefRecord_destroy(RefRecord *) {}\n\nvoid RefRecord_print(RefRecord *r) {\n    DMESG(\"RefRecord %p size=%d bytes\", r, getVTable(r)->numbytes);\n}\n\nvoid Segment::set(unsigned i, TValue value) {\n    if (i < size) {\n        data[i] = value;\n    } else if (i < Segment::MaxSize) {\n        growByMin(i + 1);\n        data[i] = value;\n    } else {\n        return;\n    }\n    if (length <= i) {\n        length = i + 1;\n    }\n\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::set\");\n    this->print();\n#endif\n\n    return;\n}\n\nstatic inline int growthFactor(int size) {\n    if (size == 0) {\n        return 4;\n    }\n    if (size < 64) {\n        return size * 2; // Double\n    }\n    if (size < 512) {\n        return size * 5 / 3; // Grow by 1.66 rate\n    }\n    // Grow by constant rate\n    if ((unsigned)size + 256 < Segment::MaxSize)\n        return size + 256;\n    else\n        return Segment::MaxSize;\n}\n\nvoid LLSegment::setLength(unsigned newLen) {\n    if (newLen > Segment::MaxSize)\n        return;\n\n    if (newLen > size) {\n        int newSize = growthFactor(size);\n        if (newSize < (int)newLen)\n            newSize = newLen;\n\n        // this will throw if unable to allocate\n        TValue *tmp = (TValue *)(xmalloc(newSize * sizeof(TValue)));\n\n        // Copy existing data\n        if (size) {\n            memcpy(tmp, data, size * sizeof(TValue));\n        }\n        // fill the rest with default value\n        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));\n\n        // free older segment;\n        xfree(data);\n\n        data = tmp;\n        size = newSize;\n    } else if (newLen < length) {\n        memset(data + newLen, 0, (length - newLen) * sizeof(TValue));\n    }\n\n    length = newLen;\n}\n\nvoid LLSegment::set(unsigned idx, TValue v) {\n    if (idx >= Segment::MaxSize)\n        return;\n    if (idx >= length)\n        setLength(idx + 1);\n    data[idx] = v;\n}\n\nTValue LLSegment::pop() {\n    if (length > 0) {\n        --length;\n        TValue value = data[length];\n        data[length] = 0;\n        return value;\n    }\n    return 0;\n}\n\nvoid LLSegment::destroy() {\n    length = size = 0;\n    xfree(data);\n    data = nullptr;\n}\n\nvoid Segment::growByMin(ramint_t minSize) {\n    ramint_t newSize = max(minSize, (ramint_t)growthFactor(size));\n\n    if (size < newSize) {\n        // this will throw if unable to allocate\n        TValue *tmp = (TValue *)(gcAllocateArray(newSize * sizeof(TValue)));\n\n        // Copy existing data\n        if (size)\n            memcpy(tmp, data, size * sizeof(TValue));\n        // fill the rest with default value\n        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));\n\n        data = tmp;\n        size = newSize;\n\n#ifdef DEBUG_BUILD\n        DMESG(\"growBy - after reallocation\");\n        this->print();\n#endif\n    }\n    // else { no shrinking yet; }\n    return;\n}\n\nvoid Segment::ensure(ramint_t newSize) {\n    if (newSize < size) {\n        return;\n    }\n    growByMin(newSize);\n}\n\nvoid Segment::setLength(unsigned newLength) {\n    if (newLength > size) {\n        ensure(newLength);\n    }\n    length = newLength;\n    return;\n}\n\nTValue Segment::pop() {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::pop\");\n    this->print();\n#endif\n\n    if (length > 0) {\n        --length;\n        TValue value = data[length];\n        data[length] = Segment::DefaultValue;\n        return value;\n    }\n    return Segment::DefaultValue;\n}\n\n// this function removes an element at index i and shifts the rest of the elements to\n// left to fill the gap\nTValue Segment::remove(unsigned i) {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::remove index:%d\", i);\n    this->print();\n#endif\n    if (i < length) {\n        // value to return\n        TValue ret = data[i];\n        if (i + 1 < length) {\n            // Move the rest of the elements to fill in the gap.\n            memmove(data + i, data + i + 1, (length - i - 1) * sizeof(void *));\n        }\n        length--;\n        data[length] = Segment::DefaultValue;\n#ifdef DEBUG_BUILD\n        DMESG(\"After Segment::remove index:%d\", i);\n        this->print();\n#endif\n        return ret;\n    }\n    return Segment::DefaultValue;\n}\n\n// this function inserts element value at index i by shifting the rest of the elements right.\nvoid Segment::insert(unsigned i, TValue value) {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::insert index:%d value:%d\", i, value);\n    this->print();\n#endif\n\n    if (i < length) {\n        ensure(length + 1);\n\n        // Move the rest of the elements to fill in the gap.\n        memmove(data + i + 1, data + i, (length - i) * sizeof(void *));\n\n        data[i] = value;\n        length++;\n    } else {\n        // This is insert beyond the length, just call set which will adjust the length\n        set(i, value);\n    }\n#ifdef DEBUG_BUILD\n    DMESG(\"After Segment::insert index:%d\", i);\n    this->print();\n#endif\n}\n\nvoid Segment::print() {\n    DMESG(\"Segment: %p, length: %d, size: %d\", data, (unsigned)length, (unsigned)size);\n    for (unsigned i = 0; i < size; i++) {\n        DMESG(\"-> %d\", (unsigned)(uintptr_t)data[i]);\n    }\n}\n\nvoid Segment::destroy() {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::destroy\");\n    this->print();\n#endif\n    length = size = 0;\n    data = nullptr;\n}\n\nPXT_VTABLE_CTOR(RefCollection) {}\n\nvoid RefCollection::destroy(RefCollection *t) {\n    t->head.destroy();\n}\n\nvoid RefCollection::print(RefCollection *t) {\n    DMESG(\"RefCollection %p size=%d\", t, t->head.getLength());\n    t->head.print();\n}\n\nPXT_VTABLE(RefAction, ValType::Function)\nRefAction::RefAction() : PXT_VTABLE_INIT(RefAction) {}\n\n// fields[] contain captured locals\nvoid RefAction::destroy(RefAction *t) {}\n\nvoid RefAction::print(RefAction *t) {\n#ifdef PXT_VM\n    DMESG(\"RefAction %p pc=%X size=%d\", t, (uint32_t)t->func, t->len);\n#else\n    DMESG(\"RefAction %p pc=%X size=%d\", t, (const uint8_t *)t->func - (const uint8_t *)bytecode,\n          t->len);\n#endif\n}\n\nPXT_VTABLE_CTOR(RefRefLocal) {\n    v = 0;\n}\n\nvoid RefRefLocal::print(RefRefLocal *t) {\n    DMESG(\"RefRefLocal %p v=%p\", t, (void *)t->v);\n}\n\nvoid RefRefLocal::destroy(RefRefLocal *t) {\n    decr(t->v);\n}\n\nPXT_VTABLE_CTOR(RefMap) {}\n\nvoid RefMap::destroy(RefMap *t) {\n    t->keys.destroy();\n    t->values.destroy();\n}\n\nint RefMap::findIdx(String key) {\n    auto len = keys.getLength();\n    auto data = (String *)keys.getData();\n\n    // fast path\n    for (unsigned i = 0; i < len; ++i) {\n        if (data[i] == key)\n            return i;\n    }\n\n    // slow path\n    auto keylen = key->getUTF8Size();\n    auto keydata = key->getUTF8Data();\n    for (unsigned i = 0; i < len; ++i) {\n        auto s = data[i];\n        if (s->getUTF8Size() == keylen && memcmp(keydata, s->getUTF8Data(), keylen) == 0)\n            return i;\n    }\n\n    return -1;\n}\n\nvoid RefMap::print(RefMap *t) {\n    DMESG(\"RefMap %p size=%d\", t, t->keys.getLength());\n}\n\nvoid debugMemLeaks() {}\n\nvoid error(PXT_PANIC code, int subcode) {\n    DMESG(\"Error: %d [%d]\", code, subcode);\n    target_panic(code);\n}\n\n#ifndef PXT_VM\nuint16_t *bytecode;\n#endif\nTValue *globals;\n\nvoid checkStr(bool cond, const char *msg) {\n    if (!cond) {\n        while (true) {\n            // uBit.display.scroll(msg, 100);\n            // uBit.sleep(100);\n        }\n    }\n}\n\n#ifdef PXT_VM\nint templateHash() {\n    return *(int*)&vmImg->infoHeader->hexHash;\n}\n\nint programHash() {\n    return *(int*)&vmImg->infoHeader->programHash;\n}\n\nint getNumGlobals() {\n    return (int)vmImg->infoHeader->allocGlobals;\n}\n\nString programName() {\n    return mkString((char *)vmImg->infoHeader->name);\n}\n#else\nint templateHash() {\n    return ((int *)bytecode)[4];\n}\n\nint programHash() {\n    return ((int *)bytecode)[6];\n}\n\nint getNumGlobals() {\n    return bytecode[16];\n}\n\nString programName() {\n    return ((String *)bytecode)[15];\n}\n#endif\n\n#ifndef PXT_VM\nvoid variantNotSupported(const char *v) {\n    DMESG(\"variant not supported: %s\", v);\n    target_panic(PANIC_VARIANT_NOT_SUPPORTED);\n}\n\nvoid exec_binary(unsigned *pc) {\n    // XXX re-enable once the calibration code is fixed and [editor/embedded.ts]\n    // properly prepends a call to [internal_main].\n    // ::touch_develop::internal_main();\n\n    // unique group for radio based on source hash\n    // ::touch_develop::micro_bit::radioDefaultGroup = programHash();\n\n    unsigned ver = *pc++;\n    checkStr(ver == 0x4210, \":( Bad runtime version\");\n\n    bytecode = *((uint16_t **)pc++); // the actual bytecode is here\n\n    if (((uint32_t *)bytecode)[0] == 0x923B8E71) {\n        variantNotSupported((const char *)bytecode + 16);\n        return;\n    }\n\n    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());\n    memset(globals, 0, sizeof(TValue) * getNumGlobals());\n\n    // can be any valid address, best in RAM for speed\n    globals[0] = (TValue)&globals;\n\n    // just compare the first word\n    // TODO\n    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,\n             \":( Failed partial flash\");\n\n    uintptr_t startptr = (uintptr_t)bytecode;\n\n    startptr += 64; // header\n\n    initPerfCounters();\n\n    initRuntime();\n\n    runAction0((Action)startptr);\n\n    pxt::releaseFiber();\n}\n\nvoid start() {\n    exec_binary((unsigned *)functionsAndBytecode);\n}\n#endif\n\n} // namespace pxt\n\nnamespace Array_ {\n//%\nbool isArray(TValue arr) {\n    auto vt = getAnyVTable(arr);\n    return vt && vt->classNo == BuiltInType::RefCollection;\n}\n} // namespace Array_\n\nnamespace pxtrt {\n//% expose\nRefCollection *keysOf(TValue v) {\n    auto r = NEW_GC(RefCollection);\n    MEMDBG(\"mkColl[keys]: => %p\", r);\n    if (getAnyVTable(v) != &RefMap_vtable)\n        return r;\n    auto rm = (RefMap *)v;\n    auto len = rm->keys.getLength();\n    if (!len)\n        return r;\n    registerGCObj(r);\n    r->setLength(len);\n    auto dst = r->getData();\n    memcpy(dst, rm->keys.getData(), len * sizeof(TValue));\n    unregisterGCObj(r);\n    return r;\n}\n//% expose\nTValue mapDeleteByString(RefMap *map, String key) {\n    if (getAnyVTable((TValue)map) != &RefMap_vtable)\n        soft_panic(PANIC_DELETE_ON_CLASS);\n    int i = map->findIdx(key);\n    if (i >= 0) {\n        map->keys.remove(i);\n        map->values.remove(i);\n    }\n    return TAG_TRUE;\n}\n\n} // namespace pxtrt\n",
            "pxt.json": "{\n    \"name\": \"base\",\n    \"description\": \"The base library\",\n    \"dependencies\": {},\n    \"files\": [\n        \"README.md\",\n        \"pxt-core.d.ts\",\n        \"pxt.cpp\",\n        \"gc.cpp\",\n        \"configkeys.h\",\n        \"pxtbase.h\",\n        \"core.cpp\",\n        \"advmath.cpp\",\n        \"trig.cpp\",\n        \"pxt-helpers.ts\",\n        \"fixed.ts\",\n        \"buffer.cpp\",\n        \"buffer.ts\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"loops.cpp\",\n        \"math.ts\",\n        \"ns.ts\",\n        \"control.cpp\",\n        \"controlgc.cpp\",\n        \"control.ts\",\n        \"interval.ts\",\n        \"gcstats.ts\",\n        \"poll.ts\",\n        \"console.ts\",\n        \"json.ts\",\n        \"templates.ts\",\n        \"eventcontext.ts\",\n        \"pause.ts\",\n        \"forever.ts\",\n        \"utfdecoder.ts\",\n        \"scheduling.ts\",\n        \"controlmessage.ts\",\n        \"perfcounters.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    },\n    \"partial\": true,\n    \"yotta\": {\n        \"optionalConfig\": {\n            \"PXT_GC_CHECKS\": 0\n        },\n        \"userConfigs\": [\n            {\n                \"description\": \"(Diagnostics) Garbage Collection checks.\",\n                \"config\": {\n                    \"PXT_GC_CHECKS\": 1\n                }\n            }\n        ]\n    }\n}\n",
            "pxtbase.h": "#ifndef __PXTBASE_H\n#define __PXTBASE_H\n\n#pragma GCC diagnostic ignored \"-Wunused-parameter\"\n#pragma GCC diagnostic ignored \"-Wformat\"\n#pragma GCC diagnostic ignored \"-Warray-bounds\"\n\n// needed for gcc6; not sure why\n#undef min\n#undef max\n\n#define NOLOG(...)                                                                                 \\\n    do {                                                                                           \\\n    } while (0)\n\n#define MEMDBG NOLOG\n//#define MEMDBG DMESG\n#define MEMDBG2 NOLOG\n\n#include \"pxtconfig.h\"\n#include \"configkeys.h\"\n\n#ifndef PXT_UTF8\n#define PXT_UTF8 0\n#endif\n\n#if defined(PXT_VM)\n#include <stdint.h>\n#if UINTPTR_MAX == 0xffffffff\n#define PXT32 1\n#elif UINTPTR_MAX == 0xffffffffffffffff\n#define PXT64 1\n#else\n#error \"UINTPTR_MAX has invalid value\"\n#endif\n#endif\n\n#define intcheck(...) check(__VA_ARGS__)\n//#define intcheck(...) do {} while (0)\n\n#ifdef PXT_USE_FLOAT\n#define NUMBER float\n#else\n#define NUMBER double\n#endif\n\n#include <string.h>\n#include <stdint.h>\n#include <math.h>\n\n#ifdef POKY\nvoid *operator new(size_t size, void *ptr);\nvoid *operator new(size_t size);\n#else\n#include <new>\n#endif\n\n#include \"platform.h\"\n#include \"pxtcore.h\"\n\n#ifndef PXT_REGISTER_RESET\n#define PXT_REGISTER_RESET(fn) ((void)0)\n#endif\n\n#define PXT_REFCNT_FLASH 0xfffe\n\n#define CONCAT_1(a, b) a##b\n#define CONCAT_0(a, b) CONCAT_1(a, b)\n// already provided in some platforms, like mbedos\n#ifndef STATIC_ASSERT\n#define STATIC_ASSERT(e) enum { CONCAT_0(_static_assert_, __LINE__) = 1 / ((e) ? 1 : 0) };\n#endif\n\n#ifndef ramint_t\n// this type limits size of arrays\n#if defined(__linux__) || defined(PXT_VM)\n// TODO fix the inline array accesses to take note of this!\n#define ramint_t uint32_t\n#else\n#define ramint_t uint16_t\n#endif\n#endif\n\n#ifndef PXT_IN_ISR\n#define PXT_IN_ISR() (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk)\n#endif\n\n#ifdef POKY\ninline void *operator new(size_t, void *p) {\n    return p;\n}\ninline void *operator new[](size_t, void *p) {\n    return p;\n}\n#endif\n\nnamespace pxt {\n\ntemplate <typename T> inline const T &max(const T &a, const T &b) {\n    if (a < b)\n        return b;\n    return a;\n}\n\ntemplate <typename T> inline const T &min(const T &a, const T &b) {\n    if (a < b)\n        return a;\n    return b;\n}\n\ntemplate <typename T> inline void swap(T &a, T &b) {\n    T tmp = a;\n    a = b;\n    b = tmp;\n}\n\n//\n// Tagged values (assume 4 bytes for now, Cortex-M0)\n//\nstruct TValueStruct {};\ntypedef TValueStruct *TValue;\n\ntypedef TValue TNumber;\ntypedef TValue Action;\ntypedef TValue ImageLiteral;\n\n// To be implemented by the target\nextern \"C\" void target_panic(int error_code);\nextern \"C\" void target_reset();\nvoid sleep_ms(unsigned ms);\nvoid sleep_us(uint64_t us);\nvoid releaseFiber();\nuint64_t current_time_us();\nint current_time_ms();\nvoid initRuntime();\nvoid initSystemTimer();\nvoid sendSerial(const char *data, int len);\nvoid setSendToUART(void (*f)(const char *, int));\nuint64_t getLongSerialNumber();\nvoid registerWithDal(int id, int event, Action a, int flags = 16); // EVENT_LISTENER_DEFAULT_FLAGS\nvoid runInParallel(Action a);\nvoid runForever(Action a);\nvoid waitForEvent(int id, int event);\n//%\nunsigned afterProgramPage();\n//%\nvoid dumpDmesg();\nuint32_t hash_fnv1(const void *data, unsigned len);\n\n// also defined DMESG macro\n// end\n\n#define TAGGED_SPECIAL(n) (TValue)(void *)((n << 2) | 2)\n#define TAG_FALSE TAGGED_SPECIAL(2) // 10\n#define TAG_TRUE TAGGED_SPECIAL(16) // 66\n#define TAG_UNDEFINED (TValue)0\n#define TAG_NULL TAGGED_SPECIAL(1) // 6\n#define TAG_NAN TAGGED_SPECIAL(3)  // 14\n#define TAG_NUMBER(n) (TNumber)(void *)(((uintptr_t)(uint32_t)(n) << 1) | 1)\n#define TAG_NON_VALUE TAGGED_SPECIAL(4) // 18; doesn't represent any JS value\n\n#ifdef PXT_VM\ninline bool isEncodedDouble(uint64_t v) {\n    return (v >> 48) != 0;\n}\n#endif\n\ninline bool isDouble(TValue v) {\n#ifdef PXT64\n    return ((uintptr_t)v >> 48) != 0;\n#else\n    (void)v;\n    return false;\n#endif\n}\n\ninline bool isPointer(TValue v) {\n    return !isDouble(v) && v != 0 && ((intptr_t)v & 3) == 0;\n}\n\ninline bool isTagged(TValue v) {\n    return (!isDouble(v) && ((intptr_t)v & 3)) || !v;\n}\n\ninline bool isInt(TValue v) {\n    return !isDouble(v) && ((intptr_t)v & 1);\n}\n\ninline bool isSpecial(TValue v) {\n    return !isDouble(v) && ((intptr_t)v & 2);\n}\n\ninline bool bothNumbers(TValue a, TValue b) {\n    return !isDouble(a) && !isDouble(b) && ((intptr_t)a & (intptr_t)b & 1);\n}\n\ninline int numValue(TValue n) {\n    return (int)((intptr_t)n >> 1);\n}\n\ninline bool canBeTagged(int v) {\n    (void)v;\n#ifdef PXT_BOX_DEBUG\n    return false;\n#elif defined(PXT64)\n    return true;\n#else\n    return (v << 1) >> 1 == v;\n#endif\n}\n\n// see https://anniecherkaev.com/the-secret-life-of-nan\n\n#define NanBoxingOffset 0x1000000000000LL\n\ntemplate <typename TO, typename FROM> TO bitwise_cast(FROM in) {\n    STATIC_ASSERT(sizeof(TO) == sizeof(FROM));\n    union {\n        FROM from;\n        TO to;\n    } u;\n    u.from = in;\n    return u.to;\n}\n\ninline double decodeDouble(uint64_t v) {\n    return bitwise_cast<double>(v - NanBoxingOffset);\n}\n\n#ifdef PXT64\nSTATIC_ASSERT(sizeof(void *) == 8);\ninline double doubleVal(TValue v) {\n    return bitwise_cast<double>((uint64_t)v - NanBoxingOffset);\n}\n\ninline TValue tvalueFromDouble(double d) {\n    return (TValue)(bitwise_cast<uint64_t>(d) + NanBoxingOffset);\n}\n#else\nSTATIC_ASSERT(sizeof(void *) == 4);\n#endif\n\n// keep in sym with sim/control.ts\ntypedef enum {\n    PANIC_CODAL_OOM = 20,\n    PANIC_GC_OOM = 21,\n    PANIC_GC_TOO_BIG_ALLOCATION = 22,\n    PANIC_CODAL_HEAP_ERROR = 30,\n    PANIC_CODAL_NULL_DEREFERENCE = 40,\n    PANIC_CODAL_USB_ERROR = 50,\n    PANIC_CODAL_HARDWARE_CONFIGURATION_ERROR = 90,\n\n    PANIC_INVALID_BINARY_HEADER = 901,\n    PANIC_OUT_OF_BOUNDS = 902,\n    PANIC_REF_DELETED = 903,\n    PANIC_SIZE = 904,\n    PANIC_INVALID_VTABLE = 905,\n    PANIC_INTERNAL_ERROR = 906,\n    PANIC_NO_SUCH_CONFIG = 907,\n    PANIC_NO_SUCH_PIN = 908,\n    PANIC_INVALID_ARGUMENT = 909,\n    PANIC_MEMORY_LIMIT_EXCEEDED = 910,\n    PANIC_SCREEN_ERROR = 911,\n    PANIC_MISSING_PROPERTY = 912,\n    PANIC_INVALID_IMAGE = 913,\n    PANIC_CALLED_FROM_ISR = 914,\n    PANIC_HEAP_DUMPED = 915,\n    PANIC_STACK_OVERFLOW = 916,\n    PANIC_BLOCKING_TO_STRING = 917,\n    PANIC_VM_ERROR = 918,\n    PANIC_SETTINGS_CLEARED = 920,\n    PANIC_SETTINGS_OVERLOAD = 921,\n    PANIC_SETTINGS_SECRET_MISSING = 922,\n    PANIC_DELETE_ON_CLASS = 923,\n    PANIC_OUT_OF_TIMERS = 924,\n    PANIC_JACDAC = 925,\n    PANIC_MICROPHONE_MISSING = 926,\n    PANIC_VARIANT_NOT_SUPPORTED = 927,\n\n    PANIC_CAST_FIRST = 980,\n    PANIC_CAST_FROM_UNDEFINED = 980,\n    PANIC_CAST_FROM_BOOLEAN = 981,\n    PANIC_CAST_FROM_NUMBER = 982,\n    PANIC_CAST_FROM_STRING = 983,\n    PANIC_CAST_FROM_OBJECT = 984,\n    PANIC_CAST_FROM_FUNCTION = 985,\n    PANIC_CAST_FROM_NULL = 989,\n\n    PANIC_UNHANDLED_EXCEPTION = 999,\n\n} PXT_PANIC;\n\nextern const uintptr_t functionsAndBytecode[];\nextern TValue *globals;\nextern uint16_t *bytecode;\nclass RefRecord;\n\n// Utility functions\n\ntypedef TValue (*RunActionType)(Action a, TValue arg0, TValue arg1, TValue arg2);\n\n#define asmRunAction3 ((RunActionType)(((uintptr_t *)bytecode)[12]))\n\nstatic inline TValue runAction3(Action a, TValue arg0, TValue arg1, TValue arg2) {\n    return asmRunAction3(a, arg0, arg1, 0);\n}\nstatic inline TValue runAction2(Action a, TValue arg0, TValue arg1) {\n    return asmRunAction3(a, arg0, arg1, 0);\n}\nstatic inline TValue runAction1(Action a, TValue arg0) {\n    return asmRunAction3(a, arg0, 0, 0);\n}\nstatic inline TValue runAction0(Action a) {\n    return asmRunAction3(a, 0, 0, 0);\n}\n\nclass RefAction;\nclass BoxedString;\nstruct VTable;\n\n//%\nAction mkAction(int totallen, RefAction *act);\n//% expose\nint templateHash();\n//% expose\nint programHash();\n//% expose\nBoxedString *programName();\n//% expose\nunsigned programSize();\n//%\nint getNumGlobals();\n//%\nRefRecord *mkClassInstance(VTable *vt);\n//%\nvoid debugMemLeaks();\n//%\nvoid anyPrint(TValue v);\n\n//%\nint getConfig(int key, int defl = -1);\n\n//%\nint toInt(TNumber v);\n//%\nunsigned toUInt(TNumber v);\n//%\nNUMBER toDouble(TNumber v);\n//%\nfloat toFloat(TNumber v);\n//%\nTNumber fromDouble(NUMBER r);\n//%\nTNumber fromFloat(float r);\n\n//%\nTNumber fromInt(int v);\n//%\nTNumber fromUInt(unsigned v);\n//%\nTValue fromBool(bool v);\n//%\nbool eq_bool(TValue a, TValue b);\n//%\nbool eqq_bool(TValue a, TValue b);\n\n//%\nvoid failedCast(TValue v, void *addr = NULL);\n//%\nvoid missingProperty(TValue v);\n\nvoid error(PXT_PANIC code, int subcode = 0);\nvoid exec_binary(unsigned *pc);\nvoid start();\n\nstruct HandlerBinding {\n    HandlerBinding *next;\n    int source;\n    int value;\n    Action action;\n#ifndef PXT_CODAL\n    uint32_t flags;\n    struct Event *pending;\n#endif\n};\nHandlerBinding *findBinding(int source, int value);\nHandlerBinding *nextBinding(HandlerBinding *curr, int source, int value);\nvoid setBinding(int source, int value, Action act);\n\n// Legacy stuff; should no longer be used\n//%\nTValue incr(TValue e);\n//%\nvoid decr(TValue e);\n\ninline TValue incr(TValue e) {\n    return e;\n}\ninline void decr(TValue e) {}\n\nclass RefObject;\n\nstatic inline RefObject *incrRC(RefObject *r) {\n    return r;\n}\nstatic inline void decrRC(RefObject *) {}\n\ninline void *ptrOfLiteral(int offset) {\n    return &bytecode[offset];\n}\n\n// Checks if object is ref-counted, and has a custom PXT vtable in front\n// TODO\ninline bool isRefCounted(TValue e) {\n    return isPointer(e);\n}\n\ninline void check(int cond, PXT_PANIC code, int subcode = 0) {\n    if (!cond)\n        error(code, subcode);\n}\n\ninline void oops(int subcode = 0) {\n    target_panic(800 + subcode);\n}\n\nclass RefObject;\n\ntypedef void (*RefObjectMethod)(RefObject *self);\ntypedef unsigned (*RefObjectSizeMethod)(RefObject *self);\ntypedef void *PVoid;\ntypedef void **PPVoid;\n\ntypedef void *Object_;\n\n#define VTABLE_MAGIC 0xF9\n#define VTABLE_MAGIC2 0xF8\n\nenum class ValType : uint8_t {\n    Undefined,\n    Boolean,\n    Number,\n    String,\n    Object,\n    Function,\n};\n\n// keep in sync with pxt-core (search for the type name)\nenum class BuiltInType : uint16_t {\n    BoxedString = 1,\n    BoxedNumber = 2,\n    BoxedBuffer = 3,\n    RefAction = 4,\n    RefImage = 5,\n    RefCollection = 6,\n    RefRefLocal = 7,\n    RefMap = 8,\n    RefMImage = 9,             // microbit-specific\n    MMap = 10,                 // linux, mostly ev3\n    BoxedString_SkipList = 11, // used by VM bytecode representation only\n    BoxedString_ASCII = 12,    // ditto\n    ZPin = 13,\n    User0 = 16,\n};\n\nstruct VTable {\n    uint16_t numbytes;\n    ValType objectType;\n    uint8_t magic;\n#ifdef PXT_VM\n    uint16_t ifaceHashEntries;\n    BuiltInType lastClassNo;\n#else\n    PVoid *ifaceTable;\n#endif\n    BuiltInType classNo;\n    uint16_t reserved;\n    uint32_t ifaceHashMult;\n\n    // we only use the first few methods here; pxt will generate more\n    PVoid methods[8];\n};\n\n//%\nextern const VTable string_inline_ascii_vt;\n#if PXT_UTF8\n//%\nextern const VTable string_inline_utf8_vt;\n//%\nextern const VTable string_cons_vt;\n//%\nextern const VTable string_skiplist16_vt;\n//%\nextern const VTable string_skiplist16_packed_vt;\n#endif\n//%\nextern const VTable buffer_vt;\n//%\nextern const VTable number_vt;\n//%\nextern const VTable RefAction_vtable;\n\n#ifndef PXT_IS_READONLY\n// assume ARM - ram addresses are 0x2000_0000+; flash is either 0x0+ or 0x0800_0000+\n#define PXT_IS_READONLY(v) (isTagged(v) || !((uintptr_t)v >> 28))\n#endif\n\ninline bool isReadOnly(TValue v) {\n    return PXT_IS_READONLY(v);\n}\n\n// A base abstract class for ref-counted objects.\nclass RefObject {\n  public:\n    const VTable *vtable;\n\n    RefObject(const VTable *vt) {\n#if defined(PXT32) && defined(PXT_VM) && !defined(PXT_ESP32)\n        if ((uint32_t)vt & 0xf0000000)\n            target_panic(PANIC_INVALID_VTABLE);\n#endif\n        vtable = vt;\n    }\n\n    void destroyVT();\n    void printVT();\n\n    inline uintptr_t vt() { return (uintptr_t)vtable; }\n    inline void setVT(uintptr_t v) { vtable = (const VTable *)v; }\n\n    inline void ref() {}\n    inline void unref() {}\n    inline bool isReadOnly() { return pxt::isReadOnly((TValue)this); }\n};\n\nclass Segment {\n  private:\n    TValue *data;\n    ramint_t length;\n    ramint_t size;\n\n    // this just gives max value of ramint_t\n    void growByMin(ramint_t minSize);\n    void ensure(ramint_t newSize);\n\n  public:\n    static constexpr ramint_t MaxSize = (((1U << (8 * sizeof(ramint_t) - 1)) - 1) << 1) + 1;\n    static constexpr TValue DefaultValue = TAG_UNDEFINED; // == NULL\n\n    Segment() : data(nullptr), length(0), size(0) {}\n\n    TValue get(unsigned i) { return i < length ? data[i] : NULL; }\n    void set(unsigned i, TValue value);\n\n    unsigned getLength() { return length; };\n    void setLength(unsigned newLength);\n\n    void push(TValue value) { set(length, value); }\n    TValue pop();\n\n    TValue remove(unsigned i);\n    void insert(unsigned i, TValue value);\n\n    void destroy();\n\n    void print();\n\n    TValue *getData() { return data; }\n};\n\n// Low-Level segment using system malloc\nclass LLSegment {\n  private:\n    TValue *data;\n    ramint_t length;\n    ramint_t size;\n\n  public:\n    LLSegment() : data(nullptr), length(0), size(0) {}\n\n    void set(unsigned idx, TValue v);\n    void push(TValue value) { set(length, value); }\n    TValue pop();\n    void destroy();\n    void setLength(unsigned newLen);\n\n    TValue get(unsigned i) { return i < length ? data[i] : NULL; }\n    unsigned getLength() { return length; };\n    TValue *getData() { return data; }\n};\n\n// A ref-counted collection of either primitive or ref-counted objects (String, Image,\n// user-defined record, another collection)\nclass RefCollection : public RefObject {\n  public:\n    Segment head;\n\n    RefCollection();\n\n    static void destroy(RefCollection *coll);\n    static void scan(RefCollection *coll);\n    static unsigned gcsize(RefCollection *coll);\n    static void print(RefCollection *coll);\n\n    unsigned length() { return head.getLength(); }\n    void setLength(unsigned newLength) { head.setLength(newLength); }\n    TValue getAt(int i) { return head.get(i); }\n    TValue *getData() { return head.getData(); }\n};\n\nclass RefMap : public RefObject {\n  public:\n    Segment keys;\n    Segment values;\n\n    RefMap();\n    static void destroy(RefMap *map);\n    static void scan(RefMap *map);\n    static unsigned gcsize(RefMap *coll);\n    static void print(RefMap *map);\n    int findIdx(BoxedString *key);\n};\n\n// A ref-counted, user-defined JS object.\nclass RefRecord : public RefObject {\n  public:\n    // The object is allocated, so that there is space at the end for the fields.\n    TValue fields[];\n\n    RefRecord(VTable *v) : RefObject(v) {}\n\n    TValue ld(int idx);\n    TValue ldref(int idx);\n    void st(int idx, TValue v);\n    void stref(int idx, TValue v);\n};\n\nstatic inline VTable *getVTable(RefObject *r) {\n    return (VTable *)(r->vt() & ~1);\n}\n\nstatic inline VTable *getAnyVTable(TValue v) {\n    if (!isRefCounted(v))\n        return NULL;\n    auto vt = getVTable((RefObject *)v);\n    if (vt->magic == VTABLE_MAGIC)\n        return vt;\n    return NULL;\n}\n\n// these are needed when constructing vtables for user-defined classes\n//%\nvoid RefRecord_destroy(RefRecord *r);\n//%\nvoid RefRecord_print(RefRecord *r);\n//%\nvoid RefRecord_scan(RefRecord *r);\n//%\nunsigned RefRecord_gcsize(RefRecord *r);\n\ntypedef TValue (*ActionCB)(TValue *captured, TValue arg0, TValue arg1, TValue arg2);\n\n// Ref-counted function pointer.\nclass RefAction : public RefObject {\n  public:\n    uint16_t len;\n    uint16_t numArgs;\n#ifdef PXT_VM\n    uint16_t initialLen;\n    uint16_t flags;\n    uintptr_t func;\n#else\n    ActionCB func; // The function pointer\n#endif\n    // fields[] contain captured locals\n    TValue fields[];\n\n    static void destroy(RefAction *act);\n    static void scan(RefAction *act);\n    static unsigned gcsize(RefAction *coll);\n    static void print(RefAction *act);\n\n    RefAction();\n\n    inline void stCore(int idx, TValue v) {\n        // DMESG(\"ST [%d] = %d \", idx, v); this->print();\n        intcheck(0 <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 10);\n        intcheck(fields[idx] == 0, PANIC_OUT_OF_BOUNDS, 11); // only one assignment permitted\n        fields[idx] = v;\n    }\n};\n\n// These two are used to represent locals written from inside inline functions\nclass RefRefLocal : public RefObject {\n  public:\n    TValue v;\n    static void destroy(RefRefLocal *l);\n    static void scan(RefRefLocal *l);\n    static unsigned gcsize(RefRefLocal *l);\n    static void print(RefRefLocal *l);\n    RefRefLocal();\n};\n\ntypedef int color;\n\n// note: this is hardcoded in PXT (hexfile.ts)\n\nclass BoxedNumber : public RefObject {\n  public:\n    NUMBER num;\n    BoxedNumber() : RefObject(&number_vt) {}\n} __attribute__((packed));\n\nclass BoxedString : public RefObject {\n  public:\n    union {\n        struct {\n            uint16_t length; // ==size\n            char data[0];\n        } ascii;\n#if PXT_UTF8\n        struct {\n            uint16_t size;\n            char data[0];\n        } utf8;\n        struct {\n            BoxedString *left;\n            BoxedString *right;\n        } cons;\n        struct {\n            uint16_t size;   // in bytes\n            uint16_t length; // in characters\n            uint16_t *list;\n        } skip;\n        struct {\n            uint16_t size;   // in bytes\n            uint16_t length; // in characters\n            uint16_t list[0];\n        } skip_pack;\n#endif\n    };\n\n#if PXT_UTF8\n    uintptr_t runMethod(int idx) {\n        return ((uintptr_t(*)(BoxedString *))vtable->methods[idx])(this);\n    }\n    const char *getUTF8Data() { return (const char *)runMethod(4); }\n    uint32_t getUTF8Size() { return (uint32_t)runMethod(5); }\n    // in characters\n    uint32_t getLength() { return (uint32_t)runMethod(6); }\n    const char *getUTF8DataAt(uint32_t pos) {\n        auto meth = ((const char *(*)(BoxedString *, uint32_t))vtable->methods[7]);\n        return meth(this, pos);\n    }\n#else\n    const char *getUTF8Data() { return ascii.data; }\n    uint32_t getUTF8Size() { return ascii.length; }\n    uint32_t getLength() { return ascii.length; }\n    const char *getUTF8DataAt(uint32_t pos) { return pos < ascii.length ? ascii.data + pos : NULL; }\n#endif\n\n    TNumber charCodeAt(int pos);\n\n    BoxedString(const VTable *vt) : RefObject(vt) {}\n};\n\n// cross version compatible way of accessing string data\n#ifndef PXT_STRING_DATA\n#define PXT_STRING_DATA(str) str->getUTF8Data()\n#endif\n\n// cross version compatible way of accessing string length\n#ifndef PXT_STRING_DATA_LENGTH\n#define PXT_STRING_DATA_LENGTH(str) str->getUTF8Size()\n#endif\n\nclass BoxedBuffer : public RefObject {\n  public:\n    // data needs to be word-aligned, so we use 32 bits for length\n    int length;\n    uint8_t data[0];\n    BoxedBuffer() : RefObject(&buffer_vt) {}\n\n    static bool isInstance(TValue v);\n};\n\n// cross version compatible way of access data field\n#ifndef PXT_BUFFER_DATA\n#define PXT_BUFFER_DATA(buffer) buffer->data\n#endif\n\n// cross version compatible way of access data length\n#ifndef PXT_BUFFER_LENGTH\n#define PXT_BUFFER_LENGTH(buffer) buffer->length\n#endif\n\n#ifndef PXT_CREATE_BUFFER\n#define PXT_CREATE_BUFFER(data, len) pxt::mkBuffer(data, len)\n#endif\n\n// Legacy format:\n// the first byte of data indicates the format - currently 0xE1 or 0xE4 to 1 or 4 bit bitmaps\n// second byte indicates width in pixels\n// third byte indicates the height (which should also match the size of the buffer)\n// just like ordinary buffers, these can be layed out in flash\n\n// Current format:\n// 87 BB WW WW HH HH 00 00 DATA\n// that is: 0x87, 0x01 or 0x04 - bpp, width in little endian, height, 0x00, 0x00 followed by data\n// for 4 bpp images, rows are word-aligned (as in legacy)\n\n#define IMAGE_HEADER_MAGIC 0x87\n\nstruct ImageHeader {\n    uint8_t magic;\n    uint8_t bpp;\n    uint16_t width;\n    uint16_t height;\n    uint16_t padding;\n    uint8_t pixels[0];\n};\n\nclass RefImage : public RefObject {\n  public:\n    BoxedBuffer *buffer;\n    uint32_t revision;\n\n    RefImage(BoxedBuffer *buf);\n    RefImage(uint32_t sz);\n\n    void setBuffer(BoxedBuffer *b);\n\n    uint8_t *data() { return buffer->data; }\n    int length() { return (int)buffer->length; }\n\n    ImageHeader *header() { return (ImageHeader *)buffer->data; }\n    int pixLength() { return length() - sizeof(ImageHeader); }\n\n    int width() { return header()->width; }\n    int height() { return header()->height; }\n    int wordHeight();\n    int bpp() { return header()->bpp; }\n\n    bool hasPadding() { return (height() & 0x7) != 0; }\n\n    uint8_t *pix() { return header()->pixels; }\n\n    int byteHeight() {\n        if (bpp() == 1)\n            return (height() + 7) >> 3;\n        else if (bpp() == 4)\n            return ((height() * 4 + 31) >> 5) << 2;\n        else {\n            oops(21);\n            return -1;\n        }\n    }\n\n    uint8_t *pix(int x, int y) {\n        uint8_t *d = &pix()[byteHeight() * x];\n        if (y) {\n            if (bpp() == 1)\n                d += y >> 3;\n            else if (bpp() == 4)\n                d += y >> 1;\n        }\n        return d;\n    }\n\n    uint8_t fillMask(color c);\n    bool inRange(int x, int y);\n    void clamp(int *x, int *y);\n    void makeWritable();\n\n    static void destroy(RefImage *t);\n    static void scan(RefImage *t);\n    static unsigned gcsize(RefImage *t);\n    static void print(RefImage *t);\n};\n\nRefImage *mkImage(int w, int h, int bpp);\n\ntypedef BoxedBuffer *Buffer;\ntypedef BoxedString *String;\ntypedef RefImage *Image_;\n\nuint32_t toRealUTF8(String str, uint8_t *dst);\n\n// keep in sync with github/pxt/pxtsim/libgeneric.ts\nenum class NumberFormat {\n    Int8LE = 1,\n    UInt8LE,\n    Int16LE,\n    UInt16LE,\n    Int32LE,\n    Int8BE,\n    UInt8BE,\n    Int16BE,\n    UInt16BE,\n    Int32BE,\n\n    UInt32LE,\n    UInt32BE,\n    Float32LE,\n    Float64LE,\n    Float32BE,\n    Float64BE,\n};\n\n// this will, unlike mkStringCore, UTF8-canonicalize the data\nString mkString(const char *data, int len = -1);\n// data can be NULL in both cases\nBuffer mkBuffer(const void *data, int len);\nString mkStringCore(const char *data, int len = -1);\n\nTNumber getNumberCore(uint8_t *buf, int size, NumberFormat format);\nvoid setNumberCore(uint8_t *buf, int size, NumberFormat format, TNumber value);\n\nvoid seedRandom(unsigned seed);\nvoid seedAddRandom(unsigned seed);\n// max is inclusive\nunsigned getRandom(unsigned max);\n\nValType valType(TValue v);\n\n// this is equivalent to JS `throw v`; it will leave\n// the current function(s), all the way until the nearest try block and\n// ignore all destructors (think longjmp())\nvoid throwValue(TValue v);\n\nvoid registerGC(TValue *root, int numwords = 1);\nvoid unregisterGC(TValue *root, int numwords = 1);\nvoid registerGCPtr(TValue ptr);\nvoid unregisterGCPtr(TValue ptr);\nstatic inline void registerGCObj(RefObject *ptr) {\n    registerGCPtr((TValue)ptr);\n}\nstatic inline void unregisterGCObj(RefObject *ptr) {\n    unregisterGCPtr((TValue)ptr);\n}\nvoid gc(int flags);\n\nstruct StackSegment {\n    void *top;\n    void *bottom;\n    StackSegment *next;\n};\n\n#define NUM_TRY_FRAME_REGS 3\nstruct TryFrame {\n    TryFrame *parent;\n    uintptr_t registers[NUM_TRY_FRAME_REGS];\n};\n\nstruct ThreadContext {\n    TValue *globals;\n    StackSegment stack;\n    TryFrame *tryFrame;\n    TValue thrownValue;\n#ifdef PXT_GC_THREAD_LIST\n    ThreadContext *next;\n    ThreadContext *prev;\n#endif\n};\n\n#ifdef PXT_GC_THREAD_LIST\nextern ThreadContext *threadContexts;\nvoid *threadAddressFor(ThreadContext *, void *sp);\n#endif\n\nvoid releaseThreadContext(ThreadContext *ctx);\nThreadContext *getThreadContext();\nvoid setThreadContext(ThreadContext *ctx);\n\n#ifndef PXT_GC_THREAD_LIST\nvoid gcProcessStacks(int flags);\n#endif\n\nvoid gcProcess(TValue v);\nvoid gcFreeze();\n\n#ifdef PXT_VM\nvoid gcStartup();\nvoid gcPreStartup();\n#endif\n\nvoid coreReset();\nvoid gcReset();\nvoid systemReset();\n\nvoid doNothing();\n\nvoid *gcAllocate(int numbytes);\nvoid *gcAllocateArray(int numbytes);\nextern \"C\" void *app_alloc(int numbytes);\nextern \"C\" void *app_free(void *ptr);\nextern \"C\" void *app_alloc_at(void *at, int numbytes);\nvoid gcPreAllocateBlock(uint32_t sz);\n\nint redirectSamples(int16_t *dst, int numsamples, int samplerate);\n\n#ifdef PXT64\n#define TOWORDS(bytes) (((bytes) + 7) >> 3)\n#else\n#define TOWORDS(bytes) (((bytes) + 3) >> 2)\n#endif\n\n#ifndef PXT_VM\n#define soft_panic target_panic\n#endif\n\nextern int debugFlags;\n\nenum class PerfCounters {\n    GC,\n};\n\n#ifdef PXT_PROFILE\n#ifndef PERF_NOW\n#error \"missing platform timer support\"\n#endif\n\nstruct PerfCounter {\n    uint32_t value;\n    uint32_t numstops;\n    uint32_t start;\n};\n\nextern struct PerfCounter *perfCounters;\n\nvoid initPerfCounters();\n//%\nvoid dumpPerfCounters();\n//%\nvoid startPerfCounter(PerfCounters n);\n//%\nvoid stopPerfCounter(PerfCounters n);\n#else\ninline void startPerfCounter(PerfCounters n) {}\ninline void stopPerfCounter(PerfCounters n) {}\ninline void initPerfCounters() {}\ninline void dumpPerfCounters() {}\n#endif\n\n// Handling of built-in string literals (like \"[Object]\", \"true\" etc.).\n\n// This has the same layout as BoxedString, but has statically allocated buffer\ntemplate <size_t N> struct BoxedStringLayout {\n    const void *vtable;\n    uint16_t size;\n    const char data[N];\n};\n\ntemplate <size_t N> constexpr size_t _boxedStringLen(char const (&)[N]) {\n    return N;\n}\n\n// strings defined here as used as (String)name\n#define PXT_DEF_STRING(name, val)                                                                  \\\n    const BoxedStringLayout<_boxedStringLen(val)> name[1] = {                                      \\\n        {&pxt::string_inline_ascii_vt, _boxedStringLen(val) - 1, val}};\n\n// bigger value - less memory, but slower\n// 16/20 keeps s.length and s.charCodeAt(i) at about 200 cycles (for actual unicode strings),\n// which is similar to amortized allocation time\n#define PXT_STRING_SKIP_INCR 16 // needs to be power of 2; needs to be kept in sync with compiler\n#define PXT_STRING_MIN_SKIP                                                                        \\\n    20 // min. size of string to use skip list; static code has its own limit\n\n#define PXT_NUM_SKIP_ENTRIES(p) ((p)->skip.length / PXT_STRING_SKIP_INCR)\n#define PXT_SKIP_DATA_IND(p) ((const char *)(p->skip.list + PXT_NUM_SKIP_ENTRIES(p)))\n#define PXT_SKIP_DATA_PACK(p) ((const char *)(p->skip_pack.list + PXT_NUM_SKIP_ENTRIES(p)))\n\n} // namespace pxt\n\nusing namespace pxt;\n\nnamespace numops {\n//%\nString toString(TValue v);\n//%\nint toBool(TValue v);\n//%\nint toBoolDecr(TValue v);\n} // namespace numops\n\nnamespace pxt {\ninline bool toBoolQuick(TValue v) {\n    if (v == TAG_TRUE)\n        return true;\n    if (v == TAG_FALSE || v == TAG_UNDEFINED || v == TAG_NULL)\n        return false;\n    return numops::toBool(v);\n}\n} // namespace pxt\n\nnamespace pxtrt {\n//%\nRefMap *mkMap();\n//%\nTValue mapGetByString(RefMap *map, String key);\n//%\nint lookupMapKey(String key);\n//%\nTValue mapGet(RefMap *map, unsigned key);\n//% expose\nvoid mapSetByString(RefMap *map, String key, TValue val);\n//%\nvoid mapSet(RefMap *map, unsigned key, TValue val);\n} // namespace pxtrt\n\nnamespace pins {\nBuffer createBuffer(int size);\n}\n\nnamespace String_ {\n//%\nint compare(String a, String b);\n} // namespace String_\n\nnamespace Array_ {\n//%\nRefCollection *mk();\n//%\nint length(RefCollection *c);\n//%\nvoid setLength(RefCollection *c, int newLength);\n//%\nvoid push(RefCollection *c, TValue x);\n//%\nTValue pop(RefCollection *c);\n//%\nTValue getAt(RefCollection *c, int x);\n//%\nvoid setAt(RefCollection *c, int x, TValue y);\n//%\nTValue removeAt(RefCollection *c, int x);\n//%\nvoid insertAt(RefCollection *c, int x, TValue value);\n//%\nint indexOf(RefCollection *c, TValue x, int start);\n//%\nbool removeElement(RefCollection *c, TValue x);\n} // namespace Array_\n\n#define NEW_GC(T, ...) new (gcAllocate(sizeof(T))) T(__VA_ARGS__)\n\n// The ARM Thumb generator in the JavaScript code is parsing\n// the hex file and looks for the magic numbers as present here.\n//\n// Then it fetches function pointer addresses from there.\n//\n// The vtable pointers are there, so that the ::emptyData for various types\n// can be patched with the right vtable.\n//\n#define PXT_SHIMS_BEGIN                                                                            \\\n    namespace pxt {                                                                                \\\n    const uintptr_t functionsAndBytecode[]                                                         \\\n        __attribute__((aligned(0x20))) = {0x08010801, 0x42424242, 0x08010801, 0x8de9d83e,\n\n#define PXT_SHIMS_END                                                                              \\\n    }                                                                                              \\\n    ;                                                                                              \\\n    }\n\n#if !defined(X86_64) && !defined(PXT_VM)\n#pragma GCC diagnostic ignored \"-Wpmf-conversions\"\n#endif\n\n#ifdef PXT_VM\n#define DEF_VTABLE(name, tp, valtype, ...)                                                         \\\n    const VTable name = {sizeof(tp), valtype, VTABLE_MAGIC, 0, BuiltInType::tp, BuiltInType::tp,   \\\n                         0,          0,       {__VA_ARGS__}};\n#define DEF_VTABLE_EXT(name, tp, valtype, ...)                                                     \\\n    const VTable name = {sizeof(tp), valtype, VTABLE_MAGIC2, 0, BuiltInType::tp, BuiltInType::tp,  \\\n                         0,          0,       {__VA_ARGS__}};\n#else\n#define DEF_VTABLE(name, tp, valtype, ...)                                                         \\\n    const VTable name = {sizeof(tp), valtype, VTABLE_MAGIC, 0, BuiltInType::tp,                    \\\n                         0,          0,       {__VA_ARGS__}};\n#define DEF_VTABLE_EXT(name, tp, valtype, ...)                                                     \\\n    const VTable name = {sizeof(tp), valtype, VTABLE_MAGIC2, 0, BuiltInType::tp,                   \\\n                         0,          0,       {__VA_ARGS__}};\n#endif\n\n#define PXT_VTABLE(classname, valtp)                                                               \\\n    DEF_VTABLE(classname##_vtable, classname, valtp, (void *)&classname::destroy,                  \\\n               (void *)&classname::print, (void *)&classname::scan, (void *)&classname::gcsize)\n\n#define PXT_EXT_VTABLE(classname)                                                                  \\\n    static int classname##_gcsize() { return sizeof(classname); }                                  \\\n    DEF_VTABLE_EXT(classname##_vtable, classname, ValType::Object, (void *)&pxt::doNothing,        \\\n                   (void *)&pxt::anyPrint, (void *)&pxt::doNothing, (void *)&classname##_gcsize)\n\n#define PXT_VTABLE_INIT(classname) RefObject(&classname##_vtable)\n\n#define PXT_VTABLE_CTOR(classname)                                                                 \\\n    PXT_VTABLE(classname, ValType::Object)                                                         \\\n    classname::classname() : PXT_VTABLE_INIT(classname)\n\n#define PXT_MAIN                                                                                   \\\n    int main() {                                                                                   \\\n        pxt::start();                                                                              \\\n        return 0;                                                                                  \\\n    }\n\n#define PXT_FNPTR(x) (uintptr_t)(void *)(x)\n\n#define PXT_ABI(...)\n\n#define JOIN(a, b) a##b\n/// Defines getClassName() function to fetch the singleton\n#define SINGLETON(ClassName)                                                                       \\\n    static ClassName *JOIN(inst, ClassName);                                                       \\\n    ClassName *JOIN(get, ClassName)() {                                                            \\\n        if (!JOIN(inst, ClassName))                                                                \\\n            JOIN(inst, ClassName) = new ClassName();                                               \\\n        return JOIN(inst, ClassName);                                                              \\\n    }\n\n/// Defines getClassName() function to fetch the singleton if PIN present\n#define SINGLETON_IF_PIN(ClassName, pin)                                                           \\\n    static ClassName *JOIN(inst, ClassName);                                                       \\\n    ClassName *JOIN(get, ClassName)() {                                                            \\\n        if (!JOIN(inst, ClassName) && LOOKUP_PIN(pin))                                             \\\n            JOIN(inst, ClassName) = new ClassName();                                               \\\n        return JOIN(inst, ClassName);                                                              \\\n    }\n\n#ifdef PXT_VM\n#include \"vm.h\"\n#endif\n\n#endif\n",
            "scheduling.ts": "/**\n * Calls a function with a fixed time delay between each call to that function.\n * @param func \n * @param delay \n */\n//%\nfunction setInterval(func: () => void, delay: number): number {\n    delay = Math.max(10, delay | 0);\n    return control.setInterval(func, delay, control.IntervalMode.Interval);\n}\n\n/**\n * Cancels repeated action which was set up using setInterval().\n * @param intervalId \n */\n//%\nfunction clearInterval(intervalId: number) {\n    control.clearInterval(intervalId, control.IntervalMode.Interval);\n}\n\n/**\n * Calls a function after specified delay.\n * @param func \n * @param delay \n */\n//%\nfunction setTimeout(func: () => void, delay: number): number {\n    return control.setInterval(func, delay, control.IntervalMode.Timeout);\n}\n\n/**\n * Clears the delay set by setTimeout().\n * @param intervalId \n */\n//%\nfunction clearTimeout(intervalId: number) {\n    control.clearInterval(intervalId, control.IntervalMode.Timeout);\n}\n\n/**\n * Calls a function as soon as possible.\n * @param func \n */\n//%\nfunction setImmediate(func: () => void): number {\n    return control.setInterval(func, 0, control.IntervalMode.Immediate);\n}\n\n/**\n * Cancels the immediate actions.\n * @param intervalId \n */\n//%\nfunction clearImmediate(intervalId: number) {\n    control.clearInterval(intervalId, control.IntervalMode.Immediate);\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\n\n\n\n    //% indexerGet=BufferMethods::getByte indexerSet=BufferMethods::setByte\ndeclare interface Buffer {\n    /**\n     * Reads an unsigned byte at a particular location\n     */\n    //% shim=BufferMethods::getUint8\n    getUint8(off: int32): int32;\n\n    /**\n     * Returns false when the buffer can be written to.\n     */\n    //% shim=BufferMethods::isReadOnly\n    isReadOnly(): boolean;\n\n    /**\n     * Writes an unsigned byte at a particular location\n     */\n    //% shim=BufferMethods::setUint8\n    setUint8(off: int32, v: int32): void;\n\n    /**\n     * Write a number in specified format in the buffer.\n     */\n    //% shim=BufferMethods::setNumber\n    setNumber(format: NumberFormat, offset: int32, value: number): void;\n\n    /**\n     * Read a number in specified format from the buffer.\n     */\n    //% shim=BufferMethods::getNumber\n    getNumber(format: NumberFormat, offset: int32): number;\n\n    /** Returns the length of a Buffer object. */\n    //% property shim=BufferMethods::length\n    length: int32;\n\n    /**\n     * Fill (a fragment) of the buffer with given value.\n     */\n    //% offset.defl=0 length.defl=-1 shim=BufferMethods::fill\n    fill(value: int32, offset?: int32, length?: int32): void;\n\n    /**\n     * Return a copy of a fragment of a buffer.\n     */\n    //% offset.defl=0 length.defl=-1 shim=BufferMethods::slice\n    slice(offset?: int32, length?: int32): Buffer;\n\n    /**\n     * Shift buffer left in place, with zero padding.\n     * @param offset number of bytes to shift; use negative value to shift right\n     * @param start start offset in buffer. Default is 0.\n     * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n     * start. eg: -1\n     */\n    //% start.defl=0 length.defl=-1 shim=BufferMethods::shift\n    shift(offset: int32, start?: int32, length?: int32): void;\n\n    /**\n     * Convert a buffer to string assuming UTF8 encoding\n     */\n    //% shim=BufferMethods::toString\n    toString(): string;\n\n    /**\n     * Convert a buffer to its hexadecimal representation.\n     */\n    //% shim=BufferMethods::toHex\n    toHex(): string;\n\n    /**\n     * Rotate buffer left in place.\n     * @param offset number of bytes to shift; use negative value to shift right\n     * @param start start offset in buffer. Default is 0.\n     * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n     * start. eg: -1\n     */\n    //% start.defl=0 length.defl=-1 shim=BufferMethods::rotate\n    rotate(offset: int32, start?: int32, length?: int32): void;\n\n    /**\n     * Write contents of `src` at `dstOffset` in current buffer.\n     */\n    //% shim=BufferMethods::write\n    write(dstOffset: int32, src: Buffer): void;\n\n    /**\n     * Compute k-bit FNV-1 non-cryptographic hash of the buffer.\n     */\n    //% shim=BufferMethods::hash\n    hash(bits: int32): uint32;\n}\ndeclare namespace control {\n\n    /**\n     * Create a new zero-initialized buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% deprecated=1 shim=control::createBuffer\n    function createBuffer(size: int32): Buffer;\n\n    /**\n     * Create a new buffer with UTF8-encoded string\n     * @param str the string to put in the buffer\n     */\n    //% deprecated=1 shim=control::createBufferFromUTF8\n    function createBufferFromUTF8(str: string): Buffer;\n}\ndeclare namespace loops {\n\n    /**\n     * Repeats the code forever in the background. On each iteration, allows other codes to run.\n     * @param body code to execute\n     */\n    //% help=loops/forever weight=100 afterOnStart=true deprecated=true\n    //% blockId=forever_deprecated block=\"forever\" blockAllowMultiple=1 shim=loops::forever\n    function forever(a: () => void): void;\n\n    /**\n     * Pause for the specified time in milliseconds\n     * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n     */\n    //% help=loops/pause weight=99 deprecated=true\n    //% async block=\"pause %pause=timePicker|ms\"\n    //% blockId=device_pause_deprecated shim=loops::pause\n    function pause(ms: int32): void;\n}\ndeclare namespace control {\n\n    /**\n     * Gets the number of milliseconds elapsed since power on.\n     */\n    //% help=control/millis weight=50\n    //% blockId=control_running_time block=\"millis (ms)\" shim=control::millis\n    function millis(): int32;\n\n    /**\n     * Gets current time in microseconds. Overflows every ~18 minutes.\n     */\n    //% shim=control::micros\n    function micros(): int32;\n\n    /**\n     * Used internally\n     */\n    //% flags.defl=16 shim=control::internalOnEvent\n    function internalOnEvent(src: int32, value: int32, handler: () => void, flags?: int32): void;\n\n    /**\n     * Reset the device.\n     */\n    //% weight=30 async help=control/reset blockGap=8\n    //% blockId=\"control_reset\" block=\"reset\" shim=control::reset\n    function reset(): void;\n\n    /**\n     * Block the current fiber for the given microseconds\n     * @param micros number of micro-seconds to wait. eg: 4\n     */\n    //% help=control/wait-micros weight=29 async\n    //% blockId=\"control_wait_us\" block=\"wait (µs)%micros\" shim=control::waitMicros\n    function waitMicros(micros: int32): void;\n\n    /**\n     * Run other code in the parallel.\n     */\n    //% help=control/run-in-parallel handlerStatement=1\n    //% blockId=\"control_run_in_parallel\" block=\"run in parallel\" blockGap=8 shim=control::runInParallel\n    function runInParallel(a: () => void): void;\n\n    /**\n     * Blocks the calling thread until the specified event is raised.\n     */\n    //% help=control/wait-for-event async\n    //% blockId=control_wait_for_event block=\"wait for event|from %src|with value %value\" shim=control::waitForEvent\n    function waitForEvent(src: int32, value: int32): void;\n\n    /**\n     * Derive a unique, consistent serial number of this device from internal data.\n     */\n    //% blockId=\"control_device_serial_number\" block=\"device serial number\" weight=9\n    //% help=control/device-serial-number shim=control::deviceSerialNumber\n    function deviceSerialNumber(): int32;\n\n    /**\n     * Derive a unique, consistent 64-bit serial number of this device from internal data.\n     */\n    //% blockId=\"control_device_long_serial_number\" block=\"device long serial number\" weight=9\n    //% help=control/device-long-serial-number shim=control::deviceLongSerialNumber\n    function deviceLongSerialNumber(): Buffer;\n\n    /**\n     *\n     */\n    //% shim=control::__log\n    function __log(prority: int32, text: string): void;\n\n    /**\n     * Dump internal information about a value.\n     */\n    //% shim=control::dmesgValue\n    function dmesgValue(v: any): void;\n}\ndeclare namespace control {\n\n    /**\n     * Force GC and dump basic information about heap.\n     */\n    //% shim=control::gc\n    function gc(): void;\n\n    /**\n     * Force GC and halt waiting for debugger to do a full heap dump.\n     */\n    //% shim=control::heapDump\n    function heapDump(): void;\n\n    /**\n     * Set flags used when connecting an external debugger.\n     */\n    //% shim=control::setDebugFlags\n    function setDebugFlags(flags: int32): void;\n\n    /**\n     * Record a heap snapshot to debug memory leaks.\n     */\n    //% shim=control::heapSnapshot\n    function heapSnapshot(): void;\n\n    /**\n     * Return true if profiling is enabled in the current build.\n     */\n    //% shim=control::profilingEnabled\n    function profilingEnabled(): boolean;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "templates.ts": "/**\n * Tagged hex literal converter\n */\n//% shim=@hex\nfunction hex(lits: any, ...args: any[]): Buffer { return null }\n",
            "test.ts": "let i = 1\nlet f = 0.5\nlet plus = i + f\nlet minus = i - f\n\nlet r = Math.random()\nlet ri = Math.randomRange(5, 10)\n\n\nfunction check(cond:boolean) { control.assert(cond, 108) }\n\ncheck(Buffer.pack(\"<2h\", [0x3412, 0x7856]).toHex() == \"12345678\")\ncheck(Buffer.pack(\">hh\", [0x3412, 0x7856]).toHex() == \"34127856\")\ncheck(Buffer.fromHex(\"F00d\").toHex() == \"f00d\")",
            "trig.cpp": "#include \"pxtbase.h\"\n#include <limits.h>\n#include <stdlib.h>\n\nusing namespace std;\n\nnamespace Math_ {\n\n#define SINGLE(op) return fromDouble(::op(toDouble(x)));\n\n//%\nTNumber atan2(TNumber y, TNumber x) {\n    return fromDouble(::atan2(toDouble(y), toDouble(x)));\n}\n\n//%\nTNumber tan(TNumber x){SINGLE(tan)}\n\n//%\nTNumber sin(TNumber x){SINGLE(sin)}\n\n//%\nTNumber cos(TNumber x){SINGLE(cos)}\n\n//%\nTNumber atan(TNumber x){SINGLE(atan)}\n\n//%\nTNumber asin(TNumber x){SINGLE(asin)}\n\n//%\nTNumber acos(TNumber x){SINGLE(acos)}\n\n//%\nTNumber sqrt(TNumber x){SINGLE(sqrt)}\n\n}",
            "utfdecoder.ts": "class UTF8Decoder {\n    private buf: Buffer;\n\n    constructor() {\n        this.buf = undefined;\n    }\n\n    add(buf: Buffer) {\n        if (!buf || !buf.length) return;\n\n        if (!this.buf)\n            this.buf = buf;\n        else {\n            const b = control.createBuffer(this.buf.length + buf.length);\n            b.write(0, this.buf);\n            b.write(this.buf.length, buf);\n            this.buf = b;\n        }\n    }\n\n    decodeUntil(delimiter: number): string {\n        if (!this.buf) return undefined;\n        delimiter = delimiter | 0;\n        let i = 0;\n        for (; i < this.buf.length; ++i) {\n            const c = this.buf[i];\n            // skip multi-chars\n            if ((c & 0xe0) == 0xc0)\n                i += 1;\n            else if ((c & 0xf0) == 0xe0)\n                i += 2;\n            else if (c == delimiter) {\n                // found it\n                break;\n            }\n        }\n\n        if (i >= this.buf.length)\n            return undefined;\n        else {\n            const s = this.buf.slice(0, i).toString();\n            if (i + 1 == this.buf.length)\n                this.buf = undefined;\n            else\n                this.buf = this.buf.slice(i + 1);\n            return s;\n        }\n    }\n\n    decode(): string {\n        if (!this.buf) return \"\";\n\n        // scan the end of the buffer for partial characters\n        let length = 0;\n        for (let i = this.buf.length - 1; i >= 0; i--) {\n            const c = this.buf[i];\n            if ((c & 0x80) == 0) {\n                length = i + 1;\n                break;\n            }\n            else if ((c & 0xe0) == 0xc0) {\n                length = i + 2;\n                break;\n            }\n            else if ((c & 0xf0) == 0xe0) {\n                length = i + 3;\n                break;\n            }\n        }\n        // is last beyond the end?\n        if (length == this.buf.length) {\n            const s = this.buf.toString();\n            this.buf = undefined;\n            return s;\n        } else if (length == 0) { // data yet\n            return \"\";\n        } else {\n            const s = this.buf.slice(0, length).toString();\n            this.buf = this.buf.slice(length);\n            return s;\n        }\n    }\n}"
        },
        "core": {
            "README.md": "# core\n\nThe core library.\n\n",
            "codal.cpp": "#include \"pxt.h\"\n#include \"LowLevelTimer.h\"\nusing namespace codal;\n\nvoid cpu_clock_init(void);\n\nPXT_ABI(__aeabi_dadd)\nPXT_ABI(__aeabi_dcmplt)\nPXT_ABI(__aeabi_dcmpgt)\nPXT_ABI(__aeabi_dsub)\nPXT_ABI(__aeabi_ddiv)\nPXT_ABI(__aeabi_dmul)\n\n#ifdef DEVICE_GET_FIBER_LIST_AVAILABLE\n// newer codal-core has get_fiber_list() but not list_fibers()\nnamespace codal {\n/*\n * Return all current fibers.\n *\n * @param dest If non-null, it points to an array of pointers to fibers to store results in.\n *\n * @return the number of fibers (potentially) stored\n */\nint list_fibers(Fiber **dest) {\n    int i = 0;\n    for (Fiber *fib = codal::get_fiber_list(); fib; fib = fib->next) {\n        if (dest)\n            dest[i] = fib;\n        i++;\n    }\n    return i;\n}\n\n} // namespace codal\n#endif\n\nnamespace pxt {\n\nvoid platform_init();\nvoid usb_init();\n\n// The first two word are used to tell the bootloader that a single reset should start the\n// bootloader and the MSD device, not us.\n// The rest is reserved for partial flashing checksums.\n__attribute__((section(\".binmeta\"))) __attribute__((used)) const uint32_t pxt_binmeta[] = {\n    0x87eeb07c, 0x87eeb07c, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,\n    0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,\n};\n\nEvent lastEvent;\nMessageBus devMessageBus;\ncodal::CodalDevice device;\n\nstruct FreeList {\n    FreeList *next;\n};\n\nstatic void commInit() {\n    int commSize = bytecode[20];\n    if (!commSize)\n        return;\n\n    void *r = app_alloc_at((void *)PXT_COMM_BASE, commSize);\n    DMESG(\"comm %d -> %p\", commSize, r);\n    if (!r)\n        target_panic(20);\n}\n\nstatic void initCodal() {\n    cpu_clock_init();\n\n    commInit();\n\n    // Bring up fiber scheduler.\n    scheduler_init(devMessageBus);\n\n    // We probably don't need that - components are initialized when one obtains\n    // the reference to it.\n    // devMessageBus.listen(DEVICE_ID_MESSAGE_BUS_LISTENER, DEVICE_EVT_ANY, this,\n    // &CircuitPlayground::onListenerRegisteredEvent);\n\n    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {\n        if (CodalComponent::components[i])\n            CodalComponent::components[i]->init();\n    }\n\n    usb_init();\n\n    auto led = LOOKUP_PIN(LED);\n    if (led) {\n        led->setDigitalValue(0);\n    }\n}\n\n// ---------------------------------------------------------------------------\n// An adapter for the API expected by the run-time.\n// ---------------------------------------------------------------------------\n\n// We have the invariant that if [dispatchEvent] is registered against the DAL\n// for a given event, then [handlersMap] contains a valid entry for that\n// event.\nvoid dispatchEvent(Event e) {\n    lastEvent = e;\n\n    auto curr = findBinding(e.source, e.value);\n    auto value = fromInt(e.value);\n    while (curr) {\n        runAction1(curr->action, value);\n        curr = nextBinding(curr->next, e.source, e.value);\n    }\n}\n\nvoid registerWithDal(int id, int event, Action a, int flags) {\n    // first time?\n    if (!findBinding(id, event)) {\n        devMessageBus.listen(id, event, dispatchEvent, flags);\n        if (event == 0) {\n            // we're registering for all events on given ID\n            // need to remove old listeners for specific events\n            auto curr = findBinding(id, -1);\n            while (curr) {\n                devMessageBus.ignore(id, curr->value, dispatchEvent);\n                curr = nextBinding(curr->next, id, -1);\n            }\n        }\n    }\n    setBinding(id, event, a);\n}\n\nvoid fiberDone(void *a) {\n    unregisterGCPtr((Action)a);\n    release_fiber();\n}\n\nvoid releaseFiber() {\n    release_fiber();\n}\n\nvoid sleep_ms(unsigned ms) {\n    fiber_sleep(ms);\n}\n\nvoid sleep_us(uint64_t us) {\n    target_wait_us(us);\n}\n\nvoid forever_stub(void *a) {\n    while (true) {\n        runAction0((Action)a);\n        fiber_sleep(20);\n    }\n}\n\nvoid runForever(Action a) {\n    if (a != 0) {\n        registerGCPtr(a);\n        create_fiber(forever_stub, (void *)a);\n    }\n}\n\nvoid runInParallel(Action a) {\n    if (a != 0) {\n        registerGCPtr(a);\n        create_fiber((void (*)(void *))(void*)runAction0, (void *)a, fiberDone);\n    }\n}\n\nvoid waitForEvent(int id, int event) {\n    fiber_wait_for_event(id, event);\n}\n\nvoid initRuntime() {\n    initSystemTimer();\n    initCodal();\n    platform_init();\n}\n\n//%\nunsigned afterProgramPage() {\n    unsigned ptr = (unsigned)&bytecode[0];\n    ptr += programSize();\n    ptr = (ptr + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);\n    return ptr;\n}\n\nuint64_t getLongSerialNumber() {\n    return device.getSerialNumber();\n}\n\nint current_time_ms() {\n    return system_timer_current_time();\n}\n\nuint64_t current_time_us() {\n    return system_timer_current_time_us();\n}\n\nThreadContext *getThreadContext() {\n    if (!currentFiber)\n        return NULL;\n    return (ThreadContext *)currentFiber->user_data;\n}\n\nvoid setThreadContext(ThreadContext *ctx) {\n    currentFiber->user_data = ctx;\n}\n\nstatic void *threadAddressFor(codal::Fiber *fib, void *sp) {\n    if (fib == currentFiber)\n        return sp;\n    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));\n}\n\nvoid gcProcessStacks(int flags) {\n    // check scheduler is initialized\n    if (!currentFiber) {\n        // make sure we allocate something to at least initalize the memory allocator\n        void *volatile p = xmalloc(1);\n        xfree(p);\n        return;\n    }\n\n    int numFibers = codal::list_fibers(NULL);\n    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);\n    int num2 = codal::list_fibers(fibers);\n    if (numFibers != num2)\n        oops(12);\n    int cnt = 0;\n\n    for (int i = 0; i < numFibers; ++i) {\n        auto fib = fibers[i];\n        auto ctx = (ThreadContext *)fib->user_data;\n        if (!ctx)\n            continue;\n        gcProcess(ctx->thrownValue);\n        for (auto seg = &ctx->stack; seg; seg = seg->next) {\n            auto ptr = (TValue *)threadAddressFor(fib, seg->top);\n            auto end = (TValue *)threadAddressFor(fib, seg->bottom);\n            if (flags & 2)\n                DMESG(\"RS%d:%p/%d\", cnt++, ptr, end - ptr);\n            // VLOG(\"mark: %p - %p\", ptr, end);\n            while (ptr < end) {\n                gcProcess(*ptr++);\n            }\n        }\n    }\n    xfree(fibers);\n}\n\nLowLevelTimer *getJACDACTimer() {\n    static LowLevelTimer *jacdacTimer;\n    if (!jacdacTimer) {\n        jacdacTimer = allocateTimer();\n        jacdacTimer->setIRQPriority(1);\n    }\n    return jacdacTimer;\n}\nvoid initSystemTimer() {\n    new CODAL_TIMER(*allocateTimer());\n}\n\n} // namespace pxt\n",
            "control.cpp": "#include \"pxt.h\"\n\n#if defined(NRF52_SERIES) || defined(PICO_BOARD)\n#define _estack __StackTop \n#endif\nextern uint32_t _estack;\n\nnamespace control {\n\n/**\n * Announce that an event happened to registered handlers.\n * @param src ID of the MicroBit Component that generated the event\n * @param value Component specific code indicating the cause of the event.\n */\n//% weight=21 blockGap=12 blockId=\"control_raise_event\"\n//% help=control/raise-event\n//% block=\"raise event|from %src|with value %value\" blockExternalInputs=1\nvoid raiseEvent(int src, int value) {\n    Event evt(src, value);\n}\n\n/**\n* Determine the version of system software currently running.\n*/\n//% blockId=\"control_device_dal_version\" block=\"device dal version\"\n//% help=control/device-dal-version\nString deviceDalVersion() {\n    return mkString(device.getVersion());\n}\n\n/**\n* Allocates the next user notification event\n*/\n//% help=control/allocate-notify-event\nint allocateNotifyEvent() {\n    return ::allocateNotifyEvent();\n}\n\n/** Write a message to DMESG debugging buffer. */\n//%\nvoid dmesg(String s) {\n    DMESG(\"# %s\", s->getUTF8Data());\n}\n\n/** Write a message and value (pointer) to DMESG debugging buffer. */\n//%\nvoid dmesgPtr(String str, Object_ ptr) {\n    DMESG(\"# %s: %p\", str->getUTF8Data(), ptr);\n}\n\n//%\nuint32_t _ramSize()\n{\n    return (uint32_t)&_estack & 0x1fffffff;\n}\n\n}\n",
            "dal.d.ts": "// Auto-generated. Do not edit.\ndeclare const enum DAL {\n    // /libraries/codal-core/inc/JACDAC/JDPhysicalLayer.h\n    Receiving = 0,\n    Transmitting = 1,\n    Error = 2,\n    Unknown = 3,\n    ListeningForPulse = 0,\n    ErrorRecovery = 1,\n    Off = 2,\n    Continuation = 0,\n    // /libraries/codal-core/inc/JACDAC/JDServiceClasses.h\n    STATIC_CLASS_START = 0,\n    STATIC_CLASS_END = 16777215,\n    DYNAMIC_CLASS_END = 4294967295,\n    // /libraries/codal-core/inc/core/CodalComponent.h\n    DEVICE_ID_BUTTON_A = 1,\n    DEVICE_ID_BUTTON_B = 2,\n    DEVICE_ID_BUTTON_AB = 3,\n    DEVICE_ID_BUTTON_RESET = 4,\n    DEVICE_ID_ACCELEROMETER = 5,\n    DEVICE_ID_COMPASS = 6,\n    DEVICE_ID_DISPLAY = 7,\n    DEVICE_ID_THERMOMETER = 8,\n    DEVICE_ID_RADIO = 9,\n    DEVICE_ID_RADIO_DATA_READY = 10,\n    DEVICE_ID_MULTIBUTTON_ATTACH = 11,\n    DEVICE_ID_SERIAL = 12,\n    DEVICE_ID_GESTURE = 13,\n    DEVICE_ID_SYSTEM_TIMER = 14,\n    DEVICE_ID_SCHEDULER = 15,\n    DEVICE_ID_COMPONENT = 16,\n    DEVICE_ID_LIGHT_SENSOR = 17,\n    DEVICE_ID_TOUCH_SENSOR = 18,\n    DEVICE_ID_SYSTEM_DAC = 19,\n    DEVICE_ID_SYSTEM_MICROPHONE = 20,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR = 21,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR_SPL = 22,\n    DEVICE_ID_MSC = 23,\n    DEVICE_ID_SPI = 24,\n    DEVICE_ID_DISTANCE = 25,\n    DEVICE_ID_GYROSCOPE = 26,\n    DEVICE_ID_HUMIDITY = 27,\n    DEVICE_ID_PRESSURE = 28,\n    DEVICE_ID_SINGLE_WIRE_SERIAL = 29,\n    DEVICE_ID_JACDAC = 30,\n    DEVICE_ID_JACDAC_PHYS = 31,\n    DEVICE_ID_JACDAC_CONTROL_SERVICE = 32,\n    DEVICE_ID_JACDAC_CONFIGURATION_SERVICE = 33,\n    DEVICE_ID_IO_P0 = 100,\n    DEVICE_ID_MESSAGE_BUS_LISTENER = 1021,\n    DEVICE_ID_NOTIFY_ONE = 1022,\n    DEVICE_ID_NOTIFY = 1023,\n    DEVICE_ID_BUTTON_UP = 2000,\n    DEVICE_ID_BUTTON_DOWN = 2001,\n    DEVICE_ID_BUTTON_LEFT = 2002,\n    DEVICE_ID_BUTTON_RIGHT = 2003,\n    DEVICE_ID_JD_DYNAMIC_ID = 3000,\n    DEVICE_COMPONENT_RUNNING = 4096,\n    DEVICE_COMPONENT_STATUS_SYSTEM_TICK = 8192,\n    DEVICE_COMPONENT_STATUS_IDLE_TICK = 16384,\n    DEVICE_COMPONENT_LISTENERS_CONFIGURED = 1,\n    DEVICE_COMPONENT_EVT_SYSTEM_TICK = 1,\n    // /libraries/codal-core/inc/core/CodalFiber.h\n    DEVICE_SCHEDULER_RUNNING = 1,\n    DEVICE_SCHEDULER_IDLE = 2,\n    DEVICE_FIBER_FLAG_FOB = 1,\n    DEVICE_FIBER_FLAG_PARENT = 2,\n    DEVICE_FIBER_FLAG_CHILD = 4,\n    DEVICE_FIBER_FLAG_DO_NOT_PAGE = 8,\n    DEVICE_SCHEDULER_EVT_TICK = 1,\n    DEVICE_SCHEDULER_EVT_IDLE = 2,\n    // /libraries/codal-core/inc/core/CodalListener.h\n    MESSAGE_BUS_LISTENER_PARAMETERISED = 1,\n    MESSAGE_BUS_LISTENER_METHOD = 2,\n    MESSAGE_BUS_LISTENER_BUSY = 4,\n    MESSAGE_BUS_LISTENER_REENTRANT = 8,\n    MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY = 16,\n    MESSAGE_BUS_LISTENER_DROP_IF_BUSY = 32,\n    MESSAGE_BUS_LISTENER_NONBLOCKING = 64,\n    MESSAGE_BUS_LISTENER_URGENT = 128,\n    MESSAGE_BUS_LISTENER_DELETING = 32768,\n    MESSAGE_BUS_LISTENER_IMMEDIATE = 192,\n    // /libraries/codal-core/inc/core/ErrorNo.h\n    DEVICE_OK = 0,\n    DEVICE_INVALID_PARAMETER = -1001,\n    DEVICE_NOT_SUPPORTED = -1002,\n    DEVICE_CALIBRATION_IN_PROGRESS = -1003,\n    DEVICE_CALIBRATION_REQUIRED = -1004,\n    DEVICE_NO_RESOURCES = -1005,\n    DEVICE_BUSY = -1006,\n    DEVICE_CANCELLED = -1007,\n    DEVICE_I2C_ERROR = -1010,\n    DEVICE_SERIAL_IN_USE = -1011,\n    DEVICE_NO_DATA = -1012,\n    DEVICE_NOT_IMPLEMENTED = -1013,\n    DEVICE_SPI_ERROR = -1014,\n    DEVICE_INVALID_STATE = -1015,\n    DEVICE_OOM = 20,\n    DEVICE_HEAP_ERROR = 30,\n    DEVICE_NULL_DEREFERENCE = 40,\n    DEVICE_USB_ERROR = 50,\n    DEVICE_JACDAC_ERROR = 60,\n    DEVICE_HARDWARE_CONFIGURATION_ERROR = 90,\n    // /libraries/codal-core/inc/core/NotifyEvents.h\n    DISPLAY_EVT_FREE = 1,\n    CODAL_SERIAL_EVT_TX_EMPTY = 2,\n    BLE_EVT_SERIAL_TX_EMPTY = 3,\n    ARCADE_PLAYER_JOIN_RESULT = 4,\n    DEVICE_NOTIFY_USER_EVENT_BASE = 1024,\n    // /libraries/codal-core/inc/driver-models/AbstractButton.h\n    DEVICE_BUTTON_EVT_DOWN = 1,\n    DEVICE_BUTTON_EVT_UP = 2,\n    DEVICE_BUTTON_EVT_CLICK = 3,\n    DEVICE_BUTTON_EVT_LONG_CLICK = 4,\n    DEVICE_BUTTON_EVT_HOLD = 5,\n    DEVICE_BUTTON_EVT_DOUBLE_CLICK = 6,\n    DEVICE_BUTTON_LONG_CLICK_TIME = 1000,\n    DEVICE_BUTTON_HOLD_TIME = 1500,\n    DEVICE_BUTTON_STATE = 1,\n    DEVICE_BUTTON_STATE_HOLD_TRIGGERED = 2,\n    DEVICE_BUTTON_STATE_CLICK = 4,\n    DEVICE_BUTTON_STATE_LONG_CLICK = 8,\n    DEVICE_BUTTON_SIGMA_MIN = 0,\n    DEVICE_BUTTON_SIGMA_MAX = 12,\n    DEVICE_BUTTON_SIGMA_THRESH_HI = 8,\n    DEVICE_BUTTON_SIGMA_THRESH_LO = 2,\n    DEVICE_BUTTON_DOUBLE_CLICK_THRESH = 50,\n    DEVICE_BUTTON_SIMPLE_EVENTS = 0,\n    DEVICE_BUTTON_ALL_EVENTS = 1,\n    ACTIVE_LOW = 0,\n    ACTIVE_HIGH = 1,\n    // /libraries/codal-core/inc/driver-models/Accelerometer.h\n    ACCELEROMETER_IMU_DATA_VALID = 2,\n    ACCELEROMETER_EVT_DATA_UPDATE = 1,\n    ACCELEROMETER_EVT_NONE = 0,\n    ACCELEROMETER_EVT_TILT_UP = 1,\n    ACCELEROMETER_EVT_TILT_DOWN = 2,\n    ACCELEROMETER_EVT_TILT_LEFT = 3,\n    ACCELEROMETER_EVT_TILT_RIGHT = 4,\n    ACCELEROMETER_EVT_FACE_UP = 5,\n    ACCELEROMETER_EVT_FACE_DOWN = 6,\n    ACCELEROMETER_EVT_FREEFALL = 7,\n    ACCELEROMETER_EVT_3G = 8,\n    ACCELEROMETER_EVT_6G = 9,\n    ACCELEROMETER_EVT_8G = 10,\n    ACCELEROMETER_EVT_SHAKE = 11,\n    ACCELEROMETER_EVT_2G = 12,\n    ACCELEROMETER_REST_TOLERANCE = 200,\n    ACCELEROMETER_TILT_TOLERANCE = 200,\n    ACCELEROMETER_FREEFALL_TOLERANCE = 400,\n    ACCELEROMETER_SHAKE_TOLERANCE = 400,\n    ACCELEROMETER_2G_TOLERANCE = 2048,\n    ACCELEROMETER_3G_TOLERANCE = 3072,\n    ACCELEROMETER_6G_TOLERANCE = 6144,\n    ACCELEROMETER_8G_TOLERANCE = 8192,\n    ACCELEROMETER_GESTURE_DAMPING = 5,\n    ACCELEROMETER_SHAKE_DAMPING = 10,\n    ACCELEROMETER_SHAKE_RTX = 30,\n    ACCELEROMETER_SHAKE_COUNT_THRESHOLD = 4,\n    // /libraries/codal-core/inc/driver-models/Compass.h\n    COMPASS_STATUS_RUNNING = 1,\n    COMPASS_STATUS_CALIBRATED = 2,\n    COMPASS_STATUS_CALIBRATING = 4,\n    COMPASS_STATUS_ADDED_TO_IDLE = 8,\n    COMPASS_EVT_DATA_UPDATE = 1,\n    COMPASS_EVT_CONFIG_NEEDED = 2,\n    COMPASS_EVT_CALIBRATE = 3,\n    COMPASS_EVT_CALIBRATION_NEEDED = 4,\n    // /libraries/codal-core/inc/driver-models/Gyroscope.h\n    GYROSCOPE_IMU_DATA_VALID = 2,\n    GYROSCOPE_EVT_DATA_UPDATE = 1,\n    // /libraries/codal-core/inc/driver-models/LowLevelTimer.h\n    TimerModeTimer = 0,\n    TimerModeCounter = 1,\n    TimerModeAlternateFunction = 2,\n    BitMode8 = 0,\n    BitMode16 = 1,\n    BitMode24 = 2,\n    BitMode32 = 3,\n    // /libraries/codal-core/inc/driver-models/Pin.h\n    IO_STATUS_DIGITAL_IN = 1,\n    IO_STATUS_DIGITAL_OUT = 2,\n    IO_STATUS_ANALOG_IN = 4,\n    IO_STATUS_ANALOG_OUT = 8,\n    IO_STATUS_TOUCH_IN = 16,\n    IO_STATUS_EVENT_ON_EDGE = 32,\n    IO_STATUS_EVENT_PULSE_ON_EDGE = 64,\n    IO_STATUS_INTERRUPT_ON_EDGE = 128,\n    DEVICE_PIN_MAX_OUTPUT = 1023,\n    DEVICE_PIN_MAX_SERVO_RANGE = 180,\n    DEVICE_PIN_DEFAULT_SERVO_RANGE = 2000,\n    DEVICE_PIN_DEFAULT_SERVO_CENTER = 1500,\n    DEVICE_PIN_EVENT_NONE = 0,\n    DEVICE_PIN_INTERRUPT_ON_EDGE = 1,\n    DEVICE_PIN_EVENT_ON_EDGE = 2,\n    DEVICE_PIN_EVENT_ON_PULSE = 3,\n    DEVICE_PIN_EVENT_ON_TOUCH = 4,\n    DEVICE_PIN_EVT_RISE = 2,\n    DEVICE_PIN_EVT_FALL = 3,\n    DEVICE_PIN_EVT_PULSE_HI = 4,\n    DEVICE_PIN_EVT_PULSE_LO = 5,\n    PIN_CAPABILITY_DIGITAL = 1,\n    PIN_CAPABILITY_ANALOG = 2,\n    PIN_CAPABILITY_AD = 3,\n    PIN_CAPABILITY_ALL = 3,\n    None = 0,\n    Down = 1,\n    Up = 2,\n    // /libraries/codal-core/inc/driver-models/Radio.h\n    RADIO_EVT_DATA_READY = 2,\n    // /libraries/codal-core/inc/driver-models/SPIFlash.h\n    SPIFLASH_PAGE_SIZE = 256,\n    SPIFLASH_SMALL_ROW_PAGES = 16,\n    SPIFLASH_BIG_ROW_PAGES = 256,\n    // /libraries/codal-core/inc/driver-models/Sensor.h\n    SENSOR_THRESHOLD_LOW = 1,\n    SENSOR_THRESHOLD_HIGH = 2,\n    SENSOR_UPDATE_NEEDED = 3,\n    SENSOR_INITIALISED = 1,\n    SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    SENSOR_LOW_THRESHOLD_PASSED = 4,\n    SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    SENSOR_DEFAULT_SENSITIVITY = 868,\n    SENSOR_DEFAULT_SAMPLE_PERIOD = 500,\n    // /libraries/codal-core/inc/driver-models/Serial.h\n    CODAL_SERIAL_DEFAULT_BAUD_RATE = 115200,\n    CODAL_SERIAL_DEFAULT_BUFFER_SIZE = 20,\n    CODAL_SERIAL_EVT_DELIM_MATCH = 1,\n    CODAL_SERIAL_EVT_HEAD_MATCH = 2,\n    CODAL_SERIAL_EVT_RX_FULL = 3,\n    CODAL_SERIAL_EVT_DATA_RECEIVED = 4,\n    CODAL_SERIAL_STATUS_RX_IN_USE = 1,\n    CODAL_SERIAL_STATUS_TX_IN_USE = 2,\n    CODAL_SERIAL_STATUS_RX_BUFF_INIT = 4,\n    CODAL_SERIAL_STATUS_TX_BUFF_INIT = 8,\n    CODAL_SERIAL_STATUS_RXD = 16,\n    ASYNC = 0,\n    SYNC_SPINWAIT = 1,\n    SYNC_SLEEP = 2,\n    RxInterrupt = 0,\n    TxInterrupt = 1,\n    // /libraries/codal-core/inc/driver-models/SingleWireSerial.h\n    SWS_EVT_DATA_RECEIVED = 1,\n    SWS_EVT_DATA_SENT = 2,\n    SWS_EVT_ERROR = 3,\n    SWS_EVT_DATA_DROPPED = 4,\n    SingleWireRx = 0,\n    SingleWireTx = 1,\n    SingleWireDisconnected = 2,\n    // /libraries/codal-core/inc/driver-models/Timer.h\n    CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE = 10,\n    // /libraries/codal-core/inc/drivers/AnalogSensor.h\n    ANALOG_THRESHOLD_LOW = 1,\n    ANALOG_THRESHOLD_HIGH = 2,\n    ANALOG_SENSOR_UPDATE_NEEDED = 3,\n    ANALOG_SENSOR_INITIALISED = 1,\n    ANALOG_SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    ANALOG_SENSOR_LOW_THRESHOLD_PASSED = 4,\n    ANALOG_SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    ANALOG_SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    // /libraries/codal-core/inc/drivers/AnimatedDisplay.h\n    DISPLAY_EVT_ANIMATION_COMPLETE = 1,\n    DISPLAY_DEFAULT_AUTOCLEAR = 1,\n    DISPLAY_SPACING = 1,\n    DISPLAY_ANIMATE_DEFAULT_POS = -255,\n    DISPLAY_DEFAULT_SCROLL_SPEED = 120,\n    DISPLAY_DEFAULT_SCROLL_STRIDE = -1,\n    DISPLAY_DEFAULT_PRINT_SPEED = 400,\n    ANIMATION_MODE_NONE = 0,\n    ANIMATION_MODE_STOPPED = 1,\n    ANIMATION_MODE_SCROLL_TEXT = 2,\n    ANIMATION_MODE_PRINT_TEXT = 3,\n    ANIMATION_MODE_SCROLL_IMAGE = 4,\n    ANIMATION_MODE_ANIMATE_IMAGE = 5,\n    ANIMATION_MODE_ANIMATE_IMAGE_WITH_CLEAR = 6,\n    ANIMATION_MODE_PRINT_CHARACTER = 7,\n    // /libraries/codal-core/inc/drivers/FAT.h\n    FAT_RESERVED_SECTORS = 1,\n    FAT_ROOT_DIR_SECTORS = 4,\n    // /libraries/codal-core/inc/drivers/HID.h\n    HID_REQUEST_GET_REPORT = 1,\n    HID_REQUEST_GET_IDLE = 2,\n    HID_REQUEST_GET_PROTOCOL = 3,\n    HID_REQUEST_SET_REPORT = 9,\n    HID_REQUEST_SET_IDLE = 10,\n    HID_REQUEST_SET_PROTOCOL = 11,\n    // /libraries/codal-core/inc/drivers/HIDKeyboard.h\n    HID_KEYBOARD_NUM_REPORTS = 3,\n    HID_KEYBOARD_REPORT_GENERIC = 1,\n    HID_KEYBOARD_REPORT_CONSUMER = 2,\n    HID_KEYBOARD_KEYSTATE_SIZE_GENERIC = 8,\n    HID_KEYBOARD_KEYSTATE_SIZE_CONSUMER = 2,\n    HID_KEYBOARD_MODIFIER_OFFSET = 2,\n    HID_KEYBOARD_DELAY_DEFAULT = 10,\n    PressKey = 0,\n    ReleaseKey = 1,\n    // /libraries/codal-core/inc/drivers/KeyMap.h\n    KEYMAP_ALL_KEYS_UP_Val = 1,\n    KEYMAP_ALL_KEYS_UP_POS = 28,\n    KEYMAP_NORMAL_KEY_Val = 0,\n    KEYMAP_MODIFIER_KEY_Val = 1,\n    KEYMAP_MODIFIER_POS = 29,\n    KEYMAP_MEDIA_KEY_Val = 1,\n    KEYMAP_MEDIA_POS = 30,\n    KEYMAP_KEY_UP_Val = 0,\n    KEYMAP_KEY_DOWN_Val = 1,\n    KEYMAP_KEY_DOWN_POS = 31,\n    // /libraries/codal-core/inc/drivers/KeyValueStorage.h\n    DEVICE_KEY_VALUE_STORE_OFFSET = 4,\n    KEY_VALUE_STORAGE_MAGIC = 49370,\n    KEY_VALUE_STORAGE_BLOCK_SIZE = 48,\n    KEY_VALUE_STORAGE_KEY_SIZE = 16,\n    KEY_VALUE_STORAGE_SCRATCH_WORD_SIZE = 64,\n    KEY_VALUE_STORAGE_MAX_PAIRS = 5,\n    // /libraries/codal-core/inc/drivers/LEDMatrix.h\n    LED_MATRIX_GREYSCALE_BIT_DEPTH = 8,\n    LED_MATRIX_EVT_LIGHT_SENSE = 2,\n    LED_MATRIX_EVT_FRAME_TIMEOUT = 3,\n    LED_MATRIX_MINIMUM_BRIGHTNESS = 1,\n    LED_MATRIX_MAXIMUM_BRIGHTNESS = 255,\n    LED_MATRIX_DEFAULT_BRIGHTNESS = 255,\n    DISPLAY_MODE_BLACK_AND_WHITE = 0,\n    DISPLAY_MODE_GREYSCALE = 1,\n    DISPLAY_MODE_BLACK_AND_WHITE_LIGHT_SENSE = 2,\n    MATRIX_DISPLAY_ROTATION_0 = 0,\n    MATRIX_DISPLAY_ROTATION_90 = 1,\n    MATRIX_DISPLAY_ROTATION_180 = 2,\n    MATRIX_DISPLAY_ROTATION_270 = 3,\n    NO_CONN = 0,\n    // /libraries/codal-core/inc/drivers/MMA8653.h\n    MICROBIT_ACCEL_PITCH_ROLL_VALID = 2,\n    MICROBIT_ACCEL_ADDED_TO_IDLE = 4,\n    // /libraries/codal-core/inc/drivers/MultiButton.h\n    MULTI_BUTTON_STATE_1 = 1,\n    MULTI_BUTTON_STATE_2 = 2,\n    MULTI_BUTTON_HOLD_TRIGGERED_1 = 4,\n    MULTI_BUTTON_HOLD_TRIGGERED_2 = 8,\n    MULTI_BUTTON_SUPRESSED_1 = 16,\n    MULTI_BUTTON_SUPRESSED_2 = 32,\n    MULTI_BUTTON_ATTACHED = 64,\n    // /libraries/codal-core/inc/drivers/TouchButton.h\n    TOUCH_BUTTON_CALIBRATION_PERIOD = 10,\n    TOUCH_BUTTON_CALIBRATION_LINEAR_OFFSET = 2,\n    TOUCH_BUTTON_CALIBRATION_PERCENTAGE_OFFSET = 5,\n    TOUCH_BUTTON_CALIBRATING = 16,\n    // /libraries/codal-core/inc/drivers/TouchSensor.h\n    TOUCH_SENSOR_MAX_BUTTONS = 10,\n    TOUCH_SENSOR_SAMPLE_PERIOD = 50,\n    TOUCH_SENSE_SAMPLE_MAX = 1000,\n    TOUCH_SENSOR_UPDATE_NEEDED = 1,\n    // /libraries/codal-core/inc/drivers/USBJACDAC.h\n    JACDAC_USB_STATUS_CLEAR_TO_SEND = 2,\n    // /libraries/codal-core/inc/drivers/USB_HID_Keys.h\n    KEY_MOD_LCTRL = 1,\n    KEY_MOD_LSHIFT = 2,\n    KEY_MOD_LALT = 4,\n    KEY_MOD_LMETA = 8,\n    KEY_MOD_RCTRL = 16,\n    KEY_MOD_RSHIFT = 32,\n    KEY_MOD_RALT = 64,\n    KEY_MOD_RMETA = 128,\n    KEY_NONE = 0,\n    KEY_ERR_OVF = 1,\n    KEY_A = 4,\n    KEY_B = 5,\n    KEY_C = 6,\n    KEY_D = 7,\n    KEY_E = 8,\n    KEY_F = 9,\n    KEY_G = 10,\n    KEY_H = 11,\n    KEY_I = 12,\n    KEY_J = 13,\n    KEY_K = 14,\n    KEY_L = 15,\n    KEY_M = 16,\n    KEY_N = 17,\n    KEY_O = 18,\n    KEY_P = 19,\n    KEY_Q = 20,\n    KEY_R = 21,\n    KEY_S = 22,\n    KEY_T = 23,\n    KEY_U = 24,\n    KEY_V = 25,\n    KEY_W = 26,\n    KEY_X = 27,\n    KEY_Y = 28,\n    KEY_Z = 29,\n    KEY_1 = 30,\n    KEY_2 = 31,\n    KEY_3 = 32,\n    KEY_4 = 33,\n    KEY_5 = 34,\n    KEY_6 = 35,\n    KEY_7 = 36,\n    KEY_8 = 37,\n    KEY_9 = 38,\n    KEY_0 = 39,\n    KEY_ENTER = 40,\n    KEY_ESC = 41,\n    KEY_BACKSPACE = 42,\n    KEY_TAB = 43,\n    KEY_SPACE = 44,\n    KEY_MINUS = 45,\n    KEY_EQUAL = 46,\n    KEY_LEFTBRACE = 47,\n    KEY_RIGHTBRACE = 48,\n    KEY_BACKSLASH = 49,\n    KEY_HASHTILDE = 50,\n    KEY_SEMICOLON = 51,\n    KEY_APOSTROPHE = 52,\n    KEY_GRAVE = 53,\n    KEY_COMMA = 54,\n    KEY_DOT = 55,\n    KEY_SLASH = 56,\n    KEY_CAPSLOCK = 57,\n    KEY_F1 = 58,\n    KEY_F2 = 59,\n    KEY_F3 = 60,\n    KEY_F4 = 61,\n    KEY_F5 = 62,\n    KEY_F6 = 63,\n    KEY_F7 = 64,\n    KEY_F8 = 65,\n    KEY_F9 = 66,\n    KEY_F10 = 67,\n    KEY_F11 = 68,\n    KEY_F12 = 69,\n    KEY_SYSRQ = 70,\n    KEY_SCROLLLOCK = 71,\n    KEY_PAUSE = 72,\n    KEY_INSERT = 73,\n    KEY_HOME = 74,\n    KEY_PAGEUP = 75,\n    KEY_DELETE = 76,\n    KEY_END = 77,\n    KEY_PAGEDOWN = 78,\n    KEY_RIGHT = 79,\n    KEY_LEFT = 80,\n    KEY_DOWN = 81,\n    KEY_UP = 82,\n    KEY_NUMLOCK = 83,\n    KEY_KPSLASH = 84,\n    KEY_KPASTERISK = 85,\n    KEY_KPMINUS = 86,\n    KEY_KPPLUS = 87,\n    KEY_KPENTER = 88,\n    KEY_KP1 = 89,\n    KEY_KP2 = 90,\n    KEY_KP3 = 91,\n    KEY_KP4 = 92,\n    KEY_KP5 = 93,\n    KEY_KP6 = 94,\n    KEY_KP7 = 95,\n    KEY_KP8 = 96,\n    KEY_KP9 = 97,\n    KEY_KP0 = 98,\n    KEY_KPDOT = 99,\n    KEY_102ND = 100,\n    KEY_COMPOSE = 101,\n    KEY_POWER = 102,\n    KEY_KPEQUAL = 103,\n    KEY_F13 = 104,\n    KEY_F14 = 105,\n    KEY_F15 = 106,\n    KEY_F16 = 107,\n    KEY_F17 = 108,\n    KEY_F18 = 109,\n    KEY_F19 = 110,\n    KEY_F20 = 111,\n    KEY_F21 = 112,\n    KEY_F22 = 113,\n    KEY_F23 = 114,\n    KEY_F24 = 115,\n    KEY_OPEN = 116,\n    KEY_HELP = 117,\n    KEY_PROPS = 118,\n    KEY_FRONT = 119,\n    KEY_STOP = 120,\n    KEY_AGAIN = 121,\n    KEY_UNDO = 122,\n    KEY_CUT = 123,\n    KEY_COPY = 124,\n    KEY_PASTE = 125,\n    KEY_FIND = 126,\n    KEY_MUTE = 127,\n    KEY_VOLUMEUP = 128,\n    KEY_VOLUMEDOWN = 129,\n    KEY_KPCOMMA = 133,\n    KEY_RO = 135,\n    KEY_KATAKANAHIRAGANA = 136,\n    KEY_YEN = 137,\n    KEY_HENKAN = 138,\n    KEY_MUHENKAN = 139,\n    KEY_KPJPCOMMA = 140,\n    KEY_HANGEUL = 144,\n    KEY_HANJA = 145,\n    KEY_KATAKANA = 146,\n    KEY_HIRAGANA = 147,\n    KEY_ZENKAKUHANKAKU = 148,\n    KEY_KPLEFTPAREN = 182,\n    KEY_KPRIGHTPAREN = 183,\n    KEY_LEFTCTRL = 224,\n    KEY_LEFTSHIFT = 225,\n    KEY_LEFTALT = 226,\n    KEY_LEFTMETA = 227,\n    KEY_RIGHTCTRL = 228,\n    KEY_RIGHTSHIFT = 229,\n    KEY_RIGHTALT = 230,\n    KEY_RIGHTMETA = 231,\n    KEY_MEDIA_PLAYPAUSE = 232,\n    KEY_MEDIA_STOPCD = 233,\n    KEY_MEDIA_PREVIOUSSONG = 234,\n    KEY_MEDIA_NEXTSONG = 235,\n    KEY_MEDIA_EJECTCD = 236,\n    KEY_MEDIA_VOLUMEUP = 237,\n    KEY_MEDIA_VOLUMEDOWN = 238,\n    KEY_MEDIA_MUTE = 239,\n    KEY_MEDIA_WWW = 240,\n    KEY_MEDIA_BACK = 241,\n    KEY_MEDIA_FORWARD = 242,\n    KEY_MEDIA_STOP = 243,\n    KEY_MEDIA_FIND = 244,\n    KEY_MEDIA_SCROLLUP = 245,\n    KEY_MEDIA_SCROLLDOWN = 246,\n    KEY_MEDIA_EDIT = 247,\n    KEY_MEDIA_SLEEP = 248,\n    KEY_MEDIA_COFFEE = 249,\n    KEY_MEDIA_REFRESH = 250,\n    KEY_MEDIA_CALC = 251,\n    // /libraries/codal-core/inc/drivers/uf2format.h\n    UF2FORMAT_H = 1,\n    APP_START_ADDRESS = 8192,\n    UF2_FLAG_NOFLASH = 1,\n    // /libraries/codal-core/inc/streams/DataStream.h\n    DATASTREAM_MAXIMUM_BUFFERS = 1,\n    // /libraries/codal-core/inc/streams/LevelDetector.h\n    LEVEL_THRESHOLD_LOW = 1,\n    LEVEL_THRESHOLD_HIGH = 2,\n    LEVEL_DETECTOR_INITIALISED = 1,\n    LEVEL_DETECTOR_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_DEFAULT_WINDOW_SIZE = 128,\n    // /libraries/codal-core/inc/streams/LevelDetectorSPL.h\n    LEVEL_DETECTOR_SPL_INITIALISED = 1,\n    LEVEL_DETECTOR_SPL_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_SPL_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_SPL_DEFAULT_WINDOW_SIZE = 128,\n    // /libraries/codal-core/inc/streams/Synthesizer.h\n    SYNTHESIZER_SAMPLE_RATE = 44100,\n    TONE_WIDTH = 1024,\n    // /libraries/codal-core/inc/types/BitmapFont.h\n    BITMAP_FONT_WIDTH = 5,\n    BITMAP_FONT_HEIGHT = 5,\n    BITMAP_FONT_ASCII_START = 32,\n    BITMAP_FONT_ASCII_END = 126,\n    // /libraries/codal-core/inc/types/CoordinateSystem.h\n    COORDINATE_SPACE_ROTATED_0 = 0,\n    COORDINATE_SPACE_ROTATED_90 = 1,\n    COORDINATE_SPACE_ROTATED_180 = 2,\n    COORDINATE_SPACE_ROTATED_270 = 3,\n    RAW = 0,\n    SIMPLE_CARTESIAN = 1,\n    NORTH_EAST_DOWN = 2,\n    NORTH_EAST_UP = 3,\n    // /libraries/codal-core/inc/types/Event.h\n    DEVICE_ID_ANY = 0,\n    DEVICE_EVT_ANY = 0,\n    CREATE_ONLY = 0,\n    CREATE_AND_FIRE = 1,\n    DEVICE_EVENT_DEFAULT_LAUNCH_MODE = 1,\n    // /libraries/codal-core/inc/types/RefCounted.h\n    REF_TAG_STRING = 1,\n    REF_TAG_BUFFER = 2,\n    REF_TAG_IMAGE = 3,\n    REF_TAG_USER = 32,\n    // /pxtapp/accelerometer/axis.h\n    ACC_SYSTEM = 3,\n    ACC_ROTATION = 0,\n    // /pxtapp/configkeys.h\n    CFG_PIN_NAME_MSK = 65535,\n    CFG_PIN_CONFIG_MSK = 4294901760,\n    CFG_PIN_CONFIG_ACTIVE_LO = 65536,\n    CFG_MAGIC0 = 513675505,\n    CFG_MAGIC1 = 539130489,\n    CFG_PIN_ACCELEROMETER_INT = 1,\n    CFG_PIN_ACCELEROMETER_SCL = 2,\n    CFG_PIN_ACCELEROMETER_SDA = 3,\n    CFG_PIN_BTN_A = 4,\n    CFG_PIN_BTN_B = 5,\n    CFG_PIN_BTN_SLIDE = 6,\n    CFG_PIN_DOTSTAR_CLOCK = 7,\n    CFG_PIN_DOTSTAR_DATA = 8,\n    CFG_PIN_FLASH_CS = 9,\n    CFG_PIN_FLASH_MISO = 10,\n    CFG_PIN_FLASH_MOSI = 11,\n    CFG_PIN_FLASH_SCK = 12,\n    CFG_PIN_LED = 13,\n    CFG_PIN_LIGHT = 14,\n    CFG_PIN_MICROPHONE = 15,\n    CFG_PIN_MIC_CLOCK = 16,\n    CFG_PIN_MIC_DATA = 17,\n    CFG_PIN_MISO = 18,\n    CFG_PIN_MOSI = 19,\n    CFG_PIN_NEOPIXEL = 20,\n    CFG_PIN_RX = 21,\n    CFG_PIN_RXLED = 22,\n    CFG_PIN_SCK = 23,\n    CFG_PIN_SCL = 24,\n    CFG_PIN_SDA = 25,\n    CFG_PIN_SPEAKER_AMP = 26,\n    CFG_PIN_TEMPERATURE = 27,\n    CFG_PIN_TX = 28,\n    CFG_PIN_TXLED = 29,\n    CFG_PIN_IR_OUT = 30,\n    CFG_PIN_IR_IN = 31,\n    CFG_PIN_DISPLAY_SCK = 32,\n    CFG_PIN_DISPLAY_MISO = 33,\n    CFG_PIN_DISPLAY_MOSI = 34,\n    CFG_PIN_DISPLAY_CS = 35,\n    CFG_PIN_DISPLAY_DC = 36,\n    CFG_DISPLAY_WIDTH = 37,\n    CFG_DISPLAY_HEIGHT = 38,\n    CFG_DISPLAY_CFG0 = 39,\n    CFG_DISPLAY_CFG1 = 40,\n    CFG_DISPLAY_CFG2 = 41,\n    CFG_DISPLAY_CFG3 = 42,\n    CFG_PIN_DISPLAY_RST = 43,\n    CFG_PIN_DISPLAY_BL = 44,\n    CFG_PIN_SERVO_1 = 45,\n    CFG_PIN_SERVO_2 = 46,\n    CFG_PIN_BTN_LEFT = 47,\n    CFG_PIN_BTN_RIGHT = 48,\n    CFG_PIN_BTN_UP = 49,\n    CFG_PIN_BTN_DOWN = 50,\n    CFG_PIN_BTN_MENU = 51,\n    CFG_PIN_LED_R = 52,\n    CFG_PIN_LED_G = 53,\n    CFG_PIN_LED_B = 54,\n    CFG_PIN_LED1 = 55,\n    CFG_PIN_LED2 = 56,\n    CFG_PIN_LED3 = 57,\n    CFG_PIN_LED4 = 58,\n    CFG_SPEAKER_VOLUME = 59,\n    CFG_PIN_JACK_TX = 60,\n    CFG_PIN_JACK_SENSE = 61,\n    CFG_PIN_JACK_HPEN = 62,\n    CFG_PIN_JACK_BZEN = 63,\n    CFG_PIN_JACK_PWREN = 64,\n    CFG_PIN_JACK_SND = 65,\n    CFG_PIN_JACK_BUSLED = 66,\n    CFG_PIN_JACK_COMMLED = 67,\n    CFG_PIN_BTN_SOFT_RESET = 69,\n    CFG_ACCELEROMETER_TYPE = 70,\n    CFG_PIN_BTNMX_LATCH = 71,\n    CFG_PIN_BTNMX_CLOCK = 72,\n    CFG_PIN_BTNMX_DATA = 73,\n    CFG_PIN_BTN_MENU2 = 74,\n    CFG_PIN_BATTSENSE = 75,\n    CFG_PIN_VIBRATION = 76,\n    CFG_PIN_PWREN = 77,\n    CFG_DISPLAY_TYPE = 78,\n    CFG_PIN_ROTARY_ENCODER_A = 79,\n    CFG_PIN_ROTARY_ENCODER_B = 80,\n    CFG_ACCELEROMETER_SPACE = 81,\n    CFG_PIN_WIFI_MOSI = 82,\n    CFG_PIN_WIFI_MISO = 83,\n    CFG_PIN_WIFI_SCK = 84,\n    CFG_PIN_WIFI_TX = 85,\n    CFG_PIN_WIFI_RX = 86,\n    CFG_PIN_WIFI_CS = 87,\n    CFG_PIN_WIFI_BUSY = 88,\n    CFG_PIN_WIFI_RESET = 89,\n    CFG_PIN_WIFI_GPIO0 = 90,\n    CFG_PIN_WIFI_AT_TX = 91,\n    CFG_PIN_WIFI_AT_RX = 92,\n    CFG_PIN_USB_POWER = 93,\n    ACCELEROMETER_TYPE_LIS3DH = 50,\n    ACCELEROMETER_TYPE_LIS3DH_ALT = 48,\n    ACCELEROMETER_TYPE_MMA8453 = 56,\n    ACCELEROMETER_TYPE_FXOS8700 = 60,\n    ACCELEROMETER_TYPE_MMA8653 = 58,\n    ACCELEROMETER_TYPE_MSA300 = 76,\n    ACCELEROMETER_TYPE_MPU6050 = 104,\n    DISPLAY_TYPE_ST7735 = 7735,\n    DISPLAY_TYPE_ILI9341 = 9341,\n    DISPLAY_TYPE_SMART = 4242,\n    CFG_PIN_A0 = 100,\n    CFG_PIN_A1 = 101,\n    CFG_PIN_A2 = 102,\n    CFG_PIN_A3 = 103,\n    CFG_PIN_A4 = 104,\n    CFG_PIN_A5 = 105,\n    CFG_PIN_A6 = 106,\n    CFG_PIN_A7 = 107,\n    CFG_PIN_A8 = 108,\n    CFG_PIN_A9 = 109,\n    CFG_PIN_A10 = 110,\n    CFG_PIN_A11 = 111,\n    CFG_PIN_A12 = 112,\n    CFG_PIN_A13 = 113,\n    CFG_PIN_A14 = 114,\n    CFG_PIN_A15 = 115,\n    CFG_PIN_A16 = 116,\n    CFG_PIN_A17 = 117,\n    CFG_PIN_A18 = 118,\n    CFG_PIN_A19 = 119,\n    CFG_PIN_A20 = 120,\n    CFG_PIN_A21 = 121,\n    CFG_PIN_A22 = 122,\n    CFG_PIN_A23 = 123,\n    CFG_PIN_A24 = 124,\n    CFG_PIN_A25 = 125,\n    CFG_PIN_A26 = 126,\n    CFG_PIN_A27 = 127,\n    CFG_PIN_A28 = 128,\n    CFG_PIN_A29 = 129,\n    CFG_PIN_A30 = 130,\n    CFG_PIN_A31 = 131,\n    CFG_PIN_D0 = 150,\n    CFG_PIN_D1 = 151,\n    CFG_PIN_D2 = 152,\n    CFG_PIN_D3 = 153,\n    CFG_PIN_D4 = 154,\n    CFG_PIN_D5 = 155,\n    CFG_PIN_D6 = 156,\n    CFG_PIN_D7 = 157,\n    CFG_PIN_D8 = 158,\n    CFG_PIN_D9 = 159,\n    CFG_PIN_D10 = 160,\n    CFG_PIN_D11 = 161,\n    CFG_PIN_D12 = 162,\n    CFG_PIN_D13 = 163,\n    CFG_PIN_D14 = 164,\n    CFG_PIN_D15 = 165,\n    CFG_PIN_D16 = 166,\n    CFG_PIN_D17 = 167,\n    CFG_PIN_D18 = 168,\n    CFG_PIN_D19 = 169,\n    CFG_PIN_D20 = 170,\n    CFG_PIN_D21 = 171,\n    CFG_PIN_D22 = 172,\n    CFG_PIN_D23 = 173,\n    CFG_PIN_D24 = 174,\n    CFG_PIN_D25 = 175,\n    CFG_PIN_D26 = 176,\n    CFG_PIN_D27 = 177,\n    CFG_PIN_D28 = 178,\n    CFG_PIN_D29 = 179,\n    CFG_PIN_D30 = 180,\n    CFG_PIN_D31 = 181,\n    CFG_NUM_NEOPIXELS = 200,\n    CFG_NUM_DOTSTARS = 201,\n    CFG_DEFAULT_BUTTON_MODE = 202,\n    CFG_SWD_ENABLED = 203,\n    CFG_FLASH_BYTES = 204,\n    CFG_RAM_BYTES = 205,\n    CFG_SYSTEM_HEAP_BYTES = 206,\n    CFG_LOW_MEM_SIMULATION_KB = 207,\n    CFG_BOOTLOADER_BOARD_ID = 208,\n    CFG_UF2_FAMILY = 209,\n    CFG_PINS_PORT_SIZE = 210,\n    CFG_BOOTLOADER_PROTECTION = 211,\n    CFG_POWER_DEEPSLEEP_TIMEOUT = 212,\n    CFG_ANALOG_BUTTON_THRESHOLD = 213,\n    CFG_CPU_MHZ = 214,\n    CFG_CONTROLLER_LIGHT_MAX_BRIGHTNESS = 215,\n    CFG_ANALOG_JOYSTICK_MIN = 216,\n    CFG_ANALOG_JOYSTICK_MAX = 217,\n    CFG_TIMERS_TO_USE = 218,\n    CFG_PIN_ONBOARD_DOTSTAR_CLOCK = 219,\n    CFG_PIN_ONBOARD_DOTSTAR_DATA = 220,\n    CFG_NUM_ONBOARD_DOTSTARS = 221,\n    CFG_PIN_ONBOARD_NEOPIXEL = 222,\n    CFG_NUM_ONBOARD_NEOPIXELS = 223,\n    CFG_MATRIX_KEYPAD_MESSAGE_ID = 239,\n    CFG_NUM_MATRIX_KEYPAD_ROWS = 240,\n    CFG_PIN_MATRIX_KEYPAD_ROW0 = 241,\n    CFG_PIN_MATRIX_KEYPAD_ROW1 = 242,\n    CFG_PIN_MATRIX_KEYPAD_ROW2 = 243,\n    CFG_PIN_MATRIX_KEYPAD_ROW3 = 244,\n    CFG_PIN_MATRIX_KEYPAD_ROW4 = 245,\n    CFG_PIN_MATRIX_KEYPAD_ROW5 = 246,\n    CFG_PIN_MATRIX_KEYPAD_ROW6 = 247,\n    CFG_PIN_MATRIX_KEYPAD_ROW7 = 248,\n    CFG_NUM_MATRIX_KEYPAD_COLS = 250,\n    CFG_PIN_MATRIX_KEYPAD_COL0 = 251,\n    CFG_PIN_MATRIX_KEYPAD_COL1 = 252,\n    CFG_PIN_MATRIX_KEYPAD_COL2 = 253,\n    CFG_PIN_MATRIX_KEYPAD_COL3 = 254,\n    CFG_PIN_MATRIX_KEYPAD_COL4 = 255,\n    CFG_PIN_MATRIX_KEYPAD_COL5 = 256,\n    CFG_PIN_MATRIX_KEYPAD_COL6 = 257,\n    CFG_PIN_MATRIX_KEYPAD_COL7 = 258,\n    CFG_PIN_B0 = 300,\n    CFG_PIN_B1 = 301,\n    CFG_PIN_B2 = 302,\n    CFG_PIN_B3 = 303,\n    CFG_PIN_B4 = 304,\n    CFG_PIN_B5 = 305,\n    CFG_PIN_B6 = 306,\n    CFG_PIN_B7 = 307,\n    CFG_PIN_B8 = 308,\n    CFG_PIN_B9 = 309,\n    CFG_PIN_B10 = 310,\n    CFG_PIN_B11 = 311,\n    CFG_PIN_B12 = 312,\n    CFG_PIN_B13 = 313,\n    CFG_PIN_B14 = 314,\n    CFG_PIN_B15 = 315,\n    CFG_PIN_B16 = 316,\n    CFG_PIN_B17 = 317,\n    CFG_PIN_B18 = 318,\n    CFG_PIN_B19 = 319,\n    CFG_PIN_B20 = 320,\n    CFG_PIN_B21 = 321,\n    CFG_PIN_B22 = 322,\n    CFG_PIN_B23 = 323,\n    CFG_PIN_B24 = 324,\n    CFG_PIN_B25 = 325,\n    CFG_PIN_B26 = 326,\n    CFG_PIN_B27 = 327,\n    CFG_PIN_B28 = 328,\n    CFG_PIN_B29 = 329,\n    CFG_PIN_B30 = 330,\n    CFG_PIN_B31 = 331,\n    CFG_PIN_C0 = 350,\n    CFG_PIN_C1 = 351,\n    CFG_PIN_C2 = 352,\n    CFG_PIN_C3 = 353,\n    CFG_PIN_C4 = 354,\n    CFG_PIN_C5 = 355,\n    CFG_PIN_C6 = 356,\n    CFG_PIN_C7 = 357,\n    CFG_PIN_C8 = 358,\n    CFG_PIN_C9 = 359,\n    CFG_PIN_C10 = 360,\n    CFG_PIN_C11 = 361,\n    CFG_PIN_C12 = 362,\n    CFG_PIN_C13 = 363,\n    CFG_PIN_C14 = 364,\n    CFG_PIN_C15 = 365,\n    CFG_PIN_C16 = 366,\n    CFG_PIN_C17 = 367,\n    CFG_PIN_C18 = 368,\n    CFG_PIN_C19 = 369,\n    CFG_PIN_C20 = 370,\n    CFG_PIN_C21 = 371,\n    CFG_PIN_C22 = 372,\n    CFG_PIN_C23 = 373,\n    CFG_PIN_C24 = 374,\n    CFG_PIN_C25 = 375,\n    CFG_PIN_C26 = 376,\n    CFG_PIN_C27 = 377,\n    CFG_PIN_C28 = 378,\n    CFG_PIN_C29 = 379,\n    CFG_PIN_C30 = 380,\n    CFG_PIN_C31 = 381,\n    CFG_PIN_P0 = 400,\n    CFG_PIN_P1 = 401,\n    CFG_PIN_P2 = 402,\n    CFG_PIN_P3 = 403,\n    CFG_PIN_P4 = 404,\n    CFG_PIN_P5 = 405,\n    CFG_PIN_P6 = 406,\n    CFG_PIN_P7 = 407,\n    CFG_PIN_P8 = 408,\n    CFG_PIN_P9 = 409,\n    CFG_PIN_P10 = 410,\n    CFG_PIN_P11 = 411,\n    CFG_PIN_P12 = 412,\n    CFG_PIN_P13 = 413,\n    CFG_PIN_P14 = 414,\n    CFG_PIN_P15 = 415,\n    CFG_PIN_P16 = 416,\n    CFG_PIN_P17 = 417,\n    CFG_PIN_P18 = 418,\n    CFG_PIN_P19 = 419,\n    CFG_PIN_P20 = 420,\n    CFG_PIN_P21 = 421,\n    CFG_PIN_P22 = 422,\n    CFG_PIN_P23 = 423,\n    CFG_PIN_P24 = 424,\n    CFG_PIN_P25 = 425,\n    CFG_PIN_P26 = 426,\n    CFG_PIN_P27 = 427,\n    CFG_PIN_P28 = 428,\n    CFG_PIN_P29 = 429,\n    CFG_PIN_P30 = 430,\n    CFG_PIN_P31 = 431,\n    CFG_PIN_LORA_MISO = 1001,\n    CFG_PIN_LORA_MOSI = 1002,\n    CFG_PIN_LORA_SCK = 1003,\n    CFG_PIN_LORA_CS = 1004,\n    CFG_PIN_LORA_BOOT = 1005,\n    CFG_PIN_LORA_RESET = 1006,\n    CFG_PIN_IRRXLED = 1007,\n    CFG_PIN_IRTXLED = 1008,\n    CFG_PIN_LCD_RESET = 1009,\n    CFG_PIN_LCD_ENABLE = 1010,\n    CFG_PIN_LCD_DATALINE4 = 1011,\n    CFG_PIN_LCD_DATALINE5 = 1012,\n    CFG_PIN_LCD_DATALINE6 = 1013,\n    CFG_PIN_LCD_DATALINE7 = 1014,\n    CFG_NUM_LCD_COLUMNS = 1015,\n    CFG_NUM_LCD_ROWS = 1016,\n    CFG_PIN_RCC0 = 1017,\n    CFG_PIN_RCC1 = 1018,\n    CFG_PIN_RCC2 = 1019,\n    CFG_PIN_RCC3 = 1020,\n    CFG_PIN_RCC4 = 1021,\n    CFG_PIN_RCC5 = 1022,\n    CFG_PIN_RCC6 = 1023,\n    CFG_PIN_RCC7 = 1024,\n    CFG_PIN_SERVO0 = 1025,\n    CFG_PIN_SERVO1 = 1026,\n    CFG_PIN_SERVO2 = 1027,\n    CFG_PIN_SERVO3 = 1028,\n    CFG_PIN_SERVO4 = 1029,\n    CFG_PIN_SERVO5 = 1030,\n    CFG_PIN_SERVO6 = 1031,\n    CFG_PIN_SERVO7 = 1032,\n    CFG_PIN_SERVO8 = 1033,\n    CFG_PIN_PI_TX = 1034,\n    CFG_PIN_PI_RX = 1035,\n    CFG_PIN_GPS_SDA = 1036,\n    CFG_PIN_GPS_SCL = 1037,\n    CFG_PIN_GPS_TX = 1038,\n    CFG_PIN_GPS_RX = 1039,\n    CFG_PIN_GROVE0 = 1040,\n    CFG_PIN_GROVE1 = 1041,\n    CFG_PIN_SS = 1042,\n    // /pxtapp/hf2dbg.h\n    HF2DBG_H = 1,\n    // /pxtapp/jacdac/jdprotocol.h\n    JDSPI_MAGIC = 31437,\n    JDSPI_MAGIC_NOOP = 46029,\n    // /pxtapp/mixer---samd/melody.h\n    SW_TRIANGLE = 1,\n    SW_SAWTOOTH = 2,\n    SW_SINE = 3,\n    SW_NOISE = 5,\n    SW_SQUARE_10 = 11,\n    SW_SQUARE_50 = 15,\n    CODAL = 1,\n    MAX_SOUNDS = 5,\n    Waiting = 0,\n    Playing = 1,\n    Done = 2,\n    // /pxtapp/pins.h\n    BUTTON_ACTIVE_HIGH_PULL_DOWN = 17,\n    BUTTON_ACTIVE_HIGH_PULL_UP = 33,\n    BUTTON_ACTIVE_HIGH_PULL_NONE = 49,\n    BUTTON_ACTIVE_LOW_PULL_DOWN = 16,\n    BUTTON_ACTIVE_LOW_PULL_UP = 32,\n    BUTTON_ACTIVE_LOW_PULL_NONE = 48,\n    // /pxtapp/platform.h\n    PAGE_SIZE = 512,\n    BOOTLOADER_START = 0,\n    DEV_NUM_PINS = 64,\n    PXT_74HC165 = 1,\n    IMAGE_BITS = 4,\n    PA00 = 0,\n    PA01 = 1,\n    PA02 = 2,\n    PA03 = 3,\n    PA04 = 4,\n    PA05 = 5,\n    PA06 = 6,\n    PA07 = 7,\n    PA08 = 8,\n    PA09 = 9,\n    PA10 = 10,\n    PA11 = 11,\n    PA12 = 12,\n    PA13 = 13,\n    PA14 = 14,\n    PA15 = 15,\n    PA16 = 16,\n    PA17 = 17,\n    PA18 = 18,\n    PA19 = 19,\n    PA20 = 20,\n    PA21 = 21,\n    PA22 = 22,\n    PA23 = 23,\n    PA24 = 24,\n    PA25 = 25,\n    PA26 = 26,\n    PA27 = 27,\n    PA28 = 28,\n    PA29 = 29,\n    PA30 = 30,\n    PA31 = 31,\n    PB00 = 32,\n    PB01 = 33,\n    PB02 = 34,\n    PB03 = 35,\n    PB04 = 36,\n    PB05 = 37,\n    PB06 = 38,\n    PB07 = 39,\n    PB08 = 40,\n    PB09 = 41,\n    PB10 = 42,\n    PB11 = 43,\n    PB12 = 44,\n    PB13 = 45,\n    PB14 = 46,\n    PB15 = 47,\n    PB16 = 48,\n    PB17 = 49,\n    PB18 = 50,\n    PB19 = 51,\n    PB20 = 52,\n    PB21 = 53,\n    PB22 = 54,\n    PB23 = 55,\n    PB24 = 56,\n    PB25 = 57,\n    PB26 = 58,\n    PB27 = 59,\n    PB28 = 60,\n    PB29 = 61,\n    PB30 = 62,\n    PB31 = 63,\n    // /pxtapp/pxt.h\n    DEVICE_ID_BUTTON_SLIDE = 3000,\n    DEVICE_ID_MICROPHONE = 3001,\n    DEVICE_ID_FIRST_BUTTON = 4000,\n    DEVICE_ID_FIRST_TOUCHBUTTON = 4100,\n    PXT_INTERNAL_KEY_UP = 2050,\n    PXT_INTERNAL_KEY_DOWN = 2051,\n    // /pxtapp/pxtbase.h\n    PXT32 = 1,\n    PXT64 = 1,\n    PXT_REFCNT_FLASH = 65534,\n    VTABLE_MAGIC = 249,\n    Undefined = 0,\n    Boolean = 1,\n    Number = 2,\n    String = 3,\n    Object = 4,\n    Function = 5,\n    BoxedString = 1,\n    BoxedNumber = 2,\n    BoxedBuffer = 3,\n    RefAction = 4,\n    RefImage = 5,\n    RefCollection = 6,\n    RefRefLocal = 7,\n    RefMap = 8,\n    RefMImage = 9,\n    MMap = 10,\n    User0 = 16,\n    PXT_IOS_HEAP_ALLOC_BITS = 20,\n    IMAGE_HEADER_MAGIC = 135,\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    NUM_TRY_FRAME_REGS = 3,\n    GC = 0,\n    // /pxtapp/pxtconfig.h\n    PXT_UF2_FAMILY = 1760373640,\n    // /pxtapp/serial/serial-common.h\n    BaudRate115200 = 115200,\n    BaudRate57600 = 57600,\n    BaudRate38400 = 38400,\n    BaudRate31250 = 31250,\n    BaudRate28800 = 28800,\n    BaudRate19200 = 19200,\n    BaudRate14400 = 14400,\n    BaudRate9600 = 9600,\n    BaudRate4800 = 4800,\n    BaudRate2400 = 2400,\n    BaudRate1200 = 1200,\n    BaudRate300 = 300,\n    DataReceived = 4,\n    RxBufferFull = 3,\n    NewLine = 10,\n    Comma = 44,\n    Dollar = 36,\n    Colon = 58,\n    Fullstop = 46,\n    Hash = 35,\n    SemiColumn = 59,\n    Space = 32,\n    Tab = 9,\n    Pipe = 124,\n    // /pxtapp/settings/RAFFS.h\n    RAFFS_FOLLOWING_MASK = 32768,\n    RAFFS_FLASH_BUFFER_SIZE = 64,\n    // /pxtapp/thermometer/target_temperature.h\n    TEMPERATURE_NOMINAL_VALUE = 25,\n    TEMPERATURE_NOMINAL_READING = 10000,\n    TEMPERATURE_BETA = 3380,\n    TEMPERATURE_SERIES_RESISTOR = 10000,\n    // /pxtapp/uf2hid.h\n    UF2_HID_H = 1,\n}\n",
            "dmac.cpp": "#include \"dmac.h\"\n\nnamespace pxt {\n\n#ifdef CODAL_DMAC\nSINGLETON(WDMAC);\n#endif\n\n}",
            "dmac.h": "#ifndef __DMAC_H\n#define __DMAC_H\n\n#include \"pxt.h\"\n\nnamespace pxt {\n\n#ifdef CODAL_DMAC\nclass WDMAC {\n  public:\n    CODAL_DMAC dmac;\n\n    WDMAC() {}\n};\n\nWDMAC* getWDMAC();\n#endif\n\n}\n\n#endif",
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum PulseValue {\n    //% block=high\n    High = 4,  // DEVICE_PIN_EVT_PULSE_HI\n    //% block=low\n    Low = 5,  // DEVICE_PIN_EVT_PULSE_LO\n    }\n\n\n    declare const enum PinEvent {\n    //% block=\"pulse high\"\n    PulseHigh = 4,  // DEVICE_PIN_EVT_PULSE_HI\n    //% block=\"pulse low\"\n    PulseLow = 5,  // DEVICE_PIN_EVT_PULSE_LO\n    //% block=\"rise\"\n    Rise = 2,  // DEVICE_PIN_EVT_RISE\n    //% block=\"fall\"\n    Fall = 3,  // DEVICE_PIN_EVT_FALL\n    }\n\n\n    declare const enum PinPullMode {\n    //% block=\"down\"\n    PullDown = 0,\n    //% block=\"up\"\n    PullUp = 1,\n    //% block=\"none\"\n    PullNone = 2,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "hf2.cpp": "#include \"pxt.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#ifndef USB_HANDOVER\n#define USB_HANDOVER 1\n#endif\n\n#if USB_HANDOVER\n#define UF2_DEFINE_HANDOVER 1\n#endif\n\n#include \"uf2format.h\"\n\nstatic void *stackCopy;\nstatic uint32_t stackSize;\n\n//#define LOG DMESG\n#define LOG(...) ((void)0)\n\nstatic volatile bool resume = false;\n\nusing namespace codal;\n\n#ifdef HF2_HID\nstatic const char hidDescriptor[] = {\n    0x06, 0x97, 0xFF, // usage page vendor 0x97 (usage 0xff97 0x0001)\n    0x09, 0x01,       // usage 1\n    0xA1, 0x01,       // collection - application\n    0x15, 0x00,       // logical min 0\n    0x26, 0xFF, 0x00, // logical max 255\n    0x75, 8,          // report size 8\n    0x95, 64,         // report count 64\n    0x09, 0x01,       // usage 1\n    0x81, 0x02,       // input: data, variable, absolute\n    0x95, 64,         // report count 64\n    0x09, 0x01,       // usage 1\n    0x91, 0x02,       // output: data, variable, absolute\n    0x95, 1,          // report count 1\n    0x09, 0x01,       // usage 1\n    0xB1, 0x02,       // feature: data, variable, absolute\n    0xC0,             // end\n};\n\nstatic const HIDReportDescriptor reportDesc = {\n    9,\n    0x21,                  // HID\n    0x100,                 // hidbcd 1.00\n    0x00,                  // country code\n    0x01,                  // num desc\n    0x22,                  // report desc type\n    sizeof(hidDescriptor), // size of 0x22\n};\n\nstatic const InterfaceInfo ifaceInfoHID = {\n    &reportDesc,\n    sizeof(reportDesc),\n    1,\n    {\n        2,    // numEndpoints\n        0x03, /// class code - HID\n        0x00, // subclass\n        0x00, // protocol\n        0x02, // string\n        0x00, // alt\n    },\n    {USB_EP_TYPE_INTERRUPT, 1},\n    {USB_EP_TYPE_INTERRUPT, 1},\n};\n#endif\n\nstatic const InterfaceInfo ifaceInfoEP = {\n    NULL,\n    0,\n    2,\n    {\n        2,    // numEndpoints\n        0xff, /// class code - vendor-specific\n        42,   // subclass\n        1,    // protocol\n        0x02, // string\n        0x00, // alt\n    },\n    {USB_EP_TYPE_BULK, 0},\n    {USB_EP_TYPE_BULK, 0},\n};\n\nint HF2::stdRequest(UsbEndpointIn &ctrl, USBSetup &setup) {\n#ifdef HF2_HID\n    if (!useHID)\n        return DEVICE_NOT_SUPPORTED;\n    if (setup.bRequest == USB_REQ_GET_DESCRIPTOR) {\n        if (setup.wValueH == 0x21) {\n            InterfaceDescriptor tmp;\n            fillInterfaceInfo(&tmp);\n            return ctrl.write(&tmp, sizeof(tmp));\n        } else if (setup.wValueH == 0x22) {\n            return ctrl.write(hidDescriptor, sizeof(hidDescriptor));\n        }\n    }\n#endif\n    return DEVICE_NOT_SUPPORTED;\n}\n\n// same as in microbit\n#define CTRL_GET_REPORT 0x01\n#define CTRL_SET_REPORT 0x09\n#define CTRL_OUT_REPORT_H 0x2\n#define CTRL_IN_REPORT_H 0x1\n\nvoid HF2::sendBuffer(uint8_t flag, const void *data, unsigned size, uint32_t prepend) {\n    if (!CodalUSB::usbInstance->isInitialised())\n        return;\n\n    uint32_t buf[64 / 4]; // aligned\n\n    if (prepend + 1)\n        size += 4;\n\n    target_disable_irq();\n    while (size > 0) {\n        memset(buf + 1, 0, 60);\n        int s = 63;\n        if (size <= 63) {\n            s = size;\n            buf[0] = flag;\n        } else {\n            buf[0] = flag == HF2_FLAG_CMDPKT_LAST ? HF2_FLAG_CMDPKT_BODY : flag;\n        }\n        buf[0] |= s;\n        uint8_t *dst = (uint8_t *)buf;\n        dst++;\n        if (prepend + 1) {\n            memcpy(dst, &prepend, 4);\n            prepend = -1;\n            dst += 4;\n            s -= 4;\n            size -= 4;\n        }\n        memcpy(dst, data, s);\n        data = (const uint8_t *)data + s;\n        size -= s;\n\n        in->write(buf, sizeof(buf));\n    }\n    target_enable_irq();\n}\n\nconst InterfaceInfo *HF2::getInterfaceInfo() {\n#ifdef HF2_HID\n    if (useHID)\n        return &ifaceInfoHID;\n#endif\n    return &ifaceInfoEP;\n}\n\nint HF2::sendEvent(uint32_t evId, const void *data, int size) {\n    sendBuffer(HF2_FLAG_CMDPKT_LAST, data, size, evId);\n    return 0;\n}\n\nint HF2::sendSerial(const void *data, int size, int isError) {\n    if (!gotSomePacket)\n        return DEVICE_OK;\n\n    sendBuffer(isError ? HF2_FLAG_SERIAL_ERR : HF2_FLAG_SERIAL_OUT, data, size);\n\n    return 0;\n}\n\n// Receive HF2 message\n// Does not block. Will store intermediate data in pkt.\n// `serial` flag is cleared if we got a command message.\nint HF2::recv() {\n    uint8_t buf[64];\n\n    int len = out->read(buf, sizeof(buf));\n    // DMESG(\"HF2 read: %d\", len);\n\n    if (len <= 0)\n        return len;\n\n    uint8_t tag = buf[0];\n    // serial packets not allowed when in middle of command packet\n    usb_assert(pkt.size == 0 || !(tag & HF2_FLAG_SERIAL_OUT));\n    int size = tag & HF2_SIZE_MASK;\n    usb_assert(pkt.size + size <= (int)sizeof(pkt.buf));\n    memcpy(pkt.buf + pkt.size, buf + 1, size);\n    pkt.size += size;\n    tag &= HF2_FLAG_MASK;\n    if (tag != HF2_FLAG_CMDPKT_BODY) {\n        if (tag == HF2_FLAG_CMDPKT_LAST)\n            pkt.serial = 0;\n        else if (tag == HF2_FLAG_SERIAL_OUT)\n            pkt.serial = 1;\n        else\n            pkt.serial = 2;\n        int sz = pkt.size;\n        pkt.size = 0;\n        return sz;\n    }\n    return 0;\n}\n\nint HF2::sendResponse(int size) {\n    sendBuffer(HF2_FLAG_CMDPKT_LAST, pkt.buf, 4 + size);\n    return 0;\n}\n\nint HF2::sendResponseWithData(const void *data, int size) {\n    if (size <= (int)sizeof(pkt.buf) - 4) {\n        memcpy(pkt.resp.data8, data, size);\n        return sendResponse(size);\n    } else {\n        sendBuffer(HF2_FLAG_CMDPKT_LAST, data, size, pkt.resp.eventId);\n        return 0;\n    }\n}\n\nstatic void copy_words(void *dst0, const void *src0, uint32_t n_words) {\n    uint32_t *dst = (uint32_t *)dst0;\n    const uint32_t *src = (const uint32_t *)src0;\n    while (n_words--)\n        *dst++ = *src++;\n}\n\n#ifndef QUICK_BOOT\n#ifdef SAMD21\n#define DBL_TAP_PTR ((volatile uint32_t *)(HMCRAMC0_ADDR + HMCRAMC0_SIZE - 4))\n#endif\n#ifdef SAMD51\n#define DBL_TAP_PTR ((volatile uint32_t *)(HSRAM_ADDR + HSRAM_SIZE - 4))\n#endif\n#if defined(NRF52840) || defined(NRF52833)\n#define DBL_TAP_PTR ((volatile uint32_t*)0x20007F7C)\n#endif\n#define DBL_TAP_MAGIC_QUICK_BOOT 0xf02669ef\n#define QUICK_BOOT(v) *DBL_TAP_PTR = v ? DBL_TAP_MAGIC_QUICK_BOOT : 0\n#endif\n\nstatic HF2 *jdLogger;\nstatic void jdLog(const uint8_t *frame) {\n    jdLogger->sendEvent(HF2_EV_JDS_PACKET, frame, frame[2] + 12);\n}\n\nint HF2::endpointRequest() {\n    int sz = recv();\n\n    if (!sz)\n        return 0;\n\n    uint32_t tmp;\n\n    if (pkt.serial) {\n        // TODO raise some event?\n        return 0;\n    }\n\n    LOG(\"HF2 sz=%d CMD=%x\", sz, pkt.buf32[0]);\n\n    // one has to be careful dealing with these, as they share memory\n    HF2_Command *cmd = &pkt.cmd;\n    HF2_Response *resp = &pkt.resp;\n\n    uint32_t cmdId = cmd->command_id;\n    resp->tag = cmd->tag;\n    resp->status16 = HF2_STATUS_OK;\n\n#define checkDataSize(str, add) usb_assert(sz == 8 + (int)sizeof(cmd->str) + (int)(add))\n\n    lastExchange = current_time_ms();\n    gotSomePacket = true;\n\n    switch (cmdId) {\n    case HF2_CMD_INFO:\n        return sendResponseWithData(uf2_info(), strlen(uf2_info()));\n\n    case HF2_CMD_BININFO:\n        resp->bininfo.mode = HF2_MODE_USERSPACE;\n        resp->bininfo.flash_page_size = 0;\n        resp->bininfo.flash_num_pages = 0;\n        resp->bininfo.max_message_size = sizeof(pkt.buf);\n        resp->bininfo.uf2_family = PXT_UF2_FAMILY;\n        return sendResponse(sizeof(resp->bininfo));\n\n    case HF2_DBG_RESTART:\n        *HF2_DBG_MAGIC_PTR = HF2_DBG_MAGIC_START;\n        target_reset();\n        break;\n\n    case HF2_CMD_RESET_INTO_APP:\n        QUICK_BOOT(1);\n        NVIC_SystemReset();\n        break;\n    case HF2_CMD_RESET_INTO_BOOTLOADER:\n        QUICK_BOOT(0);\n        NVIC_SystemReset();\n        break;\n\n#if USB_HANDOVER\n    case HF2_CMD_START_FLASH:\n        sendResponse(0);\n        hf2_handover(in->ep);\n        usb_assert(0); // should not be reached\n        break;\n#endif\n\n    case HF2_CMD_WRITE_WORDS:\n        checkDataSize(write_words, cmd->write_words.num_words << 2);\n        copy_words((void *)cmd->write_words.target_addr, cmd->write_words.words,\n                   cmd->write_words.num_words);\n        break;\n\n    case HF2_CMD_READ_WORDS:\n        checkDataSize(read_words, 0);\n        tmp = cmd->read_words.num_words;\n        usb_assert(tmp <= sizeof(pkt.buf) / 4 - 1);\n        copy_words(resp->data32, (void *)cmd->read_words.target_addr, tmp);\n        return sendResponse(tmp << 2);\n\n    case HF2_CMD_DMESG:\n#if DEVICE_DMESG_BUFFER_SIZE > 0\n        return sendResponseWithData(codalLogStore.buffer, codalLogStore.ptr);\n#else\n        break;\n#endif\n\n    case HF2_DBG_GET_GLOBAL_STATE: {\n        HF2_GLOBAL_STATE_Result gstate = {\n            .num_globals = (uint32_t)getNumGlobals(), //\n            .globals_addr = (uint32_t)globals,\n        };\n        return sendResponseWithData(&gstate, sizeof(gstate));\n    }\n\n    case HF2_DBG_RESUME:\n        globals[0] = (TValue)cmd->data32[0];\n        resume = true;\n        return sendResponse(0);\n\n    case HF2_DBG_GET_STACK:\n        return sendResponseWithData(stackCopy, stackSize);\n\n    case HF2_CMD_JDS_CONFIG:\n        if (cmd->data8[0]) {\n            jdLogger = this;\n            pxt::logJDFrame = jdLog;\n        } else {\n            pxt::logJDFrame = NULL;\n        }\n        return sendResponse(0);\n\n    case HF2_CMD_JDS_SEND:\n        if (pxt::sendJDFrame) {\n            pxt::sendJDFrame(cmd->data8);\n            return sendResponse(0);\n        } else {\n            resp->status16 = HF2_STATUS_INVALID_STATE;\n            return sendResponse(0);\n        }\n\n    default:\n        // command not understood\n        resp->status16 = HF2_STATUS_INVALID_CMD;\n        break;\n    }\n\n    return sendResponse(0);\n}\n\nHF2::HF2(HF2_Buffer &p) : gotSomePacket(false), ctrlWaiting(false), pkt(p), useHID(false) {\n    lastExchange = 0;\n}\n\nstatic const InterfaceInfo dummyIfaceInfo = {\n    NULL,\n    0,\n    0,\n    {\n        0,    // numEndpoints\n        0xff, /// class code - vendor-specific\n        0xff, // subclass\n        0xff, // protocol\n        0x00, // string\n        0x00, // alt\n    },\n    {0, 0},\n    {0, 0},\n};\n\nconst InterfaceInfo *DummyIface::getInterfaceInfo() {\n    return &dummyIfaceInfo;\n}\n\n//\n//\n// Debugger\n//\n//\n\nstruct ExceptionContext {\n    uint32_t excReturn; // 0xFFFFFFF9\n    uint32_t r0;\n    uint32_t r1;\n    uint32_t r2;\n    uint32_t r3;\n    uint32_t r12;\n    uint32_t lr;\n    uint32_t faultInstrAddr;\n    uint32_t psr;\n};\n\nstruct Paused_Data {\n    uint32_t pc;\n};\nstatic Paused_Data pausedData;\n\nvoid bkptPaused() {\n\n// waiting for https://github.com/lancaster-university/codal/pull/14\n#ifdef DEVICE_GROUP_ID_USER\n    // the loop below counts as \"system\" task, and we don't want to pause ourselves\n    fiber_set_group(DEVICE_GROUP_ID_SYSTEM);\n    // pause everyone else\n    fiber_pause_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    while (!resume) {\n        // DMESG(\"BKPT\");\n        hf2.pkt.resp.eventId = HF2_EV_DBG_PAUSED;\n        hf2.sendResponseWithData(&pausedData, sizeof(pausedData));\n        // TODO use an event\n        for (int i = 0; i < 20; ++i) {\n            if (resume)\n                break;\n            fiber_sleep(50);\n        }\n    }\n\n    if (stackCopy) {\n        xfree(stackCopy);\n        stackCopy = NULL;\n    }\n\n#ifdef DEVICE_GROUP_ID_USER\n    fiber_resume_group(DEVICE_GROUP_ID_USER);\n    // go back to user mode\n    fiber_set_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    resume = false;\n}\n\nextern \"C\" void handleHardFault(ExceptionContext *ectx) {\n    auto instr = (uint16_t *)ectx->faultInstrAddr;\n\n    DMESG(\"FLT %p\", instr);\n\n    if (ectx->faultInstrAddr & 0x80000000) {\n        ectx->faultInstrAddr &= ~0x80000000;\n        // switch to step-over mode\n        globals[0] = (TValue)3;\n        return;\n    }\n\n    DMESG(\"BB %p %p %p lr=%p r0=%p\", instr[-1], instr[0], instr[1], ectx->lr, ectx->r0);\n\n    if (instr[0] == 0x6840) {\n        // ldr r0, [r0, #4] -- entry breakpoint\n        ectx->faultInstrAddr += 2;\n        // we're being ask for step-over mode\n        if (ectx->r0 == 3) {\n            // switch to debugger-attached-no-stepping mode\n            globals[0] = (TValue)0;\n            ectx->lr |= 0x80000000;\n        }\n        return;\n    }\n\n    if (instr[0] == 0x6800) {\n        // ldr r0, [r0, #0]\n        ectx->lr = ectx->faultInstrAddr + 3; // next instruction + thumb mode\n        pausedData.pc = ectx->faultInstrAddr + 2;\n        void *ssp = (void *)(ectx + 1);\n        stackSize = DEVICE_STACK_BASE - (uint32_t)ssp;\n        if (stackCopy)\n            xfree(stackCopy);\n        stackCopy = xmalloc(stackSize);\n        memcpy(stackCopy, ssp, stackSize);\n        ectx->faultInstrAddr = ((uint32_t)(&bkptPaused) & (~1U));\n        return;\n    }\n\n    while (1) {\n    }\n}\n\nextern \"C\" void HardFault_Handler(void) {\n    asm(\"push {lr}; mov r0, sp; bl handleHardFault; pop {pc}\");\n}\n\n#endif",
            "hf2.h": "#ifndef DEVICE_HF2_H\n#define DEVICE_HF2_H\n\n#if CONFIG_ENABLED(DEVICE_USB)\n\n#include \"HID.h\"\n#include \"uf2hid.h\"\n\n// 260 bytes needed for biggest JD packets (with overheads)\n#define HF2_BUF_SIZE 260\n\ntypedef struct {\n    uint16_t size;\n    uint8_t serial;\n    union {\n        uint8_t buf[HF2_BUF_SIZE];\n        uint32_t buf32[HF2_BUF_SIZE / 4];\n        uint16_t buf16[HF2_BUF_SIZE / 2];\n        HF2_Command cmd;\n        HF2_Response resp;\n    };\n} HF2_Buffer;\n\nclass HF2 : public CodalUSBInterface {\n    bool gotSomePacket;\n    bool ctrlWaiting;\n    uint32_t lastExchange;\n\n  public:\n    HF2_Buffer &pkt;\n\n    bool useHID;\n\n    int sendResponse(int size);\n    int recv();\n    int sendResponseWithData(const void *data, int size);\n    int sendEvent(uint32_t evId, const void *data, int size);\n    void sendBuffer(uint8_t flag, const void *data, unsigned size, uint32_t prepend = -1);\n\n    HF2(HF2_Buffer &pkt);\n    virtual int endpointRequest();\n    virtual int stdRequest(UsbEndpointIn &ctrl, USBSetup &setup);\n    virtual const InterfaceInfo *getInterfaceInfo();\n    int sendSerial(const void *data, int size, int isError = 0);\n\n    virtual bool enableWebUSB() { return !useHID; }\n};\n\nclass DummyIface : public CodalUSBInterface {\n  public:\n    virtual const InterfaceInfo *getInterfaceInfo();\n};\n\n#endif\n\n#endif\n",
            "hf2dbg.h": "#ifndef HF2DBG_H\n#define HF2DBG_H 1\n\n// we use a location at the top of the stack to store a magic value\n// which causes us to stop at the very first break point in the program\n#define HF2_DBG_MAGIC_PTR ((uint32_t *)(DEVICE_STACK_BASE - (DEVICE_STACK_SIZE - 4)))\n#define HF2_DBG_MAGIC_START 0xf0ebac7f\n\n#define HF2_DBG_GET_GLOBAL_STATE 0x53fc66e0\nstruct HF2_GLOBAL_STATE_Result {\n    uint32_t num_globals;\n    uint32_t globals_addr;\n};\n\n#define HF2_DBG_RESTART 0x1120bd93\n#define HF2_DBG_RESUME 0x27a55931\n#define HF2_EV_DBG_PAUSED 0x3692f9fd\n#define HF2_DBG_GET_STACK 0x70901510\n\n#endif\n",
            "i2c.cpp": "#include \"pxt.h\"\n#include \"ErrorNo.h\"\n#include \"CodalDmesg.h\"\n#include \"configkeys.h\"\n\n#ifdef CODAL_I2C\n\nnamespace pins {\n\nclass CodalI2CProxy {\nprivate:\n  DevicePin* sda;\n  DevicePin* scl;\n  CODAL_I2C i2c;\npublic:\n  CodalI2CProxy* next;\npublic:\n  CodalI2CProxy(DevicePin* _sda, DevicePin* _scl)\n    : sda(_sda)\n    , scl(_scl)\n    , i2c(*_sda, *_scl) \n    , next(NULL)\n  {\n\n  }\n\n  CODAL_I2C* getI2C() {\n    return &(this->i2c);\n  }\n  \n  bool matchPins(DevicePin* sda, DevicePin* scl) {\n      return this->sda == sda && this->scl == scl;\n  }\n\n  Buffer readBuffer(int address, int size, bool repeat = false)\n  {\n    Buffer buf = mkBuffer(NULL, size);\n    registerGCObj(buf);\n    int status = this->i2c.read(address << 1, buf->data, size, repeat);\n    unregisterGCObj(buf);\n    if (status != ErrorCode::DEVICE_OK) {\n      buf = 0;\n    }\n    return buf;\n  }\n\n  int writeBuffer(int address, Buffer buf, bool repeat = false)\n  {\n    return this->i2c.write(address << 1, buf->data, buf->length, repeat);\n  }\n};\n\n}\n\nnamespace I2CMethods {\n/**\n  * Read `size` bytes from a 7-bit I2C `address`.\n  */\n//%\nBuffer readBuffer(I2C_ i2c, int address, int size, bool repeat = false)\n{\n  return i2c->readBuffer(address, size, repeat);\n}\n\n/**\n  * Write bytes to a 7-bit I2C `address`.\n  */\n//%\nint writeBuffer(I2C_ i2c, int address, Buffer buf, bool repeat = false)\n{\n  return i2c->writeBuffer(address, buf, repeat);\n}\n\n}\n\nnamespace pins {\n\nstatic I2C_ i2cs(NULL);\n/**\n* Opens a Serial communication driver\n*/\n//% help=pins/create-i2c\n//% parts=i2c\nI2C_ createI2C(DigitalInOutPin sda, DigitalInOutPin scl) {\n  // pick up defaults\n  if (!sda || !scl) {\n    DMESG(\"i2c: lookup default pins\");\n    sda = LOOKUP_PIN(SDA);\n    scl = LOOKUP_PIN(SCL);\n  }\n\n  // lookup existing devices\n  auto dev = i2cs;\n  while(dev) {\n    if (dev->matchPins(sda, scl)) {\n      DMESG(\"i2c: found existing i2c\");\n      return dev;\n    }\n    dev = dev->next;\n  }\n\n  // allocate new one\n  DMESG(\"i2c: mounting on new device\");\n  auto ser = new CodalI2CProxy(sda, scl);\n  // push in list\n  ser->next = i2cs;\n  i2cs = ser;\n  return ser;\n}\n\n}\n\nnamespace pxt {\n  CODAL_I2C* getI2C(DigitalInOutPin sda, DigitalInOutPin scl) {\n    auto i2c = pins::createI2C(sda, scl);\n    return i2c->getI2C();\n  }\n}\n\n#endif",
            "i2c.ts": "namespace pins {\n    /**\n     * Read one number from an I2C address.\n     */\n    //% help=pins/i2c-read-number weight=5 group=\"i2c\" inlineInputMode=\"external\"\n    //% blockId=pins_i2c_readnumber block=\"i2c read number at address %address|of format %format|repeated %repeated\"\n    export function i2cReadNumber(address: number, format: NumberFormat, repeated?: boolean): number {\n        const buf = pins.i2cReadBuffer(address, pins.sizeOf(format), repeated)\n        if (!buf)\n            return undefined\n        return buf.getNumber(format, 0)\n    }\n\n    /**\n     * Write one number to an I2C address.\n     */\n    //% help=pins/i2c-write-number weight=4 group=\"i2c\"\n    //% blockId=i2c_writenumber block=\"i2c write number|at address %address|with value %value|of format %format|repeated %repeated\"\n    export function i2cWriteNumber(address: number, value: number, format?: NumberFormat, repeated?: boolean): void {\n        if (format == undefined)\n            format = NumberFormat.UInt8LE;\n        const buf = control.createBuffer(pins.sizeOf(format))\n        buf.setNumber(format, 0, value)\n        pins.i2cWriteBuffer(address, buf, repeated)\n    }\n\n    /**\n     * Write a value in a I2C register.\n     * @param address I2c address of the device\n     * @param register register index\n     * @param value value to write\n     * @param valueFormat format of the value, default is UInt8LE\n     */\n    //% weight=3 group=\"i2c\"\n    //% help=pins/i2c-write-register\n    //% blockId=i2c_writereg block=\"i2c write register|at address $address|at register $register|value $value\"\n    export function i2cWriteRegister(address: number, register: number, value: number, valueFormat?: NumberFormat): void {\n        if (valueFormat === undefined)\n            valueFormat = NumberFormat.UInt8LE;\n        const valueSize = pins.sizeOf(valueFormat);\n        const buf = control.createBuffer(1 + valueSize);\n        buf.setNumber(NumberFormat.UInt8LE, 0, register);\n        buf.setNumber(valueFormat, 1, value);\n        pins.i2cWriteBuffer(address, buf);\n    }\n\n    /**\n     * Read the value from a I2C register.\n     * @param address I2c address of the device\n     * @param register register index\n     * @param valueFormat format of the value, default is UInt8LE\n     */\n    //% weight=3 group=\"i2c\"\n    //% help=pins/i2c-read-register\n    //% blockId=i2c_readreg block=\"i2c read register|at address $address|at register $register\"\n    export function i2cReadRegister(address: number, register: number, valueFormat?: NumberFormat): number {\n        if (valueFormat === undefined)\n            valueFormat = NumberFormat.UInt8LE;\n        pins.i2cWriteNumber(address, register, NumberFormat.UInt8LE);\n        return pins.i2cReadNumber(address, valueFormat);\n    }\n\n    /**\n     * Read `size` bytes from a 7-bit I2C `address`.\n     */\n    //%\n    export function i2cReadBuffer(address: number, size: number, repeat: boolean = false): Buffer {\n        return pins.i2c().readBuffer(address, size, repeat);\n    }\n\n    /**\n     * Write bytes to a 7-bit I2C `address`.\n     */\n    //%\n    export function i2cWriteBuffer(address: number, buf: Buffer, repeat: boolean = false): number {\n        return pins.i2c().writeBuffer(address, buf, repeat);\n    }\n\n    let _i2c: I2C;\n    /**\n     * Gets the default I2C bus\n     */\n    //%\n    export function i2c(): I2C {\n        if (!_i2c) {\n            const sda = pins.pinByCfg(DAL.CFG_PIN_SDA);\n            const scl = pins.pinByCfg(DAL.CFG_PIN_SCL);\n            _i2c = pins.createI2C(sda, scl);    \n        }\n        return _i2c;        \n    }\n\n    export class I2CDevice {\n        public address: number;\n        public bus: I2C;\n        private _hasError: boolean;\n        constructor(address: number, bus?: I2C) {\n            this.address = address;\n            this.bus = bus || i2c();\n        }\n        public readInto(buf: Buffer, repeat = false, start = 0, end: number = null) {\n            if (end === null)\n                end = buf.length\n            if (start >= end)\n                return\n            let res = this.bus.readBuffer(this.address, end - start, repeat)\n            if (!res) {\n                this._hasError = true\n                return\n            }\n            buf.write(start, res)\n        }\n        public write(buf: Buffer, repeat = false) {\n            let res = this.bus.writeBuffer(this.address, buf, repeat)\n            if (res) {\n                this._hasError = true\n            }\n        }\n        public begin(): I2CDevice {\n            this._hasError = false;\n            return this;\n        }\n        public end() {\n        }\n        public ok() {\n            return !this._hasError\n        }\n\n        public transfer(command: Buffer, response: Buffer, responseStart?: number, responseEnd?: number) {\n            this.begin();\n            if (command)\n                this.write(command);\n            if (response)\n                this.readInto(response, false, responseStart, responseEnd);\n            this.end();\n        }    \n    }\n}\n",
            "keyvaluestorage.cpp": "#include \"pxt.h\"\n#include \"KeyValueStorage.h\"\n\nnamespace pxt {\n\nclass WKeyValueStorage {\n#ifdef CODAL_NVMCONTROLLER\n    CODAL_NVMCONTROLLER controller;\n#else\n    NVMController controller;\n#endif\n    KeyValueStorage storage;\n  public:\n\n    WKeyValueStorage()\n    : controller()\n    , storage(controller) {\n    }\n\n    bool isSupported() {\n#ifdef CODAL_NVMCONTROLLER\n      return true;\n#else\n      return false;\n#endif\n    }\n\n    int put(String key, Buffer data) {\n#ifdef CODAL_NVMCONTROLLER\n        ManagedString mkey(key->getUTF8Data(), key->getUTF8Size());\n        return storage.put(mkey, data->data, data->length);\n#else\n        return -1;\n#endif\n    }\n\n    Buffer get(String key) {\n#ifdef CODAL_NVMCONTROLLER\n        Buffer buf = NULL;\n        ManagedString mkey(key->getUTF8Data(), key->getUTF8Size());\n        auto entry = storage.get(mkey);\n        if (entry) {\n          buf = mkBuffer(entry->value, sizeof(entry->value));\n          free(entry);\n        }\n        return buf;\n#else\n        return NULL;\n#endif\n    }\n\n    void remove(String key) {\n#ifdef CODAL_NVMCONTROLLER\n        ManagedString mkey(key->getUTF8Data(), key->getUTF8Size());\n        storage.remove(mkey);\n#endif\n    }\n\n    void clear() {\n#ifdef CODAL_NVMCONTROLLER\n        storage.wipe();\n#endif\n    }\n};\nSINGLETON(WKeyValueStorage);\n\n}\n\nnamespace configStorage {\n  /**\n  * Puts an entry in the device storage. Key may have up to 16 characters (bytes).\n  * @param key the identifier (max 16 characters)\n  * @param value the data (max 32 characters)\n  */\n  //%\n  void setBuffer(String key, Buffer value) {\n    auto kvm = pxt::getWKeyValueStorage();\n    kvm->put(key, value);\n  }\n\n  /**\n  * Gets an entry from the device storage. Key may have up to 16 characters (bytes).\n  * @param key the identifier (max 16 characters)\n  */\n  //%\n  Buffer getBuffer(String key) {\n    auto kvm = pxt::getWKeyValueStorage();\n    return kvm->get(key);\n  }\n\n  /**\n  * Removes the key from local storage\n  * @param key the identifier (max 16 characters)\n  */\n  //%\n  void removeItem(String key) {\n    auto kvm = pxt::getWKeyValueStorage();\n    kvm->remove(key);\n  }\n\n  /**\n  * Clears the local storage\n  */\n  //%\n  void clear() {\n    auto kvm = pxt::getWKeyValueStorage();\n    kvm->clear();\n  }\n}\n",
            "keyvaluestorage.ts": "namespace configStorage {\n    /**\n     * Stores the value at the key entry\n     * @param key identifier of the key (max 16 characters)\n     * @param value identifier of the value (max 32 characters)\n     */\n    export function setItem(key: string, value: string) {\n        if (value == null)\n            configStorage.removeItem(key);\n        else\n        {\n            let idx = 0;\n            let buf = control.createBuffer(value.length + 1);\n            buf[idx++] = value.length;\n            let valBuf = control.createBufferFromUTF8(value);\n\n            for (let i = 0; i < valBuf.length; i++)\n                buf[idx++] = valBuf[i];\n\n            configStorage.setBuffer(key, buf);\n        }\n    }\n\n    /**\n     * Retrieves the value at the key entry\n     * @param key identifier of the key (max 16 characters)\n     */\n    export function getItem(key: string): string {\n        const buf = configStorage.getBuffer(key);\n\n        if (!buf)\n            return undefined;\n\n        let idx = 0;\n        let count = buf[idx++];\n        const retBuf = control.createBuffer(count);\n\n        for (let i = 0; i < count; i++)\n            retBuf[i] = buf[idx++];\n\n        return retBuf.toString();\n    }\n}\n",
            "leveldetector.ts": "namespace pins {\n    export class LevelDetector {\n        public id: number;\n        public min: number;\n        public max: number;\n        public lowThreshold: number;\n        public highThreshold: number;\n        private transition: number;\n        private transitionMs: number;\n        private _level: number;\n        private _state: number;\n        public onHigh: () => void;\n        public onLow: () => void;\n        public onNeutral: () => void;\n        public transitionWindow: number;\n        // minimum duration (ms) between events\n        public transitionInterval: number;\n\n        static LEVEL_THRESHOLD_NEUTRAL = 0;\n\n        constructor(id: number,\n            min: number, max: number,\n            lowThreshold: number, highThreshold: number) {\n            this.id = id;\n            this.min = min;\n            this.max = max;\n            this.lowThreshold = lowThreshold;\n            this.highThreshold = highThreshold;\n            this.transitionWindow = 4;\n            this.transitionInterval = 0;\n\n            this.onHigh = () => control.raiseEvent(this.id, DAL.LEVEL_THRESHOLD_HIGH);\n            this.onLow = () => control.raiseEvent(this.id, DAL.LEVEL_THRESHOLD_LOW);\n            this.onNeutral = undefined;\n\n            this.reset();\n        }\n\n        reset() {\n            this.transition = 0;\n            this.transitionMs = 0;\n            this._level = Math.ceil((this.highThreshold - this.lowThreshold) / 2);\n            this._state = LevelDetector.LEVEL_THRESHOLD_NEUTRAL;\n        }\n\n        get level(): number {\n            return this._level;\n        }\n\n        set level(level: number) {\n            this._level = this.clampValue(level);\n\n            if (this._level >= this.highThreshold) {\n                this.setState(DAL.LEVEL_THRESHOLD_HIGH);\n            }\n            else if (this._level <= this.lowThreshold) {\n                this.setState(DAL.LEVEL_THRESHOLD_LOW);\n            }\n            else {\n                this.setState(LevelDetector.LEVEL_THRESHOLD_NEUTRAL);\n            }\n        }\n\n        public setLowThreshold(value: number) {\n            this.lowThreshold = this.clampValue(value);\n            this.reset();\n        }\n\n        public setHighThreshold(value: number) {\n            this.highThreshold = this.clampValue(value);\n            this.reset();\n        }\n\n        private clampValue(value: number) {\n            if (value < this.min) {\n                return this.min;\n            }\n            else if (value > this.max) {\n                return this.max;\n            }\n            return value;\n        }\n\n        private setState(state: number) {\n            // not enough samples to change\n            if (this._state === state \n                || (this.transition++ < this.transitionWindow)\n                || (control.millis() - this.transitionMs) < this.transitionInterval) {\n                return;\n            }\n\n            this.transition = 0;\n            this.transitionMs = control.millis();\n            this._state = state;\n            switch (state) {\n                case DAL.LEVEL_THRESHOLD_HIGH:\n                    if (this.onHigh) this.onHigh();\n                    break;\n                case DAL.LEVEL_THRESHOLD_LOW:\n                    if (this.onLow) this.onLow();\n                    break;\n                case LevelDetector.LEVEL_THRESHOLD_NEUTRAL:\n                    if (this.onNeutral) this.onNeutral();\n                    break;\n            }\n        }\n    }\n}",
            "light.cpp": "#include \"light.h\"\n\n// WS2812B timings, datasheet v1\n// 0 - 0.25-0.55us hi 0.70-1.00us low\n// 1 - 0.65-0.95us hi 0.30-0.60us low\n// datasheet v5\n// 0 - 0.22-0.38us hi 0.58-1.00us low 1-3\n// 1 - 0.58-1.00us hi 0.58-1.00us low 3-2\n\n#define SPI_SUPPORTED 1\n\n#if defined(NRF52_SERIES)\n#define BIT_EXPANSION 5\n#define SPI_FREQ 4000000\n#else\n#define BIT_EXPANSION 3\n#define SPI_FREQ 2400000\n#endif\n\n#if defined(SAMD21) || defined(SAMD51) || defined(STM32F4) || defined(NRF52_SERIES)\n#include \"neopixel.h\"\n#define BITBANG_SUPPORTED 1\n#else\n#define BITBANG_SUPPORTED 0\n#endif\n\n#define NEOPIXEL_MIN_LENGTH_FOR_SPI 24\n#define DOTSTAR_MIN_LENGTH_FOR_SPI 24\n\n#define LIGHTMODE_RGB 1\n#define LIGHTMODE_RGBW 2\n#define LIGHTMODE_RGB_RGB 3\n#define LIGHTMODE_DOTSTAR 4\n\nnamespace light {\nbool isValidMOSIPin(DigitalInOutPin pin) {\n    if (!pin)\n        return false;\n\n#if SAMD51\n    return ZSPI::isValidMOSIPin(*pin);\n#elif defined(NRF52_SERIES)\n    return true;\n#else\n    // TODO: support for SPI neopixels\n    // default SPI pins supported for now\n    return pin == LOOKUP_PIN(MOSI);\n#endif\n}\n\n// SPI\nvoid spiNeopixelSendBuffer(DevicePin *pin, const uint8_t *data, unsigned size) {\n    int32_t iptr = 0, optr = 120;\n    uint32_t len = optr + size * BIT_EXPANSION + 120;\n    uint8_t *expBuf = new uint8_t[len];\n    memset(expBuf, 0, len);\n    uint8_t imask = 0x80;\n    uint8_t omask = 0x80;\n\n#define WR(k)                                                                                      \\\n    if (k)                                                                                         \\\n        expBuf[optr] |= omask;                                                                     \\\n    omask >>= 1;                                                                                   \\\n    if (!omask) {                                                                                  \\\n        omask = 0x80;                                                                              \\\n        optr++;                                                                                    \\\n    }\n\n    while (iptr < (int)size) {\n#if BIT_EXPANSION == 3\n        WR(1);\n        WR(data[iptr] & imask);\n        WR(0);\n#elif BIT_EXPANSION == 5\n        WR(1);\n        if (data[iptr] & imask) {\n            WR(1);\n            WR(1);\n        } else {\n            WR(0);\n        }\n        WR(0);\n        WR(0);\n#else\n#error \"invalid BIT_EXPANSION\"\n#endif\n\n        imask >>= 1;\n        if (!imask) {\n            imask = 0x80;\n            iptr++;\n        }\n    }\n\n    auto spi = pxt::getSPI(pin, NULL, NULL);\n    spi->setFrequency(SPI_FREQ);\n    spi->transfer(expBuf, len, NULL, 0);\n    delete expBuf;\n}\n\nvoid neopixelSendData(DevicePin *pin, int mode, const uint8_t *data, unsigned length) {\n    if (!pin || !length)\n        return;\n\n#if BITBANG_SUPPORTED\n    if (SPI_SUPPORTED && length > NEOPIXEL_MIN_LENGTH_FOR_SPI && isValidMOSIPin(pin))\n        spiNeopixelSendBuffer(pin, data, length);\n    else\n        neopixel_send_buffer(*pin, data, length);\n#else\n    if (isValidMOSIPin(pin)) {\n        spiNeopixelSendBuffer(pin, data, length);\n    }\n#endif\n}\n\nvoid bitBangDotStarSendData(DevicePin *data, DevicePin *clk, int mode, const uint8_t *buf,\n                            unsigned length) {\n    // first frame of zeroes\n    data->setDigitalValue(0);\n    for (unsigned i = 0; i < 32; ++i) {\n        clk->setDigitalValue(1);\n        clk->setDigitalValue(0);\n    }\n\n    // data stream\n    for (unsigned i = 0; i < length; ++i) {\n        auto x = buf[i];\n        for (uint8_t j = 0x80; j != 0; j >>= 1) {\n            data->setDigitalValue(x & j ? 1 : 0);\n            clk->setDigitalValue(1);\n            clk->setDigitalValue(0);\n        }\n    }\n    // https://cpldcpu.wordpress.com/2016/12/13/sk9822-a-clone-of-the-apa102/\n    // reset frame\n    // data->setDigitalValue(0);\n    // for (unsigned i = 0; i < 32 ; ++i) {\n    //    clk->setDigitalValue(1);\n    //    clk->setDigitalValue(0);\n    //}\n\n    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/\n    data->setDigitalValue(1);\n    unsigned n = 32;\n    for (unsigned i = 0; i < n; ++i) {\n        clk->setDigitalValue(1);\n        clk->setDigitalValue(0);\n    }\n}\n\nstatic uint8_t ZERO_FRAME[4];\nstatic uint8_t ONE_FRAME[] = {1, 1, 1, 1};\nvoid spiDotStarSendData(DevicePin *data, DevicePin *clk, int mode, const uint8_t *buf,\n                        unsigned length) {\n    auto spi = pxt::getSPI(data, NULL, clk);\n\n    spi->transfer(ZERO_FRAME, sizeof(ZERO_FRAME), NULL, 0); // initial frame\n    spi->transfer(buf, length, NULL, 0);\n    spi->transfer(ZERO_FRAME, sizeof(ZERO_FRAME), NULL, 0); // reset frame\n    for (unsigned i = 0; i < (length >> 3); i += 32)\n        spi->transfer(ONE_FRAME, sizeof(ONE_FRAME), NULL, 0); // final frame\n}\n\nvoid dotStarSendData(DevicePin *data, DevicePin *clk, int mode, const uint8_t *buf,\n                     unsigned length) {\n    if (!data || !clk || !buf || !length)\n        return;\n\n    if (length > DOTSTAR_MIN_LENGTH_FOR_SPI && isValidMOSIPin(data))\n        spiDotStarSendData(data, clk, mode, buf, length);\n    else\n        bitBangDotStarSendData(data, clk, mode, buf, length);\n}\n\nvoid sendBuffer(DevicePin *data, DevicePin *clk, int mode, Buffer buf) {\n    if (!data || !buf || !buf->length)\n        return;\n\n    if (mode == LIGHTMODE_DOTSTAR)\n        light::dotStarSendData(data, clk, mode, buf->data, buf->length);\n    else\n        light::neopixelSendData(data, mode, buf->data, buf->length);\n}\n\nvoid clear() {\n    auto neopix = LOOKUP_PIN(NEOPIXEL);\n    auto neonum = getConfig(CFG_NUM_NEOPIXELS, 0);\n    if (neopix && neonum >= 0) {\n        auto n = 3 * neonum;\n        uint8_t off[n];\n        memset(off, 0, sizeof(off));\n        light::neopixelSendData(neopix, 0x100, off, sizeof(off));\n    }\n\n    auto data = LOOKUP_PIN(DOTSTAR_DATA);\n    auto clk = LOOKUP_PIN(DOTSTAR_CLOCK);\n    auto dsnum = getConfig(CFG_NUM_DOTSTARS, 0);\n    if (data && clk && dsnum > 0) {\n        auto n = 4 * dsnum;\n        uint8_t off[n];\n        memset(off, 0, sizeof(off));\n        for (int i = 0; i < n; i += 4)\n            off[i] = 0xe0;\n        bitBangDotStarSendData(data, clk, 0x100, off, sizeof(off));\n    }\n}\n\n} // namespace light\n",
            "light.h": "#ifndef __PXT_LIGHT_H\n#define __PXT_LIGHT_H\n\n#include \"pxt.h\"\n\nnamespace light {\n    /**\n    * Clear onboard neopixels\n    */\n    void clear();\n\n    /**\n    * Send a programmable light buffer to the specified digital pin\n    * @param data The pin that the lights are connected to\n    * @param clk the clock line if any\n    * @param mode the color encoding mode\n    * @param buf The buffer to send to the pin\n    */\n    //%\n    void sendBuffer(DigitalInOutPin data, DigitalInOutPin clk, int mode, Buffer buf);\n\n    void neopixelSendData(DevicePin* pin, int mode, const uint8_t* data, unsigned length);\n}\n\n#endif",
            "ns.ts": "",
            "pins.cpp": "#include \"pxt.h\"\n\nnamespace pxt {\nstatic DevicePin **pinPtrs;\nstatic uint8_t numPinPtrs;\nstatic uint8_t pinPos[DEV_NUM_PINS];\n\n//%\nDevicePin *getPin(int id) {\n\n    id &= CFG_PIN_NAME_MSK;\n\n    if (id >= DEV_NUM_PINS)\n        soft_panic(PANIC_NO_SUCH_PIN);\n\n    // we could use lookupComponent() here - it would be slightly slower\n\n    int ptr = pinPos[id];\n    if (ptr == 0) {\n        pinPtrs = (DevicePin **)realloc(pinPtrs, (numPinPtrs + 1) * sizeof(void *));\n        bool isAnalog = IS_ANALOG_PIN(id);\n        // GCTODO\n        pinPtrs[numPinPtrs++] =\n            new DevicePin(DEVICE_ID_IO_P0 + id, (PinName)id,\n                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);\n        ptr = numPinPtrs;\n        pinPos[id] = ptr;\n    }\n    return pinPtrs[ptr - 1];\n}\n\n//%\nDevicePin *getPinCfg(int key) {\n    int p = getConfig(key, -1);\n    if (p == -1)\n        DMESG(\"no pin cfg: %d\", key);\n    return getPin(p);\n}\n\nvoid linkPin(int from, int to) {\n    if (from < 0 || from >= DEV_NUM_PINS)\n        soft_panic(PANIC_NO_SUCH_PIN);\n    getPin(to);\n    pinPos[from] = pinPos[to];\n}\n\n//%\nDevicePin *lookupPin(int pinName) {\n    if (pinName < 0 || pinName == 0xff)\n        return NULL;\n    pinName &= CFG_PIN_NAME_MSK;\n    return getPin(pinName);\n}\n\n//%\nDevicePin *lookupPinCfg(int key) {\n    return lookupPin(getConfig(key));\n}\n\nCodalComponent *lookupComponent(int id) {\n    for (int i = 0; i < DEVICE_COMPONENT_COUNT; ++i) {\n        if (CodalComponent::components[i] && CodalComponent::components[i]->id == id)\n            return CodalComponent::components[i];\n    }\n    return NULL;\n}\n\n} // namespace pxt\n\nnamespace pins {\n/**\n* Get a pin by configuration id (DAL.CFG_PIN...)\n*/\n//%\nDigitalInOutPin pinByCfg(int key) {\n    return pxt::lookupPinCfg(key);\n}\n\n/**\n * Create a new zero-initialized buffer.\n * @param size number of bytes in the buffer\n */\n//%\nBuffer createBuffer(int size) {\n    return mkBuffer(NULL, size);\n}\n\n/**\n * Get the duration of the last pulse in microseconds. This function should be called from a\n * ``onPulsed`` handler.\n */\n//% help=pins/pulse-duration blockGap=8\n//% blockId=pins_pulse_duration block=\"pulse duration (µs)\"\n//% weight=19\nint pulseDuration() {\n    return pxt::lastEvent.timestamp;\n}\n} // namespace pins\n",
            "pins.h": "#ifndef __PXT_PINS_H\n#define __PXT_PINS_H\n\n#define CFG_PIN_BTN_USER 94\n#define CFG_PIN_RESET 95\n\n#define CFG_PIN_HTS221_SDA 96\n#define CFG_PIN_HTS221_SCL 97\n\n#define CFG_PIN_LPS22HB_SDA 98\n#define CFG_PIN_LPS22HB_SCL 99\n\n#define CFG_PIN_VL53L0X_SDA 132\n#define CFG_PIN_VL53L0X_SCL 133\n#define CFG_PIN_VL53L0X_SHUT 134\n\n#define CFG_PIN_LSM6DSL_SDA 135\n#define CFG_PIN_LSM6DSL_SCL 136\n\n#define CFG_PIN_BLE_SPI_MISO 137\n#define CFG_PIN_BLE_SPI_MOSI 138\n#define CFG_PIN_BLE_SPI_SCLK 139\n#define CFG_PIN_BLE_SPI_CS 140\n#define CFG_PIN_BLE_SPI_IRQ 141\n#define CFG_PIN_BLE_RST 142\n\n#define CFG_PIN_WIFI_ISM43362_MOSI 224\n#define CFG_PIN_WIFI_ISM43362_MISO 225\n#define CFG_PIN_WIFI_ISM43362_SCK 226\n#define CFG_PIN_WIFI_ISM43362_CS 227\n#define CFG_PIN_WIFI_ISM43362_COMMAND_DATA_READY 228\n#define CFG_PIN_WIFI_ISM43362_RESET 229\n#define CFG_PIN_WIFI_ISM43362_WAKE_UP 230\n\n#define CFG_PIN_UART1_TX 231\n#define CFG_PIN_UART1_RX 232\n\n#define CFG_PIN_UART2_TX 234\n#define CFG_PIN_UART2_RX 235\n\n#define CFG_PIN_UART3_TX 236\n#define CFG_PIN_UART3_RX 237\n\n#define CFG_PIN_UART4_TX 289\n#define CFG_PIN_UART4_RX 290\n\n#define CFG_PIN_SPI1_MISO 291\n#define CFG_PIN_SPI1_MOSI 292\n#define CFG_PIN_SPI1_SCK 293\n\n#define CFG_PIN_SPI2_MISO 294\n#define CFG_PIN_SPI2_MOSI 295\n#define CFG_PIN_SPI2_SCK 296\n\n#define CFG_PIN_SPI3_MISO 297\n#define CFG_PIN_SPI3_MOSI 298\n#define CFG_PIN_SPI3_SCK 299\n\n#define CFG_PIN_I2C1_SCL 332\n#define CFG_PIN_I2C1_SDA 333\n\n#define CFG_PIN_I2C2_SCL 334\n#define CFG_PIN_I2C2_SDA 335\n\n#define BUTTON_ACTIVE_HIGH_PULL_DOWN (ACTIVE_HIGH | 0x10)\n#define BUTTON_ACTIVE_HIGH_PULL_UP (ACTIVE_HIGH | 0x20)\n#define BUTTON_ACTIVE_HIGH_PULL_NONE (ACTIVE_HIGH | 0x30)\n#define BUTTON_ACTIVE_LOW_PULL_DOWN (ACTIVE_LOW | 0x10)\n#define BUTTON_ACTIVE_LOW_PULL_UP (ACTIVE_LOW | 0x20)\n#define BUTTON_ACTIVE_LOW_PULL_NONE (ACTIVE_LOW | 0x30)\n\n#define PIN(name) ((PinName)pxt::getConfig(CFG_PIN_##name, -1))\n#define LOOKUP_PIN(name) pxt::lookupPin(PIN(name))\n\n// these can be overridden in platform.h\n#ifndef CODAL_PIN\n#define CODAL_PIN CODAL_MBED::Pin\n#endif\n\n#ifndef CODAL_TIMER\n#define CODAL_TIMER CODAL_MBED::Timer\n#endif\n\n#ifndef CODAL_SPI\n#define CODAL_SPI CODAL_MBED::SPI\n#endif\n\n#ifndef CODAL_SERIAL\n#define CODAL_SERIAL CODAL_MBED::Serial\n#endif\n\n#ifndef IS_ANALOG_PIN\n#define IS_ANALOG_PIN(id) ((DEV_ANALOG_PINS >> (id)) & 1)\n#endif\n\ntypedef CODAL_PIN DevicePin;\n\ntypedef DevicePin *DigitalInOutPin;\ntypedef DevicePin *AnalogInOutPin;\ntypedef DevicePin *AnalogInPin;\ntypedef DevicePin *AnalogOutPin;\ntypedef DevicePin *PwmPin;\ntypedef DevicePin *PwmOnlyPin;\ntypedef Button *Button_;\n\nnamespace pxt {\nDevicePin *getPin(int id);\nDevicePin *getPinCfg(int key);\nDevicePin *lookupPin(int pinName);\nDevicePin *lookupPinCfg(int key);\nvoid linkPin(int from, int to);\nCodalComponent *lookupComponent(int id);\n} // namespace pxt\n\n#define PINOP(op) name->op\n\n#endif\n",
            "pins.ts": "//% noRefCounting fixedInstances\ninterface DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogOutPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInOutPin extends AnalogInPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmOnlyPin extends DigitalInOutPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmPin extends PwmOnlyPin, AnalogInOutPin {\n}\n\n/**\n * Control currents in Pins for analog/digital signals, servos, i2c, ...\n */\n//% color=#A80000 weight=85 icon=\"\\uf140\" advanced=true\n//% groups='[\"other\", \"Servo\", \"i2c\"]'\nnamespace pins {\n}",
            "pinsAnalog.cpp": "#include \"pxt.h\"\n\nnamespace AnalogInPinMethods {\n\n/**\n * Read the connector value as analog, that is, as a value comprised between 0 and 1023.\n * @param name pin to write to\n */\n//% help=pins/analog-read weight=53\n//% blockId=device_get_analog_pin block=\"analog read|pin %name\" blockGap=\"8\"\n//% blockNamespace=pins\n//% parts=\"photocell\"\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% trackArgs=0\nint analogRead(AnalogInPin name) {\n    return PINOP(getAnalogValue());\n}\n} // namespace AnalogInPinMethods\n\nnamespace AnalogOutPinMethods {\nvoid analogWrite(AnalogOutPin name, int value) __attribute__((weak));\n\n/**\n * Set the connector value as analog. Value must be comprised between 0 and 1023.\n * @param name pin name to write to\n * @param value value to write to the pin between ``0`` and ``1023``. eg:1023,0\n */\n//% help=pins/analog-write weight=52\n//% blockId=device_set_analog_pin block=\"analog write|pin %name|to %value\" blockGap=8\n//% blockNamespace=pins\n//%parts=\"analogled\"\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% value.min=0 value.max=1023\n//% trackArgs=0\nvoid analogWrite(AnalogOutPin name, int value) {\n    PINOP(setAnalogValue(value));\n}\n} // namespace AnalogOutPinMethods",
            "pinsDigital.cpp": "#include \"pxt.h\"\n\nenum class PulseValue {\n    //% block=high\n    High = DEVICE_PIN_EVT_PULSE_HI,\n    //% block=low\n    Low = DEVICE_PIN_EVT_PULSE_LO\n};\n\nenum class PinEvent {\n    //% block=\"pulse high\"\n    PulseHigh = DEVICE_PIN_EVT_PULSE_HI,\n    //% block=\"pulse low\"\n    PulseLow = DEVICE_PIN_EVT_PULSE_LO,\n    //% block=\"rise\"\n    Rise = DEVICE_PIN_EVT_RISE,\n    //% block=\"fall\"\n    Fall = DEVICE_PIN_EVT_FALL,\n};\n\nenum class PinPullMode {\n    //% block=\"down\"\n    PullDown = 0,\n    //% block=\"up\"\n    PullUp = 1,\n    //% block=\"none\"\n    PullNone = 2\n};\n\nnamespace DigitalInOutPinMethods {\n/**\n * Read a pin or connector as either 0 or 1\n * @param name pin to read from\n */\n//% help=pins/digital-read weight=61\n//% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8\n//% blockNamespace=pins\n//% parts=\"slideswitch\"\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% trackArgs=0\nbool digitalRead(DigitalInOutPin name) {\n    return PINOP(getDigitalValue()) != 0;\n}\n\n/**\n * Set a pin or connector value to either 0 or 1.\n * @param name pin to write to\n * @param value value to set on the pin\n */\n//% help=pins/digital-write weight=60\n//% blockId=device_set_digital_pin block=\"digital write|pin %name|to %value=toggleHighLow\"\n//% parts=\"led\"\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% trackArgs=0\nvoid digitalWrite(DigitalInOutPin name, bool value) {\n    PINOP(setDigitalValue(value));\n}\n\n/**\n * Make this pin a digital input, and create events where the timestamp is the duration\n * that this pin was either ``high`` or ``low``.\n */\n//% help=pins/on-pulsed weight=16 blockGap=8\n//% blockId=pins_on_pulsed block=\"on|pin %pin|pulsed %pulse\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\n//% deprecated=1 hidden=1\nvoid onPulsed(DigitalInOutPin pin, PulseValue pulse, Action body) {\n    pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);\n    registerWithDal(pin->id, (int)pulse, body);\n}\n\n/**\n * Register code to run when a pin event occurs.\n */\n//% help=pins/on-event weight=20 blockGap=8\n//% blockId=pinsonevent block=\"on|pin %pin|%event\"\n//% blockNamespace=pins\n//% parts=\"slideswitch\"\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\n//% trackArgs=0\nvoid onEvent(DigitalInOutPin pin, PinEvent event, Action body) {\n    switch (event) {\n    case PinEvent::PulseHigh:\n    case PinEvent::PulseLow:\n        pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);\n        registerWithDal(pin->id, (int)event, body);\n        break;\n    case PinEvent::Rise:\n    case PinEvent::Fall:\n        pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);\n        registerWithDal(pin->id, (int)event, body);\n        break;\n    }\n}\n\n/**\n * Return the duration of a pulse in microseconds\n * @param name the pin which measures the pulse\n * @param value the value of the pulse (default high)\n * @param maximum duration in micro-seconds\n */\n//% blockId=\"pins_pulse_in\" block=\"pulse in (µs)|pin %name|pulsed %high||timeout %maxDuration (µs)\"\n//% weight=18 blockGap=8\n//% help=\"pins/pulse-in\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\nint pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {\n    int pulse = PulseValue::High == value ? 1 : 0;\n    uint64_t tick = system_timer_current_time_us();\n    uint64_t maxd = (uint64_t)maxDuration;\n    while (pin->getDigitalValue() != pulse) {\n        if (system_timer_current_time_us() - tick > maxd)\n            return 0;\n    }\n\n    uint64_t start = system_timer_current_time_us();\n    while (pin->getDigitalValue() == pulse) {\n        if (system_timer_current_time_us() - tick > maxd)\n            return 0;\n    }\n    uint64_t end = system_timer_current_time_us();\n    return end - start;\n}\n\n/**\n * Set the pull direction of this pin.\n * @param name pin to set the pull mode on\n * @param pull one of the mbed pull configurations: PullUp, PullDown, PullNone\n */\n//% help=pins/set-pull weight=17 blockGap=8\n//% blockId=device_set_pull block=\"set pull|pin %pin|to %pull\"\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid setPull(DigitalInOutPin name, PinPullMode pull) {\n    PullMode m = pull == PinPullMode::PullDown\n                     ? PullMode::Down\n                     : pull == PinPullMode::PullUp ? PullMode::Up : PullMode::None;\n    PINOP(setPull(m));\n}\n\n} // namespace DigitalInOutPinMethods\n\nnamespace pxt {\n\nstatic void waitABit() {\n    // for (int i = 0; i < 10; ++i)\n    //    asm volatile(\"nop\");\n}\n\nclass ButtonMultiplexer : public CodalComponent {\n  public:\n    Pin &latch;\n    Pin &clock;\n    Pin &data;\n    uint32_t state;\n    uint32_t invMask;\n    uint16_t buttonIdPerBit[8];\n    bool enabled;\n\n    ButtonMultiplexer(uint16_t id)\n        : latch(*LOOKUP_PIN(BTNMX_LATCH)), clock(*LOOKUP_PIN(BTNMX_CLOCK)),\n          data(*LOOKUP_PIN(BTNMX_DATA)) {\n        this->id = id;\n        this->status |= DEVICE_COMPONENT_STATUS_SYSTEM_TICK;\n\n        state = 0;\n        invMask = 0;\n        enabled = true;\n\n        memset(buttonIdPerBit, 0, sizeof(buttonIdPerBit));\n\n        data.getDigitalValue(PullMode::Down);\n        latch.setDigitalValue(1);\n        clock.setDigitalValue(1);\n    }\n\n    void disable() {\n        data.getDigitalValue(PullMode::None);\n        latch.getDigitalValue(PullMode::None);\n        clock.getDigitalValue(PullMode::None);\n        enabled = false;\n    }\n\n    bool isButtonPressed(int id) {\n        for (int i = 0; i < 8; ++i) {\n            if (buttonIdPerBit[i] == id)\n                return (state & (1 << i)) != 0;\n        }\n        return false;\n    }\n\n    uint32_t readBits(int bits) {\n        latch.setDigitalValue(0);\n        waitABit();\n        latch.setDigitalValue(1);\n        waitABit();\n\n        uint32_t state = 0;\n        for (int i = 0; i < bits; i++) {\n            state <<= 1;\n            if (data.getDigitalValue(PullMode::Down))\n                state |= 1;\n\n            clock.setDigitalValue(0);\n            waitABit();\n            clock.setDigitalValue(1);\n            waitABit();\n        }\n\n        return state;\n    }\n\n    virtual void periodicCallback() override {\n        if (!enabled)\n            return;\n\n        uint32_t newState = readBits(8);\n        newState ^= invMask;\n        if (newState == state)\n            return;\n\n        for (int i = 0; i < 8; ++i) {\n            uint32_t mask = 1 << i;\n            if (!buttonIdPerBit[i])\n                continue;\n            int ev = 0;\n            if (!(state & mask) && (newState & mask))\n                ev = PXT_INTERNAL_KEY_DOWN;\n            else if ((state & mask) && !(newState & mask))\n                ev = PXT_INTERNAL_KEY_UP;\n            if (ev) {\n                Event(ev, buttonIdPerBit[i]);\n                Event(ev, 0); // any key\n            }\n        }\n\n        state = newState;\n    }\n};\n\nstatic ButtonMultiplexer *btnMultiplexer;\nButtonMultiplexer *getMultiplexer() {\n    if (!btnMultiplexer)\n        btnMultiplexer = new ButtonMultiplexer(DEVICE_ID_FIRST_BUTTON);\n    return btnMultiplexer;\n}\n\nint registerMultiplexedButton(int pin, int buttonId) {\n    if (1050 <= pin && pin < 1058) {\n        pin -= 50;\n        getMultiplexer()->invMask |= 1 << (pin - 1000);\n    }\n    if (1000 <= pin && pin < 1008) {\n        getMultiplexer()->buttonIdPerBit[pin - 1000] = buttonId;\n        return 1;\n    }\n    return 0;\n}\n\nint multiplexedButtonIsPressed(int btnId) {\n    if (btnMultiplexer)\n        return btnMultiplexer->isButtonPressed(btnId) ? 512 : 0;\n    return 0;\n}\n\n//% expose\nuint32_t readButtonMultiplexer(int bits) {\n    if (!LOOKUP_PIN(BTNMX_CLOCK))\n        return 0;\n    return getMultiplexer()->readBits(bits);\n}\n\nvoid disableButtonMultiplexer() {\n    if (LOOKUP_PIN(BTNMX_CLOCK)) {\n        getMultiplexer()->disable();\n    }\n}\n\n} // namespace pxt",
            "pinsPWM.cpp": "#include \"pxt.h\"\n\nnamespace PwmPinMethods {\n}\n\nnamespace PwmOnlyPinMethods {\n\n/**\n * Set the Pulse-width modulation (PWM) period of the analog output. The period is in\n * **microseconds** or `1/1000` milliseconds.\n * If this pin is not configured as an analog output (using `analog write pin`), the operation has\n * no effect.\n * @param name analog pin to set period to\n * @param micros period in micro seconds. eg:20000\n */\n//% help=pins/analog-set-period weight=51\n//% blockId=device_set_analog_period block=\"analog set period|pin %pin|to (µs)%period\"\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid analogSetPeriod(PwmOnlyPin name, int period) {\n    PINOP(setAnalogPeriodUs(period));\n}\n\n/**\n * Write a value to the servo to control the rotation of the shaft. On a standard servo, this will\n * set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous\n * rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one\n * direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).\n * @param name pin to write to\n * @param value angle or rotation speed\n */\n//% help=pins/servo-write weight=41 group=\"Servo\"\n//% blockId=device_set_servo_pin block=\"servo write|pin %name|to %value=protractorPicker\" blockGap=8\n//% parts=microservo trackArgs=0\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% value.defl=90\nvoid servoWrite(PwmOnlyPin name, int value) {\n    PINOP(setServoValue(value));\n}\n\n/**\n * Set the pin for PWM analog output, make the period be 20 ms, and set the pulse width.\n * The pulse width is based on the value it is given **microseconds** or `1/1000` milliseconds.\n * @param name pin name\n * @param duration pulse duration in micro seconds, eg:1500\n */\n//% help=pins/servo-set-pulse weight=40 group=\"Servo\" blockGap=8\n//% blockId=device_set_servo_pulse block=\"servo set pulse|pin %value|to (µs) %duration\"\n//% parts=microservo blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid servoSetPulse(PwmOnlyPin name, int duration) {\n    PINOP(setServoPulseUs(duration));\n}\n\n/**\n* Indicates if the servo is running continuously\n*/\n//% blockHidden=1\nvoid servoSetContinuous(PwmOnlyPin name, bool continuous) {\n    // used by simulator\n}\n\n}",
            "pinscompat.ts": "// filled in by microbit",
            "platform.cpp": "#include \"pxt.h\"\n#include \"light.h\"\n\nnamespace pxt {\n\nCODAL_TIMER devTimer;\n\nstatic void initRandomSeed() {\n    int seed = 0xC0DA1;\n    auto pinTemp = LOOKUP_PIN(TEMPERATURE);\n    if (pinTemp)\n        seed *= pinTemp->getAnalogValue();\n    auto pinLight = LOOKUP_PIN(LIGHT);\n    if (pinLight)\n        seed *= pinLight->getAnalogValue();\n    seedRandom(seed);\n}\n\nstatic void remapSwdPin(int pinCfg, int fallback) {\n    int pinName = getConfig(pinCfg);\n    if (pinName == PA30 || pinName == PA31) {\n        if (getConfig(CFG_SWD_ENABLED, 0)) {\n            linkPin(pinName, fallback);\n        } else {\n            PORT->Group[pinName / 32].PINCFG[pinName % 32].reg = (uint8_t)PORT_PINCFG_INEN;\n        }\n    }\n}\n\nstatic void initSwdPins() {\n    remapSwdPin(CFG_PIN_NEOPIXEL, PIN(D0));\n    remapSwdPin(CFG_PIN_RXLED, PIN(D1));\n    remapSwdPin(CFG_PIN_SPEAKER_AMP, PIN(D2));\n}\n\nvoid platform_init() {\n    initSwdPins();\n    initRandomSeed();\n    light::clear();\n\n    if (*HF2_DBG_MAGIC_PTR == HF2_DBG_MAGIC_START) {\n        *HF2_DBG_MAGIC_PTR = 0;\n        // this will cause alignment fault at the first breakpoint\n        globals[0] = (TValue)1;\n    }\n}\n\n} // namespace pxt\n",
            "platform.h": "#ifndef __PXT_PLATFORM_H\n#define __PXT_PLATFORM_H\n\n// This is specific for SAMD21, to be replaced in other Codal targets.\n\n#include \"CapTouchButton.h\"\n#include \"Image.h\"\n#include \"MbedTimer.h\"\n#include \"MbedI2C.h\"\n#include \"MbedPin.h\"\n#include \"MbedSPI.h\"\n#include \"MbedSerial.h\"\n#include \"MultiButton.h\"\n#include \"CPlayI2C.h\"\n\n#include \"SAMD21DMAC.h\"\n\n// Analog Pins, all SAMD21: PA02-PA11 PB00-PB09 (some pins not connected)\n// 2 ports times 32 pins in each\n#define DEV_NUM_PINS 64\n// pins marked with AIN and PTC in the data sheet\n#define DEV_ANALOG_PINS 0x3ff00000ffcULL\n\n#define PAGE_SIZE 256\n\n#define CODAL_DMAC SAMD21DMAC\n\n// this is codal::_mbed for both mbed and mbedos now\n#define CODAL_MBED codal::_mbed\n\n#define CODAL_I2C codal::CPlayI2C\n\n#ifndef IMAGE_BITS\n#define IMAGE_BITS 1\n#endif\n\n#ifdef JUST_FOR_DAL_D_TS_CPP_WILL_IGNORE\n#define PA00 0\n#define PA01 1\n#define PA02 2\n#define PA03 3\n#define PA04 4\n#define PA05 5\n#define PA06 6\n#define PA07 7\n#define PA08 8\n#define PA09 9\n#define PA10 10\n#define PA11 11\n#define PA12 12\n#define PA13 13\n#define PA14 14\n#define PA15 15\n#define PA16 16\n#define PA17 17\n#define PA18 18\n#define PA19 19\n#define PA20 20\n#define PA21 21\n#define PA22 22\n#define PA23 23\n#define PA24 24\n#define PA25 25\n#define PA26 26\n#define PA27 27\n#define PA28 28\n#define PA29 29\n#define PA30 30\n#define PA31 31\n#define PB00 32\n#define PB01 33\n#define PB02 34\n#define PB03 35\n#define PB04 36\n#define PB05 37\n#define PB06 38\n#define PB07 39\n#define PB08 40\n#define PB09 41\n#define PB10 42\n#define PB11 43\n#define PB12 44\n#define PB13 45\n#define PB14 46\n#define PB15 47\n#define PB16 48\n#define PB17 49\n#define PB18 50\n#define PB19 51\n#define PB20 52\n#define PB21 53\n#define PB22 54\n#define PB23 55\n#define PB24 56\n#define PB25 57\n#define PB26 58\n#define PB27 59\n#define PB28 60\n#define PB29 61\n#define PB30 62\n#define PB31 63\n#endif\n\n#endif\n",
            "pxt.h": "#ifndef __PXT_H\n#define __PXT_H\n\n#include \"pxtbase.h\"\n\n#include \"CodalConfig.h\"\n#include \"CodalHeapAllocator.h\"\n#include \"CodalDevice.h\"\n#include \"CodalDmesg.h\"\n#include \"ErrorNo.h\"\n#include \"Timer.h\"\n#include \"Matrix4.h\"\n#include \"CodalCompat.h\"\n#include \"CodalComponent.h\"\n#include \"ManagedType.h\"\n#include \"Event.h\"\n#include \"NotifyEvents.h\"\n#include \"Button.h\"\n#include \"CodalFiber.h\"\n#include \"MessageBus.h\"\n#include \"MultiButton.h\"\n\nusing namespace codal;\n\n// codal::ManagedString compat\n#define MSTR(s) codal::ManagedString((s)->data, (s)->length)\n#define PSTR(s) mkString((s).toCharArray(), (s).length())\n\n#include \"pins.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#include \"hf2.h\"\n#include \"hf2dbg.h\"\n#if CONFIG_ENABLED(DEVICE_MOUSE)\n#include \"HIDMouse.h\"\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\n#include \"HIDKeyboard.h\"\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\n#include \"HIDJoystick.h\"\n#endif\n#endif\n\n#define PXT_COMM_BASE 0x20002000 // 8k in\n\nnamespace pxt {\n\n#if CONFIG_ENABLED(DEVICE_USB)\nextern CodalUSB usb;\nextern HF2 hf2;\n#if CONFIG_ENABLED(DEVICE_MOUSE)\nextern USBHIDMouse mouse;\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\nextern USBHIDKeyboard keyboard;\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\nextern USBHIDJoystick joystick;\n#endif\n#endif\n\n// Utility functions\nextern Event lastEvent;\nextern CODAL_TIMER devTimer;\nextern MessageBus devMessageBus;\nextern codal::CodalDevice device;\n\nvoid set_usb_strings(const char *uf2_info);\nextern void (*logJDFrame)(const uint8_t *data);\nextern void (*sendJDFrame)(const uint8_t *data);\n\nstatic inline void raiseEvent(int src, int val) {\n    Event(src, val);\n}\n\n} // namespace pxt\n\nnamespace pins {\nclass CodalSPIProxy;\nclass CodalI2CProxy;\n} // namespace pins\n\ntypedef pins::CodalI2CProxy* I2C_;\ntypedef pins::CodalSPIProxy* SPI_;\n\nnamespace pxt {\ncodal::LowLevelTimer *allocateTimer();\n\n#ifdef CODAL_I2C\nCODAL_I2C* getI2C(DigitalInOutPin sda, DigitalInOutPin scl);\n#endif\nCODAL_SPI* getSPI(DigitalInOutPin mosi, DigitalInOutPin miso, DigitalInOutPin sck);\n#ifdef CODAL_JACDAC_WIRE_SERIAL\nLowLevelTimer* getJACDACTimer();\n#endif\nclass PressureButton;\nuint32_t readButtonMultiplexer(int bits);\nvoid disableButtonMultiplexer();\n}\n\nnamespace serial {\nclass CodalSerialDeviceProxy;\n}\n\ntypedef serial::CodalSerialDeviceProxy* SerialDevice;\n\nnamespace jacdac {\nclass JDProxyDriver;\n} // namespace network\n\ntypedef jacdac::JDProxyDriver* JacDacDriverStatus;\n\n#define DEVICE_ID_BUTTON_SLIDE 3000\n#define DEVICE_ID_MICROPHONE 3001\n#define DEVICE_ID_FIRST_BUTTON 4000\n#define DEVICE_ID_FIRST_TOUCHBUTTON 4100\n\n#define PXT_INTERNAL_KEY_UP 2050\n#define PXT_INTERNAL_KEY_DOWN 2051\n\n#endif\n",
            "pxt.json": "{\n    \"name\": \"core\",\n    \"description\": \"The core library for Codal-based targets\",\n    \"dependencies\": {\n        \"base\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"dal.d.ts\",\n        \"codal.cpp\",\n        \"usb.cpp\",\n        \"pxt.h\",\n        \"platform.h\",\n        \"platform.cpp\",\n        \"pxtcore.h\",\n        \"pins.h\",\n        \"pins.cpp\",\n        \"pinsAnalog.cpp\",\n        \"pinsDigital.cpp\",\n        \"pinsPWM.cpp\",\n        \"pins.ts\",\n        \"pinscompat.ts\",\n        \"control.cpp\",\n        \"i2c.cpp\",\n        \"i2c.ts\",\n        \"spi.cpp\",\n        \"spi.ts\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"hf2.cpp\",\n        \"hf2.h\",\n        \"hf2dbg.h\",\n        \"uf2format.h\",\n        \"uf2hid.h\",\n        \"ns.ts\",\n        \"dmac.cpp\",\n        \"dmac.h\",\n        \"timer.ts\",\n        \"light.cpp\",\n        \"light.h\",\n        \"keyvaluestorage.cpp\",\n        \"keyvaluestorage.ts\",\n        \"leveldetector.ts\",\n        \"pxtparts.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    },\n    \"yotta\": {\n        \"config\": {\n            \"codal\": {\n                \"component_count\": 64,\n                \"dmesg_buffer_size\": 1024\n            }\n        }\n    },\n    \"dalDTS\": {\n        \"includeDirs\": [\n            \"libraries/codal-core/inc\",\n            \"pxtapp\"\n        ],\n        \"excludePrefix\": [\n            \"JD_\",\n            \"USB_\",\n            \"REQUEST_\",\n            \"LIS3DH_\",\n            \"FXOS8700_\",\n            \"HF2_\",\n            \"PXT_REF_TAG_\",\n            \"MS_\",\n            \"SCSI_\",\n            \"MAG_\",\n            \"MAG3\",\n            \"MPU6\",\n            \"MADCTL\",\n            \"MMA8\"\n        ]\n    }\n}\n",
            "pxtcore.h": "#ifndef __PXTCORE_H\n#define __PXTCORE_H\n\n#include \"CodalDmesg.h\"\n#include \"CodalHeapAllocator.h\"\n\n#define PXT_CODAL 1\n\n#define itoa(a, b) codal::itoa(a, b)\n\n#define GC_GET_HEAP_SIZE() device_heap_size(0)\n#define GC_STACK_BASE DEVICE_STACK_BASE\n#define xmalloc device_malloc\n#define xfree device_free\n\n// on most devices we allocate the entire heap at once, so large allocs should work\n// if they don't you just get the regular out of memory instead of alloc too large\n#define GC_MAX_ALLOC_SIZE (128 * 1024)\n\n#endif\n",
            "pxtparts.json": "{\n    \"neopixel\": {\n        \"simulationBehavior\": \"neopixel\",\n        \"visual\": {\n            \"builtIn\": \"neopixel\",\n            \"width\": 58,\n            \"height\": 113,\n            \"pinDistance\": 9,\n            \"pinLocations\": [\n                {\n                    \"x\": 10,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 19,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 28,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"numberOfPins\": 3,\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"light.createStrip,light.createNeoPixelStrip\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"pin\"\n                },\n                {\n                    \"partParameter\": \"mode\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"dotstar\": {\n        \"simulationBehavior\": \"dotstar\",\n        \"visual\": {\n            \"builtIn\": \"dotstar\",\n            \"width\": 58,\n            \"height\": 113,\n            \"pinDistance\": 9,\n            \"pinLocations\": [\n                {\n                    \"x\": 10,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 17,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 24,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 31,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"numberOfPins\": 4,\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 1\n                },\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"light.createAPA102Strip\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"dataPin\"\n                },\n                {\n                    \"pinInstantiationIdx\": 1,\n                    \"partParameter\": \"clkPin\"\n                },\n                {\n                    \"partParameter\": \"mode\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1, 2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    3\n                ]\n            }\n        ]\n    },\n    \"pixels\": {\n        \"simulationBehavior\": \"pixels\",\n        \"visual\": { \n            \"builtIn\": \"pixels\",\n            \"width\": 58,\n            \"height\": 113,\n            \"pinDistance\": 9,\n            \"pinLocations\": [\n                {\n                    \"x\": 10,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 17,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 24,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 31,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"numberOfPins\": 4,\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"MOSI\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"SCK\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"singleton\"\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1, 2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    3\n                ]\n            }\n        ]\n    },    \n    \"buttons\": {\n        \"simulationBehavior\": \"buttons\",\n        \"visual\": {\n            \"builtIn\": \"buttons\",\n            \"width\": 75,\n            \"height\": 45,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 30,\n                    \"y\": 45\n                }\n            ]\n        },\n        \"numberOfPins\": 2,\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"Button.onEvent,Button.isPressed,Button.wasPressed\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"button\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"slideswitch\": {\n        \"numberOfPins\": 3,\n        \"simulationBehavior\": \"slideswitch\",\n        \"visual\": {\n            \"builtIn\": \"slideswitch\",\n            \"width\": 100,\n            \"height\": 100,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"DigitalInOutPin.digitalRead,DigitalInOutPin.onPulsed,DigitalInOutPin.onEvent\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"pin\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"microservo\": {\n        \"simulationBehavior\": \"microservo\",\n        \"visual\": {\n            \"builtIn\": \"microservo\",\n            \"width\": 74.85,\n            \"height\": 200,\n            \"pinDistance\": 10,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 37,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 5\n                }\n            ]\n        },\n        \"numberOfPins\": 3,\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"PwmOnlyPin.servoWrite,servos.Servo.setAngle,servos.Servo.run,servos.Servo.setPulse\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"led\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"builtIn\": \"led\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"led\",\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"DigitalInOutPin.digitalWrite\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"analogled\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"builtIn\": \"led\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"led\",\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"AnalogOutPin.analogWrite\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"photocell\": {\n        \"numberOfPins\": 3,\n        \"visual\": {\n            \"builtIn\": \"photocell\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 15,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"photocell\",\n        \"pinDefinitions\": [\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"AnalogInPin.analogRead\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    }\n}",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace light {\n\n    /**\n     * Send a programmable light buffer to the specified digital pin\n     * @param data The pin that the lights are connected to\n     * @param clk the clock line if any\n     * @param mode the color encoding mode\n     * @param buf The buffer to send to the pin\n     */\n    //% shim=light::sendBuffer\n    function sendBuffer(data: DigitalInOutPin, clk: DigitalInOutPin, mode: int32, buf: Buffer): void;\n}\ndeclare namespace control {\n\n    /**\n     * Determines if the USB has been enumerated.\n     */\n    //% shim=control::isUSBInitialized\n    function isUSBInitialized(): boolean;\n}\ndeclare namespace pins {\n\n    /**\n     * Get a pin by configuration id (DAL.CFG_PIN...)\n     */\n    //% shim=pins::pinByCfg\n    function pinByCfg(key: int32): DigitalInOutPin;\n\n    /**\n     * Create a new zero-initialized buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% shim=pins::createBuffer\n    function createBuffer(size: int32): Buffer;\n\n    /**\n     * Get the duration of the last pulse in microseconds. This function should be called from a\n     * ``onPulsed`` handler.\n     */\n    //% help=pins/pulse-duration blockGap=8\n    //% blockId=pins_pulse_duration block=\"pulse duration (µs)\"\n    //% weight=19 shim=pins::pulseDuration\n    function pulseDuration(): int32;\n}\n\n\ndeclare interface AnalogInPin {\n    /**\n     * Read the connector value as analog, that is, as a value comprised between 0 and 1023.\n     * @param name pin to write to\n     */\n    //% help=pins/analog-read weight=53\n    //% blockId=device_get_analog_pin block=\"analog read|pin %name\" blockGap=\"8\"\n    //% blockNamespace=pins\n    //% parts=\"photocell\"\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% trackArgs=0 shim=AnalogInPinMethods::analogRead\n    analogRead(): int32;\n}\n\n\ndeclare interface AnalogOutPin {\n    /**\n     * Set the connector value as analog. Value must be comprised between 0 and 1023.\n     * @param name pin name to write to\n     * @param value value to write to the pin between ``0`` and ``1023``. eg:1023,0\n     */\n    //% help=pins/analog-write weight=52\n    //% blockId=device_set_analog_pin block=\"analog write|pin %name|to %value\" blockGap=8\n    //% blockNamespace=pins\n    //%parts=\"analogled\"\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% value.min=0 value.max=1023\n    //% trackArgs=0 shim=AnalogOutPinMethods::analogWrite\n    analogWrite(value: int32): void;\n}\n\n\ndeclare interface DigitalInOutPin {\n    /**\n     * Read a pin or connector as either 0 or 1\n     * @param name pin to read from\n     */\n    //% help=pins/digital-read weight=61\n    //% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8\n    //% blockNamespace=pins\n    //% parts=\"slideswitch\"\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% trackArgs=0 shim=DigitalInOutPinMethods::digitalRead\n    digitalRead(): boolean;\n\n    /**\n     * Set a pin or connector value to either 0 or 1.\n     * @param name pin to write to\n     * @param value value to set on the pin\n     */\n    //% help=pins/digital-write weight=60\n    //% blockId=device_set_digital_pin block=\"digital write|pin %name|to %value=toggleHighLow\"\n    //% parts=\"led\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% trackArgs=0 shim=DigitalInOutPinMethods::digitalWrite\n    digitalWrite(value: boolean): void;\n\n    /**\n     * Make this pin a digital input, and create events where the timestamp is the duration\n     * that this pin was either ``high`` or ``low``.\n     */\n    //% help=pins/on-pulsed weight=16 blockGap=8\n    //% blockId=pins_on_pulsed block=\"on|pin %pin|pulsed %pulse\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% deprecated=1 hidden=1 shim=DigitalInOutPinMethods::onPulsed\n    onPulsed(pulse: PulseValue, body: () => void): void;\n\n    /**\n     * Register code to run when a pin event occurs.\n     */\n    //% help=pins/on-event weight=20 blockGap=8\n    //% blockId=pinsonevent block=\"on|pin %pin|%event\"\n    //% blockNamespace=pins\n    //% parts=\"slideswitch\"\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% trackArgs=0 shim=DigitalInOutPinMethods::onEvent\n    onEvent(event: PinEvent, body: () => void): void;\n\n    /**\n     * Return the duration of a pulse in microseconds\n     * @param name the pin which measures the pulse\n     * @param value the value of the pulse (default high)\n     * @param maximum duration in micro-seconds\n     */\n    //% blockId=\"pins_pulse_in\" block=\"pulse in (µs)|pin %name|pulsed %high||timeout %maxDuration (µs)\"\n    //% weight=18 blockGap=8\n    //% help=\"pins/pulse-in\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4 maxDuration.defl=2000000 shim=DigitalInOutPinMethods::pulseIn\n    pulseIn(value: PulseValue, maxDuration?: int32): int32;\n\n    /**\n     * Set the pull direction of this pin.\n     * @param name pin to set the pull mode on\n     * @param pull one of the mbed pull configurations: PullUp, PullDown, PullNone\n     */\n    //% help=pins/set-pull weight=17 blockGap=8\n    //% blockId=device_set_pull block=\"set pull|pin %pin|to %pull\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::setPull\n    setPull(pull: PinPullMode): void;\n}\n\n\ndeclare interface PwmPin {}\n\n\ndeclare interface PwmOnlyPin {\n    /**\n     * Set the Pulse-width modulation (PWM) period of the analog output. The period is in\n     * **microseconds** or `1/1000` milliseconds.\n     * If this pin is not configured as an analog output (using `analog write pin`), the operation has\n     * no effect.\n     * @param name analog pin to set period to\n     * @param micros period in micro seconds. eg:20000\n     */\n    //% help=pins/analog-set-period weight=51\n    //% blockId=device_set_analog_period block=\"analog set period|pin %pin|to (µs)%period\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=PwmOnlyPinMethods::analogSetPeriod\n    analogSetPeriod(period: int32): void;\n\n    /**\n     * Write a value to the servo to control the rotation of the shaft. On a standard servo, this will\n     * set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous\n     * rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one\n     * direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).\n     * @param name pin to write to\n     * @param value angle or rotation speed\n     */\n    //% help=pins/servo-write weight=41 group=\"Servo\"\n    //% blockId=device_set_servo_pin block=\"servo write|pin %name|to %value=protractorPicker\" blockGap=8\n    //% parts=microservo trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% value.defl=90 shim=PwmOnlyPinMethods::servoWrite\n    servoWrite(value?: int32): void;\n\n    /**\n     * Set the pin for PWM analog output, make the period be 20 ms, and set the pulse width.\n     * The pulse width is based on the value it is given **microseconds** or `1/1000` milliseconds.\n     * @param name pin name\n     * @param duration pulse duration in micro seconds, eg:1500\n     */\n    //% help=pins/servo-set-pulse weight=40 group=\"Servo\" blockGap=8\n    //% blockId=device_set_servo_pulse block=\"servo set pulse|pin %value|to (µs) %duration\"\n    //% parts=microservo blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=PwmOnlyPinMethods::servoSetPulse\n    servoSetPulse(duration: int32): void;\n\n    /**\n     * Indicates if the servo is running continuously\n     */\n    //% blockHidden=1 shim=PwmOnlyPinMethods::servoSetContinuous\n    servoSetContinuous(continuous: boolean): void;\n}\ndeclare namespace control {\n\n    /**\n     * Announce that an event happened to registered handlers.\n     * @param src ID of the MicroBit Component that generated the event\n     * @param value Component specific code indicating the cause of the event.\n     */\n    //% weight=21 blockGap=12 blockId=\"control_raise_event\"\n    //% help=control/raise-event\n    //% block=\"raise event|from %src|with value %value\" blockExternalInputs=1 shim=control::raiseEvent\n    function raiseEvent(src: int32, value: int32): void;\n\n    /**\n     * Determine the version of system software currently running.\n     */\n    //% blockId=\"control_device_dal_version\" block=\"device dal version\"\n    //% help=control/device-dal-version shim=control::deviceDalVersion\n    function deviceDalVersion(): string;\n\n    /**\n     * Allocates the next user notification event\n     */\n    //% help=control/allocate-notify-event shim=control::allocateNotifyEvent\n    function allocateNotifyEvent(): int32;\n\n    /** Write a message to DMESG debugging buffer. */\n    //% shim=control::dmesg\n    function dmesg(s: string): void;\n\n    /** Write a message and value (pointer) to DMESG debugging buffer. */\n    //% shim=control::dmesgPtr\n    function dmesgPtr(str: string, ptr: Object): void;\n}\n\n\ndeclare interface I2C {\n    /**\n     * Read `size` bytes from a 7-bit I2C `address`.\n     */\n    //% repeat.defl=0 shim=I2CMethods::readBuffer\n    readBuffer(address: int32, size: int32, repeat?: boolean): Buffer;\n\n    /**\n     * Write bytes to a 7-bit I2C `address`.\n     */\n    //% repeat.defl=0 shim=I2CMethods::writeBuffer\n    writeBuffer(address: int32, buf: Buffer, repeat?: boolean): int32;\n}\ndeclare namespace pins {\n\n    /**\n     * Opens a Serial communication driver\n     */\n    //% help=pins/create-i2c\n    //% parts=i2c shim=pins::createI2C\n    function createI2C(sda: DigitalInOutPin, scl: DigitalInOutPin): I2C;\n}\ndeclare namespace pins {\n\n    /**\n     * Opens a SPI driver\n     */\n    //% help=pins/create-spi\n    //% parts=spi shim=pins::createSPI\n    function createSPI(mosiPin: DigitalInOutPin, misoPin: DigitalInOutPin, sckPin: DigitalInOutPin): SPI;\n\n    /**\n     * Opens a slave SPI driver\n     */\n    //% parts=spi shim=pins::createSlaveSPI\n    function createSlaveSPI(mosiPin: DigitalInOutPin, misoPin: DigitalInOutPin, sckPin: DigitalInOutPin, csPin: DigitalInOutPin): SPI;\n}\n\n\ndeclare interface SPI {\n    /**\n     * Write to the SPI bus\n     */\n    //% shim=SPIMethods::write\n    write(value: int32): int32;\n\n    /**\n     * Transfer buffers over the SPI bus\n     */\n    //% argsNullable shim=SPIMethods::transfer\n    transfer(command: Buffer, response: Buffer): void;\n\n    /**\n     * Sets the SPI clock frequency\n     */\n    //% shim=SPIMethods::setFrequency\n    setFrequency(frequency: int32): void;\n\n    /**\n     * Sets the SPI bus mode\n     */\n    //% shim=SPIMethods::setMode\n    setMode(mode: int32): void;\n}\ndeclare namespace configStorage {\n\n    /**\n     * Puts an entry in the device storage. Key may have up to 16 characters (bytes).\n     * @param key the identifier (max 16 characters)\n     * @param value the data (max 32 characters)\n     */\n    //% shim=configStorage::setBuffer\n    function setBuffer(key: string, value: Buffer): void;\n\n    /**\n     * Gets an entry from the device storage. Key may have up to 16 characters (bytes).\n     * @param key the identifier (max 16 characters)\n     */\n    //% shim=configStorage::getBuffer\n    function getBuffer(key: string): Buffer;\n\n    /**\n     * Removes the key from local storage\n     * @param key the identifier (max 16 characters)\n     */\n    //% shim=configStorage::removeItem\n    function removeItem(key: string): void;\n\n    /**\n     * Clears the local storage\n     */\n    //% shim=configStorage::clear\n    function clear(): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "spi.cpp": "#include \"pxt.h\"\n#include \"ErrorNo.h\"\n\nnamespace pins {\n\nclass CodalSPIProxy {\nprivate:\n    DevicePin* mosi; \n    DevicePin* miso; \n    DevicePin* sck;\n    CODAL_SPI spi;\npublic:\n    CodalSPIProxy* next;\n\npublic:\n    CodalSPIProxy(DevicePin* _mosi, DevicePin* _miso, DevicePin* _sck)\n        : mosi(_mosi)\n        , miso(_miso)\n        , sck(_sck)\n        , spi(*_mosi, *_miso, *_sck) \n        , next(NULL)\n    {\n    }\n\n#ifdef CODAL_SPI_SLAVE_SUPPORTED\n    CodalSPIProxy(DevicePin* _mosi, DevicePin* _miso, DevicePin* _sck, DevicePin* _cs)\n        : mosi(_mosi)\n        , miso(_miso)\n        , sck(_sck)\n        , spi(*_mosi, *_miso, *_sck, _cs) \n        , next(NULL)\n    {\n    }\n#endif\n\n    CODAL_SPI* getSPI() {\n        return &spi;\n    }\n\n    bool matchPins(DevicePin* mosi, DevicePin* miso, DevicePin* sck) {\n        return this->mosi == mosi && this->miso == miso && this->sck == sck;\n    }\n\n    int write(int value) {\n        return spi.write(value);\n    }\n\n    void transfer(Buffer command, Buffer response) {\n        auto cdata = NULL == command ? NULL : command->data;\n        auto clength = NULL == command ? 0 : command->length;\n        auto rdata = NULL == response ? NULL : response->data;\n        auto rlength = NULL == response ? 0 : response->length;\n        spi.transfer(cdata, clength, rdata, rlength);\n    }\n\n    void setFrequency(int frequency) {\n        spi.setFrequency(frequency);\n    }\n\n    void setMode(int mode) {\n        spi.setMode(mode);\n    }\n};\n\nSPI_ spis(NULL);\n\n/**\n* Opens a SPI driver\n*/\n//% help=pins/create-spi\n//% parts=spi\nSPI_ createSPI(DigitalInOutPin mosiPin, DigitalInOutPin misoPin, DigitalInOutPin sckPin) {\n  auto dev = spis;\n  while(dev) {\n    if (dev->matchPins(mosiPin, misoPin, sckPin))\n      return dev;\n    dev = dev->next;\n  }\n\n  auto ser = new CodalSPIProxy(mosiPin, misoPin, sckPin);\n  ser->next = spis;\n  spis = ser;\n  return ser;\n}\n\n/**\n* Opens a slave SPI driver\n*/\n//% parts=spi\nSPI_ createSlaveSPI(DigitalInOutPin mosiPin, DigitalInOutPin misoPin, DigitalInOutPin sckPin, DigitalInOutPin csPin) {\n#ifdef CODAL_SPI_SLAVE_SUPPORTED\n  auto dev = spis;\n  if (!csPin)\n    soft_panic(PANIC_CODAL_HARDWARE_CONFIGURATION_ERROR);\n  while(dev) {\n    if (dev->matchPins(mosiPin, misoPin, sckPin))\n      return dev;\n    dev = dev->next;\n  }\n\n  auto ser = new CodalSPIProxy(mosiPin, misoPin, sckPin, csPin);\n  ser->next = spis;\n  spis = ser;\n  return ser;\n#else\n  soft_panic(PANIC_CODAL_HARDWARE_CONFIGURATION_ERROR);\n  return NULL;\n#endif\n}\n\n}\n\nnamespace pxt {\n\nCODAL_SPI* getSPI(DigitalInOutPin mosiPin, DigitalInOutPin misoPin, DigitalInOutPin sckPin) {\n    auto spi = pins::createSPI(mosiPin, misoPin, sckPin);\n    return spi->getSPI();\n}\n\n}\n\nnamespace SPIMethods {\n\n/**\n* Write to the SPI bus\n*/\n//%\nint write(SPI_ device, int value) {\n    return device->write(value);\n}\n\n/**\n* Transfer buffers over the SPI bus\n*/\n//% argsNullable\nvoid transfer(SPI_ device, Buffer command, Buffer response) {\n    if (!device)\n        soft_panic(PANIC_CAST_FROM_NULL);\n    if (!command && !response)\n        return;\n    device->transfer(command, response);\n}\n\n/**\n* Sets the SPI clock frequency\n*/\n//%\nvoid setFrequency(SPI_ device, int frequency) {\n    device->setFrequency(frequency);\n}\n\n/**\n* Sets the SPI bus mode\n*/\n//%\nvoid setMode(SPI_ device, int mode) {\n    device->setMode(mode);\n}\n\n}\n",
            "spi.ts": "namespace pins {\n\n    let _spi: SPI;\n    /**\n    * Gets the default SPI driver\n    */\n    //%\n    export function spi() {\n        if (!_spi) {\n            const mosi = pins.pinByCfg(DAL.CFG_PIN_MOSI);\n            const miso = pins.pinByCfg(DAL.CFG_PIN_MISO);\n            const sck = pins.pinByCfg(DAL.CFG_PIN_SCK);\n            _spi = pins.createSPI(mosi, miso, sck);\n        }\n        return _spi;\n    }\n\n    /**\n     * Write to the SPI slave and return the response\n     * @param value Data to be sent to the SPI slave\n     */\n    //% help=pins/spi-write weight=5 advanced=true\n    //% blockId=spi_write block=\"spi write %value\"\n    export function spiWrite(value: number) {\n        return spi().write(value);\n    }\n\n    /**\n     * Write a given command to SPI bus, and at the same time read the response.\n     */\n    //% help=pins/spi-transfer weight=4 advanced=true\n    //% blockId=spi_transfer block=\"spi transfer %command into %response\"\n    export function spiTransfer(command: Buffer, response: Buffer) {\n        spi().transfer(command, response);\n    }\n\n    /**\n     * Set the SPI frequency\n     * @param frequency the clock frequency, eg: 1000000\n     */\n    //% help=pins/spi-frequency weight=4 advanced=true\n    //% blockId=spi_frequency block=\"spi frequency %frequency\"\n    export function spiFrequency(frequency: number) {\n        spi().setFrequency(frequency);\n    }\n\n    /**\n     * Set the SPI signal mode\n     * @param mode the mode, eg: 3\n     */\n    //% help=pins/spi-mode weight=3 advanced=true\n    //% blockId=spi_mode block=\"spi mode %mode\"\n    export function spiMode(mode: number) {\n        spi().setMode(mode);\n    }\n}",
            "test.ts": "",
            "timer.ts": "namespace control {\n    /**\n     * A timer\n     */\n    //% fixedInstances\n    export class Timer {\n        start: number;\n\n        constructor() {\n            this.start = control.millis();\n        }\n\n        /**\n         * Gets the elapsed time in millis since the last reset\n         */\n        //% blockId=timerMillis block=\"%timer|millis\"\n        millis(): number {\n            return control.millis() - this.start;\n        }\n\n        /**\n         * Gets the elapsed time in seconds since the last reset\n         */\n        //% blockId=timerSeconds block=\"%timer|seconds\"\n        seconds(): number {\n            return this.millis() / 1000;\n        }\n\n        /**\n         * Resets the timer\n         */\n        //% blockId=timerRest block=\"%timer|reset\"\n        reset() {\n            this.start = control.millis();\n        }\n\n        /**\n         * Pauses until the timer reaches the given amount of milliseconds\n         * @param ms how long to pause for, eg: 5, 100, 200, 500, 1000, 2000\n         */\n        //% blockId=timerPauseUntil block=\"%timer|pause until (ms) %ms\"\n        pauseUntil(ms: number) {\n            const remaining = this.millis() - ms;\n            pause(Math.max(0, remaining));\n        }\n    }\n\n    //% whenUsed fixedInstance block=\"timer 1\"\n    export const timer1 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 2\"\n    export const timer2 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 3\"\n    export const timer3 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 4\"\n    export const timer4 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 5\"\n    export const timer5 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 6\"\n    export const timer6 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 7\"\n    export const timer7 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 8\"\n    export const timer8 = new Timer();\n}",
            "uf2format.h": "#ifndef UF2FORMAT_H\n#define UF2FORMAT_H 1\n\n#include <stdint.h>\n#include <stdbool.h>\n\n// All entries are little endian.\n\n#ifndef BOOTLOADER_START\n#define BOOTLOADER_START 0x0\n#endif\n\n#ifndef BOOTLOADER_END\n#define BOOTLOADER_END 0x2000\n#endif\n\n#ifndef UF2_BINFO\n#define UF2_BINFO ((UF2_BInfo *)(BOOTLOADER_END - sizeof(UF2_BInfo)))\n#endif\n\n#ifndef UF2_INFO_TXT\n#define UF2_INFO_TXT UF2_BINFO->info_uf2\n#endif\n\n\n#define UF2_MAGIC_START0 0x0A324655UL // \"UF2\\n\"\n#define UF2_MAGIC_START1 0x9E5D5157UL // Randomly selected\n#define UF2_MAGIC_END 0x0AB16F30UL    // Ditto\n\n// If set, the block is \"comment\" and should not be flashed to the device\n#define UF2_FLAG_NOFLASH 0x00000001\n\ntypedef struct {\n    // 32 byte header\n    uint32_t magicStart0;\n    uint32_t magicStart1;\n    uint32_t flags;\n    uint32_t targetAddr;\n    uint32_t payloadSize;\n    uint32_t blockNo;\n    uint32_t numBlocks;\n    uint32_t reserved;\n\n    // raw data;\n    uint8_t data[476];\n\n    // store magic also at the end to limit damage from partial block reads\n    uint32_t magicEnd;\n} UF2_Block;\n\ntypedef struct {\n    uint8_t version;\n    uint8_t ep_in;\n    uint8_t ep_out;\n    uint8_t reserved0;\n    uint32_t cbw_tag;\n    uint32_t blocks_remaining;\n    uint8_t *buffer;\n} UF2_HandoverArgs;\n\ntypedef void (*UF2_MSC_Handover_Handler)(UF2_HandoverArgs *handover);\ntypedef void (*UF2_HID_Handover_Handler)(int ep);\n\n// this is required to be exactly 16 bytes long by the linker script\ntypedef struct {\n    void *reserved0;\n    UF2_HID_Handover_Handler handoverHID;\n    UF2_MSC_Handover_Handler handoverMSC;\n    const char *info_uf2;\n} UF2_BInfo;\n\nstatic inline bool is_uf2_block(void *data) {\n    UF2_Block *bl = (UF2_Block *)data;\n    return bl->magicStart0 == UF2_MAGIC_START0 && bl->magicStart1 == UF2_MAGIC_START1 &&\n           bl->magicEnd == UF2_MAGIC_END;\n}\n\nstatic inline bool in_uf2_bootloader_space(const void *addr) {\n    return (BOOTLOADER_START + 0x100) <= (uint32_t)addr && (uint32_t)addr < (BOOTLOADER_END);\n}\n\nstatic inline const char *uf2_info(void) {\n    if (in_uf2_bootloader_space(UF2_INFO_TXT))\n        return UF2_INFO_TXT;\n    return \"N/A\";\n}\n\n#ifdef UF2_DEFINE_HANDOVER\nstatic inline void hf2_handover(uint8_t ep) {\n    const char *board_info = UF2_BINFO->info_uf2;\n    UF2_HID_Handover_Handler fn = UF2_BINFO->handoverHID;\n\n    if (in_uf2_bootloader_space(board_info) && in_uf2_bootloader_space((const void *)fn) &&\n        ((uint32_t)fn & 1)) {\n        // Pass control to bootloader; never returns\n        fn(ep & 0xf);\n    }\n}\n\nstatic inline void check_uf2_handover(uint8_t *buffer, uint32_t blocks_remaining, uint8_t ep_in,\n                                      uint8_t ep_out, uint32_t cbw_tag) {\n    if (!is_uf2_block(buffer))\n        return;\n\n    const char *board_info = UF2_BINFO->info_uf2;\n    UF2_MSC_Handover_Handler fn = UF2_BINFO->handoverMSC;\n\n    if (in_uf2_bootloader_space(board_info) && in_uf2_bootloader_space((const void *)fn) &&\n        ((uint32_t)fn & 1)) {\n        UF2_HandoverArgs hand = {\n            1, ep_in, ep_out, 0, cbw_tag, blocks_remaining, buffer,\n        };\n        // Pass control to bootloader; never returns\n        fn(&hand);\n    }\n}\n#endif\n\n#endif\n",
            "uf2hid.h": "#ifndef UF2_HID_H\n#define UF2_HID_H 1\n\n#define HF2_CMD_BININFO 0x0001\n// no arguments\n#define HF2_MODE_BOOTLOADER 0x01\n#define HF2_MODE_USERSPACE 0x02\nstruct HF2_BININFO_Result {\n    uint32_t mode;\n    uint32_t flash_page_size;\n    uint32_t flash_num_pages;\n    uint32_t max_message_size;\n    uint32_t uf2_family;\n};\n\n#define HF2_CMD_INFO 0x0002\n// no arguments\n// results is utf8 character array\n\n#define HF2_CMD_RESET_INTO_APP 0x0003\n// no arguments, no result\n\n#define HF2_CMD_RESET_INTO_BOOTLOADER 0x0004\n// no arguments, no result\n\n#define HF2_CMD_START_FLASH 0x0005\n// no arguments, no result\n\n#define HF2_CMD_WRITE_FLASH_PAGE 0x0006\nstruct HF2_WRITE_FLASH_PAGE_Command {\n    uint32_t target_addr;\n    uint32_t data[0];\n};\n// no result\n\n#define HF2_CMD_CHKSUM_PAGES 0x0007\nstruct HF2_CHKSUM_PAGES_Command {\n    uint32_t target_addr;\n    uint32_t num_pages;\n};\nstruct HF2_CHKSUM_PAGES_Result {\n    uint16_t chksums[0 /* num_pages */];\n};\n\n#define HF2_CMD_READ_WORDS 0x0008\nstruct HF2_READ_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n};\nstruct HF2_READ_WORDS_Result {\n    uint32_t words[0 /* num_words */];\n};\n\n#define HF2_CMD_WRITE_WORDS 0x0009\nstruct HF2_WRITE_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n    uint32_t words[0 /* num_words */];\n};\n// no result\n\n#define HF2_CMD_DMESG 0x0010\n// no arguments\n// results is utf8 character array\n\n#define HF2_EV_MASK 0x800000\n\n#define HF2_CMD_JDS_CONFIG 0x0020\n#define HF2_CMD_JDS_SEND 0x0021\n#define HF2_EV_JDS_PACKET 0x800020\n\ntypedef struct {\n    uint32_t command_id;\n    uint16_t tag;\n    uint8_t reserved0;\n    uint8_t reserved1;\n\n    union {\n        struct HF2_WRITE_FLASH_PAGE_Command write_flash_page;\n        struct HF2_WRITE_WORDS_Command write_words;\n        struct HF2_READ_WORDS_Command read_words;\n        struct HF2_CHKSUM_PAGES_Command chksum_pages;\n        uint8_t data8[0];\n        uint16_t data16[0];\n        uint32_t data32[0];\n    };\n} HF2_Command;\n\ntypedef struct {\n    union {\n        uint32_t eventId;\n        struct {\n            uint16_t tag;\n            union {\n                struct {\n                    uint8_t status;\n                    uint8_t status_info;\n                };\n                uint16_t status16;\n            };\n        };\n    };\n    union {\n        struct HF2_BININFO_Result bininfo;\n        uint8_t data8[0];\n        uint16_t data16[0];\n        uint32_t data32[0];\n    };\n} HF2_Response;\n\n#define HF2_FLAG_SERIAL_OUT 0x80\n#define HF2_FLAG_SERIAL_ERR 0xC0\n#define HF2_FLAG_CMDPKT_LAST 0x40\n#define HF2_FLAG_CMDPKT_BODY 0x00\n#define HF2_FLAG_MASK 0xC0\n#define HF2_SIZE_MASK 63\n\n#define HF2_STATUS_OK 0x00\n#define HF2_STATUS_INVALID_CMD 0x01\n#define HF2_STATUS_INVALID_STATE 0x02\n\n#endif\n",
            "usb.cpp": "#include \"pxt.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#include \"uf2format.h\"\n\nnamespace pxt {\nCodalUSB usb;\n\n// share the buffer; we will crash anyway if someone talks to us over both at the same time\nHF2_Buffer hf2buf;\nHF2 hf2(hf2buf);\n#ifdef HF2_HID\nHF2 hf2hid(hf2buf);\n#endif\nDummyIface dummyIface;\n\n#if CONFIG_ENABLED(DEVICE_MOUSE)\nUSBHIDMouse mouse;\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\nUSBHIDKeyboard keyboard;\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\nUSBHIDJoystick joystick;\n#endif\n\nstatic const DeviceDescriptor device_desc = {\n    0x12,   // bLength\n    0x01,   // bDescriptorType\n    0x0210, // bcdUSBL\n\n    // Class etc specified per-interface\n    0x00, 0x00, 0x00,\n\n    0x40, // bMaxPacketSize0\n    USB_DEFAULT_VID, USB_DEFAULT_PID,\n    0x4202, // bcdDevice - leave unchanged for the HF2 to work\n    0x01,   // iManufacturer\n    0x02,   // iProduct\n    0x03,   // SerialNumber\n    0x01    // bNumConfigs\n};\n\nstatic void start_usb() {\n    // start USB with a delay, so that user code can add new interfaces if needed\n    // (eg USB HID keyboard, or MSC)\n    fiber_sleep(500);\n    usb.start();\n}\n\nvoid platform_usb_init() __attribute__((weak));\nvoid platform_usb_init() {}\n\nvoid set_usb_strings(const char *uf2_info) {\n    static const char *string_descriptors[3];\n    static char serial[12];\n    itoa(target_get_serial() & 0x7fffffff, serial);\n\n    auto model = strstr(uf2_info, \"Model: \");\n    if (model) {\n        model += 7;\n        auto end = model;\n        while (*end && *end != '\\n' && *end != '\\r')\n            end++;\n        auto len = end - model;\n        auto dev = (char *)app_alloc(len + 10);\n        memcpy(dev, model, len);\n        strcpy(dev + len, \" (app)\");\n        // try to split into manufacturer and\n        auto sep = strstr(dev, \" / \");\n        if (sep) {\n            *sep = '\\0';\n            string_descriptors[0] = dev;\n            string_descriptors[1] = sep + 3;\n        } else {\n            string_descriptors[0] = dev;\n            string_descriptors[1] = dev;\n        }\n    } else {\n        string_descriptors[0] = \"Unknown Corp.\";\n        string_descriptors[1] = \"PXT Device (app)\";\n    }\n\n    string_descriptors[2] = serial;\n    usb.stringDescriptors = string_descriptors;\n}\n\nvoid usb_init() {\n    usb.deviceDescriptor = &device_desc;\n    set_usb_strings(UF2_INFO_TXT);\n\n    platform_usb_init();\n\n    usb.add(hf2);\n\n#ifdef HF2_HID\n    hf2hid.useHID = true;\n    usb.add(hf2hid);\n#else\n    // the WINUSB descriptors don't seem to work if there's only one interface\n    // so we add a dummy interface\n    usb.add(dummyIface);\n#endif\n\n#if CONFIG_ENABLED(DEVICE_MOUSE)\n    usb.add(mouse);\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\n    usb.add(keyboard);\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\n    usb.add(joystick);\n#endif\n\n    create_fiber(start_usb);\n}\n\n} // namespace pxt\n\n#else\nnamespace pxt {\nvoid usb_init() {}\n} // namespace pxt\n#endif\n\nnamespace control {\n/**\n * Determines if the USB has been enumerated.\n */\n//%\nbool isUSBInitialized() {\n#if CONFIG_ENABLED(DEVICE_USB)\n    return pxt::usb.isInitialised();\n#else\n    return false;\n#endif\n}\n} // namespace control\n\nnamespace pxt {\nstatic void (*pSendToUART)(const char *data, int len) = NULL;\nvoid setSendToUART(void (*f)(const char *, int)) {\n    pSendToUART = f;\n}\n\nvoid sendSerial(const char *data, int len) {\n#if CONFIG_ENABLED(DEVICE_USB)\n    hf2.sendSerial(data, len);\n#if HF2_HID\n    hf2hid.sendSerial(data, len);\n#endif\n#endif\n    if (pSendToUART)\n        pSendToUART(data, len);\n}\n\nvoid dumpDmesg() {\n    sendSerial(\"\\nDMESG:\\n\", 8);\n    sendSerial(codalLogStore.buffer, codalLogStore.ptr);\n    sendSerial(\"\\n\\n\", 2);\n}\n\nvoid (*logJDFrame)(const uint8_t *data);\nvoid (*sendJDFrame)(const uint8_t *data);\n\n} // namespace pxt\n"
        },
        "core---stm32": {
            "README.md": "# core\n\nThe core library.\n\n",
            "codal.cpp": "#include \"pxt.h\"\n#include \"LowLevelTimer.h\"\nusing namespace codal;\n\nvoid cpu_clock_init(void);\n\nPXT_ABI(__aeabi_dadd)\nPXT_ABI(__aeabi_dcmplt)\nPXT_ABI(__aeabi_dcmpgt)\nPXT_ABI(__aeabi_dsub)\nPXT_ABI(__aeabi_ddiv)\nPXT_ABI(__aeabi_dmul)\n\n#ifdef DEVICE_GET_FIBER_LIST_AVAILABLE\n// newer codal-core has get_fiber_list() but not list_fibers()\nnamespace codal {\n/*\n * Return all current fibers.\n *\n * @param dest If non-null, it points to an array of pointers to fibers to store results in.\n *\n * @return the number of fibers (potentially) stored\n */\nint list_fibers(Fiber **dest) {\n    int i = 0;\n    for (Fiber *fib = codal::get_fiber_list(); fib; fib = fib->next) {\n        if (dest)\n            dest[i] = fib;\n        i++;\n    }\n    return i;\n}\n\n} // namespace codal\n#endif\n\nnamespace pxt {\n\nvoid platform_init();\nvoid usb_init();\n\n// The first two word are used to tell the bootloader that a single reset should start the\n// bootloader and the MSD device, not us.\n// The rest is reserved for partial flashing checksums.\n__attribute__((section(\".binmeta\"))) __attribute__((used)) const uint32_t pxt_binmeta[] = {\n    0x87eeb07c, 0x87eeb07c, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,\n    0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,\n};\n\nEvent lastEvent;\nMessageBus devMessageBus;\ncodal::CodalDevice device;\n\nstruct FreeList {\n    FreeList *next;\n};\n\nstatic void commInit() {\n    int commSize = bytecode[20];\n    if (!commSize)\n        return;\n\n    void *r = app_alloc_at((void *)PXT_COMM_BASE, commSize);\n    DMESG(\"comm %d -> %p\", commSize, r);\n    if (!r)\n        target_panic(20);\n}\n\nstatic void initCodal() {\n    cpu_clock_init();\n\n    commInit();\n\n    // Bring up fiber scheduler.\n    scheduler_init(devMessageBus);\n\n    // We probably don't need that - components are initialized when one obtains\n    // the reference to it.\n    // devMessageBus.listen(DEVICE_ID_MESSAGE_BUS_LISTENER, DEVICE_EVT_ANY, this,\n    // &CircuitPlayground::onListenerRegisteredEvent);\n\n    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {\n        if (CodalComponent::components[i])\n            CodalComponent::components[i]->init();\n    }\n\n    usb_init();\n\n    auto led = LOOKUP_PIN(LED);\n    if (led) {\n        led->setDigitalValue(0);\n    }\n}\n\n// ---------------------------------------------------------------------------\n// An adapter for the API expected by the run-time.\n// ---------------------------------------------------------------------------\n\n// We have the invariant that if [dispatchEvent] is registered against the DAL\n// for a given event, then [handlersMap] contains a valid entry for that\n// event.\nvoid dispatchEvent(Event e) {\n    lastEvent = e;\n\n    auto curr = findBinding(e.source, e.value);\n    auto value = fromInt(e.value);\n    while (curr) {\n        runAction1(curr->action, value);\n        curr = nextBinding(curr->next, e.source, e.value);\n    }\n}\n\nvoid registerWithDal(int id, int event, Action a, int flags) {\n    // first time?\n    if (!findBinding(id, event)) {\n        devMessageBus.listen(id, event, dispatchEvent, flags);\n        if (event == 0) {\n            // we're registering for all events on given ID\n            // need to remove old listeners for specific events\n            auto curr = findBinding(id, -1);\n            while (curr) {\n                devMessageBus.ignore(id, curr->value, dispatchEvent);\n                curr = nextBinding(curr->next, id, -1);\n            }\n        }\n    }\n    setBinding(id, event, a);\n}\n\nvoid fiberDone(void *a) {\n    unregisterGCPtr((Action)a);\n    release_fiber();\n}\n\nvoid releaseFiber() {\n    release_fiber();\n}\n\nvoid sleep_ms(unsigned ms) {\n    fiber_sleep(ms);\n}\n\nvoid sleep_us(uint64_t us) {\n    target_wait_us(us);\n}\n\nvoid forever_stub(void *a) {\n    while (true) {\n        runAction0((Action)a);\n        fiber_sleep(20);\n    }\n}\n\nvoid runForever(Action a) {\n    if (a != 0) {\n        registerGCPtr(a);\n        create_fiber(forever_stub, (void *)a);\n    }\n}\n\nvoid runInParallel(Action a) {\n    if (a != 0) {\n        registerGCPtr(a);\n        create_fiber((void (*)(void *))(void*)runAction0, (void *)a, fiberDone);\n    }\n}\n\nvoid waitForEvent(int id, int event) {\n    fiber_wait_for_event(id, event);\n}\n\nvoid initRuntime() {\n    initSystemTimer();\n    initCodal();\n    platform_init();\n}\n\n//%\nunsigned afterProgramPage() {\n    unsigned ptr = (unsigned)&bytecode[0];\n    ptr += programSize();\n    ptr = (ptr + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);\n    return ptr;\n}\n\nuint64_t getLongSerialNumber() {\n    return device.getSerialNumber();\n}\n\nint current_time_ms() {\n    return system_timer_current_time();\n}\n\nuint64_t current_time_us() {\n    return system_timer_current_time_us();\n}\n\nThreadContext *getThreadContext() {\n    if (!currentFiber)\n        return NULL;\n    return (ThreadContext *)currentFiber->user_data;\n}\n\nvoid setThreadContext(ThreadContext *ctx) {\n    currentFiber->user_data = ctx;\n}\n\nstatic void *threadAddressFor(codal::Fiber *fib, void *sp) {\n    if (fib == currentFiber)\n        return sp;\n    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));\n}\n\nvoid gcProcessStacks(int flags) {\n    // check scheduler is initialized\n    if (!currentFiber) {\n        // make sure we allocate something to at least initalize the memory allocator\n        void *volatile p = xmalloc(1);\n        xfree(p);\n        return;\n    }\n\n    int numFibers = codal::list_fibers(NULL);\n    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);\n    int num2 = codal::list_fibers(fibers);\n    if (numFibers != num2)\n        oops(12);\n    int cnt = 0;\n\n    for (int i = 0; i < numFibers; ++i) {\n        auto fib = fibers[i];\n        auto ctx = (ThreadContext *)fib->user_data;\n        if (!ctx)\n            continue;\n        gcProcess(ctx->thrownValue);\n        for (auto seg = &ctx->stack; seg; seg = seg->next) {\n            auto ptr = (TValue *)threadAddressFor(fib, seg->top);\n            auto end = (TValue *)threadAddressFor(fib, seg->bottom);\n            if (flags & 2)\n                DMESG(\"RS%d:%p/%d\", cnt++, ptr, end - ptr);\n            // VLOG(\"mark: %p - %p\", ptr, end);\n            while (ptr < end) {\n                gcProcess(*ptr++);\n            }\n        }\n    }\n    xfree(fibers);\n}\n\nLowLevelTimer *getJACDACTimer() {\n    static LowLevelTimer *jacdacTimer;\n    if (!jacdacTimer) {\n        jacdacTimer = allocateTimer();\n        jacdacTimer->setIRQPriority(1);\n    }\n    return jacdacTimer;\n}\nvoid initSystemTimer() {\n    new CODAL_TIMER(*allocateTimer());\n}\n\n} // namespace pxt\n",
            "control.cpp": "#include \"pxt.h\"\n\n#if defined(NRF52_SERIES) || defined(PICO_BOARD)\n#define _estack __StackTop \n#endif\nextern uint32_t _estack;\n\nnamespace control {\n\n/**\n * Announce that an event happened to registered handlers.\n * @param src ID of the MicroBit Component that generated the event\n * @param value Component specific code indicating the cause of the event.\n */\n//% weight=21 blockGap=12 blockId=\"control_raise_event\"\n//% help=control/raise-event\n//% block=\"raise event|from %src|with value %value\" blockExternalInputs=1\nvoid raiseEvent(int src, int value) {\n    Event evt(src, value);\n}\n\n/**\n* Determine the version of system software currently running.\n*/\n//% blockId=\"control_device_dal_version\" block=\"device dal version\"\n//% help=control/device-dal-version\nString deviceDalVersion() {\n    return mkString(device.getVersion());\n}\n\n/**\n* Allocates the next user notification event\n*/\n//% help=control/allocate-notify-event\nint allocateNotifyEvent() {\n    return ::allocateNotifyEvent();\n}\n\n/** Write a message to DMESG debugging buffer. */\n//%\nvoid dmesg(String s) {\n    DMESG(\"# %s\", s->getUTF8Data());\n}\n\n/** Write a message and value (pointer) to DMESG debugging buffer. */\n//%\nvoid dmesgPtr(String str, Object_ ptr) {\n    DMESG(\"# %s: %p\", str->getUTF8Data(), ptr);\n}\n\n//%\nuint32_t _ramSize()\n{\n    return (uint32_t)&_estack & 0x1fffffff;\n}\n\n}\n",
            "dal.d.ts": "// Auto-generated. Do not edit.\ndeclare const enum DAL {\n    // /libraries/codal-core/inc/core/CodalComponent.h\n    DEVICE_ID_BUTTON_A = 1,\n    DEVICE_ID_BUTTON_B = 2,\n    DEVICE_ID_BUTTON_AB = 3,\n    DEVICE_ID_BUTTON_RESET = 4,\n    DEVICE_ID_ACCELEROMETER = 5,\n    DEVICE_ID_COMPASS = 6,\n    DEVICE_ID_DISPLAY = 7,\n    DEVICE_ID_THERMOMETER = 8,\n    DEVICE_ID_RADIO = 9,\n    DEVICE_ID_RADIO_DATA_READY = 10,\n    DEVICE_ID_MULTIBUTTON_ATTACH = 11,\n    DEVICE_ID_SERIAL = 12,\n    DEVICE_ID_GESTURE = 13,\n    DEVICE_ID_SYSTEM_TIMER = 14,\n    DEVICE_ID_SCHEDULER = 15,\n    DEVICE_ID_COMPONENT = 16,\n    DEVICE_ID_LIGHT_SENSOR = 17,\n    DEVICE_ID_TOUCH_SENSOR = 18,\n    DEVICE_ID_SYSTEM_DAC = 19,\n    DEVICE_ID_SYSTEM_MICROPHONE = 20,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR = 21,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR_SPL = 22,\n    DEVICE_ID_MSC = 23,\n    DEVICE_ID_SPI = 24,\n    DEVICE_ID_DISTANCE = 25,\n    DEVICE_ID_GYROSCOPE = 26,\n    DEVICE_ID_HUMIDITY = 27,\n    DEVICE_ID_PRESSURE = 28,\n    DEVICE_ID_SINGLE_WIRE_SERIAL = 29,\n    DEVICE_ID_JACDAC = 30,\n    DEVICE_ID_JACDAC_PHYS = 31,\n    DEVICE_ID_JACDAC_CONTROL_SERVICE = 32,\n    DEVICE_ID_JACDAC_CONFIGURATION_SERVICE = 33,\n    DEVICE_ID_SYSTEM_ADC = 34,\n    DEVICE_ID_PULSE_IN = 35,\n    DEVICE_ID_IO_P0 = 100,\n    DEVICE_ID_MESSAGE_BUS_LISTENER = 1021,\n    DEVICE_ID_NOTIFY_ONE = 1022,\n    DEVICE_ID_NOTIFY = 1023,\n    DEVICE_ID_BUTTON_UP = 2000,\n    DEVICE_ID_BUTTON_DOWN = 2001,\n    DEVICE_ID_BUTTON_LEFT = 2002,\n    DEVICE_ID_BUTTON_RIGHT = 2003,\n    DEVICE_ID_JD_DYNAMIC_ID = 3000,\n    DEVICE_COMPONENT_RUNNING = 4096,\n    DEVICE_COMPONENT_STATUS_SYSTEM_TICK = 8192,\n    DEVICE_COMPONENT_STATUS_IDLE_TICK = 16384,\n    DEVICE_COMPONENT_LISTENERS_CONFIGURED = 1,\n    DEVICE_COMPONENT_EVT_SYSTEM_TICK = 1,\n    // /libraries/codal-core/inc/core/CodalFiber.h\n    DEVICE_SCHEDULER_RUNNING = 1,\n    DEVICE_SCHEDULER_IDLE = 2,\n    DEVICE_FIBER_FLAG_FOB = 1,\n    DEVICE_FIBER_FLAG_PARENT = 2,\n    DEVICE_FIBER_FLAG_CHILD = 4,\n    DEVICE_FIBER_FLAG_DO_NOT_PAGE = 8,\n    DEVICE_SCHEDULER_EVT_TICK = 1,\n    DEVICE_SCHEDULER_EVT_IDLE = 2,\n    DEVICE_GET_FIBER_LIST_AVAILABLE = 1,\n    // /libraries/codal-core/inc/core/CodalListener.h\n    MESSAGE_BUS_LISTENER_PARAMETERISED = 1,\n    MESSAGE_BUS_LISTENER_METHOD = 2,\n    MESSAGE_BUS_LISTENER_BUSY = 4,\n    MESSAGE_BUS_LISTENER_REENTRANT = 8,\n    MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY = 16,\n    MESSAGE_BUS_LISTENER_DROP_IF_BUSY = 32,\n    MESSAGE_BUS_LISTENER_NONBLOCKING = 64,\n    MESSAGE_BUS_LISTENER_URGENT = 128,\n    MESSAGE_BUS_LISTENER_DELETING = 32768,\n    MESSAGE_BUS_LISTENER_IMMEDIATE = 192,\n    // /libraries/codal-core/inc/core/ErrorNo.h\n    DEVICE_OK = 0,\n    DEVICE_INVALID_PARAMETER = -1001,\n    DEVICE_NOT_SUPPORTED = -1002,\n    DEVICE_CALIBRATION_IN_PROGRESS = -1003,\n    DEVICE_CALIBRATION_REQUIRED = -1004,\n    DEVICE_NO_RESOURCES = -1005,\n    DEVICE_BUSY = -1006,\n    DEVICE_CANCELLED = -1007,\n    DEVICE_I2C_ERROR = -1010,\n    DEVICE_SERIAL_IN_USE = -1011,\n    DEVICE_NO_DATA = -1012,\n    DEVICE_NOT_IMPLEMENTED = -1013,\n    DEVICE_SPI_ERROR = -1014,\n    DEVICE_INVALID_STATE = -1015,\n    DEVICE_OOM = 20,\n    DEVICE_HEAP_ERROR = 30,\n    DEVICE_NULL_DEREFERENCE = 40,\n    DEVICE_USB_ERROR = 50,\n    DEVICE_JACDAC_ERROR = 60,\n    DEVICE_HARDWARE_CONFIGURATION_ERROR = 90,\n    // /libraries/codal-core/inc/core/NotifyEvents.h\n    DISPLAY_EVT_FREE = 1,\n    CODAL_SERIAL_EVT_TX_EMPTY = 2,\n    BLE_EVT_SERIAL_TX_EMPTY = 3,\n    ARCADE_PLAYER_JOIN_RESULT = 4,\n    DEVICE_NOTIFY_USER_EVENT_BASE = 1024,\n    // /libraries/codal-core/inc/driver-models/AbstractButton.h\n    DEVICE_BUTTON_EVT_DOWN = 1,\n    DEVICE_BUTTON_EVT_UP = 2,\n    DEVICE_BUTTON_EVT_CLICK = 3,\n    DEVICE_BUTTON_EVT_LONG_CLICK = 4,\n    DEVICE_BUTTON_EVT_HOLD = 5,\n    DEVICE_BUTTON_EVT_DOUBLE_CLICK = 6,\n    DEVICE_BUTTON_LONG_CLICK_TIME = 1000,\n    DEVICE_BUTTON_HOLD_TIME = 1500,\n    DEVICE_BUTTON_STATE = 1,\n    DEVICE_BUTTON_STATE_HOLD_TRIGGERED = 2,\n    DEVICE_BUTTON_STATE_CLICK = 4,\n    DEVICE_BUTTON_STATE_LONG_CLICK = 8,\n    DEVICE_BUTTON_SIGMA_MIN = 0,\n    DEVICE_BUTTON_SIGMA_MAX = 12,\n    DEVICE_BUTTON_SIGMA_THRESH_HI = 8,\n    DEVICE_BUTTON_SIGMA_THRESH_LO = 2,\n    DEVICE_BUTTON_DOUBLE_CLICK_THRESH = 50,\n    DEVICE_BUTTON_SIMPLE_EVENTS = 0,\n    DEVICE_BUTTON_ALL_EVENTS = 1,\n    ACTIVE_LOW = 0,\n    ACTIVE_HIGH = 1,\n    // /libraries/codal-core/inc/driver-models/Accelerometer.h\n    ACCELEROMETER_IMU_DATA_VALID = 2,\n    ACCELEROMETER_EVT_DATA_UPDATE = 1,\n    ACCELEROMETER_EVT_NONE = 0,\n    ACCELEROMETER_EVT_TILT_UP = 1,\n    ACCELEROMETER_EVT_TILT_DOWN = 2,\n    ACCELEROMETER_EVT_TILT_LEFT = 3,\n    ACCELEROMETER_EVT_TILT_RIGHT = 4,\n    ACCELEROMETER_EVT_FACE_UP = 5,\n    ACCELEROMETER_EVT_FACE_DOWN = 6,\n    ACCELEROMETER_EVT_FREEFALL = 7,\n    ACCELEROMETER_EVT_3G = 8,\n    ACCELEROMETER_EVT_6G = 9,\n    ACCELEROMETER_EVT_8G = 10,\n    ACCELEROMETER_EVT_SHAKE = 11,\n    ACCELEROMETER_EVT_2G = 12,\n    ACCELEROMETER_REST_TOLERANCE = 200,\n    ACCELEROMETER_TILT_TOLERANCE = 200,\n    ACCELEROMETER_FREEFALL_TOLERANCE = 400,\n    ACCELEROMETER_SHAKE_TOLERANCE = 400,\n    ACCELEROMETER_2G_TOLERANCE = 2048,\n    ACCELEROMETER_3G_TOLERANCE = 3072,\n    ACCELEROMETER_6G_TOLERANCE = 6144,\n    ACCELEROMETER_8G_TOLERANCE = 8192,\n    ACCELEROMETER_GESTURE_DAMPING = 5,\n    ACCELEROMETER_SHAKE_DAMPING = 10,\n    ACCELEROMETER_SHAKE_RTX = 30,\n    ACCELEROMETER_SHAKE_COUNT_THRESHOLD = 4,\n    // /libraries/codal-core/inc/driver-models/Compass.h\n    COMPASS_STATUS_RUNNING = 1,\n    COMPASS_STATUS_CALIBRATED = 2,\n    COMPASS_STATUS_CALIBRATING = 4,\n    COMPASS_STATUS_ADDED_TO_IDLE = 8,\n    COMPASS_EVT_DATA_UPDATE = 1,\n    COMPASS_EVT_CONFIG_NEEDED = 2,\n    COMPASS_EVT_CALIBRATE = 3,\n    COMPASS_EVT_CALIBRATION_NEEDED = 4,\n    // /libraries/codal-core/inc/driver-models/Gyroscope.h\n    GYROSCOPE_IMU_DATA_VALID = 2,\n    GYROSCOPE_EVT_DATA_UPDATE = 1,\n    // /libraries/codal-core/inc/driver-models/LowLevelTimer.h\n    TimerModeTimer = 0,\n    TimerModeCounter = 1,\n    TimerModeAlternateFunction = 2,\n    BitMode8 = 0,\n    BitMode16 = 1,\n    BitMode24 = 2,\n    BitMode32 = 3,\n    // /libraries/codal-core/inc/driver-models/Pin.h\n    IO_STATUS_DIGITAL_IN = 1,\n    IO_STATUS_DIGITAL_OUT = 2,\n    IO_STATUS_ANALOG_IN = 4,\n    IO_STATUS_ANALOG_OUT = 8,\n    IO_STATUS_TOUCH_IN = 16,\n    IO_STATUS_EVENT_ON_EDGE = 32,\n    IO_STATUS_EVENT_PULSE_ON_EDGE = 64,\n    IO_STATUS_INTERRUPT_ON_EDGE = 128,\n    IO_STATUS_ACTIVE_HI = 256,\n    DEVICE_PIN_MAX_OUTPUT = 1023,\n    DEVICE_PIN_MAX_SERVO_RANGE = 180,\n    DEVICE_PIN_DEFAULT_SERVO_RANGE = 2000,\n    DEVICE_PIN_DEFAULT_SERVO_CENTER = 1500,\n    DEVICE_PIN_EVENT_NONE = 0,\n    DEVICE_PIN_INTERRUPT_ON_EDGE = 1,\n    DEVICE_PIN_EVENT_ON_EDGE = 2,\n    DEVICE_PIN_EVENT_ON_PULSE = 3,\n    DEVICE_PIN_EVENT_ON_TOUCH = 4,\n    DEVICE_PIN_EVT_RISE = 2,\n    DEVICE_PIN_EVT_FALL = 3,\n    DEVICE_PIN_EVT_PULSE_HI = 4,\n    DEVICE_PIN_EVT_PULSE_LO = 5,\n    PIN_CAPABILITY_DIGITAL = 1,\n    PIN_CAPABILITY_ANALOG = 2,\n    PIN_CAPABILITY_AD = 3,\n    PIN_CAPABILITY_ALL = 3,\n    None = 0,\n    Down = 1,\n    Up = 2,\n    // /libraries/codal-core/inc/driver-models/Radio.h\n    RADIO_EVT_DATA_READY = 2,\n    // /libraries/codal-core/inc/driver-models/SPIFlash.h\n    SPIFLASH_PAGE_SIZE = 256,\n    SPIFLASH_SMALL_ROW_PAGES = 16,\n    SPIFLASH_BIG_ROW_PAGES = 256,\n    // /libraries/codal-core/inc/driver-models/Sensor.h\n    SENSOR_THRESHOLD_LOW = 1,\n    SENSOR_THRESHOLD_HIGH = 2,\n    SENSOR_UPDATE_NEEDED = 3,\n    SENSOR_INITIALISED = 1,\n    SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    SENSOR_LOW_THRESHOLD_PASSED = 4,\n    SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    SENSOR_DEFAULT_SENSITIVITY = 868,\n    SENSOR_DEFAULT_SAMPLE_PERIOD = 500,\n    // /libraries/codal-core/inc/driver-models/Serial.h\n    CODAL_SERIAL_DEFAULT_BAUD_RATE = 115200,\n    CODAL_SERIAL_DEFAULT_BUFFER_SIZE = 20,\n    CODAL_SERIAL_EVT_DELIM_MATCH = 1,\n    CODAL_SERIAL_EVT_HEAD_MATCH = 2,\n    CODAL_SERIAL_EVT_RX_FULL = 3,\n    CODAL_SERIAL_EVT_DATA_RECEIVED = 4,\n    CODAL_SERIAL_STATUS_RX_IN_USE = 1,\n    CODAL_SERIAL_STATUS_TX_IN_USE = 2,\n    CODAL_SERIAL_STATUS_RX_BUFF_INIT = 4,\n    CODAL_SERIAL_STATUS_TX_BUFF_INIT = 8,\n    CODAL_SERIAL_STATUS_RXD = 16,\n    ASYNC = 0,\n    SYNC_SPINWAIT = 1,\n    SYNC_SLEEP = 2,\n    RxInterrupt = 0,\n    TxInterrupt = 1,\n    // /libraries/codal-core/inc/driver-models/SingleWireSerial.h\n    SWS_EVT_DATA_RECEIVED = 1,\n    SWS_EVT_DATA_SENT = 2,\n    SWS_EVT_ERROR = 3,\n    SWS_EVT_DATA_DROPPED = 4,\n    SingleWireRx = 0,\n    SingleWireTx = 1,\n    SingleWireDisconnected = 2,\n    // /libraries/codal-core/inc/driver-models/Timer.h\n    CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE = 10,\n    // /libraries/codal-core/inc/drivers/AnalogSensor.h\n    ANALOG_THRESHOLD_LOW = 1,\n    ANALOG_THRESHOLD_HIGH = 2,\n    ANALOG_SENSOR_UPDATE_NEEDED = 3,\n    ANALOG_SENSOR_INITIALISED = 1,\n    ANALOG_SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    ANALOG_SENSOR_LOW_THRESHOLD_PASSED = 4,\n    ANALOG_SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    ANALOG_SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    // /libraries/codal-core/inc/drivers/AnimatedDisplay.h\n    DISPLAY_EVT_ANIMATION_COMPLETE = 1,\n    DISPLAY_DEFAULT_AUTOCLEAR = 1,\n    DISPLAY_SPACING = 1,\n    DISPLAY_ANIMATE_DEFAULT_POS = -255,\n    DISPLAY_DEFAULT_SCROLL_SPEED = 120,\n    DISPLAY_DEFAULT_SCROLL_STRIDE = -1,\n    DISPLAY_DEFAULT_PRINT_SPEED = 400,\n    ANIMATION_MODE_NONE = 0,\n    ANIMATION_MODE_STOPPED = 1,\n    ANIMATION_MODE_SCROLL_TEXT = 2,\n    ANIMATION_MODE_PRINT_TEXT = 3,\n    ANIMATION_MODE_SCROLL_IMAGE = 4,\n    ANIMATION_MODE_ANIMATE_IMAGE = 5,\n    ANIMATION_MODE_ANIMATE_IMAGE_WITH_CLEAR = 6,\n    ANIMATION_MODE_PRINT_CHARACTER = 7,\n    // /libraries/codal-core/inc/drivers/FAT.h\n    FAT_RESERVED_SECTORS = 1,\n    FAT_ROOT_DIR_SECTORS = 4,\n    // /libraries/codal-core/inc/drivers/HID.h\n    HID_REQUEST_GET_REPORT = 1,\n    HID_REQUEST_GET_IDLE = 2,\n    HID_REQUEST_GET_PROTOCOL = 3,\n    HID_REQUEST_SET_REPORT = 9,\n    HID_REQUEST_SET_IDLE = 10,\n    HID_REQUEST_SET_PROTOCOL = 11,\n    // /libraries/codal-core/inc/drivers/HIDKeyboard.h\n    HID_KEYBOARD_NUM_REPORTS = 3,\n    HID_KEYBOARD_REPORT_GENERIC = 1,\n    HID_KEYBOARD_REPORT_CONSUMER = 2,\n    HID_KEYBOARD_KEYSTATE_SIZE_GENERIC = 8,\n    HID_KEYBOARD_KEYSTATE_SIZE_CONSUMER = 2,\n    HID_KEYBOARD_MODIFIER_OFFSET = 2,\n    HID_KEYBOARD_DELAY_DEFAULT = 10,\n    PressKey = 0,\n    ReleaseKey = 1,\n    // /libraries/codal-core/inc/drivers/KeyMap.h\n    KEYMAP_ALL_KEYS_UP_Val = 1,\n    KEYMAP_ALL_KEYS_UP_POS = 28,\n    KEYMAP_NORMAL_KEY_Val = 0,\n    KEYMAP_MODIFIER_KEY_Val = 1,\n    KEYMAP_MODIFIER_POS = 29,\n    KEYMAP_MEDIA_KEY_Val = 1,\n    KEYMAP_MEDIA_POS = 30,\n    KEYMAP_KEY_UP_Val = 0,\n    KEYMAP_KEY_DOWN_Val = 1,\n    KEYMAP_KEY_DOWN_POS = 31,\n    // /libraries/codal-core/inc/drivers/KeyValueStorage.h\n    DEVICE_KEY_VALUE_STORE_OFFSET = -4,\n    KEY_VALUE_STORAGE_MAGIC = 789921,\n    KEY_VALUE_STORAGE_BLOCK_SIZE = 48,\n    KEY_VALUE_STORAGE_KEY_SIZE = 16,\n    KEY_VALUE_STORAGE_SCRATCH_WORD_SIZE = 64,\n    KEY_VALUE_STORAGE_MAX_PAIRS = 5,\n    // /libraries/codal-core/inc/drivers/LEDMatrix.h\n    LED_MATRIX_GREYSCALE_BIT_DEPTH = 8,\n    LED_MATRIX_EVT_LIGHT_SENSE = 2,\n    LED_MATRIX_EVT_FRAME_TIMEOUT = 3,\n    LED_MATRIX_MINIMUM_BRIGHTNESS = 1,\n    LED_MATRIX_MAXIMUM_BRIGHTNESS = 255,\n    LED_MATRIX_DEFAULT_BRIGHTNESS = 255,\n    DISPLAY_MODE_BLACK_AND_WHITE = 0,\n    DISPLAY_MODE_GREYSCALE = 1,\n    DISPLAY_MODE_BLACK_AND_WHITE_LIGHT_SENSE = 2,\n    DISPLAY_MODE_GREYSCALE_LIGHT_SENSE = 3,\n    MATRIX_DISPLAY_ROTATION_0 = 0,\n    MATRIX_DISPLAY_ROTATION_90 = 1,\n    MATRIX_DISPLAY_ROTATION_180 = 2,\n    MATRIX_DISPLAY_ROTATION_270 = 3,\n    NO_CONN = 0,\n    // /libraries/codal-core/inc/drivers/LSM303Accelerometer.h\n    LSM303_A_DEFAULT_ADDR = 50,\n    LSM303_STATUS_REG_AUX_A = 7,\n    LSM303_OUT_TEMP_L_A = 12,\n    LSM303_OUT_TEMP_H_A = 13,\n    LSM303_INT_COUNTER_REG_A = 14,\n    LSM303_WHO_AM_I_A = 15,\n    LSM303_TEMP_CFG_REG_A = 31,\n    LSM303_CTRL_REG1_A = 32,\n    LSM303_CTRL_REG2_A = 33,\n    LSM303_CTRL_REG3_A = 34,\n    LSM303_CTRL_REG4_A = 35,\n    LSM303_CTRL_REG5_A = 36,\n    LSM303_CTRL_REG6_A = 37,\n    LSM303_DATACAPTURE_A = 38,\n    LSM303_STATUS_REG_A = 39,\n    LSM303_OUT_X_L_A = 40,\n    LSM303_OUT_X_H_A = 41,\n    LSM303_OUT_Y_L_A = 42,\n    LSM303_OUT_Y_H_A = 43,\n    LSM303_OUT_Z_L_A = 44,\n    LSM303_OUT_Z_H_A = 45,\n    LSM303_FIFO_CTRL_REG_A = 46,\n    LSM303_FIFO_SRC_REG_A = 47,\n    LSM303_INT1_CFG_A = 48,\n    LSM303_INT1_SRC_A = 49,\n    LSM303_INT1_THS_A = 50,\n    LSM303_INT1_DURATION_A = 51,\n    LSM303_INT2_CFG_A = 52,\n    LSM303_INT2_SRC_A = 53,\n    LSM303_INT2_THS_A = 54,\n    LSM303_INT2_DURATION_A = 55,\n    LSM303_CLICK_CFG_A = 56,\n    LSM303_CLICK_SRC_A = 57,\n    LSM303_CLICK_THS_A = 58,\n    LSM303_TIME_LIMIT_A = 59,\n    LSM303_TIME_LATENCY_A = 60,\n    LSM303_TIME_WINDOW_A = 61,\n    LSM303_ACT_THS_A = 62,\n    LSM303_ACT_DUR_A = 63,\n    LSM303_A_WHOAMI_VAL = 51,\n    LSM303_A_STATUS_DATA_READY = 8,\n    LSM303_A_STATUS_ENABLED = 256,\n    LSM303_A_STATUS_SLEEPING = 512,\n    // /libraries/codal-core/inc/drivers/LSM303Magnetometer.h\n    LSM303_M_WHOAMI_VAL = 64,\n    LSM303_M_DEFAULT_ADDR = 60,\n    LSM303_OFFSET_X_REG_L_M = 69,\n    LSM303_OFFSET_X_REG_H_M = 70,\n    LSM303_OFFSET_Y_REG_L_M = 71,\n    LSM303_OFFSET_Y_REG_H_M = 72,\n    LSM303_OFFSET_Z_REG_L_M = 73,\n    LSM303_OFFSET_Z_REG_H_M = 74,\n    LSM303_WHO_AM_I_M = 79,\n    LSM303_CFG_REG_A_M = 96,\n    LSM303_CFG_REG_B_M = 97,\n    LSM303_CFG_REG_C_M = 98,\n    LSM303_INT_CRTL_REG_M = 99,\n    LSM303_INT_SOURCE_REG_M = 100,\n    LSM303_INT_THS_L_REG_M = 101,\n    LSM303_INT_THS_H_REG_M = 102,\n    LSM303_STATUS_REG_M = 103,\n    LSM303_OUTX_L_REG_M = 104,\n    LSM303_OUTX_H_REG_M = 105,\n    LSM303_OUTY_L_REG_M = 106,\n    LSM303_OUTY_H_REG_M = 107,\n    LSM303_OUTZ_L_REG_M = 108,\n    LSM303_OUTZ_H_REG_M = 109,\n    LSM303_M_STATUS_DATA_READY = 8,\n    LSM303_M_STATUS_ENABLED = 256,\n    LSM303_M_STATUS_SLEEPING = 512,\n    // /libraries/codal-core/inc/drivers/MultiButton.h\n    MULTI_BUTTON_STATE_1 = 1,\n    MULTI_BUTTON_STATE_2 = 2,\n    MULTI_BUTTON_HOLD_TRIGGERED_1 = 4,\n    MULTI_BUTTON_HOLD_TRIGGERED_2 = 8,\n    MULTI_BUTTON_SUPRESSED_1 = 16,\n    MULTI_BUTTON_SUPRESSED_2 = 32,\n    MULTI_BUTTON_ATTACHED = 64,\n    // /libraries/codal-core/inc/drivers/PulseIn.h\n    DEVICE_EVT_PULSE_IN_TIMEOUT = 10000,\n    // /libraries/codal-core/inc/drivers/TouchButton.h\n    TOUCH_BUTTON_CALIBRATION_LINEAR_OFFSET = 2,\n    TOUCH_BUTTON_CALIBRATION_PERCENTAGE_OFFSET = 5,\n    TOUCH_BUTTON_SENSITIVITY = 10,\n    TOUCH_BUTTON_CALIBRATION_PERIOD = 10,\n    TOUCH_BUTTON_CALIBRATING = 16,\n    // /libraries/codal-core/inc/drivers/TouchSensor.h\n    TOUCH_SENSOR_MAX_BUTTONS = 10,\n    TOUCH_SENSOR_SAMPLE_PERIOD = 50,\n    TOUCH_SENSE_SAMPLE_MAX = 1000,\n    TOUCH_SENSOR_UPDATE_NEEDED = 1,\n    // /libraries/codal-core/inc/drivers/USB_HID_Keys.h\n    KEY_MOD_LCTRL = 1,\n    KEY_MOD_LSHIFT = 2,\n    KEY_MOD_LALT = 4,\n    KEY_MOD_LMETA = 8,\n    KEY_MOD_RCTRL = 16,\n    KEY_MOD_RSHIFT = 32,\n    KEY_MOD_RALT = 64,\n    KEY_MOD_RMETA = 128,\n    KEY_NONE = 0,\n    KEY_ERR_OVF = 1,\n    KEY_A = 4,\n    KEY_B = 5,\n    KEY_C = 6,\n    KEY_D = 7,\n    KEY_E = 8,\n    KEY_F = 9,\n    KEY_G = 10,\n    KEY_H = 11,\n    KEY_I = 12,\n    KEY_J = 13,\n    KEY_K = 14,\n    KEY_L = 15,\n    KEY_M = 16,\n    KEY_N = 17,\n    KEY_O = 18,\n    KEY_P = 19,\n    KEY_Q = 20,\n    KEY_R = 21,\n    KEY_S = 22,\n    KEY_T = 23,\n    KEY_U = 24,\n    KEY_V = 25,\n    KEY_W = 26,\n    KEY_X = 27,\n    KEY_Y = 28,\n    KEY_Z = 29,\n    KEY_1 = 30,\n    KEY_2 = 31,\n    KEY_3 = 32,\n    KEY_4 = 33,\n    KEY_5 = 34,\n    KEY_6 = 35,\n    KEY_7 = 36,\n    KEY_8 = 37,\n    KEY_9 = 38,\n    KEY_0 = 39,\n    KEY_ENTER = 40,\n    KEY_ESC = 41,\n    KEY_BACKSPACE = 42,\n    KEY_TAB = 43,\n    KEY_SPACE = 44,\n    KEY_MINUS = 45,\n    KEY_EQUAL = 46,\n    KEY_LEFTBRACE = 47,\n    KEY_RIGHTBRACE = 48,\n    KEY_BACKSLASH = 49,\n    KEY_HASHTILDE = 50,\n    KEY_SEMICOLON = 51,\n    KEY_APOSTROPHE = 52,\n    KEY_GRAVE = 53,\n    KEY_COMMA = 54,\n    KEY_DOT = 55,\n    KEY_SLASH = 56,\n    KEY_CAPSLOCK = 57,\n    KEY_F1 = 58,\n    KEY_F2 = 59,\n    KEY_F3 = 60,\n    KEY_F4 = 61,\n    KEY_F5 = 62,\n    KEY_F6 = 63,\n    KEY_F7 = 64,\n    KEY_F8 = 65,\n    KEY_F9 = 66,\n    KEY_F10 = 67,\n    KEY_F11 = 68,\n    KEY_F12 = 69,\n    KEY_SYSRQ = 70,\n    KEY_SCROLLLOCK = 71,\n    KEY_PAUSE = 72,\n    KEY_INSERT = 73,\n    KEY_HOME = 74,\n    KEY_PAGEUP = 75,\n    KEY_DELETE = 76,\n    KEY_END = 77,\n    KEY_PAGEDOWN = 78,\n    KEY_RIGHT = 79,\n    KEY_LEFT = 80,\n    KEY_DOWN = 81,\n    KEY_UP = 82,\n    KEY_NUMLOCK = 83,\n    KEY_KPSLASH = 84,\n    KEY_KPASTERISK = 85,\n    KEY_KPMINUS = 86,\n    KEY_KPPLUS = 87,\n    KEY_KPENTER = 88,\n    KEY_KP1 = 89,\n    KEY_KP2 = 90,\n    KEY_KP3 = 91,\n    KEY_KP4 = 92,\n    KEY_KP5 = 93,\n    KEY_KP6 = 94,\n    KEY_KP7 = 95,\n    KEY_KP8 = 96,\n    KEY_KP9 = 97,\n    KEY_KP0 = 98,\n    KEY_KPDOT = 99,\n    KEY_102ND = 100,\n    KEY_COMPOSE = 101,\n    KEY_POWER = 102,\n    KEY_KPEQUAL = 103,\n    KEY_F13 = 104,\n    KEY_F14 = 105,\n    KEY_F15 = 106,\n    KEY_F16 = 107,\n    KEY_F17 = 108,\n    KEY_F18 = 109,\n    KEY_F19 = 110,\n    KEY_F20 = 111,\n    KEY_F21 = 112,\n    KEY_F22 = 113,\n    KEY_F23 = 114,\n    KEY_F24 = 115,\n    KEY_OPEN = 116,\n    KEY_HELP = 117,\n    KEY_PROPS = 118,\n    KEY_FRONT = 119,\n    KEY_STOP = 120,\n    KEY_AGAIN = 121,\n    KEY_UNDO = 122,\n    KEY_CUT = 123,\n    KEY_COPY = 124,\n    KEY_PASTE = 125,\n    KEY_FIND = 126,\n    KEY_MUTE = 127,\n    KEY_VOLUMEUP = 128,\n    KEY_VOLUMEDOWN = 129,\n    KEY_KPCOMMA = 133,\n    KEY_RO = 135,\n    KEY_KATAKANAHIRAGANA = 136,\n    KEY_YEN = 137,\n    KEY_HENKAN = 138,\n    KEY_MUHENKAN = 139,\n    KEY_KPJPCOMMA = 140,\n    KEY_HANGEUL = 144,\n    KEY_HANJA = 145,\n    KEY_KATAKANA = 146,\n    KEY_HIRAGANA = 147,\n    KEY_ZENKAKUHANKAKU = 148,\n    KEY_KPLEFTPAREN = 182,\n    KEY_KPRIGHTPAREN = 183,\n    KEY_LEFTCTRL = 224,\n    KEY_LEFTSHIFT = 225,\n    KEY_LEFTALT = 226,\n    KEY_LEFTMETA = 227,\n    KEY_RIGHTCTRL = 228,\n    KEY_RIGHTSHIFT = 229,\n    KEY_RIGHTALT = 230,\n    KEY_RIGHTMETA = 231,\n    KEY_MEDIA_PLAYPAUSE = 232,\n    KEY_MEDIA_STOPCD = 233,\n    KEY_MEDIA_PREVIOUSSONG = 234,\n    KEY_MEDIA_NEXTSONG = 235,\n    KEY_MEDIA_EJECTCD = 236,\n    KEY_MEDIA_VOLUMEUP = 237,\n    KEY_MEDIA_VOLUMEDOWN = 238,\n    KEY_MEDIA_MUTE = 239,\n    KEY_MEDIA_WWW = 240,\n    KEY_MEDIA_BACK = 241,\n    KEY_MEDIA_FORWARD = 242,\n    KEY_MEDIA_STOP = 243,\n    KEY_MEDIA_FIND = 244,\n    KEY_MEDIA_SCROLLUP = 245,\n    KEY_MEDIA_SCROLLDOWN = 246,\n    KEY_MEDIA_EDIT = 247,\n    KEY_MEDIA_SLEEP = 248,\n    KEY_MEDIA_COFFEE = 249,\n    KEY_MEDIA_REFRESH = 250,\n    KEY_MEDIA_CALC = 251,\n    // /libraries/codal-core/inc/drivers/uf2format.h\n    UF2FORMAT_H = 1,\n    APP_START_ADDRESS = 8192,\n    UF2_FLAG_NOFLASH = 1,\n    // /libraries/codal-core/inc/streams/DataStream.h\n    DATASTREAM_MAXIMUM_BUFFERS = 1,\n    DATASTREAM_FORMAT_UNKNOWN = 0,\n    DATASTREAM_FORMAT_8BIT_UNSIGNED = 1,\n    DATASTREAM_FORMAT_8BIT_SIGNED = 2,\n    DATASTREAM_FORMAT_16BIT_UNSIGNED = 3,\n    DATASTREAM_FORMAT_16BIT_SIGNED = 4,\n    DATASTREAM_FORMAT_24BIT_UNSIGNED = 5,\n    DATASTREAM_FORMAT_24BIT_SIGNED = 6,\n    DATASTREAM_FORMAT_32BIT_UNSIGNED = 7,\n    DATASTREAM_FORMAT_32BIT_SIGNED = 8,\n    // /libraries/codal-core/inc/streams/LevelDetector.h\n    LEVEL_THRESHOLD_LOW = 1,\n    LEVEL_THRESHOLD_HIGH = 2,\n    LEVEL_DETECTOR_INITIALISED = 1,\n    LEVEL_DETECTOR_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_DEFAULT_WINDOW_SIZE = 128,\n    // /libraries/codal-core/inc/streams/LevelDetectorSPL.h\n    LEVEL_DETECTOR_SPL_INITIALISED = 1,\n    LEVEL_DETECTOR_SPL_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_SPL_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_SPL_DEFAULT_WINDOW_SIZE = 128,\n    // /libraries/codal-core/inc/streams/MemorySource.h\n    MEMORY_SOURCE_DEFAULT_MAX_BUFFER = 256,\n    // /libraries/codal-core/inc/streams/Synthesizer.h\n    SYNTHESIZER_SAMPLE_RATE = 44100,\n    TONE_WIDTH = 1024,\n    // /libraries/codal-core/inc/types/BitmapFont.h\n    BITMAP_FONT_WIDTH = 5,\n    BITMAP_FONT_HEIGHT = 5,\n    BITMAP_FONT_ASCII_START = 32,\n    BITMAP_FONT_ASCII_END = 126,\n    // /libraries/codal-core/inc/types/CoordinateSystem.h\n    COORDINATE_SPACE_ROTATED_0 = 0,\n    COORDINATE_SPACE_ROTATED_90 = 1,\n    COORDINATE_SPACE_ROTATED_180 = 2,\n    COORDINATE_SPACE_ROTATED_270 = 3,\n    RAW = 0,\n    SIMPLE_CARTESIAN = 1,\n    NORTH_EAST_DOWN = 2,\n    EAST_NORTH_UP = 3,\n    NORTH_EAST_UP = 3,\n    // /libraries/codal-core/inc/types/Event.h\n    DEVICE_ID_ANY = 0,\n    DEVICE_EVT_ANY = 0,\n    CREATE_ONLY = 0,\n    CREATE_AND_FIRE = 1,\n    DEVICE_EVENT_DEFAULT_LAUNCH_MODE = 1,\n    // /libraries/codal-core/inc/types/ManagedBuffer.h\n    Zero = 1,\n    // /libraries/codal-core/inc/types/RefCounted.h\n    REF_TAG_STRING = 1,\n    REF_TAG_BUFFER = 2,\n    REF_TAG_IMAGE = 3,\n    REF_TAG_USER = 32,\n    // /pxtapp/accelerometer---lsm6dsl/axis.h\n    ACC_SYSTEM = 1,\n    ACC_ROTATION = 2,\n    // /pxtapp/configkeys.h\n    CFG_PIN_NAME_MSK = 65535,\n    CFG_PIN_CONFIG_MSK = 4294901760,\n    CFG_PIN_CONFIG_ACTIVE_LO = 65536,\n    CFG_MAGIC0 = 513675505,\n    CFG_MAGIC1 = 539130489,\n    CFG_PIN_ACCELEROMETER_INT = 1,\n    CFG_PIN_ACCELEROMETER_SCL = 2,\n    CFG_PIN_ACCELEROMETER_SDA = 3,\n    CFG_PIN_BTN_A = 4,\n    CFG_PIN_BTN_B = 5,\n    CFG_PIN_BTN_SLIDE = 6,\n    CFG_PIN_DOTSTAR_CLOCK = 7,\n    CFG_PIN_DOTSTAR_DATA = 8,\n    CFG_PIN_FLASH_CS = 9,\n    CFG_PIN_FLASH_MISO = 10,\n    CFG_PIN_FLASH_MOSI = 11,\n    CFG_PIN_FLASH_SCK = 12,\n    CFG_PIN_LED = 13,\n    CFG_PIN_LIGHT = 14,\n    CFG_PIN_MICROPHONE = 15,\n    CFG_PIN_MIC_CLOCK = 16,\n    CFG_PIN_MIC_DATA = 17,\n    CFG_PIN_MISO = 18,\n    CFG_PIN_MOSI = 19,\n    CFG_PIN_NEOPIXEL = 20,\n    CFG_PIN_RX = 21,\n    CFG_PIN_RXLED = 22,\n    CFG_PIN_SCK = 23,\n    CFG_PIN_SCL = 24,\n    CFG_PIN_SDA = 25,\n    CFG_PIN_SPEAKER_AMP = 26,\n    CFG_PIN_TEMPERATURE = 27,\n    CFG_PIN_TX = 28,\n    CFG_PIN_TXLED = 29,\n    CFG_PIN_IR_OUT = 30,\n    CFG_PIN_IR_IN = 31,\n    CFG_PIN_DISPLAY_SCK = 32,\n    CFG_PIN_DISPLAY_MISO = 33,\n    CFG_PIN_DISPLAY_MOSI = 34,\n    CFG_PIN_DISPLAY_CS = 35,\n    CFG_PIN_DISPLAY_DC = 36,\n    CFG_DISPLAY_WIDTH = 37,\n    CFG_DISPLAY_HEIGHT = 38,\n    CFG_DISPLAY_CFG0 = 39,\n    CFG_DISPLAY_CFG1 = 40,\n    CFG_DISPLAY_CFG2 = 41,\n    CFG_DISPLAY_CFG3 = 42,\n    CFG_PIN_DISPLAY_RST = 43,\n    CFG_PIN_DISPLAY_BL = 44,\n    CFG_PIN_SERVO_1 = 45,\n    CFG_PIN_SERVO_2 = 46,\n    CFG_PIN_BTN_LEFT = 47,\n    CFG_PIN_BTN_RIGHT = 48,\n    CFG_PIN_BTN_UP = 49,\n    CFG_PIN_BTN_DOWN = 50,\n    CFG_PIN_BTN_MENU = 51,\n    CFG_PIN_LED_R = 52,\n    CFG_PIN_LED_G = 53,\n    CFG_PIN_LED_B = 54,\n    CFG_PIN_LED1 = 55,\n    CFG_PIN_LED2 = 56,\n    CFG_PIN_LED3 = 57,\n    CFG_PIN_LED4 = 58,\n    CFG_SPEAKER_VOLUME = 59,\n    CFG_PIN_JACK_TX = 60,\n    CFG_PIN_JACK_SENSE = 61,\n    CFG_PIN_JACK_HPEN = 62,\n    CFG_PIN_JACK_BZEN = 63,\n    CFG_PIN_JACK_PWREN = 64,\n    CFG_PIN_JACK_SND = 65,\n    CFG_PIN_JACK_BUSLED = 66,\n    CFG_PIN_JACK_COMMLED = 67,\n    CFG_PIN_BTN_SOFT_RESET = 69,\n    CFG_ACCELEROMETER_TYPE = 70,\n    CFG_PIN_BTNMX_LATCH = 71,\n    CFG_PIN_BTNMX_CLOCK = 72,\n    CFG_PIN_BTNMX_DATA = 73,\n    CFG_PIN_BTN_MENU2 = 74,\n    CFG_PIN_BATTSENSE = 75,\n    CFG_PIN_VIBRATION = 76,\n    CFG_PIN_PWREN = 77,\n    CFG_DISPLAY_TYPE = 78,\n    CFG_PIN_ROTARY_ENCODER_A = 79,\n    CFG_PIN_ROTARY_ENCODER_B = 80,\n    CFG_ACCELEROMETER_SPACE = 81,\n    CFG_PIN_WIFI_MOSI = 82,\n    CFG_PIN_WIFI_MISO = 83,\n    CFG_PIN_WIFI_SCK = 84,\n    CFG_PIN_WIFI_TX = 85,\n    CFG_PIN_WIFI_RX = 86,\n    CFG_PIN_WIFI_CS = 87,\n    CFG_PIN_WIFI_BUSY = 88,\n    CFG_PIN_WIFI_RESET = 89,\n    CFG_PIN_WIFI_GPIO0 = 90,\n    CFG_PIN_WIFI_AT_TX = 91,\n    CFG_PIN_WIFI_AT_RX = 92,\n    CFG_PIN_USB_POWER = 93,\n    ACCELEROMETER_TYPE_LIS3DH = 50,\n    ACCELEROMETER_TYPE_LIS3DH_ALT = 48,\n    ACCELEROMETER_TYPE_MMA8453 = 56,\n    ACCELEROMETER_TYPE_FXOS8700 = 60,\n    ACCELEROMETER_TYPE_MMA8653 = 58,\n    ACCELEROMETER_TYPE_MSA300 = 76,\n    ACCELEROMETER_TYPE_MPU6050 = 104,\n    DISPLAY_TYPE_ST7735 = 7735,\n    DISPLAY_TYPE_ILI9341 = 9341,\n    DISPLAY_TYPE_SMART = 4242,\n    CFG_PIN_A0 = 100,\n    CFG_PIN_A1 = 101,\n    CFG_PIN_A2 = 102,\n    CFG_PIN_A3 = 103,\n    CFG_PIN_A4 = 104,\n    CFG_PIN_A5 = 105,\n    CFG_PIN_A6 = 106,\n    CFG_PIN_A7 = 107,\n    CFG_PIN_A8 = 108,\n    CFG_PIN_A9 = 109,\n    CFG_PIN_A10 = 110,\n    CFG_PIN_A11 = 111,\n    CFG_PIN_A12 = 112,\n    CFG_PIN_A13 = 113,\n    CFG_PIN_A14 = 114,\n    CFG_PIN_A15 = 115,\n    CFG_PIN_A16 = 116,\n    CFG_PIN_A17 = 117,\n    CFG_PIN_A18 = 118,\n    CFG_PIN_A19 = 119,\n    CFG_PIN_A20 = 120,\n    CFG_PIN_A21 = 121,\n    CFG_PIN_A22 = 122,\n    CFG_PIN_A23 = 123,\n    CFG_PIN_A24 = 124,\n    CFG_PIN_A25 = 125,\n    CFG_PIN_A26 = 126,\n    CFG_PIN_A27 = 127,\n    CFG_PIN_A28 = 128,\n    CFG_PIN_A29 = 129,\n    CFG_PIN_A30 = 130,\n    CFG_PIN_A31 = 131,\n    CFG_PIN_D0 = 150,\n    CFG_PIN_D1 = 151,\n    CFG_PIN_D2 = 152,\n    CFG_PIN_D3 = 153,\n    CFG_PIN_D4 = 154,\n    CFG_PIN_D5 = 155,\n    CFG_PIN_D6 = 156,\n    CFG_PIN_D7 = 157,\n    CFG_PIN_D8 = 158,\n    CFG_PIN_D9 = 159,\n    CFG_PIN_D10 = 160,\n    CFG_PIN_D11 = 161,\n    CFG_PIN_D12 = 162,\n    CFG_PIN_D13 = 163,\n    CFG_PIN_D14 = 164,\n    CFG_PIN_D15 = 165,\n    CFG_PIN_D16 = 166,\n    CFG_PIN_D17 = 167,\n    CFG_PIN_D18 = 168,\n    CFG_PIN_D19 = 169,\n    CFG_PIN_D20 = 170,\n    CFG_PIN_D21 = 171,\n    CFG_PIN_D22 = 172,\n    CFG_PIN_D23 = 173,\n    CFG_PIN_D24 = 174,\n    CFG_PIN_D25 = 175,\n    CFG_PIN_D26 = 176,\n    CFG_PIN_D27 = 177,\n    CFG_PIN_D28 = 178,\n    CFG_PIN_D29 = 179,\n    CFG_PIN_D30 = 180,\n    CFG_PIN_D31 = 181,\n    CFG_NUM_NEOPIXELS = 200,\n    CFG_NUM_DOTSTARS = 201,\n    CFG_DEFAULT_BUTTON_MODE = 202,\n    CFG_SWD_ENABLED = 203,\n    CFG_FLASH_BYTES = 204,\n    CFG_RAM_BYTES = 205,\n    CFG_SYSTEM_HEAP_BYTES = 206,\n    CFG_LOW_MEM_SIMULATION_KB = 207,\n    CFG_BOOTLOADER_BOARD_ID = 208,\n    CFG_UF2_FAMILY = 209,\n    CFG_PINS_PORT_SIZE = 210,\n    CFG_BOOTLOADER_PROTECTION = 211,\n    CFG_POWER_DEEPSLEEP_TIMEOUT = 212,\n    CFG_ANALOG_BUTTON_THRESHOLD = 213,\n    CFG_CPU_MHZ = 214,\n    CFG_CONTROLLER_LIGHT_MAX_BRIGHTNESS = 215,\n    CFG_ANALOG_JOYSTICK_MIN = 216,\n    CFG_ANALOG_JOYSTICK_MAX = 217,\n    CFG_TIMERS_TO_USE = 218,\n    CFG_PIN_ONBOARD_DOTSTAR_CLOCK = 219,\n    CFG_PIN_ONBOARD_DOTSTAR_DATA = 220,\n    CFG_NUM_ONBOARD_DOTSTARS = 221,\n    CFG_PIN_ONBOARD_NEOPIXEL = 222,\n    CFG_NUM_ONBOARD_NEOPIXELS = 223,\n    CFG_MATRIX_KEYPAD_MESSAGE_ID = 239,\n    CFG_NUM_MATRIX_KEYPAD_ROWS = 240,\n    CFG_PIN_MATRIX_KEYPAD_ROW0 = 241,\n    CFG_PIN_MATRIX_KEYPAD_ROW1 = 242,\n    CFG_PIN_MATRIX_KEYPAD_ROW2 = 243,\n    CFG_PIN_MATRIX_KEYPAD_ROW3 = 244,\n    CFG_PIN_MATRIX_KEYPAD_ROW4 = 245,\n    CFG_PIN_MATRIX_KEYPAD_ROW5 = 246,\n    CFG_PIN_MATRIX_KEYPAD_ROW6 = 247,\n    CFG_PIN_MATRIX_KEYPAD_ROW7 = 248,\n    CFG_NUM_MATRIX_KEYPAD_COLS = 250,\n    CFG_PIN_MATRIX_KEYPAD_COL0 = 251,\n    CFG_PIN_MATRIX_KEYPAD_COL1 = 252,\n    CFG_PIN_MATRIX_KEYPAD_COL2 = 253,\n    CFG_PIN_MATRIX_KEYPAD_COL3 = 254,\n    CFG_PIN_MATRIX_KEYPAD_COL4 = 255,\n    CFG_PIN_MATRIX_KEYPAD_COL5 = 256,\n    CFG_PIN_MATRIX_KEYPAD_COL6 = 257,\n    CFG_PIN_MATRIX_KEYPAD_COL7 = 258,\n    CFG_PIN_B0 = 300,\n    CFG_PIN_B1 = 301,\n    CFG_PIN_B2 = 302,\n    CFG_PIN_B3 = 303,\n    CFG_PIN_B4 = 304,\n    CFG_PIN_B5 = 305,\n    CFG_PIN_B6 = 306,\n    CFG_PIN_B7 = 307,\n    CFG_PIN_B8 = 308,\n    CFG_PIN_B9 = 309,\n    CFG_PIN_B10 = 310,\n    CFG_PIN_B11 = 311,\n    CFG_PIN_B12 = 312,\n    CFG_PIN_B13 = 313,\n    CFG_PIN_B14 = 314,\n    CFG_PIN_B15 = 315,\n    CFG_PIN_B16 = 316,\n    CFG_PIN_B17 = 317,\n    CFG_PIN_B18 = 318,\n    CFG_PIN_B19 = 319,\n    CFG_PIN_B20 = 320,\n    CFG_PIN_B21 = 321,\n    CFG_PIN_B22 = 322,\n    CFG_PIN_B23 = 323,\n    CFG_PIN_B24 = 324,\n    CFG_PIN_B25 = 325,\n    CFG_PIN_B26 = 326,\n    CFG_PIN_B27 = 327,\n    CFG_PIN_B28 = 328,\n    CFG_PIN_B29 = 329,\n    CFG_PIN_B30 = 330,\n    CFG_PIN_B31 = 331,\n    CFG_PIN_C0 = 350,\n    CFG_PIN_C1 = 351,\n    CFG_PIN_C2 = 352,\n    CFG_PIN_C3 = 353,\n    CFG_PIN_C4 = 354,\n    CFG_PIN_C5 = 355,\n    CFG_PIN_C6 = 356,\n    CFG_PIN_C7 = 357,\n    CFG_PIN_C8 = 358,\n    CFG_PIN_C9 = 359,\n    CFG_PIN_C10 = 360,\n    CFG_PIN_C11 = 361,\n    CFG_PIN_C12 = 362,\n    CFG_PIN_C13 = 363,\n    CFG_PIN_C14 = 364,\n    CFG_PIN_C15 = 365,\n    CFG_PIN_C16 = 366,\n    CFG_PIN_C17 = 367,\n    CFG_PIN_C18 = 368,\n    CFG_PIN_C19 = 369,\n    CFG_PIN_C20 = 370,\n    CFG_PIN_C21 = 371,\n    CFG_PIN_C22 = 372,\n    CFG_PIN_C23 = 373,\n    CFG_PIN_C24 = 374,\n    CFG_PIN_C25 = 375,\n    CFG_PIN_C26 = 376,\n    CFG_PIN_C27 = 377,\n    CFG_PIN_C28 = 378,\n    CFG_PIN_C29 = 379,\n    CFG_PIN_C30 = 380,\n    CFG_PIN_C31 = 381,\n    CFG_PIN_P0 = 400,\n    CFG_PIN_P1 = 401,\n    CFG_PIN_P2 = 402,\n    CFG_PIN_P3 = 403,\n    CFG_PIN_P4 = 404,\n    CFG_PIN_P5 = 405,\n    CFG_PIN_P6 = 406,\n    CFG_PIN_P7 = 407,\n    CFG_PIN_P8 = 408,\n    CFG_PIN_P9 = 409,\n    CFG_PIN_P10 = 410,\n    CFG_PIN_P11 = 411,\n    CFG_PIN_P12 = 412,\n    CFG_PIN_P13 = 413,\n    CFG_PIN_P14 = 414,\n    CFG_PIN_P15 = 415,\n    CFG_PIN_P16 = 416,\n    CFG_PIN_P17 = 417,\n    CFG_PIN_P18 = 418,\n    CFG_PIN_P19 = 419,\n    CFG_PIN_P20 = 420,\n    CFG_PIN_P21 = 421,\n    CFG_PIN_P22 = 422,\n    CFG_PIN_P23 = 423,\n    CFG_PIN_P24 = 424,\n    CFG_PIN_P25 = 425,\n    CFG_PIN_P26 = 426,\n    CFG_PIN_P27 = 427,\n    CFG_PIN_P28 = 428,\n    CFG_PIN_P29 = 429,\n    CFG_PIN_P30 = 430,\n    CFG_PIN_P31 = 431,\n    CFG_PIN_P32 = 432,\n    CFG_PIN_P33 = 433,\n    CFG_PIN_P34 = 434,\n    CFG_PIN_P35 = 435,\n    CFG_PIN_P36 = 436,\n    CFG_PIN_P37 = 437,\n    CFG_PIN_P38 = 438,\n    CFG_PIN_P39 = 439,\n    CFG_PIN_P40 = 440,\n    CFG_PIN_P41 = 441,\n    CFG_PIN_P42 = 442,\n    CFG_PIN_P43 = 443,\n    CFG_PIN_P44 = 444,\n    CFG_PIN_P45 = 445,\n    CFG_PIN_P46 = 446,\n    CFG_PIN_P47 = 447,\n    CFG_PIN_P48 = 448,\n    CFG_PIN_P49 = 449,\n    CFG_PIN_P50 = 450,\n    CFG_PIN_P51 = 451,\n    CFG_PIN_P52 = 452,\n    CFG_PIN_P53 = 453,\n    CFG_PIN_P54 = 454,\n    CFG_PIN_P55 = 455,\n    CFG_PIN_P56 = 456,\n    CFG_PIN_P57 = 457,\n    CFG_PIN_P58 = 458,\n    CFG_PIN_P59 = 459,\n    CFG_PIN_P60 = 460,\n    CFG_PIN_P61 = 461,\n    CFG_PIN_P62 = 462,\n    CFG_PIN_P63 = 463,\n    CFG_PIN_LORA_MISO = 1001,\n    CFG_PIN_LORA_MOSI = 1002,\n    CFG_PIN_LORA_SCK = 1003,\n    CFG_PIN_LORA_CS = 1004,\n    CFG_PIN_LORA_BOOT = 1005,\n    CFG_PIN_LORA_RESET = 1006,\n    CFG_PIN_IRRXLED = 1007,\n    CFG_PIN_IRTXLED = 1008,\n    CFG_PIN_LCD_RESET = 1009,\n    CFG_PIN_LCD_ENABLE = 1010,\n    CFG_PIN_LCD_DATALINE4 = 1011,\n    CFG_PIN_LCD_DATALINE5 = 1012,\n    CFG_PIN_LCD_DATALINE6 = 1013,\n    CFG_PIN_LCD_DATALINE7 = 1014,\n    CFG_NUM_LCD_COLUMNS = 1015,\n    CFG_NUM_LCD_ROWS = 1016,\n    CFG_PIN_RCC0 = 1017,\n    CFG_PIN_RCC1 = 1018,\n    CFG_PIN_RCC2 = 1019,\n    CFG_PIN_RCC3 = 1020,\n    CFG_PIN_RCC4 = 1021,\n    CFG_PIN_RCC5 = 1022,\n    CFG_PIN_RCC6 = 1023,\n    CFG_PIN_RCC7 = 1024,\n    CFG_PIN_SERVO0 = 1025,\n    CFG_PIN_SERVO1 = 1026,\n    CFG_PIN_SERVO2 = 1027,\n    CFG_PIN_SERVO3 = 1028,\n    CFG_PIN_SERVO4 = 1029,\n    CFG_PIN_SERVO5 = 1030,\n    CFG_PIN_SERVO6 = 1031,\n    CFG_PIN_SERVO7 = 1032,\n    CFG_PIN_SERVO8 = 1033,\n    CFG_PIN_PI_TX = 1034,\n    CFG_PIN_PI_RX = 1035,\n    CFG_PIN_GPS_SDA = 1036,\n    CFG_PIN_GPS_SCL = 1037,\n    CFG_PIN_GPS_TX = 1038,\n    CFG_PIN_GPS_RX = 1039,\n    CFG_PIN_GROVE0 = 1040,\n    CFG_PIN_GROVE1 = 1041,\n    CFG_PIN_SS = 1042,\n    CFG_PIN_D33 = 183,\n    CFG_PIN_D34 = 184,\n    CFG_PIN_D35 = 185,\n    CFG_PIN_D36 = 186,\n    CFG_PIN_D37 = 187,\n    CFG_PIN_D38 = 188,\n    CFG_PIN_D39 = 189,\n    CFG_PIN_D40 = 190,\n    CFG_PIN_D41 = 191,\n    CFG_PIN_D42 = 192,\n    CFG_PIN_D43 = 193,\n    CFG_PIN_D44 = 194,\n    CFG_PIN_D45 = 195,\n    CFG_PIN_D46 = 196,\n    CFG_PIN_D47 = 197,\n    CFG_PIN_D48 = 198,\n    CFG_PIN_D49 = 199,\n    CFG_PIN_D50 = 259,\n    CFG_PIN_D51 = 260,\n    CFG_PIN_D52 = 261,\n    CFG_PIN_D53 = 262,\n    CFG_PIN_TX1 = 263,\n    CFG_PIN_TX2 = 264,\n    CFG_PIN_TX3 = 265,\n    CFG_PIN_RX1 = 266,\n    CFG_PIN_RX2 = 267,\n    CFG_PIN_RX3 = 268,\n    CFG_PIN_SCL1 = 269,\n    CFG_PIN_SDA1 = 270,\n    CFG_PIN_PCC_D0 = 271,\n    CFG_PIN_PCC_D1 = 272,\n    CFG_PIN_PCC_D2 = 273,\n    CFG_PIN_PCC_D3 = 274,\n    CFG_PIN_PCC_D4 = 275,\n    CFG_PIN_PCC_D5 = 276,\n    CFG_PIN_PCC_D6 = 277,\n    CFG_PIN_PCC_D7 = 278,\n    CFG_PIN_PCC_D8 = 279,\n    CFG_PIN_PCC_D9 = 280,\n    CFG_PIN_PCC_D10 = 281,\n    CFG_PIN_PCC_D11 = 282,\n    CFG_PIN_PCC_D12 = 283,\n    CFG_PIN_PCC_D13 = 284,\n    CFG_PIN_CC_DEN1 = 285,\n    CFG_PIN_CC_DEN2 = 286,\n    CFG_PIN_CC_CLK = 287,\n    CFG_PIN_XCC_CLK = 288,\n    CFG_PIN_JDPWR_PRE_SENSE = 1100,\n    CFG_PIN_JDPWR_GND_SENSE = 1101,\n    CFG_PIN_JDPWR_PULSE = 1102,\n    CFG_PIN_JDPWR_OVERLOAD_LED = 1103,\n    CFG_PIN_JDPWR_ENABLE = 1104,\n    CFG_PIN_JDPWR_FAULT = 1105,\n    // /pxtapp/hf2dbg.h\n    HF2DBG_H = 1,\n    // /pxtapp/pins.h\n    CFG_PIN_BTN_USER = 94,\n    CFG_PIN_RESET = 95,\n    CFG_PIN_HTS221_SDA = 96,\n    CFG_PIN_HTS221_SCL = 97,\n    CFG_PIN_LPS22HB_SDA = 98,\n    CFG_PIN_LPS22HB_SCL = 99,\n    CFG_PIN_VL53L0X_SDA = 132,\n    CFG_PIN_VL53L0X_SCL = 133,\n    CFG_PIN_VL53L0X_SHUT = 134,\n    CFG_PIN_LSM6DSL_SDA = 135,\n    CFG_PIN_LSM6DSL_SCL = 136,\n    CFG_PIN_BLE_SPI_MISO = 137,\n    CFG_PIN_BLE_SPI_MOSI = 138,\n    CFG_PIN_BLE_SPI_SCLK = 139,\n    CFG_PIN_BLE_SPI_CS = 140,\n    CFG_PIN_BLE_SPI_IRQ = 141,\n    CFG_PIN_BLE_RST = 142,\n    CFG_PIN_WIFI_ISM43362_MOSI = 224,\n    CFG_PIN_WIFI_ISM43362_MISO = 225,\n    CFG_PIN_WIFI_ISM43362_SCK = 226,\n    CFG_PIN_WIFI_ISM43362_CS = 227,\n    CFG_PIN_WIFI_ISM43362_COMMAND_DATA_READY = 228,\n    CFG_PIN_WIFI_ISM43362_RESET = 229,\n    CFG_PIN_WIFI_ISM43362_WAKE_UP = 230,\n    CFG_PIN_UART1_TX = 231,\n    CFG_PIN_UART1_RX = 232,\n    CFG_PIN_UART2_TX = 234,\n    CFG_PIN_UART2_RX = 235,\n    CFG_PIN_UART3_TX = 236,\n    CFG_PIN_UART3_RX = 237,\n    CFG_PIN_UART4_TX = 289,\n    CFG_PIN_UART4_RX = 290,\n    CFG_PIN_SPI1_MISO = 291,\n    CFG_PIN_SPI1_MOSI = 292,\n    CFG_PIN_SPI1_SCK = 293,\n    CFG_PIN_SPI2_MISO = 294,\n    CFG_PIN_SPI2_MOSI = 295,\n    CFG_PIN_SPI2_SCK = 296,\n    CFG_PIN_SPI3_MISO = 297,\n    CFG_PIN_SPI3_MOSI = 298,\n    CFG_PIN_SPI3_SCK = 299,\n    CFG_PIN_I2C1_SCL = 332,\n    CFG_PIN_I2C1_SDA = 333,\n    CFG_PIN_I2C2_SCL = 334,\n    CFG_PIN_I2C2_SDA = 335,\n    BUTTON_ACTIVE_HIGH_PULL_DOWN = 17,\n    BUTTON_ACTIVE_HIGH_PULL_UP = 33,\n    BUTTON_ACTIVE_HIGH_PULL_NONE = 49,\n    BUTTON_ACTIVE_LOW_PULL_DOWN = 16,\n    BUTTON_ACTIVE_LOW_PULL_UP = 32,\n    BUTTON_ACTIVE_LOW_PULL_NONE = 48,\n    // /pxtapp/platform.h\n    SETTINGS_MAGIC_0 = 273114691,\n    SETTINGS_MAGIC_1 = 781864998,\n    BOOT_RTC_SIGNATURE = 1906448503,\n    APP_RTC_SIGNATURE = 614608146,\n    PAGE_SIZE = 1024,\n    DEV_NUM_PINS = 64,\n    IMAGE_BITS = 4,\n    ALT0 = 0,\n    ALT1 = 256,\n    ALT2 = 512,\n    PA_0 = 0,\n    PA_0_ALT0 = 0,\n    PA_1 = 1,\n    PA_1_ALT0 = 1,\n    PA_2 = 2,\n    PA_2_ALT0 = 2,\n    PA_3 = 3,\n    PA_3_ALT0 = 3,\n    PA_4 = 4,\n    PA_4_ALT0 = 4,\n    PA_5 = 5,\n    PA_5_ALT0 = 5,\n    PA_6 = 6,\n    PA_6_ALT0 = 6,\n    PA_7 = 7,\n    PA_7_ALT0 = 7,\n    PA_7_ALT1 = 263,\n    PA_7_ALT2 = 519,\n    PA_8 = 8,\n    PA_9 = 9,\n    PA_10 = 10,\n    PA_11 = 11,\n    PA_12 = 12,\n    PA_13 = 13,\n    PA_14 = 14,\n    PA_15 = 15,\n    PA_15_ALT0 = 15,\n    PB_0 = 16,\n    PB_0_ALT0 = 16,\n    PB_0_ALT1 = 272,\n    PB_1 = 17,\n    PB_1_ALT0 = 17,\n    PB_1_ALT1 = 273,\n    PB_2 = 18,\n    PB_3 = 19,\n    PB_3_ALT0 = 19,\n    PB_4 = 20,\n    PB_4_ALT0 = 20,\n    PB_5 = 21,\n    PB_5_ALT0 = 21,\n    PB_6 = 22,\n    PB_6_ALT0 = 22,\n    PB_7 = 23,\n    PB_7_ALT0 = 23,\n    PB_8 = 24,\n    PB_8_ALT0 = 24,\n    PB_9 = 25,\n    PB_9_ALT0 = 25,\n    PB_10 = 26,\n    PB_11 = 27,\n    PB_12 = 28,\n    PB_13 = 29,\n    PB_13_ALT0 = 29,\n    PB_14 = 30,\n    PB_14_ALT0 = 30,\n    PB_14_ALT1 = 286,\n    PB_15 = 31,\n    PB_15_ALT0 = 31,\n    PB_15_ALT1 = 287,\n    PC_0 = 32,\n    PC_0_ALT0 = 32,\n    PC_0_ALT1 = 288,\n    PC_1 = 33,\n    PC_1_ALT0 = 33,\n    PC_1_ALT1 = 289,\n    PC_2 = 34,\n    PC_2_ALT0 = 34,\n    PC_2_ALT1 = 290,\n    PC_3 = 35,\n    PC_3_ALT0 = 35,\n    PC_3_ALT1 = 291,\n    PC_4 = 36,\n    PC_4_ALT0 = 36,\n    PC_5 = 37,\n    PC_5_ALT0 = 37,\n    PC_6 = 38,\n    PC_6_ALT0 = 38,\n    PC_7 = 39,\n    PC_7_ALT0 = 39,\n    PC_8 = 40,\n    PC_8_ALT0 = 40,\n    PC_9 = 41,\n    PC_9_ALT0 = 41,\n    PC_10 = 42,\n    PC_10_ALT0 = 42,\n    PC_11 = 43,\n    PC_11_ALT0 = 43,\n    PC_12 = 44,\n    PC_13 = 45,\n    PC_14 = 46,\n    PC_15 = 47,\n    PD_0 = 48,\n    PD_1 = 49,\n    PD_2 = 50,\n    PD_3 = 51,\n    PD_4 = 52,\n    PD_5 = 53,\n    PD_6 = 54,\n    PD_7 = 55,\n    PD_8 = 56,\n    PD_9 = 57,\n    PD_10 = 58,\n    PD_11 = 59,\n    PD_12 = 60,\n    PD_13 = 61,\n    PD_14 = 62,\n    PD_15 = 63,\n    PE_0 = 64,\n    PE_1 = 65,\n    PE_2 = 66,\n    PE_3 = 67,\n    PE_4 = 68,\n    PE_5 = 69,\n    PE_6 = 70,\n    PE_7 = 71,\n    PE_8 = 72,\n    PE_9 = 73,\n    PE_10 = 74,\n    PE_11 = 75,\n    PE_12 = 76,\n    PE_13 = 77,\n    PE_14 = 78,\n    PE_15 = 79,\n    // /pxtapp/pxt.h\n    PXT_COMM_BASE = 536879104,\n    PXT_CODAL = 1,\n    DEVICE_ID_BUTTON_SLIDE = 3000,\n    DEVICE_ID_MICROPHONE = 3001,\n    DEVICE_ID_FIRST_BUTTON = 4000,\n    DEVICE_ID_FIRST_TOUCHBUTTON = 4100,\n    PXT_INTERNAL_KEY_UP = 2050,\n    PXT_INTERNAL_KEY_DOWN = 2051,\n    // /pxtapp/pxtbase.h\n    PXT_UTF8 = 0,\n    PXT32 = 1,\n    PXT64 = 1,\n    PXT_REFCNT_FLASH = 65534,\n    VTABLE_MAGIC = 249,\n    VTABLE_MAGIC2 = 248,\n    Undefined = 0,\n    Boolean = 1,\n    Number = 2,\n    String = 3,\n    Object = 4,\n    Function = 5,\n    BoxedString = 1,\n    BoxedNumber = 2,\n    BoxedBuffer = 3,\n    RefAction = 4,\n    RefImage = 5,\n    RefCollection = 6,\n    RefRefLocal = 7,\n    RefMap = 8,\n    RefMImage = 9,\n    MMap = 10,\n    BoxedString_SkipList = 11,\n    BoxedString_ASCII = 12,\n    ZPin = 13,\n    User0 = 16,\n    IMAGE_HEADER_MAGIC = 135,\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    NUM_TRY_FRAME_REGS = 3,\n    GC = 0,\n    PXT_STRING_SKIP_INCR = 16,\n    // /pxtapp/pxtconfig.h\n    PXT_UF2_FAMILY = 1467308631,\n    // /pxtapp/uf2hid.h\n    UF2_HID_H = 1,\n}\n",
            "dmac.cpp": "#include \"dmac.h\"\n\nnamespace pxt {\n\n#ifdef CODAL_DMAC\nSINGLETON(WDMAC);\n#endif\n\n}",
            "dmac.h": "#ifndef __DMAC_H\n#define __DMAC_H\n\n#include \"pxt.h\"\n\nnamespace pxt {\n\n#ifdef CODAL_DMAC\nclass WDMAC {\n  public:\n    CODAL_DMAC dmac;\n\n    WDMAC() {}\n};\n\nWDMAC* getWDMAC();\n#endif\n\n}\n\n#endif",
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum PulseValue {\n    //% block=high\n    High = 4,  // DEVICE_PIN_EVT_PULSE_HI\n    //% block=low\n    Low = 5,  // DEVICE_PIN_EVT_PULSE_LO\n    }\n\n\n    declare const enum PinEvent {\n    //% block=\"pulse high\"\n    PulseHigh = 4,  // DEVICE_PIN_EVT_PULSE_HI\n    //% block=\"pulse low\"\n    PulseLow = 5,  // DEVICE_PIN_EVT_PULSE_LO\n    //% block=\"rise\"\n    Rise = 2,  // DEVICE_PIN_EVT_RISE\n    //% block=\"fall\"\n    Fall = 3,  // DEVICE_PIN_EVT_FALL\n    }\n\n\n    declare const enum PinPullMode {\n    //% block=\"down\"\n    PullDown = 0,\n    //% block=\"up\"\n    PullUp = 1,\n    //% block=\"none\"\n    PullNone = 2,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "hf2.cpp": "#include \"pxt.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#ifndef USB_HANDOVER\n#define USB_HANDOVER 1\n#endif\n\n#if USB_HANDOVER\n#define UF2_DEFINE_HANDOVER 1\n#endif\n\n#include \"uf2format.h\"\n\nstatic void *stackCopy;\nstatic uint32_t stackSize;\n\n//#define LOG DMESG\n#define LOG(...) ((void)0)\n\nstatic volatile bool resume = false;\n\nusing namespace codal;\n\n#ifdef HF2_HID\nstatic const char hidDescriptor[] = {\n    0x06, 0x97, 0xFF, // usage page vendor 0x97 (usage 0xff97 0x0001)\n    0x09, 0x01,       // usage 1\n    0xA1, 0x01,       // collection - application\n    0x15, 0x00,       // logical min 0\n    0x26, 0xFF, 0x00, // logical max 255\n    0x75, 8,          // report size 8\n    0x95, 64,         // report count 64\n    0x09, 0x01,       // usage 1\n    0x81, 0x02,       // input: data, variable, absolute\n    0x95, 64,         // report count 64\n    0x09, 0x01,       // usage 1\n    0x91, 0x02,       // output: data, variable, absolute\n    0x95, 1,          // report count 1\n    0x09, 0x01,       // usage 1\n    0xB1, 0x02,       // feature: data, variable, absolute\n    0xC0,             // end\n};\n\nstatic const HIDReportDescriptor reportDesc = {\n    9,\n    0x21,                  // HID\n    0x100,                 // hidbcd 1.00\n    0x00,                  // country code\n    0x01,                  // num desc\n    0x22,                  // report desc type\n    sizeof(hidDescriptor), // size of 0x22\n};\n\nstatic const InterfaceInfo ifaceInfoHID = {\n    &reportDesc,\n    sizeof(reportDesc),\n    1,\n    {\n        2,    // numEndpoints\n        0x03, /// class code - HID\n        0x00, // subclass\n        0x00, // protocol\n        0x02, // string\n        0x00, // alt\n    },\n    {USB_EP_TYPE_INTERRUPT, 1},\n    {USB_EP_TYPE_INTERRUPT, 1},\n};\n#endif\n\nstatic const InterfaceInfo ifaceInfoEP = {\n    NULL,\n    0,\n    2,\n    {\n        2,    // numEndpoints\n        0xff, /// class code - vendor-specific\n        42,   // subclass\n        1,    // protocol\n        0x02, // string\n        0x00, // alt\n    },\n    {USB_EP_TYPE_BULK, 0},\n    {USB_EP_TYPE_BULK, 0},\n};\n\nint HF2::stdRequest(UsbEndpointIn &ctrl, USBSetup &setup) {\n#ifdef HF2_HID\n    if (!useHID)\n        return DEVICE_NOT_SUPPORTED;\n    if (setup.bRequest == USB_REQ_GET_DESCRIPTOR) {\n        if (setup.wValueH == 0x21) {\n            InterfaceDescriptor tmp;\n            fillInterfaceInfo(&tmp);\n            return ctrl.write(&tmp, sizeof(tmp));\n        } else if (setup.wValueH == 0x22) {\n            return ctrl.write(hidDescriptor, sizeof(hidDescriptor));\n        }\n    }\n#endif\n    return DEVICE_NOT_SUPPORTED;\n}\n\n// same as in microbit\n#define CTRL_GET_REPORT 0x01\n#define CTRL_SET_REPORT 0x09\n#define CTRL_OUT_REPORT_H 0x2\n#define CTRL_IN_REPORT_H 0x1\n\nvoid HF2::sendBuffer(uint8_t flag, const void *data, unsigned size, uint32_t prepend) {\n    if (!CodalUSB::usbInstance->isInitialised())\n        return;\n\n    uint32_t buf[64 / 4]; // aligned\n\n    if (prepend + 1)\n        size += 4;\n\n    target_disable_irq();\n    while (size > 0) {\n        memset(buf + 1, 0, 60);\n        int s = 63;\n        if (size <= 63) {\n            s = size;\n            buf[0] = flag;\n        } else {\n            buf[0] = flag == HF2_FLAG_CMDPKT_LAST ? HF2_FLAG_CMDPKT_BODY : flag;\n        }\n        buf[0] |= s;\n        uint8_t *dst = (uint8_t *)buf;\n        dst++;\n        if (prepend + 1) {\n            memcpy(dst, &prepend, 4);\n            prepend = -1;\n            dst += 4;\n            s -= 4;\n            size -= 4;\n        }\n        memcpy(dst, data, s);\n        data = (const uint8_t *)data + s;\n        size -= s;\n\n        in->write(buf, sizeof(buf));\n    }\n    target_enable_irq();\n}\n\nconst InterfaceInfo *HF2::getInterfaceInfo() {\n#ifdef HF2_HID\n    if (useHID)\n        return &ifaceInfoHID;\n#endif\n    return &ifaceInfoEP;\n}\n\nint HF2::sendEvent(uint32_t evId, const void *data, int size) {\n    sendBuffer(HF2_FLAG_CMDPKT_LAST, data, size, evId);\n    return 0;\n}\n\nint HF2::sendSerial(const void *data, int size, int isError) {\n    if (!gotSomePacket)\n        return DEVICE_OK;\n\n    sendBuffer(isError ? HF2_FLAG_SERIAL_ERR : HF2_FLAG_SERIAL_OUT, data, size);\n\n    return 0;\n}\n\n// Receive HF2 message\n// Does not block. Will store intermediate data in pkt.\n// `serial` flag is cleared if we got a command message.\nint HF2::recv() {\n    uint8_t buf[64];\n\n    int len = out->read(buf, sizeof(buf));\n    // DMESG(\"HF2 read: %d\", len);\n\n    if (len <= 0)\n        return len;\n\n    uint8_t tag = buf[0];\n    // serial packets not allowed when in middle of command packet\n    usb_assert(pkt.size == 0 || !(tag & HF2_FLAG_SERIAL_OUT));\n    int size = tag & HF2_SIZE_MASK;\n    usb_assert(pkt.size + size <= (int)sizeof(pkt.buf));\n    memcpy(pkt.buf + pkt.size, buf + 1, size);\n    pkt.size += size;\n    tag &= HF2_FLAG_MASK;\n    if (tag != HF2_FLAG_CMDPKT_BODY) {\n        if (tag == HF2_FLAG_CMDPKT_LAST)\n            pkt.serial = 0;\n        else if (tag == HF2_FLAG_SERIAL_OUT)\n            pkt.serial = 1;\n        else\n            pkt.serial = 2;\n        int sz = pkt.size;\n        pkt.size = 0;\n        return sz;\n    }\n    return 0;\n}\n\nint HF2::sendResponse(int size) {\n    sendBuffer(HF2_FLAG_CMDPKT_LAST, pkt.buf, 4 + size);\n    return 0;\n}\n\nint HF2::sendResponseWithData(const void *data, int size) {\n    if (size <= (int)sizeof(pkt.buf) - 4) {\n        memcpy(pkt.resp.data8, data, size);\n        return sendResponse(size);\n    } else {\n        sendBuffer(HF2_FLAG_CMDPKT_LAST, data, size, pkt.resp.eventId);\n        return 0;\n    }\n}\n\nstatic void copy_words(void *dst0, const void *src0, uint32_t n_words) {\n    uint32_t *dst = (uint32_t *)dst0;\n    const uint32_t *src = (const uint32_t *)src0;\n    while (n_words--)\n        *dst++ = *src++;\n}\n\n#ifndef QUICK_BOOT\n#ifdef SAMD21\n#define DBL_TAP_PTR ((volatile uint32_t *)(HMCRAMC0_ADDR + HMCRAMC0_SIZE - 4))\n#endif\n#ifdef SAMD51\n#define DBL_TAP_PTR ((volatile uint32_t *)(HSRAM_ADDR + HSRAM_SIZE - 4))\n#endif\n#if defined(NRF52840) || defined(NRF52833)\n#define DBL_TAP_PTR ((volatile uint32_t*)0x20007F7C)\n#endif\n#define DBL_TAP_MAGIC_QUICK_BOOT 0xf02669ef\n#define QUICK_BOOT(v) *DBL_TAP_PTR = v ? DBL_TAP_MAGIC_QUICK_BOOT : 0\n#endif\n\nstatic HF2 *jdLogger;\nstatic void jdLog(const uint8_t *frame) {\n    jdLogger->sendEvent(HF2_EV_JDS_PACKET, frame, frame[2] + 12);\n}\n\nint HF2::endpointRequest() {\n    int sz = recv();\n\n    if (!sz)\n        return 0;\n\n    uint32_t tmp;\n\n    if (pkt.serial) {\n        // TODO raise some event?\n        return 0;\n    }\n\n    LOG(\"HF2 sz=%d CMD=%x\", sz, pkt.buf32[0]);\n\n    // one has to be careful dealing with these, as they share memory\n    HF2_Command *cmd = &pkt.cmd;\n    HF2_Response *resp = &pkt.resp;\n\n    uint32_t cmdId = cmd->command_id;\n    resp->tag = cmd->tag;\n    resp->status16 = HF2_STATUS_OK;\n\n#define checkDataSize(str, add) usb_assert(sz == 8 + (int)sizeof(cmd->str) + (int)(add))\n\n    lastExchange = current_time_ms();\n    gotSomePacket = true;\n\n    switch (cmdId) {\n    case HF2_CMD_INFO:\n        return sendResponseWithData(uf2_info(), strlen(uf2_info()));\n\n    case HF2_CMD_BININFO:\n        resp->bininfo.mode = HF2_MODE_USERSPACE;\n        resp->bininfo.flash_page_size = 0;\n        resp->bininfo.flash_num_pages = 0;\n        resp->bininfo.max_message_size = sizeof(pkt.buf);\n        resp->bininfo.uf2_family = PXT_UF2_FAMILY;\n        return sendResponse(sizeof(resp->bininfo));\n\n    case HF2_DBG_RESTART:\n        *HF2_DBG_MAGIC_PTR = HF2_DBG_MAGIC_START;\n        target_reset();\n        break;\n\n    case HF2_CMD_RESET_INTO_APP:\n        QUICK_BOOT(1);\n        NVIC_SystemReset();\n        break;\n    case HF2_CMD_RESET_INTO_BOOTLOADER:\n        QUICK_BOOT(0);\n        NVIC_SystemReset();\n        break;\n\n#if USB_HANDOVER\n    case HF2_CMD_START_FLASH:\n        sendResponse(0);\n        hf2_handover(in->ep);\n        usb_assert(0); // should not be reached\n        break;\n#endif\n\n    case HF2_CMD_WRITE_WORDS:\n        checkDataSize(write_words, cmd->write_words.num_words << 2);\n        copy_words((void *)cmd->write_words.target_addr, cmd->write_words.words,\n                   cmd->write_words.num_words);\n        break;\n\n    case HF2_CMD_READ_WORDS:\n        checkDataSize(read_words, 0);\n        tmp = cmd->read_words.num_words;\n        usb_assert(tmp <= sizeof(pkt.buf) / 4 - 1);\n        copy_words(resp->data32, (void *)cmd->read_words.target_addr, tmp);\n        return sendResponse(tmp << 2);\n\n    case HF2_CMD_DMESG:\n#if DEVICE_DMESG_BUFFER_SIZE > 0\n        return sendResponseWithData(codalLogStore.buffer, codalLogStore.ptr);\n#else\n        break;\n#endif\n\n    case HF2_DBG_GET_GLOBAL_STATE: {\n        HF2_GLOBAL_STATE_Result gstate = {\n            .num_globals = (uint32_t)getNumGlobals(), //\n            .globals_addr = (uint32_t)globals,\n        };\n        return sendResponseWithData(&gstate, sizeof(gstate));\n    }\n\n    case HF2_DBG_RESUME:\n        globals[0] = (TValue)cmd->data32[0];\n        resume = true;\n        return sendResponse(0);\n\n    case HF2_DBG_GET_STACK:\n        return sendResponseWithData(stackCopy, stackSize);\n\n    case HF2_CMD_JDS_CONFIG:\n        if (cmd->data8[0]) {\n            jdLogger = this;\n            pxt::logJDFrame = jdLog;\n        } else {\n            pxt::logJDFrame = NULL;\n        }\n        return sendResponse(0);\n\n    case HF2_CMD_JDS_SEND:\n        if (pxt::sendJDFrame) {\n            pxt::sendJDFrame(cmd->data8);\n            return sendResponse(0);\n        } else {\n            resp->status16 = HF2_STATUS_INVALID_STATE;\n            return sendResponse(0);\n        }\n\n    default:\n        // command not understood\n        resp->status16 = HF2_STATUS_INVALID_CMD;\n        break;\n    }\n\n    return sendResponse(0);\n}\n\nHF2::HF2(HF2_Buffer &p) : gotSomePacket(false), ctrlWaiting(false), pkt(p), useHID(false) {\n    lastExchange = 0;\n}\n\nstatic const InterfaceInfo dummyIfaceInfo = {\n    NULL,\n    0,\n    0,\n    {\n        0,    // numEndpoints\n        0xff, /// class code - vendor-specific\n        0xff, // subclass\n        0xff, // protocol\n        0x00, // string\n        0x00, // alt\n    },\n    {0, 0},\n    {0, 0},\n};\n\nconst InterfaceInfo *DummyIface::getInterfaceInfo() {\n    return &dummyIfaceInfo;\n}\n\n//\n//\n// Debugger\n//\n//\n\nstruct ExceptionContext {\n    uint32_t excReturn; // 0xFFFFFFF9\n    uint32_t r0;\n    uint32_t r1;\n    uint32_t r2;\n    uint32_t r3;\n    uint32_t r12;\n    uint32_t lr;\n    uint32_t faultInstrAddr;\n    uint32_t psr;\n};\n\nstruct Paused_Data {\n    uint32_t pc;\n};\nstatic Paused_Data pausedData;\n\nvoid bkptPaused() {\n\n// waiting for https://github.com/lancaster-university/codal/pull/14\n#ifdef DEVICE_GROUP_ID_USER\n    // the loop below counts as \"system\" task, and we don't want to pause ourselves\n    fiber_set_group(DEVICE_GROUP_ID_SYSTEM);\n    // pause everyone else\n    fiber_pause_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    while (!resume) {\n        // DMESG(\"BKPT\");\n        hf2.pkt.resp.eventId = HF2_EV_DBG_PAUSED;\n        hf2.sendResponseWithData(&pausedData, sizeof(pausedData));\n        // TODO use an event\n        for (int i = 0; i < 20; ++i) {\n            if (resume)\n                break;\n            fiber_sleep(50);\n        }\n    }\n\n    if (stackCopy) {\n        xfree(stackCopy);\n        stackCopy = NULL;\n    }\n\n#ifdef DEVICE_GROUP_ID_USER\n    fiber_resume_group(DEVICE_GROUP_ID_USER);\n    // go back to user mode\n    fiber_set_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    resume = false;\n}\n\nextern \"C\" void handleHardFault(ExceptionContext *ectx) {\n    auto instr = (uint16_t *)ectx->faultInstrAddr;\n\n    DMESG(\"FLT %p\", instr);\n\n    if (ectx->faultInstrAddr & 0x80000000) {\n        ectx->faultInstrAddr &= ~0x80000000;\n        // switch to step-over mode\n        globals[0] = (TValue)3;\n        return;\n    }\n\n    DMESG(\"BB %p %p %p lr=%p r0=%p\", instr[-1], instr[0], instr[1], ectx->lr, ectx->r0);\n\n    if (instr[0] == 0x6840) {\n        // ldr r0, [r0, #4] -- entry breakpoint\n        ectx->faultInstrAddr += 2;\n        // we're being ask for step-over mode\n        if (ectx->r0 == 3) {\n            // switch to debugger-attached-no-stepping mode\n            globals[0] = (TValue)0;\n            ectx->lr |= 0x80000000;\n        }\n        return;\n    }\n\n    if (instr[0] == 0x6800) {\n        // ldr r0, [r0, #0]\n        ectx->lr = ectx->faultInstrAddr + 3; // next instruction + thumb mode\n        pausedData.pc = ectx->faultInstrAddr + 2;\n        void *ssp = (void *)(ectx + 1);\n        stackSize = DEVICE_STACK_BASE - (uint32_t)ssp;\n        if (stackCopy)\n            xfree(stackCopy);\n        stackCopy = xmalloc(stackSize);\n        memcpy(stackCopy, ssp, stackSize);\n        ectx->faultInstrAddr = ((uint32_t)(&bkptPaused) & (~1U));\n        return;\n    }\n\n    while (1) {\n    }\n}\n\nextern \"C\" void HardFault_Handler(void) {\n    asm(\"push {lr}; mov r0, sp; bl handleHardFault; pop {pc}\");\n}\n\n#endif",
            "hf2.h": "#ifndef DEVICE_HF2_H\n#define DEVICE_HF2_H\n\n#if CONFIG_ENABLED(DEVICE_USB)\n\n#include \"HID.h\"\n#include \"uf2hid.h\"\n\n// 260 bytes needed for biggest JD packets (with overheads)\n#define HF2_BUF_SIZE 260\n\ntypedef struct {\n    uint16_t size;\n    uint8_t serial;\n    union {\n        uint8_t buf[HF2_BUF_SIZE];\n        uint32_t buf32[HF2_BUF_SIZE / 4];\n        uint16_t buf16[HF2_BUF_SIZE / 2];\n        HF2_Command cmd;\n        HF2_Response resp;\n    };\n} HF2_Buffer;\n\nclass HF2 : public CodalUSBInterface {\n    bool gotSomePacket;\n    bool ctrlWaiting;\n    uint32_t lastExchange;\n\n  public:\n    HF2_Buffer &pkt;\n\n    bool useHID;\n\n    int sendResponse(int size);\n    int recv();\n    int sendResponseWithData(const void *data, int size);\n    int sendEvent(uint32_t evId, const void *data, int size);\n    void sendBuffer(uint8_t flag, const void *data, unsigned size, uint32_t prepend = -1);\n\n    HF2(HF2_Buffer &pkt);\n    virtual int endpointRequest();\n    virtual int stdRequest(UsbEndpointIn &ctrl, USBSetup &setup);\n    virtual const InterfaceInfo *getInterfaceInfo();\n    int sendSerial(const void *data, int size, int isError = 0);\n\n    virtual bool enableWebUSB() { return !useHID; }\n};\n\nclass DummyIface : public CodalUSBInterface {\n  public:\n    virtual const InterfaceInfo *getInterfaceInfo();\n};\n\n#endif\n\n#endif\n",
            "hf2dbg.h": "#ifndef HF2DBG_H\n#define HF2DBG_H 1\n\n// we use a location at the top of the stack to store a magic value\n// which causes us to stop at the very first break point in the program\n#define HF2_DBG_MAGIC_PTR ((uint32_t *)(DEVICE_STACK_BASE - (DEVICE_STACK_SIZE - 4)))\n#define HF2_DBG_MAGIC_START 0xf0ebac7f\n\n#define HF2_DBG_GET_GLOBAL_STATE 0x53fc66e0\nstruct HF2_GLOBAL_STATE_Result {\n    uint32_t num_globals;\n    uint32_t globals_addr;\n};\n\n#define HF2_DBG_RESTART 0x1120bd93\n#define HF2_DBG_RESUME 0x27a55931\n#define HF2_EV_DBG_PAUSED 0x3692f9fd\n#define HF2_DBG_GET_STACK 0x70901510\n\n#endif\n",
            "i2c.cpp": "#include \"pxt.h\"\n#include \"ErrorNo.h\"\n#include \"CodalDmesg.h\"\n#include \"configkeys.h\"\n\n#ifdef CODAL_I2C\n\nnamespace pins {\n\nclass CodalI2CProxy {\nprivate:\n  DevicePin* sda;\n  DevicePin* scl;\n  CODAL_I2C i2c;\npublic:\n  CodalI2CProxy* next;\npublic:\n  CodalI2CProxy(DevicePin* _sda, DevicePin* _scl)\n    : sda(_sda)\n    , scl(_scl)\n    , i2c(*_sda, *_scl) \n    , next(NULL)\n  {\n\n  }\n\n  CODAL_I2C* getI2C() {\n    return &(this->i2c);\n  }\n  \n  bool matchPins(DevicePin* sda, DevicePin* scl) {\n      return this->sda == sda && this->scl == scl;\n  }\n\n  Buffer readBuffer(int address, int size, bool repeat = false)\n  {\n    Buffer buf = mkBuffer(NULL, size);\n    registerGCObj(buf);\n    int status = this->i2c.read(address << 1, buf->data, size, repeat);\n    unregisterGCObj(buf);\n    if (status != ErrorCode::DEVICE_OK) {\n      buf = 0;\n    }\n    return buf;\n  }\n\n  int writeBuffer(int address, Buffer buf, bool repeat = false)\n  {\n    return this->i2c.write(address << 1, buf->data, buf->length, repeat);\n  }\n};\n\n}\n\nnamespace I2CMethods {\n/**\n  * Read `size` bytes from a 7-bit I2C `address`.\n  */\n//%\nBuffer readBuffer(I2C_ i2c, int address, int size, bool repeat = false)\n{\n  return i2c->readBuffer(address, size, repeat);\n}\n\n/**\n  * Write bytes to a 7-bit I2C `address`.\n  */\n//%\nint writeBuffer(I2C_ i2c, int address, Buffer buf, bool repeat = false)\n{\n  return i2c->writeBuffer(address, buf, repeat);\n}\n\n}\n\nnamespace pins {\n\nstatic I2C_ i2cs(NULL);\n/**\n* Opens a Serial communication driver\n*/\n//% help=pins/create-i2c\n//% parts=i2c\nI2C_ createI2C(DigitalInOutPin sda, DigitalInOutPin scl) {\n  // pick up defaults\n  if (!sda || !scl) {\n    DMESG(\"i2c: lookup default pins\");\n    sda = LOOKUP_PIN(SDA);\n    scl = LOOKUP_PIN(SCL);\n  }\n\n  // lookup existing devices\n  auto dev = i2cs;\n  while(dev) {\n    if (dev->matchPins(sda, scl)) {\n      DMESG(\"i2c: found existing i2c\");\n      return dev;\n    }\n    dev = dev->next;\n  }\n\n  // allocate new one\n  DMESG(\"i2c: mounting on new device\");\n  auto ser = new CodalI2CProxy(sda, scl);\n  // push in list\n  ser->next = i2cs;\n  i2cs = ser;\n  return ser;\n}\n\n}\n\nnamespace pxt {\n  CODAL_I2C* getI2C(DigitalInOutPin sda, DigitalInOutPin scl) {\n    auto i2c = pins::createI2C(sda, scl);\n    return i2c->getI2C();\n  }\n}\n\n#endif",
            "i2c.ts": "namespace pins {\n    /**\n     * Read one number from an I2C address.\n     */\n    //% help=pins/i2c-read-number weight=5 group=\"i2c\" inlineInputMode=\"external\"\n    //% blockId=pins_i2c_readnumber block=\"i2c read number at address %address|of format %format|repeated %repeated\"\n    export function i2cReadNumber(address: number, format: NumberFormat, repeated?: boolean): number {\n        const buf = pins.i2cReadBuffer(address, pins.sizeOf(format), repeated)\n        if (!buf)\n            return undefined\n        return buf.getNumber(format, 0)\n    }\n\n    /**\n     * Write one number to an I2C address.\n     */\n    //% help=pins/i2c-write-number weight=4 group=\"i2c\"\n    //% blockId=i2c_writenumber block=\"i2c write number|at address %address|with value %value|of format %format|repeated %repeated\"\n    export function i2cWriteNumber(address: number, value: number, format?: NumberFormat, repeated?: boolean): void {\n        if (format == undefined)\n            format = NumberFormat.UInt8LE;\n        const buf = control.createBuffer(pins.sizeOf(format))\n        buf.setNumber(format, 0, value)\n        pins.i2cWriteBuffer(address, buf, repeated)\n    }\n\n    /**\n     * Write a value in a I2C register.\n     * @param address I2c address of the device\n     * @param register register index\n     * @param value value to write\n     * @param valueFormat format of the value, default is UInt8LE\n     */\n    //% weight=3 group=\"i2c\"\n    //% help=pins/i2c-write-register\n    //% blockId=i2c_writereg block=\"i2c write register|at address $address|at register $register|value $value\"\n    export function i2cWriteRegister(address: number, register: number, value: number, valueFormat?: NumberFormat): void {\n        if (valueFormat === undefined)\n            valueFormat = NumberFormat.UInt8LE;\n        const valueSize = pins.sizeOf(valueFormat);\n        const buf = control.createBuffer(1 + valueSize);\n        buf.setNumber(NumberFormat.UInt8LE, 0, register);\n        buf.setNumber(valueFormat, 1, value);\n        pins.i2cWriteBuffer(address, buf);\n    }\n\n    /**\n     * Read the value from a I2C register.\n     * @param address I2c address of the device\n     * @param register register index\n     * @param valueFormat format of the value, default is UInt8LE\n     */\n    //% weight=3 group=\"i2c\"\n    //% help=pins/i2c-read-register\n    //% blockId=i2c_readreg block=\"i2c read register|at address $address|at register $register\"\n    export function i2cReadRegister(address: number, register: number, valueFormat?: NumberFormat): number {\n        if (valueFormat === undefined)\n            valueFormat = NumberFormat.UInt8LE;\n        pins.i2cWriteNumber(address, register, NumberFormat.UInt8LE);\n        return pins.i2cReadNumber(address, valueFormat);\n    }\n\n    /**\n     * Read `size` bytes from a 7-bit I2C `address`.\n     */\n    //%\n    export function i2cReadBuffer(address: number, size: number, repeat: boolean = false): Buffer {\n        return pins.i2c().readBuffer(address, size, repeat);\n    }\n\n    /**\n     * Write bytes to a 7-bit I2C `address`.\n     */\n    //%\n    export function i2cWriteBuffer(address: number, buf: Buffer, repeat: boolean = false): number {\n        return pins.i2c().writeBuffer(address, buf, repeat);\n    }\n\n    let _i2c: I2C;\n    /**\n     * Gets the default I2C bus\n     */\n    //%\n    export function i2c(): I2C {\n        if (!_i2c) {\n            const sda = pins.pinByCfg(DAL.CFG_PIN_SDA);\n            const scl = pins.pinByCfg(DAL.CFG_PIN_SCL);\n            _i2c = pins.createI2C(sda, scl);    \n        }\n        return _i2c;        \n    }\n\n    export class I2CDevice {\n        public address: number;\n        public bus: I2C;\n        private _hasError: boolean;\n        constructor(address: number, bus?: I2C) {\n            this.address = address;\n            this.bus = bus || i2c();\n        }\n        public readInto(buf: Buffer, repeat = false, start = 0, end: number = null) {\n            if (end === null)\n                end = buf.length\n            if (start >= end)\n                return\n            let res = this.bus.readBuffer(this.address, end - start, repeat)\n            if (!res) {\n                this._hasError = true\n                return\n            }\n            buf.write(start, res)\n        }\n        public write(buf: Buffer, repeat = false) {\n            let res = this.bus.writeBuffer(this.address, buf, repeat)\n            if (res) {\n                this._hasError = true\n            }\n        }\n        public begin(): I2CDevice {\n            this._hasError = false;\n            return this;\n        }\n        public end() {\n        }\n        public ok() {\n            return !this._hasError\n        }\n\n        public transfer(command: Buffer, response: Buffer, responseStart?: number, responseEnd?: number) {\n            this.begin();\n            if (command)\n                this.write(command);\n            if (response)\n                this.readInto(response, false, responseStart, responseEnd);\n            this.end();\n        }    \n    }\n}\n",
            "keyvaluestorage.cpp": "#include \"pxt.h\"\n#include \"KeyValueStorage.h\"\n\nnamespace pxt {\n\nclass WKeyValueStorage {\n#ifdef CODAL_NVMCONTROLLER\n    CODAL_NVMCONTROLLER controller;\n#else\n    NVMController controller;\n#endif\n    KeyValueStorage storage;\n  public:\n\n    WKeyValueStorage()\n    : controller()\n    , storage(controller) {\n    }\n\n    bool isSupported() {\n#ifdef CODAL_NVMCONTROLLER\n      return true;\n#else\n      return false;\n#endif\n    }\n\n    int put(String key, Buffer data) {\n#ifdef CODAL_NVMCONTROLLER\n        ManagedString mkey(key->getUTF8Data(), key->getUTF8Size());\n        return storage.put(mkey, data->data, data->length);\n#else\n        return -1;\n#endif\n    }\n\n    Buffer get(String key) {\n#ifdef CODAL_NVMCONTROLLER\n        Buffer buf = NULL;\n        ManagedString mkey(key->getUTF8Data(), key->getUTF8Size());\n        auto entry = storage.get(mkey);\n        if (entry) {\n          buf = mkBuffer(entry->value, sizeof(entry->value));\n          free(entry);\n        }\n        return buf;\n#else\n        return NULL;\n#endif\n    }\n\n    void remove(String key) {\n#ifdef CODAL_NVMCONTROLLER\n        ManagedString mkey(key->getUTF8Data(), key->getUTF8Size());\n        storage.remove(mkey);\n#endif\n    }\n\n    void clear() {\n#ifdef CODAL_NVMCONTROLLER\n        storage.wipe();\n#endif\n    }\n};\nSINGLETON(WKeyValueStorage);\n\n}\n\nnamespace configStorage {\n  /**\n  * Puts an entry in the device storage. Key may have up to 16 characters (bytes).\n  * @param key the identifier (max 16 characters)\n  * @param value the data (max 32 characters)\n  */\n  //%\n  void setBuffer(String key, Buffer value) {\n    auto kvm = pxt::getWKeyValueStorage();\n    kvm->put(key, value);\n  }\n\n  /**\n  * Gets an entry from the device storage. Key may have up to 16 characters (bytes).\n  * @param key the identifier (max 16 characters)\n  */\n  //%\n  Buffer getBuffer(String key) {\n    auto kvm = pxt::getWKeyValueStorage();\n    return kvm->get(key);\n  }\n\n  /**\n  * Removes the key from local storage\n  * @param key the identifier (max 16 characters)\n  */\n  //%\n  void removeItem(String key) {\n    auto kvm = pxt::getWKeyValueStorage();\n    kvm->remove(key);\n  }\n\n  /**\n  * Clears the local storage\n  */\n  //%\n  void clear() {\n    auto kvm = pxt::getWKeyValueStorage();\n    kvm->clear();\n  }\n}\n",
            "keyvaluestorage.ts": "namespace configStorage {\n    /**\n     * Stores the value at the key entry\n     * @param key identifier of the key (max 16 characters)\n     * @param value identifier of the value (max 32 characters)\n     */\n    export function setItem(key: string, value: string) {\n        if (value == null)\n            configStorage.removeItem(key);\n        else\n        {\n            let idx = 0;\n            let buf = control.createBuffer(value.length + 1);\n            buf[idx++] = value.length;\n            let valBuf = control.createBufferFromUTF8(value);\n\n            for (let i = 0; i < valBuf.length; i++)\n                buf[idx++] = valBuf[i];\n\n            configStorage.setBuffer(key, buf);\n        }\n    }\n\n    /**\n     * Retrieves the value at the key entry\n     * @param key identifier of the key (max 16 characters)\n     */\n    export function getItem(key: string): string {\n        const buf = configStorage.getBuffer(key);\n\n        if (!buf)\n            return undefined;\n\n        let idx = 0;\n        let count = buf[idx++];\n        const retBuf = control.createBuffer(count);\n\n        for (let i = 0; i < count; i++)\n            retBuf[i] = buf[idx++];\n\n        return retBuf.toString();\n    }\n}\n",
            "leveldetector.ts": "namespace pins {\n    export class LevelDetector {\n        public id: number;\n        public min: number;\n        public max: number;\n        public lowThreshold: number;\n        public highThreshold: number;\n        private transition: number;\n        private transitionMs: number;\n        private _level: number;\n        private _state: number;\n        public onHigh: () => void;\n        public onLow: () => void;\n        public onNeutral: () => void;\n        public transitionWindow: number;\n        // minimum duration (ms) between events\n        public transitionInterval: number;\n\n        static LEVEL_THRESHOLD_NEUTRAL = 0;\n\n        constructor(id: number,\n            min: number, max: number,\n            lowThreshold: number, highThreshold: number) {\n            this.id = id;\n            this.min = min;\n            this.max = max;\n            this.lowThreshold = lowThreshold;\n            this.highThreshold = highThreshold;\n            this.transitionWindow = 4;\n            this.transitionInterval = 0;\n\n            this.onHigh = () => control.raiseEvent(this.id, DAL.LEVEL_THRESHOLD_HIGH);\n            this.onLow = () => control.raiseEvent(this.id, DAL.LEVEL_THRESHOLD_LOW);\n            this.onNeutral = undefined;\n\n            this.reset();\n        }\n\n        reset() {\n            this.transition = 0;\n            this.transitionMs = 0;\n            this._level = Math.ceil((this.highThreshold - this.lowThreshold) / 2);\n            this._state = LevelDetector.LEVEL_THRESHOLD_NEUTRAL;\n        }\n\n        get level(): number {\n            return this._level;\n        }\n\n        set level(level: number) {\n            this._level = this.clampValue(level);\n\n            if (this._level >= this.highThreshold) {\n                this.setState(DAL.LEVEL_THRESHOLD_HIGH);\n            }\n            else if (this._level <= this.lowThreshold) {\n                this.setState(DAL.LEVEL_THRESHOLD_LOW);\n            }\n            else {\n                this.setState(LevelDetector.LEVEL_THRESHOLD_NEUTRAL);\n            }\n        }\n\n        public setLowThreshold(value: number) {\n            this.lowThreshold = this.clampValue(value);\n            this.reset();\n        }\n\n        public setHighThreshold(value: number) {\n            this.highThreshold = this.clampValue(value);\n            this.reset();\n        }\n\n        private clampValue(value: number) {\n            if (value < this.min) {\n                return this.min;\n            }\n            else if (value > this.max) {\n                return this.max;\n            }\n            return value;\n        }\n\n        private setState(state: number) {\n            // not enough samples to change\n            if (this._state === state \n                || (this.transition++ < this.transitionWindow)\n                || (control.millis() - this.transitionMs) < this.transitionInterval) {\n                return;\n            }\n\n            this.transition = 0;\n            this.transitionMs = control.millis();\n            this._state = state;\n            switch (state) {\n                case DAL.LEVEL_THRESHOLD_HIGH:\n                    if (this.onHigh) this.onHigh();\n                    break;\n                case DAL.LEVEL_THRESHOLD_LOW:\n                    if (this.onLow) this.onLow();\n                    break;\n                case LevelDetector.LEVEL_THRESHOLD_NEUTRAL:\n                    if (this.onNeutral) this.onNeutral();\n                    break;\n            }\n        }\n    }\n}",
            "light.cpp": "#include \"light.h\"\n\n// WS2812B timings, datasheet v1\n// 0 - 0.25-0.55us hi 0.70-1.00us low\n// 1 - 0.65-0.95us hi 0.30-0.60us low\n// datasheet v5\n// 0 - 0.22-0.38us hi 0.58-1.00us low 1-3\n// 1 - 0.58-1.00us hi 0.58-1.00us low 3-2\n\n#define SPI_SUPPORTED 1\n\n#if defined(NRF52_SERIES)\n#define BIT_EXPANSION 5\n#define SPI_FREQ 4000000\n#else\n#define BIT_EXPANSION 3\n#define SPI_FREQ 2400000\n#endif\n\n#if defined(SAMD21) || defined(SAMD51) || defined(NRF52_SERIES)\n#include \"neopixel.h\"\n#define BITBANG_SUPPORTED 1\n#else\n#define BITBANG_SUPPORTED 0\n#endif\n\n#define NEOPIXEL_MIN_LENGTH_FOR_SPI 24\n#define DOTSTAR_MIN_LENGTH_FOR_SPI 24\n\n#define LIGHTMODE_RGB 1\n#define LIGHTMODE_RGBW 2\n#define LIGHTMODE_RGB_RGB 3\n#define LIGHTMODE_DOTSTAR 4\n\nnamespace light {\nbool isValidMOSIPin(DigitalInOutPin pin) {\n    if (!pin)\n        return false;\n\n#if SAMD51\n    return ZSPI::isValidMOSIPin(*pin);\n#elif defined(NRF52_SERIES)\n    return true;\n#else\n    // TODO: support for SPI neopixels\n    // default SPI pins supported for now\n    return pin == LOOKUP_PIN(MOSI);\n#endif\n}\n\n// SPI\nvoid spiNeopixelSendBuffer(DevicePin *pin, const uint8_t *data, unsigned size) {\n    int32_t iptr = 0, optr = 120;\n    uint32_t len = optr + size * BIT_EXPANSION + 120;\n    uint8_t *expBuf = new uint8_t[len];\n    memset(expBuf, 0, len);\n    uint8_t imask = 0x80;\n    uint8_t omask = 0x80;\n\n#define WR(k)                                                                                      \\\n    if (k)                                                                                         \\\n        expBuf[optr] |= omask;                                                                     \\\n    omask >>= 1;                                                                                   \\\n    if (!omask) {                                                                                  \\\n        omask = 0x80;                                                                              \\\n        optr++;                                                                                    \\\n    }\n\n    while (iptr < (int)size) {\n#if BIT_EXPANSION == 3\n        WR(1);\n        WR(data[iptr] & imask);\n        WR(0);\n#elif BIT_EXPANSION == 5\n        WR(1);\n        if (data[iptr] & imask) {\n            WR(1);\n            WR(1);\n        } else {\n            WR(0);\n        }\n        WR(0);\n        WR(0);\n#else\n#error \"invalid BIT_EXPANSION\"\n#endif\n\n        imask >>= 1;\n        if (!imask) {\n            imask = 0x80;\n            iptr++;\n        }\n    }\n\n    auto spi = pxt::getSPI(pin, NULL, NULL);\n    spi->setFrequency(SPI_FREQ);\n    spi->transfer(expBuf, len, NULL, 0);\n    delete expBuf;\n}\n\nvoid neopixelSendData(DevicePin *pin, int mode, const uint8_t *data, unsigned length) {\n    if (!pin || !length)\n        return;\n\n#if BITBANG_SUPPORTED\n    if (SPI_SUPPORTED && length > NEOPIXEL_MIN_LENGTH_FOR_SPI && isValidMOSIPin(pin))\n        spiNeopixelSendBuffer(pin, data, length);\n    else\n        neopixel_send_buffer(*pin, data, length);\n#else\n    if (isValidMOSIPin(pin)) {\n        spiNeopixelSendBuffer(pin, data, length);\n    }\n#endif\n}\n\nvoid bitBangDotStarSendData(DevicePin *data, DevicePin *clk, int mode, const uint8_t *buf,\n                            unsigned length) {\n    // first frame of zeroes\n    data->setDigitalValue(0);\n    for (unsigned i = 0; i < 32; ++i) {\n        clk->setDigitalValue(1);\n        clk->setDigitalValue(0);\n    }\n\n    // data stream\n    for (unsigned i = 0; i < length; ++i) {\n        auto x = buf[i];\n        for (uint8_t j = 0x80; j != 0; j >>= 1) {\n            data->setDigitalValue(x & j ? 1 : 0);\n            clk->setDigitalValue(1);\n            clk->setDigitalValue(0);\n        }\n    }\n    // https://cpldcpu.wordpress.com/2016/12/13/sk9822-a-clone-of-the-apa102/\n    // reset frame\n    // data->setDigitalValue(0);\n    // for (unsigned i = 0; i < 32 ; ++i) {\n    //    clk->setDigitalValue(1);\n    //    clk->setDigitalValue(0);\n    //}\n\n    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/\n    data->setDigitalValue(1);\n    unsigned n = 32;\n    for (unsigned i = 0; i < n; ++i) {\n        clk->setDigitalValue(1);\n        clk->setDigitalValue(0);\n    }\n}\n\nstatic uint8_t ZERO_FRAME[4];\nstatic uint8_t ONE_FRAME[] = {1, 1, 1, 1};\nvoid spiDotStarSendData(DevicePin *data, DevicePin *clk, int mode, const uint8_t *buf,\n                        unsigned length) {\n    auto spi = pxt::getSPI(data, NULL, clk);\n\n    spi->transfer(ZERO_FRAME, sizeof(ZERO_FRAME), NULL, 0); // initial frame\n    spi->transfer(buf, length, NULL, 0);\n    spi->transfer(ZERO_FRAME, sizeof(ZERO_FRAME), NULL, 0); // reset frame\n    for (unsigned i = 0; i < (length >> 3); i += 32)\n        spi->transfer(ONE_FRAME, sizeof(ONE_FRAME), NULL, 0); // final frame\n}\n\nvoid dotStarSendData(DevicePin *data, DevicePin *clk, int mode, const uint8_t *buf,\n                     unsigned length) {\n    if (!data || !clk || !buf || !length)\n        return;\n\n    if (length > DOTSTAR_MIN_LENGTH_FOR_SPI && isValidMOSIPin(data))\n        spiDotStarSendData(data, clk, mode, buf, length);\n    else\n        bitBangDotStarSendData(data, clk, mode, buf, length);\n}\n\nvoid sendBuffer(DevicePin *data, DevicePin *clk, int mode, Buffer buf) {\n    if (!data || !buf || !buf->length)\n        return;\n\n    if (mode == LIGHTMODE_DOTSTAR)\n        light::dotStarSendData(data, clk, mode, buf->data, buf->length);\n    else\n        light::neopixelSendData(data, mode, buf->data, buf->length);\n}\n\nvoid clear() {\n    auto neopix = LOOKUP_PIN(NEOPIXEL);\n    auto neonum = getConfig(CFG_NUM_NEOPIXELS, 0);\n    if (neopix && neonum >= 0) {\n        auto n = 3 * neonum;\n        uint8_t off[n];\n        memset(off, 0, sizeof(off));\n        light::neopixelSendData(neopix, 0x100, off, sizeof(off));\n    }\n\n    auto data = LOOKUP_PIN(DOTSTAR_DATA);\n    auto clk = LOOKUP_PIN(DOTSTAR_CLOCK);\n    auto dsnum = getConfig(CFG_NUM_DOTSTARS, 0);\n    if (data && clk && dsnum > 0) {\n        auto n = 4 * dsnum;\n        uint8_t off[n];\n        memset(off, 0, sizeof(off));\n        for (int i = 0; i < n; i += 4)\n            off[i] = 0xe0;\n        bitBangDotStarSendData(data, clk, 0x100, off, sizeof(off));\n    }\n}\n\n} // namespace light\n",
            "light.h": "#ifndef __PXT_LIGHT_H\n#define __PXT_LIGHT_H\n\n#include \"pxt.h\"\n\nnamespace light {\n    /**\n    * Clear onboard neopixels\n    */\n    void clear();\n\n    /**\n    * Send a programmable light buffer to the specified digital pin\n    * @param data The pin that the lights are connected to\n    * @param clk the clock line if any\n    * @param mode the color encoding mode\n    * @param buf The buffer to send to the pin\n    */\n    //%\n    void sendBuffer(DigitalInOutPin data, DigitalInOutPin clk, int mode, Buffer buf);\n\n    void neopixelSendData(DevicePin* pin, int mode, const uint8_t* data, unsigned length);\n}\n\n#endif",
            "ns.ts": "//% color=\"#d65cd6\" weight=90\n//% groups='[\"Buttons\", \"Temperature\", \"Humidity\", \"Pressure\", \"Distance\", \"Movement\"]'\nnamespace input {\n}\n\n//% color=\"#EF2D56\" weight=80  advanced=false\nnamespace pins {\n}\n\n//% color=\"#00b295\" weight=70  advanced=true\nnamespace control {\n\n}\n\n//% color=\"#61b22f\" weight=70 \nnamespace loops {\n\n}\n\n//% color=\"#006E90\" weight=30 icon=\"\\uf1e6\" advanced=false\nnamespace serial {\n\n}",
            "pins.cpp": "#include \"pxt.h\"\n\nnamespace pxt {\n\nstatic DevicePin *pinArray[DEV_NUM_PINS] = {nullptr};\n\n//%\nDevicePin *getPin(int id) {\n    id &= CFG_PIN_NAME_MSK;\n    auto pinName = (PinNumber)id;\n    uint8_t idx = 0;\n\n    for (idx = 0; idx < DEV_NUM_PINS && pinArray[idx] != nullptr; ++idx) {\n        if (pinArray[idx]->name == pinName) {\n            return pinArray[idx];\n        }\n    }\n\n    if (idx >= DEV_NUM_PINS)\n        target_panic(PANIC_NO_SUCH_PIN);\n\n    pinArray[idx] = new DevicePin(DEVICE_ID_IO_P0 + idx, pinName, IS_ANALOG_PIN(id) ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);\n    return pinArray[idx];\n}\n\n//%\nDevicePin *getPinCfg(int key) {\n    int p = getConfig(key, -1);\n    if (p == -1)\n        DMESG(\"no pin cfg: %d\", key);\n    return getPin(p);\n}\n\nvoid linkPin(int from, int to) {\n    // if (from < 0 || from >= DEV_NUM_PINS)\n    //     target_panic(PANIC_NO_SUCH_PIN);\n    // getPin(to);\n    // pinPos[from] = pinPos[to];\n}\n\n//%\nDevicePin *lookupPin(int pinName) {\n    if (pinName < 0 || pinName == 0xff)\n        return NULL;\n    pinName &= CFG_PIN_NAME_MSK;\n    return getPin(pinName);\n}\n\n//%\nDevicePin *lookupPinCfg(int key) {\n    return lookupPin(getConfig(key));\n}\n\nCodalComponent *lookupComponent(int id) {\n    for (int i = 0; i < DEVICE_COMPONENT_COUNT; ++i) {\n        if (CodalComponent::components[i] && CodalComponent::components[i]->id == id)\n            return CodalComponent::components[i];\n    }\n    return NULL;\n}\n\n} // namespace pxt\n\nnamespace pins {\n/**\n * Get a pin by configuration id (DAL.CFG_PIN...)\n */\n//%\nDigitalInOutPin pinByCfg(int key) {\n    return pxt::lookupPinCfg(key);\n}\n\n/**\n * Create a new zero-initialized buffer.\n * @param size number of bytes in the buffer\n */\n//%\nBuffer createBuffer(int size) {\n    return mkBuffer(NULL, size);\n}\n\n/**\n * Get the duration of the last pulse in microseconds. This function should be called from a\n * ``onPulsed`` handler.\n */\n//% help=pins/pulse-duration blockGap=8\n//% blockId=pins_pulse_duration block=\"pulse duration (µs)\"\n//% weight=19\nint pulseDuration() {\n    return pxt::lastEvent.timestamp;\n}\n} // namespace pins\n",
            "pins.h": "#ifndef __PXT_PINS_H\n#define __PXT_PINS_H\n\n#define CFG_PIN_BTN_USER 94\n#define CFG_PIN_RESET 95\n\n#define CFG_PIN_HTS221_SDA 96\n#define CFG_PIN_HTS221_SCL 97\n\n#define CFG_PIN_LPS22HB_SDA 98\n#define CFG_PIN_LPS22HB_SCL 99\n\n#define CFG_PIN_VL53L0X_SDA 132\n#define CFG_PIN_VL53L0X_SCL 133\n#define CFG_PIN_VL53L0X_SHUT 134\n\n#define CFG_PIN_LSM6DSL_SDA 135\n#define CFG_PIN_LSM6DSL_SCL 136\n\n#define CFG_PIN_BLE_SPI_MISO 137\n#define CFG_PIN_BLE_SPI_MOSI 138\n#define CFG_PIN_BLE_SPI_SCLK 139\n#define CFG_PIN_BLE_SPI_CS 140\n#define CFG_PIN_BLE_SPI_IRQ 141\n#define CFG_PIN_BLE_RST 142\n\n#define CFG_PIN_WIFI_ISM43362_MOSI 224\n#define CFG_PIN_WIFI_ISM43362_MISO 225\n#define CFG_PIN_WIFI_ISM43362_SCK 226\n#define CFG_PIN_WIFI_ISM43362_CS 227\n#define CFG_PIN_WIFI_ISM43362_COMMAND_DATA_READY 228\n#define CFG_PIN_WIFI_ISM43362_RESET 229\n#define CFG_PIN_WIFI_ISM43362_WAKE_UP 230\n\n#define CFG_PIN_UART1_TX 231\n#define CFG_PIN_UART1_RX 232\n\n#define CFG_PIN_UART2_TX 234\n#define CFG_PIN_UART2_RX 235\n\n#define CFG_PIN_UART3_TX 236\n#define CFG_PIN_UART3_RX 237\n\n#define CFG_PIN_UART4_TX 289\n#define CFG_PIN_UART4_RX 290\n\n#define CFG_PIN_SPI1_MISO 291\n#define CFG_PIN_SPI1_MOSI 292\n#define CFG_PIN_SPI1_SCK 293\n\n#define CFG_PIN_SPI2_MISO 294\n#define CFG_PIN_SPI2_MOSI 295\n#define CFG_PIN_SPI2_SCK 296\n\n#define CFG_PIN_SPI3_MISO 297\n#define CFG_PIN_SPI3_MOSI 298\n#define CFG_PIN_SPI3_SCK 299\n\n#define CFG_PIN_I2C1_SCL 332\n#define CFG_PIN_I2C1_SDA 333\n\n#define CFG_PIN_I2C2_SCL 334\n#define CFG_PIN_I2C2_SDA 335\n\n#define BUTTON_ACTIVE_HIGH_PULL_DOWN (ACTIVE_HIGH | 0x10)\n#define BUTTON_ACTIVE_HIGH_PULL_UP (ACTIVE_HIGH | 0x20)\n#define BUTTON_ACTIVE_HIGH_PULL_NONE (ACTIVE_HIGH | 0x30)\n#define BUTTON_ACTIVE_LOW_PULL_DOWN (ACTIVE_LOW | 0x10)\n#define BUTTON_ACTIVE_LOW_PULL_UP (ACTIVE_LOW | 0x20)\n#define BUTTON_ACTIVE_LOW_PULL_NONE (ACTIVE_LOW | 0x30)\n\n#define PIN(name) ((PinName)pxt::getConfig(CFG_PIN_##name, -1))\n#define LOOKUP_PIN(name) pxt::lookupPin(PIN(name))\n\n// these can be overridden in platform.h\n#ifndef CODAL_PIN\n#define CODAL_PIN CODAL_MBED::Pin\n#endif\n\n#ifndef CODAL_TIMER\n#define CODAL_TIMER CODAL_MBED::Timer\n#endif\n\n#ifndef CODAL_SPI\n#define CODAL_SPI CODAL_MBED::SPI\n#endif\n\n#ifndef CODAL_SERIAL\n#define CODAL_SERIAL CODAL_MBED::Serial\n#endif\n\n#ifndef IS_ANALOG_PIN\n#define IS_ANALOG_PIN(id) ((DEV_ANALOG_PINS >> (id)) & 1)\n#endif\n\ntypedef CODAL_PIN DevicePin;\n\ntypedef DevicePin *DigitalInOutPin;\ntypedef DevicePin *AnalogInOutPin;\ntypedef DevicePin *AnalogInPin;\ntypedef DevicePin *AnalogOutPin;\ntypedef DevicePin *PwmPin;\ntypedef DevicePin *PwmOnlyPin;\ntypedef Button *Button_;\n\nnamespace pxt {\nDevicePin *getPin(int id);\nDevicePin *getPinCfg(int key);\nDevicePin *lookupPin(int pinName);\nDevicePin *lookupPinCfg(int key);\nvoid linkPin(int from, int to);\nCodalComponent *lookupComponent(int id);\n} // namespace pxt\n\n#define PINOP(op) name->op\n\n#endif\n",
            "pins.ts": "//% noRefCounting fixedInstances\ninterface DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogOutPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInOutPin extends AnalogInPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmOnlyPin extends DigitalInOutPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmPin extends PwmOnlyPin, AnalogInOutPin {\n}\n\n/**\n * Control currents in Pins for analog/digital signals, servos, i2c, ...\n */\n//% color=#A80000 weight=85 icon=\"\\uf140\" advanced=true\n//% groups='[\"other\", \"Servo\", \"i2c\"]'\nnamespace pins {\n}",
            "pinsAnalog.cpp": "#include \"pxt.h\"\n\nnamespace AnalogInPinMethods {\n\n/**\n * Read the connector value as analog, that is, as a value comprised between 0 and 1023.\n * @param name pin to write to\n */\n//% help=pins/analog-read weight=53\n//% blockId=device_get_analog_pin block=\"analog read|pin %name\" blockGap=\"8\"\n//% blockNamespace=pins\n//% parts=\"photocell\"\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% trackArgs=0\nint analogRead(AnalogInPin name) {\n    return PINOP(getAnalogValue());\n}\n} // namespace AnalogInPinMethods\n\nnamespace AnalogOutPinMethods {\nvoid analogWrite(AnalogOutPin name, int value) __attribute__((weak));\n\n/**\n * Set the connector value as analog. Value must be comprised between 0 and 1023.\n * @param name pin name to write to\n * @param value value to write to the pin between ``0`` and ``1023``. eg:1023,0\n */\n//% help=pins/analog-write weight=52\n//% blockId=device_set_analog_pin block=\"analog write|pin %name|to %value\" blockGap=8\n//% blockNamespace=pins\n//%parts=\"analogled\"\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% value.min=0 value.max=1023\n//% trackArgs=0\nvoid analogWrite(AnalogOutPin name, int value) {\n    PINOP(setAnalogValue(value));\n}\n} // namespace AnalogOutPinMethods",
            "pinsDigital.cpp": "#include \"pxt.h\"\n\nenum class PulseValue {\n    //% block=high\n    High = DEVICE_PIN_EVT_PULSE_HI,\n    //% block=low\n    Low = DEVICE_PIN_EVT_PULSE_LO\n};\n\nenum class PinEvent {\n    //% block=\"pulse high\"\n    PulseHigh = DEVICE_PIN_EVT_PULSE_HI,\n    //% block=\"pulse low\"\n    PulseLow = DEVICE_PIN_EVT_PULSE_LO,\n    //% block=\"rise\"\n    Rise = DEVICE_PIN_EVT_RISE,\n    //% block=\"fall\"\n    Fall = DEVICE_PIN_EVT_FALL,\n};\n\nenum class PinPullMode {\n    //% block=\"down\"\n    PullDown = 0,\n    //% block=\"up\"\n    PullUp = 1,\n    //% block=\"none\"\n    PullNone = 2\n};\n\nnamespace DigitalInOutPinMethods {\n/**\n * Read a pin or connector as either 0 or 1\n * @param name pin to read from\n */\n//% help=pins/digital-read weight=61\n//% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8\n//% blockNamespace=pins\n//% parts=\"slideswitch\"\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% trackArgs=0\nbool digitalRead(DigitalInOutPin name) {\n    return PINOP(getDigitalValue()) != 0;\n}\n\n/**\n * Set a pin or connector value to either 0 or 1.\n * @param name pin to write to\n * @param value value to set on the pin\n */\n//% help=pins/digital-write weight=60\n//% blockId=device_set_digital_pin block=\"digital write|pin %name|to %value=toggleHighLow\"\n//% parts=\"led\"\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% trackArgs=0\nvoid digitalWrite(DigitalInOutPin name, bool value) {\n    PINOP(setDigitalValue(value));\n}\n\n/**\n * Make this pin a digital input, and create events where the timestamp is the duration\n * that this pin was either ``high`` or ``low``.\n */\n//% help=pins/on-pulsed weight=16 blockGap=8\n//% blockId=pins_on_pulsed block=\"on|pin %pin|pulsed %pulse\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\n//% deprecated=1 hidden=1\nvoid onPulsed(DigitalInOutPin pin, PulseValue pulse, Action body) {\n    pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);\n    registerWithDal(pin->id, (int)pulse, body);\n}\n\n/**\n * Register code to run when a pin event occurs.\n */\n//% help=pins/on-event weight=20 blockGap=8\n//% blockId=pinsonevent block=\"on|pin %pin|%event\"\n//% blockNamespace=pins\n//% parts=\"slideswitch\"\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\n//% trackArgs=0\nvoid onEvent(DigitalInOutPin pin, PinEvent event, Action body) {\n    switch (event) {\n    case PinEvent::PulseHigh:\n    case PinEvent::PulseLow:\n        pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);\n        registerWithDal(pin->id, (int)event, body);\n        break;\n    case PinEvent::Rise:\n    case PinEvent::Fall:\n        pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);\n        registerWithDal(pin->id, (int)event, body);\n        break;\n    }\n}\n\n/**\n * Return the duration of a pulse in microseconds\n * @param name the pin which measures the pulse\n * @param value the value of the pulse (default high)\n * @param maximum duration in micro-seconds\n */\n//% blockId=\"pins_pulse_in\" block=\"pulse in (µs)|pin %name|pulsed %high||timeout %maxDuration (µs)\"\n//% weight=18 blockGap=8\n//% help=\"pins/pulse-in\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\nint pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {\n    int pulse = PulseValue::High == value ? 1 : 0;\n    uint64_t tick = system_timer_current_time_us();\n    uint64_t maxd = (uint64_t)maxDuration;\n    while (pin->getDigitalValue() != pulse) {\n        if (system_timer_current_time_us() - tick > maxd)\n            return 0;\n    }\n\n    uint64_t start = system_timer_current_time_us();\n    while (pin->getDigitalValue() == pulse) {\n        if (system_timer_current_time_us() - tick > maxd)\n            return 0;\n    }\n    uint64_t end = system_timer_current_time_us();\n    return end - start;\n}\n\n/**\n * Set the pull direction of this pin.\n * @param name pin to set the pull mode on\n * @param pull one of the mbed pull configurations: PullUp, PullDown, PullNone\n */\n//% help=pins/set-pull weight=17 blockGap=8\n//% blockId=device_set_pull block=\"set pull|pin %pin|to %pull\"\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid setPull(DigitalInOutPin name, PinPullMode pull) {\n    PullMode m = pull == PinPullMode::PullDown\n                     ? PullMode::Down\n                     : pull == PinPullMode::PullUp ? PullMode::Up : PullMode::None;\n    PINOP(setPull(m));\n}\n\n} // namespace DigitalInOutPinMethods\n\nnamespace pxt {\n\nstatic void waitABit() {\n    // for (int i = 0; i < 10; ++i)\n    //    asm volatile(\"nop\");\n}\n\nclass ButtonMultiplexer : public CodalComponent {\n  public:\n    Pin &latch;\n    Pin &clock;\n    Pin &data;\n    uint32_t state;\n    uint32_t invMask;\n    uint16_t buttonIdPerBit[8];\n    bool enabled;\n\n    ButtonMultiplexer(uint16_t id)\n        : latch(*LOOKUP_PIN(BTNMX_LATCH)), clock(*LOOKUP_PIN(BTNMX_CLOCK)),\n          data(*LOOKUP_PIN(BTNMX_DATA)) {\n        this->id = id;\n        this->status |= DEVICE_COMPONENT_STATUS_SYSTEM_TICK;\n\n        state = 0;\n        invMask = 0;\n        enabled = true;\n\n        memset(buttonIdPerBit, 0, sizeof(buttonIdPerBit));\n\n        data.getDigitalValue(PullMode::Down);\n        latch.setDigitalValue(1);\n        clock.setDigitalValue(1);\n    }\n\n    void disable() {\n        data.getDigitalValue(PullMode::None);\n        latch.getDigitalValue(PullMode::None);\n        clock.getDigitalValue(PullMode::None);\n        enabled = false;\n    }\n\n    bool isButtonPressed(int id) {\n        for (int i = 0; i < 8; ++i) {\n            if (buttonIdPerBit[i] == id)\n                return (state & (1 << i)) != 0;\n        }\n        return false;\n    }\n\n    uint32_t readBits(int bits) {\n        latch.setDigitalValue(0);\n        waitABit();\n        latch.setDigitalValue(1);\n        waitABit();\n\n        uint32_t state = 0;\n        for (int i = 0; i < bits; i++) {\n            state <<= 1;\n            if (data.getDigitalValue(PullMode::Down))\n                state |= 1;\n\n            clock.setDigitalValue(0);\n            waitABit();\n            clock.setDigitalValue(1);\n            waitABit();\n        }\n\n        return state;\n    }\n\n    virtual void periodicCallback() override {\n        if (!enabled)\n            return;\n\n        uint32_t newState = readBits(8);\n        newState ^= invMask;\n        if (newState == state)\n            return;\n\n        for (int i = 0; i < 8; ++i) {\n            uint32_t mask = 1 << i;\n            if (!buttonIdPerBit[i])\n                continue;\n            int ev = 0;\n            if (!(state & mask) && (newState & mask))\n                ev = PXT_INTERNAL_KEY_DOWN;\n            else if ((state & mask) && !(newState & mask))\n                ev = PXT_INTERNAL_KEY_UP;\n            if (ev) {\n                Event(ev, buttonIdPerBit[i]);\n                Event(ev, 0); // any key\n            }\n        }\n\n        state = newState;\n    }\n};\n\nstatic ButtonMultiplexer *btnMultiplexer;\nButtonMultiplexer *getMultiplexer() {\n    if (!btnMultiplexer)\n        btnMultiplexer = new ButtonMultiplexer(DEVICE_ID_FIRST_BUTTON);\n    return btnMultiplexer;\n}\n\nint registerMultiplexedButton(int pin, int buttonId) {\n    if (1050 <= pin && pin < 1058) {\n        pin -= 50;\n        getMultiplexer()->invMask |= 1 << (pin - 1000);\n    }\n    if (1000 <= pin && pin < 1008) {\n        getMultiplexer()->buttonIdPerBit[pin - 1000] = buttonId;\n        return 1;\n    }\n    return 0;\n}\n\nint multiplexedButtonIsPressed(int btnId) {\n    if (btnMultiplexer)\n        return btnMultiplexer->isButtonPressed(btnId) ? 512 : 0;\n    return 0;\n}\n\n//% expose\nuint32_t readButtonMultiplexer(int bits) {\n    if (!LOOKUP_PIN(BTNMX_CLOCK))\n        return 0;\n    return getMultiplexer()->readBits(bits);\n}\n\nvoid disableButtonMultiplexer() {\n    if (LOOKUP_PIN(BTNMX_CLOCK)) {\n        getMultiplexer()->disable();\n    }\n}\n\n} // namespace pxt",
            "pinsPWM.cpp": "#include \"pxt.h\"\n\nnamespace PwmPinMethods {\n}\n\nnamespace PwmOnlyPinMethods {\n\n/**\n * Set the Pulse-width modulation (PWM) period of the analog output. The period is in\n * **microseconds** or `1/1000` milliseconds.\n * If this pin is not configured as an analog output (using `analog write pin`), the operation has\n * no effect.\n * @param name analog pin to set period to\n * @param micros period in micro seconds. eg:20000\n */\n//% help=pins/analog-set-period weight=51\n//% blockId=device_set_analog_period block=\"analog set period|pin %pin|to (µs)%period\"\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid analogSetPeriod(PwmOnlyPin name, int period) {\n    PINOP(setAnalogPeriodUs(period));\n}\n\n/**\n * Write a value to the servo to control the rotation of the shaft. On a standard servo, this will\n * set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous\n * rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one\n * direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).\n * @param name pin to write to\n * @param value angle or rotation speed\n */\n//% help=pins/servo-write weight=41 group=\"Servo\"\n//% blockId=device_set_servo_pin block=\"servo write|pin %name|to %value=protractorPicker\" blockGap=8\n//% parts=microservo trackArgs=0\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% value.defl=90\nvoid servoWrite(PwmOnlyPin name, int value) {\n    PINOP(setServoValue(value));\n}\n\n/**\n * Set the pin for PWM analog output, make the period be 20 ms, and set the pulse width.\n * The pulse width is based on the value it is given **microseconds** or `1/1000` milliseconds.\n * @param name pin name\n * @param duration pulse duration in micro seconds, eg:1500\n */\n//% help=pins/servo-set-pulse weight=40 group=\"Servo\" blockGap=8\n//% blockId=device_set_servo_pulse block=\"servo set pulse|pin %value|to (µs) %duration\"\n//% parts=microservo blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid servoSetPulse(PwmOnlyPin name, int duration) {\n    PINOP(setServoPulseUs(duration));\n}\n\n/**\n* Indicates if the servo is running continuously\n*/\n//% blockHidden=1\nvoid servoSetContinuous(PwmOnlyPin name, bool continuous) {\n    // used by simulator\n}\n\n}",
            "pinscompat.ts": "// filled in by microbit",
            "platform.cpp": "#include \"pxt.h\"\n#include \"STM32LowLevelTimer.h\"\n#include \"Accelerometer.h\"\n\nnamespace pxt {\n\nstruct TimerConfig {\n    uint8_t id;\n    uint8_t irqn;\n    TIM_TypeDef *addr;\n};\n\n#define DEF_TIM(n)                                                                                                               \\\n    { 0x10 + n, TIM##n##_IRQn, TIM##n }\n\nstatic const TimerConfig timers[] = {\n#ifdef TIM1\n    DEF_TIM(1),\n#endif\n#ifdef TIM2\n    DEF_TIM(2),\n#endif\n#ifdef TIM3\n    DEF_TIM(3),\n#endif\n#ifdef TIM4\n    DEF_TIM(4),\n#endif\n#ifdef TIM5\n    DEF_TIM(5),\n#endif\n#ifdef TIM6\n    DEF_TIM(6),\n#endif\n#ifdef TIM7\n    DEF_TIM(7),\n#endif\n#ifdef TIM8\n    DEF_TIM(8),\n#endif\n#ifdef TIM9\n    DEF_TIM(9),\n#endif\n#ifdef TIM10\n    DEF_TIM(10),\n#endif\n#ifdef TIM11\n    DEF_TIM(11),\n#endif\n#ifdef TIM12\n    DEF_TIM(12),\n#endif\n#ifdef TIM13\n    DEF_TIM(13),\n#endif\n#ifdef TIM14\n    DEF_TIM(14),\n#endif\n#ifdef TIM15\n    DEF_TIM(15),\n#endif\n    {0, 0, 0}};\n\n#ifdef STM32F1\n#define DEF_TIMERS 0x14120000 // TIM4 TIM2\n#else\n#define DEF_TIMERS 0x15120000 // TIM5 TIM2\n#endif\n\nstatic uint32_t usedTimers;\nstatic int timerIdx(uint8_t id) {\n    for (unsigned i = 0; timers[i].id; i++) {\n        if (id == timers[i].id)\n            return i;\n    }\n    return -1;\n}\nLowLevelTimer *allocateTimer() {\n    uint32_t timersToUse = getConfig(CFG_TIMERS_TO_USE, DEF_TIMERS);\n    for (int shift = 24; shift >= 0; shift -= 8) {\n        uint8_t tcId = (timersToUse >> shift) & 0xff;\n        int idx = timerIdx(tcId);\n        if (idx < 0 || (usedTimers & (1 << idx)))\n            continue;\n        auto dev = timers[idx].addr;\n        if (dev->CR1 & TIM_CR1_CEN)\n            continue;\n        usedTimers |= 1 << idx;\n        DMESG(\"allocate TIM%d\", tcId - 0x10);\n        return new STM32LowLevelTimer(dev, (IRQn_Type)timers[idx].irqn);\n    }\n\n    target_panic(PANIC_OUT_OF_TIMERS);\n    return NULL;\n}\n\nvoid initAccelRandom();\n#ifdef STM32F4\nextern \"C\" void apply_clock_init(RCC_OscInitTypeDef *oscInit, RCC_ClkInitTypeDef *clkConfig, uint32_t flashLatency) {\n\n    int mhz = getConfig(CFG_CPU_MHZ, 84);\n\n    if (mhz >= 216) {\n        oscInit->PLL.PLLN = 432;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV2;\n        oscInit->PLL.PLLQ = 9;\n        flashLatency = FLASH_LATENCY_6;\n    } else if (mhz >= 192) {\n        oscInit->PLL.PLLN = 384;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV2;\n        oscInit->PLL.PLLQ = 8;\n        flashLatency = FLASH_LATENCY_6;\n    } else if (mhz >= 168) {\n        oscInit->PLL.PLLN = 336;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV2;\n        oscInit->PLL.PLLQ = 7;\n        flashLatency = FLASH_LATENCY_5;\n    } else if (mhz >= 144) {\n        oscInit->PLL.PLLN = 288;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV2;\n        oscInit->PLL.PLLQ = 6;\n        flashLatency = FLASH_LATENCY_5;\n    } else if (mhz >= 108) {\n        oscInit->PLL.PLLN = 432;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV4;\n        oscInit->PLL.PLLQ = 9;\n        flashLatency = FLASH_LATENCY_4;\n    } else if (mhz >= 96) {\n        oscInit->PLL.PLLN = 384;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV4;\n        oscInit->PLL.PLLQ = 8;\n        flashLatency = FLASH_LATENCY_3;\n    } else if (mhz >= 84) {\n        // this is the default from codal\n        oscInit->PLL.PLLN = 336;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV4;\n        oscInit->PLL.PLLQ = 7;\n        flashLatency = FLASH_LATENCY_2;\n    } else {\n        target_panic(PANIC_CODAL_HARDWARE_CONFIGURATION_ERROR);\n    }\n\n    DMESG(\"CPU clock: %dMHz -> %dMHz\", mhz, oscInit->PLL.PLLN / (oscInit->PLL.PLLP == RCC_PLLP_DIV4 ? 4 : 2));\n\n    if (mhz > 108) {\n        clkConfig->APB1CLKDivider = RCC_HCLK_DIV4;\n        clkConfig->APB2CLKDivider = RCC_HCLK_DIV2;\n    } else {\n        clkConfig->APB1CLKDivider = RCC_HCLK_DIV2;\n        clkConfig->APB2CLKDivider = RCC_HCLK_DIV1;\n    }\n\n    HAL_RCC_OscConfig(oscInit);\n    HAL_RCC_ClockConfig(clkConfig, flashLatency);\n}\n#endif\n\n// Disable seeding random from accelerometer. We now store random\n// seed in internal flash, so it's different on every reset, and\n// accelerometer sometimes have bugs, so better not enable them unless\n// requested.\nstatic void initRandomSeed() {\n#if 0\n    if (getConfig(CFG_ACCELEROMETER_TYPE, -1) != -1) {\n        initAccelRandom();\n    }\n#endif\n}\n\nstatic void set_if_present(int cfg, int val) {\n    auto snd = pxt::lookupPinCfg(cfg);\n    if (snd)\n        snd->setDigitalValue(val);\n}\n\n//%\nvoid deepSleep() {\n    // this in particular puts accelerometer to sleep, which the bootloader\n    // doesn't do\n    CodalComponent::setAllSleep(true);\n\n#ifdef STM32F4\n    // ask bootloader to do the deep sleeping\n    QUICK_BOOT(1);\n    RTC->BKP1R = 0x10b37889;\n    NVIC_SystemReset();\n#endif\n}\n\nvoid platformSendSerial(const char *data, int len) {\n    /*\n    if (!serial) {\n        serial = new codal::_mbed::Serial(USBTX, NC);\n        serial->baud(9600);\n    }\n    serial->send((uint8_t*)data, len);\n    */\n}\n\nvoid platform_init() {\n    initRandomSeed();\n    setSendToUART(platformSendSerial);\n\n    // make sure sound doesn't draw power before enabled\n    set_if_present(CFG_PIN_JACK_SND, 0);\n    set_if_present(CFG_PIN_JACK_HPEN, 0);\n    set_if_present(CFG_PIN_JACK_BZEN, 1);\n\n    /*\n        if (*HF2_DBG_MAGIC_PTR == HF2_DBG_MAGIC_START) {\n            *HF2_DBG_MAGIC_PTR = 0;\n            // this will cause alignment fault at the first breakpoint\n            globals[0] = (TValue)1;\n        }\n    */\n}\n\nint *getBootloaderConfigData() {\n#ifdef STM32F4\n    auto config_data = (uint32_t)(UF2_BINFO->configValues);\n    if (config_data && (config_data & 3) == 0) {\n        auto p = (uint32_t *)config_data - 4;\n        if (p[0] == CFG_MAGIC0 && p[1] == CFG_MAGIC1)\n            return (int *)p + 4;\n    }\n#endif\n\n    return NULL;\n}\n\n#define STM32_UUID ((uint32_t *)0x1FFF7A10)\n\n#if CONFIG_ENABLED(DEVICE_USB)\nstatic void writeHex(char *buf, uint32_t n) {\n    int i = 0;\n    int sh = 28;\n    while (sh >= 0) {\n        int d = (n >> sh) & 0xf;\n        buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;\n        sh -= 4;\n    }\n    buf[i] = 0;\n}\n#endif\n\nvoid platform_usb_init() {\n#if CONFIG_ENABLED(DEVICE_USB)\n    static char serial_number[25];\n\n    writeHex(serial_number, STM32_UUID[0]);\n    writeHex(serial_number + 8, STM32_UUID[1]);\n    writeHex(serial_number + 16, STM32_UUID[2]);\n\n    usb.stringDescriptors[2] = serial_number;\n#endif\n}\n\n} // namespace pxt\n\nvoid cpu_clock_init() {}\n",
            "platform.h": "#ifndef __PXT_PLATFORM_H\n#define __PXT_PLATFORM_H\n\n#include \"Image.h\"\n#include \"MultiButton.h\"\n#include \"STM32I2C.h\"\n#include \"STM32Pin.h\"\n#include \"STM32SPI.h\"\n#include \"STM32Serial.h\"\n#include \"Timer.h\"\n\n#include \"pinmap.h\"\n\n#define BOOTLOADER_START 0x08000000\n#define BOOTLOADER_END 0x08008000\n\n#ifdef STM32F4\n#define SETTINGS_MAGIC_0 0x10476643\n#define SETTINGS_MAGIC_1 0x2e9a5026\n\nstruct F4_Settings {\n    uint32_t magic0;\n    uint32_t magic1;\n    int *configValues;\n    uint32_t hseValue;\n    const char *info_uf2;\n    const char *manufacturer;\n    const char *device;\n    uint32_t reserved[16 - 7];\n};\n\n#define UF2_BINFO ((F4_Settings *)(BOOTLOADER_END - sizeof(F4_Settings)))\n#define UF2_INFO_TXT UF2_BINFO->info_uf2\n#define USB_HANDOVER 0\n\n#define BOOT_RTC_SIGNATURE 0x71a21877\n#define APP_RTC_SIGNATURE 0x24a22d12\n#define HF2_RTC_SIGNATURE 0x39a63a78\n#define QUICK_BOOT(v)                                                                                                            \\\n    do {                                                                                                                         \\\n        RTC->BKP0R = v ? APP_RTC_SIGNATURE : HF2_RTC_SIGNATURE;                                                                  \\\n    } while (0)\n#else\n#define QUICK_BOOT(v) ((void)0)\n#endif\n\n#define PAGE_SIZE 1024 // not really\n\n#define DEV_NUM_PINS 64\n\n#ifdef STM32F1\n#define DEV_PWM_PINS 0b111100000011101100001110111000111111001110LL\n#else\n#define DEV_PWM_PINS 0b111100000011100111111110111000111111101111LL\n#endif\n\n//               CCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAA\n//               fedcba9876543210fedcba9876543210fedcba9876543210\n#define DEV_AIN_PINS 0b000011111100000000000000110000000011111111LL\n\n// Codal doesn't yet distinguish between PWM and AIN\n#define DEV_ANALOG_PINS (DEV_PWM_PINS | DEV_AIN_PINS)\n\n#define CODAL_SERIAL codal::STM32Serial\n#define CODAL_PIN codal::STM32Pin\n#define CODAL_TIMER Timer\n#define CODAL_SPI codal::STM32SPI\n#define CODAL_I2C codal::STM32I2C\n#define CODAL_JACDAC_WIRE_SERIAL codal::ZSingleWireSerial\n\n#define PERF_NOW() (TIM5->CNT)\n\n#define IMAGE_BITS 4\n\n#define ALT0 0x000\n#define ALT1 0x100\n#define ALT2 0x200\n\n// The parameters below needs tuning!\n\n#ifdef JUST_FOR_DAL_D_TS_CPP_WILL_IGNORE\n\n#define PA_0 0x00\n#define PA_0_ALT0 PA_0 | ALT0\n#define PA_1 0x01\n#define PA_1_ALT0 PA_1 | ALT0\n#define PA_2 0x02\n#define PA_2_ALT0 PA_2 | ALT0\n#define PA_3 0x03\n#define PA_3_ALT0 PA_3 | ALT0\n#define PA_4 0x04\n#define PA_4_ALT0 PA_4 | ALT0\n#define PA_5 0x05\n#define PA_5_ALT0 PA_5 | ALT0\n#define PA_6 0x06\n#define PA_6_ALT0 PA_6 | ALT0\n#define PA_7 0x07\n#define PA_7_ALT0 PA_7 | ALT0\n#define PA_7_ALT1 PA_7 | ALT1\n#define PA_7_ALT2 PA_7 | ALT2\n#define PA_8 0x08\n#define PA_9 0x09\n#define PA_10 0x0A\n#define PA_11 0x0B\n#define PA_12 0x0C\n#define PA_13 0x0D\n#define PA_14 0x0E\n#define PA_15 0x0F\n#define PA_15_ALT0 PA_15 | ALT0\n#define PB_0 0x10\n#define PB_0_ALT0 PB_0 | ALT0\n#define PB_0_ALT1 PB_0 | ALT1\n#define PB_1 0x11\n#define PB_1_ALT0 PB_1 | ALT0\n#define PB_1_ALT1 PB_1 | ALT1\n#define PB_2 0x12\n#define PB_3 0x13\n#define PB_3_ALT0 PB_3 | ALT0\n#define PB_4 0x14\n#define PB_4_ALT0 PB_4 | ALT0\n#define PB_5 0x15\n#define PB_5_ALT0 PB_5 | ALT0\n#define PB_6 0x16\n#define PB_6_ALT0 PB_6 | ALT0\n#define PB_7 0x17\n#define PB_7_ALT0 PB_7 | ALT0\n#define PB_8 0x18\n#define PB_8_ALT0 PB_8 | ALT0\n#define PB_9 0x19\n#define PB_9_ALT0 PB_9 | ALT0\n#define PB_10 0x1A\n#define PB_11 0x1B\n#define PB_12 0x1C\n#define PB_13 0x1D\n#define PB_13_ALT0 PB_13 | ALT0\n#define PB_14 0x1E\n#define PB_14_ALT0 PB_14 | ALT0\n#define PB_14_ALT1 PB_14 | ALT1\n#define PB_15 0x1F\n#define PB_15_ALT0 PB_15 | ALT0\n#define PB_15_ALT1 PB_15 | ALT1\n#define PC_0 0x20\n#define PC_0_ALT0 PC_0 | ALT0\n#define PC_0_ALT1 PC_0 | ALT1\n#define PC_1 0x21\n#define PC_1_ALT0 PC_1 | ALT0\n#define PC_1_ALT1 PC_1 | ALT1\n#define PC_2 0x22\n#define PC_2_ALT0 PC_2 | ALT0\n#define PC_2_ALT1 PC_2 | ALT1\n#define PC_3 0x23\n#define PC_3_ALT0 PC_3 | ALT0\n#define PC_3_ALT1 PC_3 | ALT1\n#define PC_4 0x24\n#define PC_4_ALT0 PC_4 | ALT0\n#define PC_5 0x25\n#define PC_5_ALT0 PC_5 | ALT0\n#define PC_6 0x26\n#define PC_6_ALT0 PC_6 | ALT0\n#define PC_7 0x27\n#define PC_7_ALT0 PC_7 | ALT0\n#define PC_8 0x28\n#define PC_8_ALT0 PC_8 | ALT0\n#define PC_9 0x29\n#define PC_9_ALT0 PC_9 | ALT0\n#define PC_10 0x2A\n#define PC_10_ALT0 PC_10 | ALT0\n#define PC_11 0x2B\n#define PC_11_ALT0 PC_11 | ALT0\n#define PC_12 0x2C\n#define PC_13 0x2D\n#define PC_14 0x2E\n#define PC_15 0x2F\n#define PD_0 0x30\n#define PD_1 0x31\n#define PD_2 0x32\n#define PD_3 0x33\n#define PD_4 0x34\n#define PD_5 0x35\n#define PD_6 0x36\n#define PD_7 0x37\n#define PD_8 0x38\n#define PD_9 0x39\n#define PD_10 0x3A\n#define PD_11 0x3B\n#define PD_12 0x3C\n#define PD_13 0x3D\n#define PD_14 0x3E\n#define PD_15 0x3F\n#define PE_0 0x40\n#define PE_1 0x41\n#define PE_2 0x42\n#define PE_3 0x43\n#define PE_4 0x44\n#define PE_5 0x45\n#define PE_6 0x46\n#define PE_7 0x47\n#define PE_8 0x48\n#define PE_9 0x49\n#define PE_10 0x4A\n#define PE_11 0x4B\n#define PE_12 0x4C\n#define PE_13 0x4D\n#define PE_14 0x4E\n#define PE_15 0x4F\n\n#endif\n\n#endif\n",
            "pxt.h": "#ifndef __PXT_H\n#define __PXT_H\n\n#include \"pxtbase.h\"\n\n#include \"CodalConfig.h\"\n#include \"CodalHeapAllocator.h\"\n#include \"CodalDevice.h\"\n#include \"CodalDmesg.h\"\n#include \"ErrorNo.h\"\n#include \"Timer.h\"\n#include \"Matrix4.h\"\n#include \"CodalCompat.h\"\n#include \"CodalComponent.h\"\n#include \"ManagedType.h\"\n#include \"Event.h\"\n#include \"NotifyEvents.h\"\n#include \"Button.h\"\n#include \"CodalFiber.h\"\n#include \"MessageBus.h\"\n#include \"MultiButton.h\"\n\nusing namespace codal;\n\n// codal::ManagedString compat\n#define MSTR(s) codal::ManagedString((s)->data, (s)->length)\n#define PSTR(s) mkString((s).toCharArray(), (s).length())\n\n#include \"pins.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#include \"hf2.h\"\n#include \"hf2dbg.h\"\n#if CONFIG_ENABLED(DEVICE_MOUSE)\n#include \"HIDMouse.h\"\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\n#include \"HIDKeyboard.h\"\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\n#include \"HIDJoystick.h\"\n#endif\n#endif\n\n#define PXT_COMM_BASE 0x20002000 // 8k in\n\nnamespace pxt {\n\n#if CONFIG_ENABLED(DEVICE_USB)\nextern CodalUSB usb;\nextern HF2 hf2;\n#if CONFIG_ENABLED(DEVICE_MOUSE)\nextern USBHIDMouse mouse;\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\nextern USBHIDKeyboard keyboard;\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\nextern USBHIDJoystick joystick;\n#endif\n#endif\n\n// Utility functions\nextern Event lastEvent;\nextern CODAL_TIMER devTimer;\nextern MessageBus devMessageBus;\nextern codal::CodalDevice device;\n\nvoid set_usb_strings(const char *uf2_info);\nextern void (*logJDFrame)(const uint8_t *data);\nextern void (*sendJDFrame)(const uint8_t *data);\n\nstatic inline void raiseEvent(int src, int val) {\n    Event(src, val);\n}\n\n} // namespace pxt\n\nnamespace pins {\nclass CodalSPIProxy;\nclass CodalI2CProxy;\n} // namespace pins\n\ntypedef pins::CodalI2CProxy* I2C_;\ntypedef pins::CodalSPIProxy* SPI_;\n\nnamespace pxt {\ncodal::LowLevelTimer *allocateTimer();\n\n#ifdef CODAL_I2C\nCODAL_I2C* getI2C(DigitalInOutPin sda, DigitalInOutPin scl);\n#endif\nCODAL_SPI* getSPI(DigitalInOutPin mosi, DigitalInOutPin miso, DigitalInOutPin sck);\n#ifdef CODAL_JACDAC_WIRE_SERIAL\nLowLevelTimer* getJACDACTimer();\n#endif\nclass PressureButton;\nuint32_t readButtonMultiplexer(int bits);\nvoid disableButtonMultiplexer();\n}\n\nnamespace serial {\nclass CodalSerialDeviceProxy;\n}\n\ntypedef serial::CodalSerialDeviceProxy* SerialDevice;\n\nnamespace jacdac {\nclass JDProxyDriver;\n} // namespace network\n\ntypedef jacdac::JDProxyDriver* JacDacDriverStatus;\n\n#define DEVICE_ID_BUTTON_SLIDE 3000\n#define DEVICE_ID_MICROPHONE 3001\n#define DEVICE_ID_FIRST_BUTTON 4000\n#define DEVICE_ID_FIRST_TOUCHBUTTON 4100\n\n#define PXT_INTERNAL_KEY_UP 2050\n#define PXT_INTERNAL_KEY_DOWN 2051\n\n#endif\n",
            "pxt.json": "{\n    \"name\": \"core---stm32\",\n    \"description\": \"The core library for Codal-based targets\",\n    \"dependencies\": {\n        \"base\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"dal.d.ts\",\n        \"codal.cpp\",\n        \"usb.cpp\",\n        \"pxt.h\",\n        \"platform.h\",\n        \"platform.cpp\",\n        \"pxtcore.h\",\n        \"pins.h\",\n        \"pins.cpp\",\n        \"pinsAnalog.cpp\",\n        \"pinsDigital.cpp\",\n        \"pinsPWM.cpp\",\n        \"pins.ts\",\n        \"pinscompat.ts\",\n        \"control.cpp\",\n        \"i2c.cpp\",\n        \"i2c.ts\",\n        \"spi.cpp\",\n        \"spi.ts\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"hf2.cpp\",\n        \"hf2.h\",\n        \"hf2dbg.h\",\n        \"uf2format.h\",\n        \"uf2hid.h\",\n        \"ns.ts\",\n        \"dmac.cpp\",\n        \"dmac.h\",\n        \"timer.ts\",\n        \"light.cpp\",\n        \"light.h\",\n        \"keyvaluestorage.cpp\",\n        \"keyvaluestorage.ts\",\n        \"leveldetector.ts\",\n        \"pxtparts.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    },\n    \"yotta\": {\n        \"config\": {\n            \"codal\": {\n                \"component_count\": 64,\n                \"dmesg_buffer_size\": 1024\n            }\n        }\n    },\n    \"dalDTS\": {\n        \"includeDirs\": [\n            \"libraries/codal-core/inc\",\n            \"pxtapp\"\n        ],\n        \"excludePrefix\": [\n            \"JD_\",\n            \"USB_\",\n            \"REQUEST_\",\n            \"LIS3DH_\",\n            \"FXOS8700_\",\n            \"HF2_\",\n            \"PXT_REF_TAG_\",\n            \"MS_\",\n            \"SCSI_\",\n            \"MAG_\",\n            \"MAG3\",\n            \"MPU6\",\n            \"MADCTL\",\n            \"MMA8\"\n        ]\n    }\n}\n",
            "pxtcore.h": "#ifndef __PXTCORE_H\n#define __PXTCORE_H\n\n#include \"CodalDmesg.h\"\n#include \"CodalHeapAllocator.h\"\n\n#define PXT_CODAL 1\n\n#define itoa(a, b) codal::itoa(a, b)\n\n#define GC_GET_HEAP_SIZE() device_heap_size(0)\n#define GC_STACK_BASE DEVICE_STACK_BASE\n#define xmalloc device_malloc\n#define xfree device_free\n\n// on most devices we allocate the entire heap at once, so large allocs should work\n// if they don't you just get the regular out of memory instead of alloc too large\n#define GC_MAX_ALLOC_SIZE (128 * 1024)\n\n#endif\n",
            "pxtparts.json": "{\n    \"neopixel\": {\n        \"simulationBehavior\": \"neopixel\",\n        \"visual\": {\n            \"builtIn\": \"neopixel\",\n            \"width\": 58,\n            \"height\": 113,\n            \"pinDistance\": 9,\n            \"pinLocations\": [\n                {\n                    \"x\": 10,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 19,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 28,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"numberOfPins\": 3,\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"light.createStrip,light.createNeoPixelStrip\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"pin\"\n                },\n                {\n                    \"partParameter\": \"mode\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"dotstar\": {\n        \"simulationBehavior\": \"dotstar\",\n        \"visual\": {\n            \"builtIn\": \"dotstar\",\n            \"width\": 58,\n            \"height\": 113,\n            \"pinDistance\": 9,\n            \"pinLocations\": [\n                {\n                    \"x\": 10,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 17,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 24,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 31,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"numberOfPins\": 4,\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 1\n                },\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"light.createAPA102Strip\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"dataPin\"\n                },\n                {\n                    \"pinInstantiationIdx\": 1,\n                    \"partParameter\": \"clkPin\"\n                },\n                {\n                    \"partParameter\": \"mode\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1, 2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    3\n                ]\n            }\n        ]\n    },\n    \"pixels\": {\n        \"simulationBehavior\": \"pixels\",\n        \"visual\": { \n            \"builtIn\": \"pixels\",\n            \"width\": 58,\n            \"height\": 113,\n            \"pinDistance\": 9,\n            \"pinLocations\": [\n                {\n                    \"x\": 10,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 17,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 24,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 31,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"numberOfPins\": 4,\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"MOSI\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"SCK\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"solder\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"singleton\"\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1, 2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    3\n                ]\n            }\n        ]\n    },    \n    \"buttons\": {\n        \"simulationBehavior\": \"buttons\",\n        \"visual\": {\n            \"builtIn\": \"buttons\",\n            \"width\": 75,\n            \"height\": 45,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 30,\n                    \"y\": 45\n                }\n            ]\n        },\n        \"numberOfPins\": 2,\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"Button.onEvent,Button.isPressed,Button.wasPressed\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"button\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"slideswitch\": {\n        \"numberOfPins\": 3,\n        \"simulationBehavior\": \"slideswitch\",\n        \"visual\": {\n            \"builtIn\": \"slideswitch\",\n            \"width\": 100,\n            \"height\": 100,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"DigitalInOutPin.digitalRead,DigitalInOutPin.onPulsed,DigitalInOutPin.onEvent\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"pin\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"microservo\": {\n        \"simulationBehavior\": \"microservo\",\n        \"visual\": {\n            \"builtIn\": \"microservo\",\n            \"width\": 74.85,\n            \"height\": 200,\n            \"pinDistance\": 10,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 37,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 5\n                }\n            ]\n        },\n        \"numberOfPins\": 3,\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"PwmOnlyPin.servoWrite,servos.Servo.setAngle,servos.Servo.run,servos.Servo.setPulse\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"led\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"builtIn\": \"led\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"led\",\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"DigitalInOutPin.digitalWrite\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"analogled\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"builtIn\": \"led\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"led\",\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"AnalogOutPin.analogWrite\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"photocell\": {\n        \"numberOfPins\": 3,\n        \"visual\": {\n            \"builtIn\": \"photocell\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 15,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"photocell\",\n        \"pinDefinitions\": [\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"AnalogInPin.analogRead\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    }\n}",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace light {\n\n    /**\n     * Send a programmable light buffer to the specified digital pin\n     * @param data The pin that the lights are connected to\n     * @param clk the clock line if any\n     * @param mode the color encoding mode\n     * @param buf The buffer to send to the pin\n     */\n    //% shim=light::sendBuffer\n    function sendBuffer(data: DigitalInOutPin, clk: DigitalInOutPin, mode: int32, buf: Buffer): void;\n}\ndeclare namespace control {\n\n    /**\n     * Determines if the USB has been enumerated.\n     */\n    //% shim=control::isUSBInitialized\n    function isUSBInitialized(): boolean;\n}\ndeclare namespace pins {\n\n    /**\n     * Get a pin by configuration id (DAL.CFG_PIN...)\n     */\n    //% shim=pins::pinByCfg\n    function pinByCfg(key: int32): DigitalInOutPin;\n\n    /**\n     * Create a new zero-initialized buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% shim=pins::createBuffer\n    function createBuffer(size: int32): Buffer;\n\n    /**\n     * Get the duration of the last pulse in microseconds. This function should be called from a\n     * ``onPulsed`` handler.\n     */\n    //% help=pins/pulse-duration blockGap=8\n    //% blockId=pins_pulse_duration block=\"pulse duration (µs)\"\n    //% weight=19 shim=pins::pulseDuration\n    function pulseDuration(): int32;\n}\n\n\ndeclare interface AnalogInPin {\n    /**\n     * Read the connector value as analog, that is, as a value comprised between 0 and 1023.\n     * @param name pin to write to\n     */\n    //% help=pins/analog-read weight=53\n    //% blockId=device_get_analog_pin block=\"analog read|pin %name\" blockGap=\"8\"\n    //% blockNamespace=pins\n    //% parts=\"photocell\"\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% trackArgs=0 shim=AnalogInPinMethods::analogRead\n    analogRead(): int32;\n}\n\n\ndeclare interface AnalogOutPin {\n    /**\n     * Set the connector value as analog. Value must be comprised between 0 and 1023.\n     * @param name pin name to write to\n     * @param value value to write to the pin between ``0`` and ``1023``. eg:1023,0\n     */\n    //% help=pins/analog-write weight=52\n    //% blockId=device_set_analog_pin block=\"analog write|pin %name|to %value\" blockGap=8\n    //% blockNamespace=pins\n    //%parts=\"analogled\"\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% value.min=0 value.max=1023\n    //% trackArgs=0 shim=AnalogOutPinMethods::analogWrite\n    analogWrite(value: int32): void;\n}\n\n\ndeclare interface DigitalInOutPin {\n    /**\n     * Read a pin or connector as either 0 or 1\n     * @param name pin to read from\n     */\n    //% help=pins/digital-read weight=61\n    //% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8\n    //% blockNamespace=pins\n    //% parts=\"slideswitch\"\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% trackArgs=0 shim=DigitalInOutPinMethods::digitalRead\n    digitalRead(): boolean;\n\n    /**\n     * Set a pin or connector value to either 0 or 1.\n     * @param name pin to write to\n     * @param value value to set on the pin\n     */\n    //% help=pins/digital-write weight=60\n    //% blockId=device_set_digital_pin block=\"digital write|pin %name|to %value=toggleHighLow\"\n    //% parts=\"led\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% trackArgs=0 shim=DigitalInOutPinMethods::digitalWrite\n    digitalWrite(value: boolean): void;\n\n    /**\n     * Make this pin a digital input, and create events where the timestamp is the duration\n     * that this pin was either ``high`` or ``low``.\n     */\n    //% help=pins/on-pulsed weight=16 blockGap=8\n    //% blockId=pins_on_pulsed block=\"on|pin %pin|pulsed %pulse\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% deprecated=1 hidden=1 shim=DigitalInOutPinMethods::onPulsed\n    onPulsed(pulse: PulseValue, body: () => void): void;\n\n    /**\n     * Register code to run when a pin event occurs.\n     */\n    //% help=pins/on-event weight=20 blockGap=8\n    //% blockId=pinsonevent block=\"on|pin %pin|%event\"\n    //% blockNamespace=pins\n    //% parts=\"slideswitch\"\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% trackArgs=0 shim=DigitalInOutPinMethods::onEvent\n    onEvent(event: PinEvent, body: () => void): void;\n\n    /**\n     * Return the duration of a pulse in microseconds\n     * @param name the pin which measures the pulse\n     * @param value the value of the pulse (default high)\n     * @param maximum duration in micro-seconds\n     */\n    //% blockId=\"pins_pulse_in\" block=\"pulse in (µs)|pin %name|pulsed %high||timeout %maxDuration (µs)\"\n    //% weight=18 blockGap=8\n    //% help=\"pins/pulse-in\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4 maxDuration.defl=2000000 shim=DigitalInOutPinMethods::pulseIn\n    pulseIn(value: PulseValue, maxDuration?: int32): int32;\n\n    /**\n     * Set the pull direction of this pin.\n     * @param name pin to set the pull mode on\n     * @param pull one of the mbed pull configurations: PullUp, PullDown, PullNone\n     */\n    //% help=pins/set-pull weight=17 blockGap=8\n    //% blockId=device_set_pull block=\"set pull|pin %pin|to %pull\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::setPull\n    setPull(pull: PinPullMode): void;\n}\n\n\ndeclare interface PwmPin {}\n\n\ndeclare interface PwmOnlyPin {\n    /**\n     * Set the Pulse-width modulation (PWM) period of the analog output. The period is in\n     * **microseconds** or `1/1000` milliseconds.\n     * If this pin is not configured as an analog output (using `analog write pin`), the operation has\n     * no effect.\n     * @param name analog pin to set period to\n     * @param micros period in micro seconds. eg:20000\n     */\n    //% help=pins/analog-set-period weight=51\n    //% blockId=device_set_analog_period block=\"analog set period|pin %pin|to (µs)%period\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=PwmOnlyPinMethods::analogSetPeriod\n    analogSetPeriod(period: int32): void;\n\n    /**\n     * Write a value to the servo to control the rotation of the shaft. On a standard servo, this will\n     * set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous\n     * rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one\n     * direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).\n     * @param name pin to write to\n     * @param value angle or rotation speed\n     */\n    //% help=pins/servo-write weight=41 group=\"Servo\"\n    //% blockId=device_set_servo_pin block=\"servo write|pin %name|to %value=protractorPicker\" blockGap=8\n    //% parts=microservo trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% value.defl=90 shim=PwmOnlyPinMethods::servoWrite\n    servoWrite(value?: int32): void;\n\n    /**\n     * Set the pin for PWM analog output, make the period be 20 ms, and set the pulse width.\n     * The pulse width is based on the value it is given **microseconds** or `1/1000` milliseconds.\n     * @param name pin name\n     * @param duration pulse duration in micro seconds, eg:1500\n     */\n    //% help=pins/servo-set-pulse weight=40 group=\"Servo\" blockGap=8\n    //% blockId=device_set_servo_pulse block=\"servo set pulse|pin %value|to (µs) %duration\"\n    //% parts=microservo blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=PwmOnlyPinMethods::servoSetPulse\n    servoSetPulse(duration: int32): void;\n\n    /**\n     * Indicates if the servo is running continuously\n     */\n    //% blockHidden=1 shim=PwmOnlyPinMethods::servoSetContinuous\n    servoSetContinuous(continuous: boolean): void;\n}\ndeclare namespace control {\n\n    /**\n     * Announce that an event happened to registered handlers.\n     * @param src ID of the MicroBit Component that generated the event\n     * @param value Component specific code indicating the cause of the event.\n     */\n    //% weight=21 blockGap=12 blockId=\"control_raise_event\"\n    //% help=control/raise-event\n    //% block=\"raise event|from %src|with value %value\" blockExternalInputs=1 shim=control::raiseEvent\n    function raiseEvent(src: int32, value: int32): void;\n\n    /**\n     * Determine the version of system software currently running.\n     */\n    //% blockId=\"control_device_dal_version\" block=\"device dal version\"\n    //% help=control/device-dal-version shim=control::deviceDalVersion\n    function deviceDalVersion(): string;\n\n    /**\n     * Allocates the next user notification event\n     */\n    //% help=control/allocate-notify-event shim=control::allocateNotifyEvent\n    function allocateNotifyEvent(): int32;\n\n    /** Write a message to DMESG debugging buffer. */\n    //% shim=control::dmesg\n    function dmesg(s: string): void;\n\n    /** Write a message and value (pointer) to DMESG debugging buffer. */\n    //% shim=control::dmesgPtr\n    function dmesgPtr(str: string, ptr: Object): void;\n}\n\n\ndeclare interface I2C {\n    /**\n     * Read `size` bytes from a 7-bit I2C `address`.\n     */\n    //% repeat.defl=0 shim=I2CMethods::readBuffer\n    readBuffer(address: int32, size: int32, repeat?: boolean): Buffer;\n\n    /**\n     * Write bytes to a 7-bit I2C `address`.\n     */\n    //% repeat.defl=0 shim=I2CMethods::writeBuffer\n    writeBuffer(address: int32, buf: Buffer, repeat?: boolean): int32;\n}\ndeclare namespace pins {\n\n    /**\n     * Opens a Serial communication driver\n     */\n    //% help=pins/create-i2c\n    //% parts=i2c shim=pins::createI2C\n    function createI2C(sda: DigitalInOutPin, scl: DigitalInOutPin): I2C;\n}\ndeclare namespace pins {\n\n    /**\n     * Opens a SPI driver\n     */\n    //% help=pins/create-spi\n    //% parts=spi shim=pins::createSPI\n    function createSPI(mosiPin: DigitalInOutPin, misoPin: DigitalInOutPin, sckPin: DigitalInOutPin): SPI;\n\n    /**\n     * Opens a slave SPI driver\n     */\n    //% parts=spi shim=pins::createSlaveSPI\n    function createSlaveSPI(mosiPin: DigitalInOutPin, misoPin: DigitalInOutPin, sckPin: DigitalInOutPin, csPin: DigitalInOutPin): SPI;\n}\n\n\ndeclare interface SPI {\n    /**\n     * Write to the SPI bus\n     */\n    //% shim=SPIMethods::write\n    write(value: int32): int32;\n\n    /**\n     * Transfer buffers over the SPI bus\n     */\n    //% argsNullable shim=SPIMethods::transfer\n    transfer(command: Buffer, response: Buffer): void;\n\n    /**\n     * Sets the SPI clock frequency\n     */\n    //% shim=SPIMethods::setFrequency\n    setFrequency(frequency: int32): void;\n\n    /**\n     * Sets the SPI bus mode\n     */\n    //% shim=SPIMethods::setMode\n    setMode(mode: int32): void;\n}\ndeclare namespace configStorage {\n\n    /**\n     * Puts an entry in the device storage. Key may have up to 16 characters (bytes).\n     * @param key the identifier (max 16 characters)\n     * @param value the data (max 32 characters)\n     */\n    //% shim=configStorage::setBuffer\n    function setBuffer(key: string, value: Buffer): void;\n\n    /**\n     * Gets an entry from the device storage. Key may have up to 16 characters (bytes).\n     * @param key the identifier (max 16 characters)\n     */\n    //% shim=configStorage::getBuffer\n    function getBuffer(key: string): Buffer;\n\n    /**\n     * Removes the key from local storage\n     * @param key the identifier (max 16 characters)\n     */\n    //% shim=configStorage::removeItem\n    function removeItem(key: string): void;\n\n    /**\n     * Clears the local storage\n     */\n    //% shim=configStorage::clear\n    function clear(): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "spi.cpp": "#include \"pxt.h\"\n#include \"ErrorNo.h\"\n\nnamespace pins {\n\nclass CodalSPIProxy {\nprivate:\n    DevicePin* mosi; \n    DevicePin* miso; \n    DevicePin* sck;\n    CODAL_SPI spi;\npublic:\n    CodalSPIProxy* next;\n\npublic:\n    CodalSPIProxy(DevicePin* _mosi, DevicePin* _miso, DevicePin* _sck)\n        : mosi(_mosi)\n        , miso(_miso)\n        , sck(_sck)\n        , spi(*_mosi, *_miso, *_sck) \n        , next(NULL)\n    {\n    }\n\n#ifdef CODAL_SPI_SLAVE_SUPPORTED\n    CodalSPIProxy(DevicePin* _mosi, DevicePin* _miso, DevicePin* _sck, DevicePin* _cs)\n        : mosi(_mosi)\n        , miso(_miso)\n        , sck(_sck)\n        , spi(*_mosi, *_miso, *_sck, _cs) \n        , next(NULL)\n    {\n    }\n#endif\n\n    CODAL_SPI* getSPI() {\n        return &spi;\n    }\n\n    bool matchPins(DevicePin* mosi, DevicePin* miso, DevicePin* sck) {\n        return this->mosi == mosi && this->miso == miso && this->sck == sck;\n    }\n\n    int write(int value) {\n        return spi.write(value);\n    }\n\n    void transfer(Buffer command, Buffer response) {\n        auto cdata = NULL == command ? NULL : command->data;\n        auto clength = NULL == command ? 0 : command->length;\n        auto rdata = NULL == response ? NULL : response->data;\n        auto rlength = NULL == response ? 0 : response->length;\n        spi.transfer(cdata, clength, rdata, rlength);\n    }\n\n    void setFrequency(int frequency) {\n        spi.setFrequency(frequency);\n    }\n\n    void setMode(int mode) {\n        spi.setMode(mode);\n    }\n};\n\nSPI_ spis(NULL);\n\n/**\n* Opens a SPI driver\n*/\n//% help=pins/create-spi\n//% parts=spi\nSPI_ createSPI(DigitalInOutPin mosiPin, DigitalInOutPin misoPin, DigitalInOutPin sckPin) {\n  auto dev = spis;\n  while(dev) {\n    if (dev->matchPins(mosiPin, misoPin, sckPin))\n      return dev;\n    dev = dev->next;\n  }\n\n  auto ser = new CodalSPIProxy(mosiPin, misoPin, sckPin);\n  ser->next = spis;\n  spis = ser;\n  return ser;\n}\n\n/**\n* Opens a slave SPI driver\n*/\n//% parts=spi\nSPI_ createSlaveSPI(DigitalInOutPin mosiPin, DigitalInOutPin misoPin, DigitalInOutPin sckPin, DigitalInOutPin csPin) {\n#ifdef CODAL_SPI_SLAVE_SUPPORTED\n  auto dev = spis;\n  if (!csPin)\n    soft_panic(PANIC_CODAL_HARDWARE_CONFIGURATION_ERROR);\n  while(dev) {\n    if (dev->matchPins(mosiPin, misoPin, sckPin))\n      return dev;\n    dev = dev->next;\n  }\n\n  auto ser = new CodalSPIProxy(mosiPin, misoPin, sckPin, csPin);\n  ser->next = spis;\n  spis = ser;\n  return ser;\n#else\n  soft_panic(PANIC_CODAL_HARDWARE_CONFIGURATION_ERROR);\n  return NULL;\n#endif\n}\n\n}\n\nnamespace pxt {\n\nCODAL_SPI* getSPI(DigitalInOutPin mosiPin, DigitalInOutPin misoPin, DigitalInOutPin sckPin) {\n    auto spi = pins::createSPI(mosiPin, misoPin, sckPin);\n    return spi->getSPI();\n}\n\n}\n\nnamespace SPIMethods {\n\n/**\n* Write to the SPI bus\n*/\n//%\nint write(SPI_ device, int value) {\n    return device->write(value);\n}\n\n/**\n* Transfer buffers over the SPI bus\n*/\n//% argsNullable\nvoid transfer(SPI_ device, Buffer command, Buffer response) {\n    if (!device)\n        soft_panic(PANIC_CAST_FROM_NULL);\n    if (!command && !response)\n        return;\n    device->transfer(command, response);\n}\n\n/**\n* Sets the SPI clock frequency\n*/\n//%\nvoid setFrequency(SPI_ device, int frequency) {\n    device->setFrequency(frequency);\n}\n\n/**\n* Sets the SPI bus mode\n*/\n//%\nvoid setMode(SPI_ device, int mode) {\n    device->setMode(mode);\n}\n\n}\n",
            "spi.ts": "namespace pins {\n\n    let _spi: SPI;\n    /**\n    * Gets the default SPI driver\n    */\n    //%\n    export function spi() {\n        if (!_spi) {\n            const mosi = pins.pinByCfg(DAL.CFG_PIN_MOSI);\n            const miso = pins.pinByCfg(DAL.CFG_PIN_MISO);\n            const sck = pins.pinByCfg(DAL.CFG_PIN_SCK);\n            _spi = pins.createSPI(mosi, miso, sck);\n        }\n        return _spi;\n    }\n\n    /**\n     * Write to the SPI slave and return the response\n     * @param value Data to be sent to the SPI slave\n     */\n    //% help=pins/spi-write weight=5 advanced=true\n    //% blockId=spi_write block=\"spi write %value\"\n    export function spiWrite(value: number) {\n        return spi().write(value);\n    }\n\n    /**\n     * Write a given command to SPI bus, and at the same time read the response.\n     */\n    //% help=pins/spi-transfer weight=4 advanced=true\n    //% blockId=spi_transfer block=\"spi transfer %command into %response\"\n    export function spiTransfer(command: Buffer, response: Buffer) {\n        spi().transfer(command, response);\n    }\n\n    /**\n     * Set the SPI frequency\n     * @param frequency the clock frequency, eg: 1000000\n     */\n    //% help=pins/spi-frequency weight=4 advanced=true\n    //% blockId=spi_frequency block=\"spi frequency %frequency\"\n    export function spiFrequency(frequency: number) {\n        spi().setFrequency(frequency);\n    }\n\n    /**\n     * Set the SPI signal mode\n     * @param mode the mode, eg: 3\n     */\n    //% help=pins/spi-mode weight=3 advanced=true\n    //% blockId=spi_mode block=\"spi mode %mode\"\n    export function spiMode(mode: number) {\n        spi().setMode(mode);\n    }\n}",
            "test.ts": "",
            "timer.ts": "namespace control {\n    /**\n     * A timer\n     */\n    //% fixedInstances\n    export class Timer {\n        start: number;\n\n        constructor() {\n            this.start = control.millis();\n        }\n\n        /**\n         * Gets the elapsed time in millis since the last reset\n         */\n        //% blockId=timerMillis block=\"%timer|millis\"\n        millis(): number {\n            return control.millis() - this.start;\n        }\n\n        /**\n         * Gets the elapsed time in seconds since the last reset\n         */\n        //% blockId=timerSeconds block=\"%timer|seconds\"\n        seconds(): number {\n            return this.millis() / 1000;\n        }\n\n        /**\n         * Resets the timer\n         */\n        //% blockId=timerRest block=\"%timer|reset\"\n        reset() {\n            this.start = control.millis();\n        }\n\n        /**\n         * Pauses until the timer reaches the given amount of milliseconds\n         * @param ms how long to pause for, eg: 5, 100, 200, 500, 1000, 2000\n         */\n        //% blockId=timerPauseUntil block=\"%timer|pause until (ms) %ms\"\n        pauseUntil(ms: number) {\n            const remaining = this.millis() - ms;\n            pause(Math.max(0, remaining));\n        }\n    }\n\n    //% whenUsed fixedInstance block=\"timer 1\"\n    export const timer1 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 2\"\n    export const timer2 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 3\"\n    export const timer3 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 4\"\n    export const timer4 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 5\"\n    export const timer5 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 6\"\n    export const timer6 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 7\"\n    export const timer7 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 8\"\n    export const timer8 = new Timer();\n}",
            "uf2format.h": "#ifndef UF2FORMAT_H\n#define UF2FORMAT_H 1\n\n#include <stdint.h>\n#include <stdbool.h>\n\n// All entries are little endian.\n\n#ifndef BOOTLOADER_START\n#define BOOTLOADER_START 0x0\n#endif\n\n#ifndef BOOTLOADER_END\n#define BOOTLOADER_END 0x2000\n#endif\n\n#ifndef UF2_BINFO\n#define UF2_BINFO ((UF2_BInfo *)(BOOTLOADER_END - sizeof(UF2_BInfo)))\n#endif\n\n#ifndef UF2_INFO_TXT\n#define UF2_INFO_TXT UF2_BINFO->info_uf2\n#endif\n\n\n#define UF2_MAGIC_START0 0x0A324655UL // \"UF2\\n\"\n#define UF2_MAGIC_START1 0x9E5D5157UL // Randomly selected\n#define UF2_MAGIC_END 0x0AB16F30UL    // Ditto\n\n// If set, the block is \"comment\" and should not be flashed to the device\n#define UF2_FLAG_NOFLASH 0x00000001\n\ntypedef struct {\n    // 32 byte header\n    uint32_t magicStart0;\n    uint32_t magicStart1;\n    uint32_t flags;\n    uint32_t targetAddr;\n    uint32_t payloadSize;\n    uint32_t blockNo;\n    uint32_t numBlocks;\n    uint32_t reserved;\n\n    // raw data;\n    uint8_t data[476];\n\n    // store magic also at the end to limit damage from partial block reads\n    uint32_t magicEnd;\n} UF2_Block;\n\ntypedef struct {\n    uint8_t version;\n    uint8_t ep_in;\n    uint8_t ep_out;\n    uint8_t reserved0;\n    uint32_t cbw_tag;\n    uint32_t blocks_remaining;\n    uint8_t *buffer;\n} UF2_HandoverArgs;\n\ntypedef void (*UF2_MSC_Handover_Handler)(UF2_HandoverArgs *handover);\ntypedef void (*UF2_HID_Handover_Handler)(int ep);\n\n// this is required to be exactly 16 bytes long by the linker script\ntypedef struct {\n    void *reserved0;\n    UF2_HID_Handover_Handler handoverHID;\n    UF2_MSC_Handover_Handler handoverMSC;\n    const char *info_uf2;\n} UF2_BInfo;\n\nstatic inline bool is_uf2_block(void *data) {\n    UF2_Block *bl = (UF2_Block *)data;\n    return bl->magicStart0 == UF2_MAGIC_START0 && bl->magicStart1 == UF2_MAGIC_START1 &&\n           bl->magicEnd == UF2_MAGIC_END;\n}\n\nstatic inline bool in_uf2_bootloader_space(const void *addr) {\n    return (BOOTLOADER_START + 0x100) <= (uint32_t)addr && (uint32_t)addr < (BOOTLOADER_END);\n}\n\nstatic inline const char *uf2_info(void) {\n    if (in_uf2_bootloader_space(UF2_INFO_TXT))\n        return UF2_INFO_TXT;\n    return \"N/A\";\n}\n\n#ifdef UF2_DEFINE_HANDOVER\nstatic inline void hf2_handover(uint8_t ep) {\n    const char *board_info = UF2_BINFO->info_uf2;\n    UF2_HID_Handover_Handler fn = UF2_BINFO->handoverHID;\n\n    if (in_uf2_bootloader_space(board_info) && in_uf2_bootloader_space((const void *)fn) &&\n        ((uint32_t)fn & 1)) {\n        // Pass control to bootloader; never returns\n        fn(ep & 0xf);\n    }\n}\n\nstatic inline void check_uf2_handover(uint8_t *buffer, uint32_t blocks_remaining, uint8_t ep_in,\n                                      uint8_t ep_out, uint32_t cbw_tag) {\n    if (!is_uf2_block(buffer))\n        return;\n\n    const char *board_info = UF2_BINFO->info_uf2;\n    UF2_MSC_Handover_Handler fn = UF2_BINFO->handoverMSC;\n\n    if (in_uf2_bootloader_space(board_info) && in_uf2_bootloader_space((const void *)fn) &&\n        ((uint32_t)fn & 1)) {\n        UF2_HandoverArgs hand = {\n            1, ep_in, ep_out, 0, cbw_tag, blocks_remaining, buffer,\n        };\n        // Pass control to bootloader; never returns\n        fn(&hand);\n    }\n}\n#endif\n\n#endif\n",
            "uf2hid.h": "#ifndef UF2_HID_H\n#define UF2_HID_H 1\n\n#define HF2_CMD_BININFO 0x0001\n// no arguments\n#define HF2_MODE_BOOTLOADER 0x01\n#define HF2_MODE_USERSPACE 0x02\nstruct HF2_BININFO_Result {\n    uint32_t mode;\n    uint32_t flash_page_size;\n    uint32_t flash_num_pages;\n    uint32_t max_message_size;\n    uint32_t uf2_family;\n};\n\n#define HF2_CMD_INFO 0x0002\n// no arguments\n// results is utf8 character array\n\n#define HF2_CMD_RESET_INTO_APP 0x0003\n// no arguments, no result\n\n#define HF2_CMD_RESET_INTO_BOOTLOADER 0x0004\n// no arguments, no result\n\n#define HF2_CMD_START_FLASH 0x0005\n// no arguments, no result\n\n#define HF2_CMD_WRITE_FLASH_PAGE 0x0006\nstruct HF2_WRITE_FLASH_PAGE_Command {\n    uint32_t target_addr;\n    uint32_t data[0];\n};\n// no result\n\n#define HF2_CMD_CHKSUM_PAGES 0x0007\nstruct HF2_CHKSUM_PAGES_Command {\n    uint32_t target_addr;\n    uint32_t num_pages;\n};\nstruct HF2_CHKSUM_PAGES_Result {\n    uint16_t chksums[0 /* num_pages */];\n};\n\n#define HF2_CMD_READ_WORDS 0x0008\nstruct HF2_READ_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n};\nstruct HF2_READ_WORDS_Result {\n    uint32_t words[0 /* num_words */];\n};\n\n#define HF2_CMD_WRITE_WORDS 0x0009\nstruct HF2_WRITE_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n    uint32_t words[0 /* num_words */];\n};\n// no result\n\n#define HF2_CMD_DMESG 0x0010\n// no arguments\n// results is utf8 character array\n\n#define HF2_EV_MASK 0x800000\n\n#define HF2_CMD_JDS_CONFIG 0x0020\n#define HF2_CMD_JDS_SEND 0x0021\n#define HF2_EV_JDS_PACKET 0x800020\n\ntypedef struct {\n    uint32_t command_id;\n    uint16_t tag;\n    uint8_t reserved0;\n    uint8_t reserved1;\n\n    union {\n        struct HF2_WRITE_FLASH_PAGE_Command write_flash_page;\n        struct HF2_WRITE_WORDS_Command write_words;\n        struct HF2_READ_WORDS_Command read_words;\n        struct HF2_CHKSUM_PAGES_Command chksum_pages;\n        uint8_t data8[0];\n        uint16_t data16[0];\n        uint32_t data32[0];\n    };\n} HF2_Command;\n\ntypedef struct {\n    union {\n        uint32_t eventId;\n        struct {\n            uint16_t tag;\n            union {\n                struct {\n                    uint8_t status;\n                    uint8_t status_info;\n                };\n                uint16_t status16;\n            };\n        };\n    };\n    union {\n        struct HF2_BININFO_Result bininfo;\n        uint8_t data8[0];\n        uint16_t data16[0];\n        uint32_t data32[0];\n    };\n} HF2_Response;\n\n#define HF2_FLAG_SERIAL_OUT 0x80\n#define HF2_FLAG_SERIAL_ERR 0xC0\n#define HF2_FLAG_CMDPKT_LAST 0x40\n#define HF2_FLAG_CMDPKT_BODY 0x00\n#define HF2_FLAG_MASK 0xC0\n#define HF2_SIZE_MASK 63\n\n#define HF2_STATUS_OK 0x00\n#define HF2_STATUS_INVALID_CMD 0x01\n#define HF2_STATUS_INVALID_STATE 0x02\n\n#endif\n",
            "usb.cpp": "#include \"pxt.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#include \"uf2format.h\"\n\nnamespace pxt {\nCodalUSB usb;\n\n// share the buffer; we will crash anyway if someone talks to us over both at the same time\nHF2_Buffer hf2buf;\nHF2 hf2(hf2buf);\n#ifdef HF2_HID\nHF2 hf2hid(hf2buf);\n#endif\nDummyIface dummyIface;\n\n#if CONFIG_ENABLED(DEVICE_MOUSE)\nUSBHIDMouse mouse;\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\nUSBHIDKeyboard keyboard;\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\nUSBHIDJoystick joystick;\n#endif\n\nstatic const DeviceDescriptor device_desc = {\n    0x12,   // bLength\n    0x01,   // bDescriptorType\n    0x0210, // bcdUSBL\n\n    // Class etc specified per-interface\n    0x00, 0x00, 0x00,\n\n    0x40, // bMaxPacketSize0\n    USB_DEFAULT_VID, USB_DEFAULT_PID,\n    0x4202, // bcdDevice - leave unchanged for the HF2 to work\n    0x01,   // iManufacturer\n    0x02,   // iProduct\n    0x03,   // SerialNumber\n    0x01    // bNumConfigs\n};\n\nstatic void start_usb() {\n    // start USB with a delay, so that user code can add new interfaces if needed\n    // (eg USB HID keyboard, or MSC)\n    fiber_sleep(500);\n    usb.start();\n}\n\nvoid platform_usb_init() __attribute__((weak));\nvoid platform_usb_init() {}\n\nvoid set_usb_strings(const char *uf2_info) {\n    static const char *string_descriptors[3];\n    static char serial[12];\n    itoa(target_get_serial() & 0x7fffffff, serial);\n\n    auto model = strstr(uf2_info, \"Model: \");\n    if (model) {\n        model += 7;\n        auto end = model;\n        while (*end && *end != '\\n' && *end != '\\r')\n            end++;\n        auto len = end - model;\n        auto dev = (char *)app_alloc(len + 10);\n        memcpy(dev, model, len);\n        strcpy(dev + len, \" (app)\");\n        // try to split into manufacturer and\n        auto sep = strstr(dev, \" / \");\n        if (sep) {\n            *sep = '\\0';\n            string_descriptors[0] = dev;\n            string_descriptors[1] = sep + 3;\n        } else {\n            string_descriptors[0] = dev;\n            string_descriptors[1] = dev;\n        }\n    } else {\n        string_descriptors[0] = \"Unknown Corp.\";\n        string_descriptors[1] = \"PXT Device (app)\";\n    }\n\n    string_descriptors[2] = serial;\n    usb.stringDescriptors = string_descriptors;\n}\n\nvoid usb_init() {\n    usb.deviceDescriptor = &device_desc;\n    set_usb_strings(UF2_INFO_TXT);\n\n    platform_usb_init();\n\n    usb.add(hf2);\n\n#ifdef HF2_HID\n    hf2hid.useHID = true;\n    usb.add(hf2hid);\n#else\n    // the WINUSB descriptors don't seem to work if there's only one interface\n    // so we add a dummy interface\n    usb.add(dummyIface);\n#endif\n\n#if CONFIG_ENABLED(DEVICE_MOUSE)\n    usb.add(mouse);\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\n    usb.add(keyboard);\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\n    usb.add(joystick);\n#endif\n\n    create_fiber(start_usb);\n}\n\n} // namespace pxt\n\n#else\nnamespace pxt {\nvoid usb_init() {}\n} // namespace pxt\n#endif\n\nnamespace control {\n/**\n * Determines if the USB has been enumerated.\n */\n//%\nbool isUSBInitialized() {\n#if CONFIG_ENABLED(DEVICE_USB)\n    return pxt::usb.isInitialised();\n#else\n    return false;\n#endif\n}\n} // namespace control\n\nnamespace pxt {\nstatic void (*pSendToUART)(const char *data, int len) = NULL;\nvoid setSendToUART(void (*f)(const char *, int)) {\n    pSendToUART = f;\n}\n\nvoid sendSerial(const char *data, int len) {\n#if CONFIG_ENABLED(DEVICE_USB)\n    hf2.sendSerial(data, len);\n#if HF2_HID\n    hf2hid.sendSerial(data, len);\n#endif\n#endif\n    if (pSendToUART)\n        pSendToUART(data, len);\n}\n\nvoid dumpDmesg() {\n    sendSerial(\"\\nDMESG:\\n\", 8);\n    sendSerial(codalLogStore.buffer, codalLogStore.ptr);\n    sendSerial(\"\\n\\n\", 2);\n}\n\nvoid (*logJDFrame)(const uint8_t *data);\nvoid (*sendJDFrame)(const uint8_t *data);\n\n} // namespace pxt\n"
        },
        "stm32-discovery-DISCO_L475VG_IOT": {
            "README.md": "# Support for boards based on STM32F4\n\n",
            "board.json": "{\n  \"visual\": {\n    \"image\": \"pkg://board.svg\",\n    \"outlineImage\": \"pkg://boardwireframe.svg\",\n    \"useCrocClips\": false,\n    \"width\": 350,\n    \"height\": 350,\n    \"pinDist\": 10,\n    \"pinBlocks\": [\n      {\n        \"x\": 111.893255123826,\n        \"y\": 93.3587830762523,\n        \"labels\": [\n          \"SCL\",\n          \"SDA\",\n          \"AREF\",\n          \"GND0\",\n          \"~D13\",\n          \"~D12\",\n          \"~D11\",\n          \"~D10\",\n          \"~D9\",\n          \"~D8\"\n        ]\n      },\n      {\n        \"x\": 216.74056057524268,\n        \"y\": 93.35989712141898,\n        \"labels\": [\"D7\", \"~D6\", \"~D5\", \"~D4\", \"~D3\", \"D2\", \"TX/D1\", \"RX/D0\"]\n      },\n      {\n        \"x\": 147.55630353559405,\n        \"y\": 277.17711508873947,\n        \"labels\": [\" \", \"IOREF\", \"RESET\", \"3.3V\", \"5V\", \"GND1\", \"GND2\", \"VIN\"]\n      },\n      {\n        \"x\": 236.509741585078,\n        \"y\": 277.17711508873947,\n        \"labels\": [\"A0\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\"]\n      }\n    ],\n    \"leds\": [\n      {\n        \"x\": 369,\n        \"y\": 110,\n        \"h\": 7,\n        \"w\": 17,\n        \"color\": \"#1EFF1E\",\n        \"label\": \"LED2\"\n      },\n      {\n        \"x\": 332,\n        \"y\": 110,\n        \"h\": 7,\n        \"w\": 17,\n        \"color\": \"#1EFF1E\",\n        \"label\": \"LED\"\n      }\n    ],\n    \"buttons\": [\n      {\n        \"x\": 33.6,\n        \"y\": 163,\n        \"w\": 19,\n        \"h\": 19,\n        \"index\": 0,\n        \"label\": \"USER\"\n      }\n    ],\n    \"reset\": {\n      \"x\": 33.6,\n      \"y\": 235,\n      \"w\": 19,\n      \"h\": 19\n    }\n  },\n  \"gpioPinBlocks\": [\n    [\"SCL\", \"SDA\", \"~D13\", \"~D12\", \"~D11\", \"~D10\", \"~D9\", \"~D8\"],\n    [\"D7\", \"~D6\", \"~D5\", \"~D4\", \"~D3\", \"D2\", \"TX/D1\", \"RX/D0\"],\n    [\"A0\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\"]\n  ],\n  \"gpioPinMap\": {\n    \"A0\": \"A0\",\n    \"A1\": \"A1\",\n    \"A2\": \"A2\",\n    \"A3\": \"A3\",\n    \"A4\": \"A4\",\n    \"A5\": \"A5\",\n\n    \"D0\": \"RX/D0\",\n    \"D1\": \"TX/D1\",\n    \"D2\": \"D2\",\n    \"D3\": \"~D3\",\n    \"D4\": \"~D4\",\n    \"D5\": \"~D5\",\n    \"D6\": \"~D6\",\n    \"D7\": \"D7\",\n    \"D8\": \"~D8\",\n    \"D9\": \"~D9\",\n    \"D10\": \"~D10\",\n    \"D11\": \"~D11\",\n    \"D12\": \"~D12\",\n    \"D13\": \"~D13\",\n    \"D14\": \"SDA\",\n    \"D15\": \"SCL\",\n\n    \"LCD_RESET\": \"D7\",\n    \"LCD_ENABLE\": \"D8\",\n    \"LCD_DATALINE4\": \"D9\",\n    \"LCD_DATALINE5\": \"D10\",\n    \"LCD_DATALINE6\": \"D11\",\n    \"LCD_DATALINE7\": \"D12\",\n\n    \"BTN_USER\": \"BTN_USER\"\n  },\n  \"spiPins\": {\n    \"MOSI\": \"~D11\",\n    \"MISO\": \"~D12\",\n    \"SCK\": \"~D13\"\n  },\n  \"i2cPins\": {\n    \"SDA\": \"SDA\",\n    \"SCL\": \"SCL\"\n  },\n  \"groundPins\": [\"GND1\", \"GND0\", \"GND2\"],\n  \"threeVoltPins\": [\"3.3V\"],\n  \"fiveVoltPins\": [\"5V\"],\n  \"onboardComponents\": [\"accelerometer\", \"thermometer\", \"humidity\", \"pressure\"],\n  \"marginWhenBreadboarding\": [0, 0, 80, 0]\n}\n",
            "board.svg": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   id=\"svg1025\"\n   version=\"1.1\"\n   height=\"350\"\n   width=\"350\"\n   viewBox=\"0 0 350 350\"\n   style=\"isolation:isolate\">\n  <metadata\n     id=\"metadata1031\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <defs\n     id=\"defs1029\" />\n  <switch\n     id=\"switch1023\">\n    <g\n       id=\"g1021\">\n      <g\n         id=\"IOT_NODE\">\n        <path\n           fill=\"rgb(0,86,121)\"\n           id=\"path29\"\n           d=\" M 13.57085 58.50217 C 11.29618 58.49713 9.11322 59.3985 7.50478 61.00694 C 5.89635 62.61537 4.99497 64.79833 5.00002 67.073 L 5.00002 285.63758 C 4.99487 287.91231 5.8962 290.09536 7.50465 291.70388 C 9.1131 293.3124 11.29611 294.21383 13.57085 294.20878 L 336.42915 294.20878 C 338.70383 294.21383 340.88678 293.31245 342.4952 291.70402 C 344.10366 290.09558 345.00503 287.91262 344.99999 285.63795 L 344.99999 67.073 C 345.00503 64.79833 344.10366 62.61537 342.4952 61.00694 C 340.88678 59.3985 338.70383 58.49713 336.42915 58.50217 L 13.57085 58.50217 Z  M 169.8374 62.88522 C 170.94981 62.88544 171.85149 63.78728 171.85149 64.89968 C 171.85149 66.01209 170.94981 66.91393 169.8374 66.91413 C 168.72486 66.91413 167.82295 66.01223 167.82295 64.89968 C 167.82295 63.78713 168.72486 62.88522 169.8374 62.88522 Z  M 179.42323 62.88522 C 180.53579 62.88522 181.43769 63.78713 181.43769 64.89968 C 181.43769 66.01223 180.53579 66.91413 179.42323 66.91413 C 178.31083 66.91393 177.40915 66.01209 177.40915 64.89968 C 177.40915 63.78728 178.31083 62.88544 179.42323 62.88522 L 179.42323 62.88522 Z  M 189.00982 62.88522 C 190.12222 62.88544 191.0239 63.78728 191.0239 64.89968 C 191.0239 66.01209 190.12222 66.91393 189.00982 66.91413 C 188.47555 66.91424 187.96312 66.7021 187.58527 66.32438 C 187.20741 65.94667 186.99509 65.43433 186.99498 64.90006 C 186.99498 63.78751 187.89689 62.8856 189.00944 62.8856 L 189.00982 62.88522 Z  M 198.59565 62.88522 C 199.1299 62.88522 199.64231 63.09746 200.02008 63.47524 C 200.39787 63.85302 200.6101 64.36542 200.6101 64.89968 C 200.6101 66.01223 199.70819 66.91413 198.59565 66.91413 C 197.48309 66.91413 196.58118 66.01223 196.58118 64.89968 C 196.58118 63.78713 197.48309 62.88522 198.59565 62.88522 L 198.59565 62.88522 Z  M 208.18186 62.88522 C 209.29441 62.88522 210.19631 63.78713 210.19631 64.89968 C 210.19631 66.01223 209.29441 66.91413 208.18186 66.91413 C 207.06946 66.91393 206.16778 66.01209 206.16778 64.89968 C 206.16778 63.78728 207.06946 62.88544 208.18186 62.88522 L 208.18186 62.88522 Z  M 223.93996 64.52431 C 225.05237 64.52431 225.95421 65.42599 225.95441 66.53839 C 225.95441 67.65095 225.05251 68.55285 223.93996 68.55285 C 222.82742 68.55285 221.92551 67.65095 221.92551 66.53839 C 221.92572 65.42599 222.82756 64.52431 223.93996 64.52431 L 223.93996 64.52431 Z  M 233.57091 64.52431 C 234.68331 64.52431 235.58515 65.42599 235.58536 66.53839 C 235.58536 67.65095 234.68345 68.55285 233.57091 68.55285 C 232.4585 68.55264 231.55683 67.6508 231.55683 66.53839 C 231.55703 65.42614 232.45864 64.52452 233.57091 64.52431 L 233.57091 64.52431 Z  M 243.20222 64.52431 C 244.31449 64.52452 245.2161 65.42614 245.21631 66.53839 C 245.21631 67.6508 244.31463 68.55264 243.20222 68.55285 C 242.08968 68.55285 241.18777 67.65095 241.18777 66.53839 C 241.18798 65.42599 242.08982 64.52431 243.20222 64.52431 L 243.20222 64.52431 Z  M 252.8328 64.52431 C 253.36708 64.52422 253.87948 64.73635 254.25734 65.11407 C 254.6352 65.49178 254.84753 66.00413 254.84762 66.53839 C 254.84762 67.65095 253.94574 68.55285 252.83317 68.55285 C 251.72063 68.55285 250.81872 67.65095 250.81872 66.53839 C 250.81893 65.42599 251.72076 64.52431 252.83317 64.52431 L 252.8328 64.52431 Z  M 18.25949 64.74157 C 19.86695 64.74147 21.4086 65.37998 22.54524 66.51663 C 23.68189 67.65327 24.3204 69.19493 24.3203 70.80238 C 24.3204 72.40991 23.68184 73.95161 22.54511 75.08827 C 21.40838 76.22492 19.86664 76.8634 18.25911 76.86319 C 16.65172 76.86329 15.11013 76.22483 13.97349 75.08827 C 12.83686 73.95171 12.1983 72.41015 12.1983 70.80276 C 12.1982 69.1953 12.83672 67.65365 13.97336 66.51701 C 15.11001 65.38037 16.65165 64.74185 18.25911 64.74195 L 18.25949 64.74157 Z  M 332.75588 66.4982 C 334.3632 66.4982 335.9047 67.13671 337.04125 68.27326 C 338.17781 69.40982 338.81632 70.95131 338.81632 72.55863 C 338.81641 74.16603 338.17795 75.70762 337.04139 76.84425 C 335.90482 77.98089 334.36327 78.61945 332.75588 78.61945 C 331.14843 78.61954 329.60679 77.98103 328.47013 76.84439 C 327.33349 75.70774 326.69496 74.16609 326.69508 72.55863 C 326.69508 70.95124 327.33363 69.40969 328.47027 68.27313 C 329.6069 67.13656 331.1485 66.4981 332.75588 66.4982 L 332.75588 66.4982 Z  M 169.8374 72.70271 C 170.94981 72.70292 171.85149 73.60476 171.85149 74.71717 C 171.85128 75.82943 170.94967 76.73104 169.8374 76.73124 C 168.725 76.73124 167.82316 75.82957 167.82295 74.71717 C 167.82295 73.60462 168.72486 72.70271 169.8374 72.70271 Z  M 179.42323 72.70271 C 180.53579 72.70271 181.43769 73.60462 181.43769 74.71717 C 181.43748 75.82957 180.53564 76.73124 179.42323 76.73124 C 178.31098 76.73104 177.40937 75.82943 177.40915 74.71717 C 177.40915 73.60476 178.31083 72.70292 179.42323 72.70271 L 179.42323 72.70271 Z  M 189.00982 72.70271 C 190.12222 72.70292 191.0239 73.60476 191.0239 74.71717 C 191.02369 75.82943 190.12207 76.73104 189.00982 76.73124 C 188.47555 76.73135 187.96312 76.51921 187.58527 76.1415 C 187.20741 75.76378 186.99509 75.25144 186.99498 74.71717 C 186.99498 73.60462 187.89689 72.70271 189.00944 72.70271 L 189.00982 72.70271 Z  M 198.59565 72.70271 C 199.70819 72.70271 200.6101 73.60462 200.6101 74.71717 C 200.60989 75.82957 199.70805 76.73124 198.59565 76.73124 C 197.48324 76.73124 196.58139 75.82957 196.58118 74.71717 C 196.58118 73.60462 197.48309 72.70271 198.59565 72.70271 Z  M 208.18186 72.70271 C 209.29441 72.70271 210.19631 73.60462 210.19631 74.71717 C 210.19611 75.82957 209.29427 76.73124 208.18186 76.73124 C 207.06959 76.73104 206.16799 75.82943 206.16778 74.71717 C 206.16778 73.60476 207.06946 72.70292 208.18186 72.70271 L 208.18186 72.70271 Z  M 206.07942 122.7172 C 207.19183 122.71741 208.09351 123.61925 208.09351 124.73166 C 208.09351 125.84406 207.19183 126.74591 206.07942 126.74612 C 204.96688 126.74612 204.06497 125.84421 204.06497 124.73166 C 204.06518 123.61925 204.96702 122.71758 206.07942 122.71758 L 206.07942 122.7172 Z  M 215.67436 122.7172 C 216.78677 122.71741 217.68844 123.61925 217.68844 124.73166 C 217.68844 125.84406 216.78677 126.74591 215.67436 126.74612 C 214.56179 126.74612 213.65991 125.84421 213.65991 124.73166 C 213.66012 123.61925 214.56196 122.71758 215.67436 122.71758 L 215.67436 122.7172 Z  M 326.89602 158.23011 C 328.00843 158.23011 328.91026 159.13178 328.9105 160.24418 C 328.9105 161.35674 328.00859 162.25864 326.89602 162.25864 C 325.78361 162.25843 324.88196 161.35659 324.88196 160.24418 C 324.88217 159.13193 325.78378 158.23032 326.89602 158.23011 L 326.89602 158.23011 Z  M 334.66493 158.23011 C 335.77719 158.23032 336.6788 159.13193 336.67901 160.24418 C 336.67901 161.35674 335.7771 162.25864 334.66456 162.25864 C 333.55215 162.25843 332.65047 161.35659 332.65047 160.24418 C 332.65068 159.13193 333.55231 158.23032 334.66456 158.23011 L 334.66493 158.23011 Z  M 246.98999 177.5701 C 248.10256 177.5701 249.00447 178.47201 249.00447 179.58456 C 249.00447 180.69711 248.10256 181.59902 246.98999 181.59902 C 245.87758 181.59881 244.97593 180.69697 244.97593 179.58456 C 244.97593 178.47216 245.87758 177.57031 246.98999 177.5701 L 246.98999 177.5701 Z  M 110.67843 185.06754 C 111.79099 185.06754 112.69288 185.96944 112.69288 187.082 C 112.69267 188.1944 111.79084 189.09607 110.67843 189.09607 C 109.56617 189.09586 108.66456 188.19425 108.66435 187.082 C 108.66435 185.96959 109.56602 185.06775 110.67843 185.06754 L 110.67843 185.06754 Z  M 246.98962 187.16503 C 248.10217 187.16503 249.00407 188.06693 249.00407 189.17949 C 249.00407 190.29204 248.10217 191.19394 246.98962 191.19394 C 245.87721 191.19373 244.97554 190.29189 244.97554 189.17949 C 244.97554 188.06708 245.87721 187.16524 246.98962 187.16503 L 246.98962 187.16503 Z  M 330.7801 187.18323 C 331.89251 187.18344 332.79418 188.08528 332.79418 189.19769 C 332.79418 190.31009 331.89251 191.21193 330.7801 191.21214 C 329.66756 191.21214 328.76565 190.31024 328.76565 189.19769 C 328.76565 188.08513 329.66756 187.18323 330.7801 187.18323 L 330.7801 187.18323 Z  M 110.67843 194.66246 C 111.79099 194.66246 112.69288 195.56437 112.69288 196.67692 C 112.69288 197.78948 111.79099 198.69138 110.67843 198.69138 C 109.56602 198.69117 108.66435 197.78933 108.66435 196.67692 C 108.66435 195.56452 109.56602 194.66267 110.67843 194.66246 L 110.67843 194.66246 Z  M 268.7892 201.72501 C 269.90161 201.72522 270.80328 202.62706 270.80328 203.73946 C 270.80308 204.85172 269.90147 205.75333 268.7892 205.75354 C 267.6768 205.75354 266.77496 204.85187 266.77475 203.73946 C 266.77475 202.62691 267.67666 201.72501 268.7892 201.72501 L 268.7892 201.72501 Z  M 278.38375 201.72501 C 279.49631 201.72501 280.3982 202.62691 280.3982 203.73946 C 280.39799 204.85187 279.49615 205.75354 278.38375 205.75354 C 277.2715 205.75333 276.3699 204.85172 276.36966 203.73946 C 276.36966 202.62706 277.27134 201.72522 278.38375 201.72501 L 278.38375 201.72501 Z  M 233.56105 206.8493 C 234.67359 206.8493 235.5755 207.75121 235.5755 208.86376 C 235.57529 209.97617 234.67346 210.87784 233.56105 210.87784 C 232.44878 210.87763 231.54718 209.97602 231.54697 208.86376 C 231.54697 207.75135 232.44864 206.84951 233.56105 206.8493 L 233.56105 206.8493 Z  M 243.15596 206.8493 C 244.26853 206.8493 245.17044 207.75121 245.17044 208.86376 C 245.17023 209.97617 244.26837 210.87784 243.15596 210.87784 C 242.04372 210.87763 241.14211 209.97602 241.1419 208.86376 C 241.1419 207.75135 242.04356 206.84951 243.15596 206.8493 L 243.15596 206.8493 Z  M 83.41065 242.84791 C 84.52306 242.84791 85.4249 243.74958 85.42511 244.86198 C 85.42511 245.97454 84.52321 246.87644 83.41065 246.87644 C 82.29825 246.87623 81.39658 245.97439 81.39658 244.86198 C 81.39679 243.74973 82.2984 242.84812 83.41065 242.84791 L 83.41065 242.84791 Z  M 93.07156 242.84791 C 94.18381 242.84812 95.08542 243.74973 95.08563 244.86198 C 95.08563 245.97454 94.18373 246.87644 93.07117 246.87644 C 91.95877 246.87623 91.0571 245.97439 91.0571 244.86198 C 91.05731 243.74973 91.95892 242.84812 93.07117 242.84791 L 93.07156 242.84791 Z  M 102.73169 242.84791 C 103.8441 242.84791 104.74595 243.74958 104.74615 244.86198 C 104.74615 245.97454 103.84425 246.87644 102.73169 246.87644 C 101.61929 246.87623 100.71762 245.97439 100.71762 244.86198 C 100.71783 243.74973 101.61944 242.84812 102.73169 242.84791 L 102.73169 242.84791 Z  M 112.39259 242.84791 C 113.50485 242.84812 114.40647 243.74973 114.40668 244.86198 C 114.40668 245.97454 113.50477 246.87644 112.39221 246.87644 C 111.27981 246.87623 110.37814 245.97439 110.37814 244.86198 C 110.37835 243.74973 111.27996 242.84812 112.39221 242.84791 L 112.39259 242.84791 Z  M 122.05273 242.84791 C 123.16499 242.84812 124.06661 243.74973 124.06682 244.86198 C 124.06682 245.97439 123.16514 246.87623 122.05273 246.87644 C 120.94018 246.87644 120.03828 245.97454 120.03828 244.86198 C 120.03849 243.74958 120.94033 242.84791 122.05273 242.84791 L 122.05273 242.84791 Z  M 131.71364 242.84791 C 132.82589 242.84812 133.7275 243.74973 133.72771 244.86198 C 133.72771 245.97454 132.82581 246.87644 131.71325 246.87644 C 130.6007 246.87644 129.6988 245.97454 129.6988 244.86198 C 129.69901 243.74958 130.60085 242.84791 131.71325 242.84791 L 131.71364 242.84791 Z  M 83.41065 252.62521 C 84.52321 252.62521 85.42511 253.52711 85.42511 254.63966 C 85.4249 255.75207 84.52306 256.65374 83.41065 256.65374 C 82.2984 256.65353 81.39679 255.75192 81.39658 254.63966 C 81.39658 253.52726 82.29825 252.62542 83.41065 252.62521 L 83.41065 252.62521 Z  M 93.06739 252.62521 C 94.17979 252.62542 95.08146 253.52726 95.08146 254.63966 C 95.08125 255.75192 94.17964 256.65353 93.06739 256.65374 C 91.95498 256.65374 91.05314 255.75207 91.05293 254.63966 C 91.05293 253.52711 91.95483 252.62521 93.06739 252.62521 L 93.06739 252.62521 Z  M 102.72373 252.62521 C 103.83614 252.62542 104.73781 253.52726 104.73781 254.63966 C 104.7376 255.75192 103.836 256.65353 102.72373 256.65374 C 101.61133 256.65374 100.70949 255.75207 100.70928 254.63966 C 100.70928 253.52711 101.61118 252.62521 102.72373 252.62521 Z  M 112.38009 252.62521 C 113.49249 252.62542 114.39416 253.52726 114.39416 254.63966 C 114.39395 255.75192 113.49234 256.65353 112.38009 256.65374 C 111.26768 256.65374 110.36583 255.75207 110.36562 254.63966 C 110.36562 253.52711 111.26753 252.62521 112.38009 252.62521 Z  M 122.03643 252.62521 C 123.14899 252.62521 124.05089 253.52711 124.05089 254.63966 C 124.05067 255.75207 123.14884 256.65374 122.03643 256.65374 C 120.92402 256.65374 120.02219 255.75207 120.02198 254.63966 C 120.02198 253.52711 120.92387 252.62521 122.03643 252.62521 Z  M 131.69279 252.62521 C 132.80533 252.62521 133.70724 253.52711 133.70724 254.63966 C 133.70703 255.75207 132.80519 256.65374 131.69279 256.65374 C 130.58052 256.65353 129.67891 255.75192 129.6787 254.63966 C 129.6787 253.52726 130.58038 252.62542 131.69279 252.62521 L 131.69279 252.62521 Z  M 16.66817 273.64487 C 18.2757 273.64466 19.81744 274.28313 20.95417 275.41979 C 22.0909 276.55645 22.72947 278.09815 22.72936 279.70568 C 22.72936 281.31307 22.0908 282.85462 20.95417 283.99119 C 19.81754 285.12774 18.27594 285.76622 16.66855 285.76611 C 15.06116 285.76622 13.51957 285.12774 12.38293 283.99119 C 11.2463 282.85462 10.60774 281.31307 10.60774 279.70568 C 10.60764 278.09829 11.24611 276.55669 12.38267 275.42006 C 13.51923 274.28342 15.06078 273.64487 16.66817 273.64487 L 16.66817 273.64487 Z  M 332.43854 274.40167 C 334.046 274.40156 335.58764 275.04008 336.72427 276.17673 C 337.86093 277.31336 338.49944 278.85502 338.49935 280.46247 C 338.49944 282.06993 337.86093 283.61158 336.72427 284.74823 C 335.58764 285.88488 334.046 286.52338 332.43854 286.52329 C 330.83113 286.52329 329.28958 285.88472 328.15302 284.74809 C 327.01647 283.61145 326.37799 282.06987 326.3781 280.46247 C 326.37799 278.85509 327.01647 277.31349 328.15302 276.17686 C 329.28958 275.04022 330.83113 274.40167 332.43854 274.40167 L 332.43854 274.40167 Z \" />\n        <g\n           id=\"CN5\">\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(255,255,255)\"\n             stroke-width=\"0.38067\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"none\"\n             id=\"path543\"\n             d=\" M 323.4222 157.9992 C 323.43888 156.58382 325.0374 155.64009 326.08578 155.62303 L 336.61493 155.62303 C 337.82483 155.62417 338.89253 156.65585 338.93916 157.94612 L 338.93916 187.93245 L 333.92483 193.38547 C 332.79379 194.35118 330.5435 194.60787 329.20546 193.44727 L 323.70809 187.95027 L 323.4222 157.9992 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(255,255,255)\"\n             stroke-width=\"0.5403\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"none\"\n             id=\"path545\"\n             d=\" M 318.52804 158.21911 C 318.51781 155.28785 321.01683 151.27714 324.58961 151.34388 L 337.48245 151.40643 C 340.00991 151.40795 343.65133 154.10868 343.74535 157.08392 L 343.87615 187.8077 L 333.79516 197.88568 C 332.2846 199.01101 330.11505 198.9875 328.63483 197.71277 L 318.57356 187.54533 L 318.52804 158.21911 Z \" />\n          <g\n             id=\"g6\"\n             transform=\"matrix(0.38996,0,0,0.36865,327.18717,150.88723)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:9px;font-style:normal;stroke:#FFFFFF;stroke-width:0.08727;fill:#ffffff;fill-opacity:1;\"\n               id=\"tspan547\"\n               transform=\"matrix(1,0,0,1,0.17455,9.79418)\">CN5</text>\n          </g>\n          <g\n             id=\"g381\">\n            <ellipse\n               fill=\"rgb(253,216,121)\"\n               id=\"ellipse361\"\n               ry=\"1.6019347803343749\"\n               rx=\"1.66259988128121\"\n               cy=\"165.1785238181551\"\n               cx=\"328.5627938383583\"\n               vector-effect=\"non-scaling-stroke\" />\n            <ellipse\n               fill=\"rgb(253,216,121)\"\n               id=\"ellipse363\"\n               ry=\"1.6019347803343749\"\n               rx=\"1.66259988128121\"\n               cy=\"165.1785238181551\"\n               cx=\"333.42207447932515\"\n               vector-effect=\"non-scaling-stroke\" />\n            <ellipse\n               fill=\"rgb(253,216,121)\"\n               id=\"ellipse365\"\n               ry=\"1.6019347803343749\"\n               rx=\"1.66259988128121\"\n               cy=\"169.9653704644051\"\n               cx=\"328.5627938383583\"\n               vector-effect=\"non-scaling-stroke\" />\n            <ellipse\n               fill=\"rgb(253,216,121)\"\n               id=\"ellipse367\"\n               ry=\"1.6019347803343749\"\n               rx=\"1.66259988128121\"\n               cy=\"169.98660320992508\"\n               cx=\"333.42207447932515\"\n               vector-effect=\"non-scaling-stroke\" />\n            <ellipse\n               fill=\"rgb(253,216,121)\"\n               id=\"ellipse369\"\n               ry=\"1.6019347803343749\"\n               rx=\"1.66259988128121\"\n               cy=\"174.7526000583868\"\n               cx=\"328.5627938383583\"\n               vector-effect=\"non-scaling-stroke\" />\n            <ellipse\n               fill=\"rgb(253,216,121)\"\n               id=\"ellipse371\"\n               ry=\"1.6019347803343749\"\n               rx=\"1.66259988128121\"\n               cy=\"174.79468260169511\"\n               cx=\"333.42207447932515\"\n               vector-effect=\"non-scaling-stroke\" />\n            <ellipse\n               fill=\"rgb(253,216,121)\"\n               id=\"ellipse373\"\n               ry=\"1.6019347803343749\"\n               rx=\"1.66259988128121\"\n               cy=\"179.53982206924508\"\n               cx=\"328.5627938383583\"\n               vector-effect=\"non-scaling-stroke\" />\n            <ellipse\n               fill=\"rgb(253,216,121)\"\n               id=\"ellipse375\"\n               ry=\"1.6019347803343749\"\n               rx=\"1.66259988128121\"\n               cy=\"179.6031449411968\"\n               cx=\"333.42207447932515\"\n               vector-effect=\"non-scaling-stroke\" />\n            <ellipse\n               fill=\"rgb(253,216,121)\"\n               id=\"ellipse377\"\n               ry=\"1.6019347803343749\"\n               rx=\"1.66259988128121\"\n               cy=\"184.3266687154951\"\n               cx=\"328.5627938383583\"\n               vector-effect=\"non-scaling-stroke\" />\n            <ellipse\n               fill=\"rgb(253,216,121)\"\n               id=\"ellipse379\"\n               ry=\"1.6019347803343749\"\n               rx=\"1.66259988128121\"\n               cy=\"184.4112243329668\"\n               cx=\"333.42207447932515\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n        </g>\n        <g\n           id=\"CN4\">\n          <path\n             fill=\"rgb(64,64,64)\"\n             id=\"path31\"\n             d=\" M 236.50974 277.17708 L 295.80901 277.17708 L 295.80901 286.85049 L 236.50974 286.85049 L 236.50974 277.17708 Z \" />\n          <g\n             id=\"A0\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_A0\"\n               d=\" M 239.54225 280.1455 L 243.35959 280.1455 L 243.35959 283.88512 L 239.54225 283.88512 L 239.54225 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path35\"\n               d=\" M 239.53959 280.1455 L 243.36223 280.1455 L 244.76664 278.76803 L 238.13367 278.76803 L 239.53959 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path37\"\n               d=\" M 243.36223 280.15081 L 243.36223 283.88777 L 244.76664 285.26221 L 244.76664 278.76803 L 243.36223 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path39\"\n               d=\" M 243.35959 283.88777 L 239.53959 283.88777 L 238.13367 285.26221 L 244.76664 285.26221 L 243.35959 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path41\"\n               d=\" M 239.53959 283.88512 L 239.53959 280.1455 L 238.13101 278.76803 L 238.13101 285.26221 L 239.53959 283.88512 Z \" />\n          </g>\n          <g\n             id=\"A1\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_A1\"\n               d=\" M 249.42683 280.1455 L 253.24456 280.1455 L 253.24456 283.88512 L 249.42683 283.88512 L 249.42683 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path45\"\n               d=\" M 249.42419 280.1455 L 253.24153 280.1455 L 254.64858 278.76803 L 248.01561 278.76803 L 249.42419 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path47\"\n               d=\" M 253.24153 280.15081 L 253.24153 283.88777 L 254.64858 285.26221 L 254.64858 278.76803 L 253.24153 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path49\"\n               d=\" M 253.24153 283.88777 L 249.42419 283.88777 L 248.01561 285.26221 L 254.64858 285.26221 L 253.24153 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path51\"\n               d=\" M 249.42419 283.88512 L 249.42419 280.1455 L 248.01298 278.76803 L 248.01298 285.26221 L 249.42419 283.88512 Z \" />\n          </g>\n          <g\n             id=\"A2\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_A2\"\n               d=\" M 259.30879 280.1455 L 263.12651 280.1455 L 263.12651 283.88512 L 259.30879 283.88512 L 259.30879 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path55\"\n               d=\" M 259.30613 280.1455 L 263.12651 280.1455 L 264.53469 278.76803 L 257.90212 278.76803 L 259.30613 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path57\"\n               d=\" M 263.12651 280.15081 L 263.12651 283.88777 L 264.53469 285.26221 L 264.53469 278.76803 L 263.12651 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path59\"\n               d=\" M 263.12651 283.88777 L 259.30613 283.88777 L 257.90212 285.26221 L 264.53469 285.26221 L 263.12651 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path61\"\n               d=\" M 259.30613 283.88512 L 259.30613 280.1455 L 257.89946 278.76803 L 257.89946 285.26221 L 259.30613 283.88512 Z \" />\n          </g>\n          <g\n             id=\"A3\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_A3\"\n               d=\" M 269.19377 280.1455 L 273.01111 280.1455 L 273.01111 283.88512 L 269.19377 283.88512 L 269.19377 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path65\"\n               d=\" M 269.19111 279.1455 L 273.01111 279.1455 L 274.41969 277.76803 L 267.78672 277.76803 L 269.19111 279.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path67\"\n               d=\" M 273.01111 280.15081 L 273.01111 283.88777 L 274.41969 285.26221 L 274.41969 278.76803 L 273.01111 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path69\"\n               d=\" M 273.00845 283.88777 L 269.19111 283.88777 L 267.78672 285.26221 L 274.41663 285.26221 L 273.00845 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path71\"\n               d=\" M 269.19111 283.88512 L 269.19111 280.1455 L 267.78103 278.76803 L 267.78103 285.26221 L 269.19111 283.88512 Z \" />\n          </g>\n          <g\n             id=\"A4\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_A4\"\n               d=\" M 279.07571 280.1455 L 282.89041 280.1455 L 282.89041 283.88512 L 279.07571 283.88512 L 279.07571 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path75\"\n               d=\" M 279.07305 280.1455 L 282.89458 280.1455 L 284.30124 278.76803 L 277.66866 278.76803 L 279.07305 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path77\"\n               d=\" M 282.89458 280.15081 L 282.89458 283.88777 L 284.30124 285.26221 L 284.30124 278.76803 L 282.89458 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path79\"\n               d=\" M 282.89458 283.88777 L 279.07268 283.88777 L 277.66866 285.26221 L 284.29897 285.26221 L 282.89458 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path81\"\n               d=\" M 279.07305 283.88512 L 279.07305 280.1455 L 277.666 278.76803 L 277.666 285.26221 L 279.07305 283.88512 Z \" />\n          </g>\n          <g\n             id=\"A5\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_A5\"\n               d=\" M 288.95918 280.1455 L 292.77652 280.1455 L 292.77652 283.88512 L 288.95918 283.88512 L 288.95918 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path85\"\n               d=\" M 288.95652 280.1455 L 292.77918 280.1455 L 294.18357 278.76803 L 287.55061 278.76803 L 288.95652 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path87\"\n               d=\" M 292.77955 280.15081 L 292.77955 283.88777 L 294.18357 285.26221 L 294.18357 278.76803 L 292.77955 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path89\"\n               d=\" M 292.77652 283.88777 L 288.95652 283.88777 L 287.55061 285.26221 L 294.18357 285.26221 L 292.77652 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path91\"\n               d=\" M 288.95652 283.88512 L 288.95652 280.1455 L 287.54797 278.76803 L 287.54797 285.26221 L 288.95652 283.88512 Z \" />\n          </g>\n        </g>\n        <g\n           id=\"CN3\">\n          <path\n             fill=\"rgb(64,64,64)\"\n             id=\"path93\"\n             d=\" M 295.8075 103.03331 L 216.74055 103.03331 L 216.74055 93.3599 L 295.8075 93.3599 L 295.8075 103.03331 Z \" />\n          <g\n             id=\"D7\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D7\"\n               d=\" M 223.58885 100.06642 L 219.77265 100.06642 L 219.77265 96.32794 L 223.58885 96.32794 L 223.58885 100.06642 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path97\"\n               d=\" M 223.58885 96.32794 L 224.9997 94.95084 L 218.36712 94.95084 L 219.77001 96.32794 L 223.58885 96.32794 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path99\"\n               d=\" M 223.58885 100.06907 L 224.9997 101.44351 L 224.9997 94.95084 L 223.58885 96.33211 L 223.58885 100.06907 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path101\"\n               d=\" M 219.77001 100.06907 L 218.36712 101.44351 L 224.99856 101.44351 L 223.58885 100.06907 L 219.77001 100.06907 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path103\"\n               d=\" M 219.77001 96.32794 L 218.36409 94.95084 L 218.36409 101.44351 L 219.77001 100.06642 L 219.77001 96.32794 Z \" />\n          </g>\n          <g\n             id=\"D6\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D6\"\n               d=\" M 233.47346 100.06642 L 229.65915 100.06642 L 229.65915 96.32794 L 233.47346 96.32794 L 233.47346 100.06642 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path107\"\n               d=\" M 233.47612 96.32794 L 234.88317 94.95084 L 228.24793 94.95084 L 229.65345 96.32794 L 233.47612 96.32794 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path109\"\n               d=\" M 233.47612 100.06907 L 234.88317 101.44351 L 234.88317 94.95084 L 233.47649 96.33211 L 233.47612 100.06907 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path111\"\n               d=\" M 229.65345 100.06907 L 228.24756 101.44351 L 234.88051 101.44351 L 233.47385 100.06907 L 229.65345 100.06907 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path113\"\n               d=\" M 229.65345 96.32794 L 228.2449 94.95084 L 228.2449 101.44351 L 229.65345 100.06642 L 229.65345 96.32794 Z \" />\n          </g>\n          <g\n             id=\"D5\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D5\"\n               d=\" M 243.35959 100.06642 L 239.54225 100.06642 L 239.54225 96.32794 L 243.35959 96.32794 L 243.35959 100.06642 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path117\"\n               d=\" M 243.35959 96.32794 L 244.76511 94.95084 L 238.13254 94.95084 L 239.53806 96.32794 L 243.35959 96.32794 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path119\"\n               d=\" M 243.35959 100.06907 L 244.76511 101.44351 L 244.76511 94.95084 L 243.35959 96.33211 L 243.35959 100.06907 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path121\"\n               d=\" M 239.53806 100.06907 L 238.13254 101.44351 L 244.76131 101.44351 L 243.35846 100.06907 L 239.53806 100.06907 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path123\"\n               d=\" M 239.53806 96.32794 L 238.12951 94.95084 L 238.12951 101.44351 L 239.53806 100.06642 L 239.53806 96.32794 Z \" />\n          </g>\n          <g\n             id=\"D4\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D4\"\n               d=\" M 253.24304 100.06642 L 249.42683 100.06642 L 249.42683 96.32794 L 253.24304 96.32794 L 253.24304 100.06642 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path127\"\n               d=\" M 253.24304 96.32794 L 254.64592 94.95084 L 248.01298 94.95084 L 249.42419 96.32794 L 253.24304 96.32794 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path129\"\n               d=\" M 253.24304 100.06907 L 254.64592 101.44351 L 254.64592 94.95084 L 253.24304 96.33211 L 253.24304 100.06907 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path131\"\n               d=\" M 249.42419 100.06907 L 248.01298 101.44351 L 254.64592 101.44351 L 253.2404 100.06907 L 249.42419 100.06907 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path133\"\n               d=\" M 249.42419 96.32794 L 248.01032 94.95084 L 248.01032 101.44351 L 249.42456 100.06642 L 249.42419 96.32794 Z \" />\n          </g>\n          <g\n             id=\"D3\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D3\"\n               d=\" M 263.125 100.06642 L 259.30764 100.06642 L 259.30764 96.32794 L 263.125 96.32794 L 263.125 100.06642 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path137\"\n               d=\" M 263.125 96.32794 L 264.53355 94.95084 L 257.90059 94.95084 L 259.305 96.32794 L 263.125 96.32794 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path139\"\n               d=\" M 263.125 100.06907 L 264.53355 101.44351 L 264.53355 94.95084 L 263.125 96.33211 L 263.125 100.06907 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path141\"\n               d=\" M 259.305 100.06907 L 257.90059 101.44351 L 264.53052 101.44351 L 263.12081 100.06907 L 259.305 100.06907 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path143\"\n               d=\" M 259.305 96.32794 L 257.89795 94.95084 L 257.89795 101.44351 L 259.30461 100.06642 L 259.305 96.32794 Z \" />\n          </g>\n          <g\n             id=\"D2\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D2\"\n               d=\" M 273.00581 100.06642 L 269.1896 100.06642 L 269.1896 96.32794 L 273.00581 96.32794 L 273.00581 100.06642 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path147\"\n               d=\" M 273.00581 96.32794 L 274.41663 94.95084 L 267.78406 94.95084 L 269.18694 96.32794 L 273.00581 96.32794 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path149\"\n               d=\" M 273.00581 100.06907 L 274.41663 101.44351 L 274.41663 94.95084 L 273.00581 96.33211 L 273.00581 100.06907 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path151\"\n               d=\" M 269.18694 100.06907 L 267.78406 101.44351 L 274.4155 101.44351 L 273.00581 100.06907 L 269.18694 100.06907 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path153\"\n               d=\" M 269.18694 96.32794 L 267.7814 94.95084 L 267.7814 101.44351 L 269.18694 100.06642 L 269.18694 96.32794 Z \" />\n          </g>\n          <g\n             id=\"D1\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D1\"\n               d=\" M 282.89041 100.06642 L 279.07608 100.06642 L 279.07608 96.32794 L 282.89041 96.32794 L 282.89041 100.06642 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path157\"\n               d=\" M 282.89305 96.32794 L 284.3001 94.95084 L 277.66487 94.95084 L 279.07041 96.32794 L 282.89305 96.32794 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path159\"\n               d=\" M 282.89305 100.06907 L 284.3001 101.44351 L 284.3001 94.95084 L 282.89345 96.33211 L 282.89305 100.06907 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path161\"\n               d=\" M 279.07041 100.06907 L 277.6645 101.44351 L 284.29746 101.44351 L 282.89079 100.06907 L 279.07041 100.06907 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path163\"\n               d=\" M 279.07041 96.32794 L 277.66184 94.95084 L 277.66184 101.44351 L 279.07041 100.06642 L 279.07041 96.32794 Z \" />\n          </g>\n          <g\n             id=\"D0\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D0\"\n               d=\" M 292.77652 100.06642 L 288.95918 100.06642 L 288.95918 96.32794 L 292.77652 96.32794 L 292.77652 100.06642 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path167\"\n               d=\" M 292.77652 96.32794 L 294.18204 94.95084 L 287.54947 94.95084 L 288.95502 96.32794 L 292.77652 96.32794 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path169\"\n               d=\" M 292.77652 100.06907 L 294.18204 101.44351 L 294.18204 94.95084 L 292.77652 96.33211 L 292.77652 100.06907 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path171\"\n               d=\" M 288.95502 100.06907 L 287.54947 101.44351 L 294.17827 101.44351 L 292.77539 100.06907 L 288.95502 100.06907 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path173\"\n               d=\" M 288.95502 96.32794 L 287.54681 94.95084 L 287.54681 101.44351 L 288.95502 100.06642 L 288.95502 96.32794 Z \" />\n          </g>\n        </g>\n        <g\n           id=\"CN2\">\n          <path\n             fill=\"rgb(64,64,64)\"\n             id=\"path175\"\n             d=\" M 147.5563 277.17708 L 226.62513 277.17708 L 226.62513 286.85049 L 147.5563 286.85049 L 147.5563 277.17708 Z \" />\n          <g\n             id=\"NC\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_NC\"\n               d=\" M 150.5903 280.1455 L 154.40765 280.1455 L 154.40765 283.88512 L 150.5903 283.88512 L 150.5903 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path179\"\n               d=\" M 150.58727 280.1455 L 154.40765 280.1455 L 155.81583 278.76803 L 149.18325 278.76803 L 150.58727 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path181\"\n               d=\" M 154.40765 280.15081 L 154.40765 283.88777 L 155.81583 285.26221 L 155.81583 278.76803 L 154.40765 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path183\"\n               d=\" M 154.40651 283.88777 L 150.58727 283.88777 L 149.18325 285.26221 L 155.8147 285.26221 L 154.40651 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path185\"\n               d=\" M 150.58727 283.88512 L 150.58727 280.1455 L 149.1806 278.76803 L 149.1806 285.26221 L 150.58727 283.88512 Z \" />\n          </g>\n          <g\n             id=\"IOREF\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_IOREF\"\n               d=\" M 160.47339 280.1455 L 164.29111 280.1455 L 164.29111 283.88512 L 160.473 283.88512 L 160.47339 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path189\"\n               d=\" M 160.47074 280.1455 L 164.29263 280.1455 L 165.70082 278.76803 L 159.0652 278.76803 L 160.47074 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path191\"\n               d=\" M 164.29224 280.15081 L 164.29224 283.88777 L 165.70082 285.26221 L 165.70082 278.76803 L 164.29224 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path193\"\n               d=\" M 164.29111 283.88777 L 160.47074 283.88777 L 159.0652 285.26221 L 165.69816 285.26221 L 164.29111 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path195\"\n               d=\" M 160.47074 283.88512 L 160.47074 280.1455 L 159.06254 278.76803 L 159.06254 285.26221 L 160.47074 283.88512 Z \" />\n          </g>\n          <g\n             id=\"RST\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_RST\"\n               d=\" M 170.35837 280.1455 L 174.1742 280.1455 L 174.1742 283.88512 L 170.35837 283.88512 L 170.35837 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path199\"\n               d=\" M 170.35381 280.1455 L 174.17571 280.1455 L 175.58125 278.76803 L 168.94866 278.76803 L 170.35381 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path201\"\n               d=\" M 174.17571 280.15081 L 174.17571 283.88777 L 175.58125 285.26221 L 175.58125 278.76803 L 174.17571 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path203\"\n               d=\" M 174.17306 283.88777 L 170.35381 283.88777 L 168.94829 285.26221 L 175.57973 285.26221 L 174.17306 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path205\"\n               d=\" M 170.35381 283.88512 L 170.35381 280.1455 L 168.94563 278.76803 L 168.94563 285.26221 L 170.35381 283.88512 Z \" />\n          </g>\n          <g\n             id=\"3V3\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_3V3\"\n               d=\" M 180.24032 280.1455 L 184.05766 280.1455 L 184.05766 283.88512 L 180.24032 283.88512 L 180.24032 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path209\"\n               d=\" M 180.23767 280.1455 L 184.06069 280.1455 L 185.46357 278.76803 L 178.83062 278.76803 L 180.23767 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path211\"\n               d=\" M 184.06032 280.15081 L 184.06032 283.88777 L 185.46319 285.26221 L 185.46319 278.76803 L 184.06032 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path213\"\n               d=\" M 184.05766 283.88777 L 180.23767 283.88777 L 178.83062 285.26221 L 185.46357 285.26221 L 184.05766 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path215\"\n               d=\" M 180.23767 283.88512 L 180.23767 280.1455 L 178.82796 278.76803 L 178.82796 285.26221 L 180.23767 283.88512 Z \" />\n          </g>\n          <g\n             id=\"5V\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_5V\"\n               d=\" M 190.12492 280.1455 L 193.94113 280.1455 L 193.94113 283.88512 L 190.12492 283.88512 L 190.12492 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path219\"\n               d=\" M 190.12226 280.1455 L 193.94113 280.1455 L 195.34666 278.76803 L 188.71408 278.76803 L 190.12226 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path221\"\n               d=\" M 193.94113 280.15081 L 193.94113 283.88777 L 195.34666 285.26221 L 195.34666 278.76803 L 193.94113 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path223\"\n               d=\" M 193.93961 283.88777 L 190.12226 283.88777 L 188.71408 285.26221 L 195.34666 285.26221 L 193.93961 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path225\"\n               d=\" M 190.12226 283.88512 L 190.12226 280.1455 L 188.71104 278.76803 L 188.71104 285.26221 L 190.12226 283.88512 Z \" />\n          </g>\n          <g\n             id=\"GND1\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_GND1\"\n               d=\" M 200.00723 280.1455 L 203.82307 280.1455 L 203.82307 283.88512 L 200.00763 283.88512 L 200.00723 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path229\"\n               d=\" M 200.0042 280.1455 L 203.82307 280.1455 L 205.23278 278.76803 L 198.6002 278.76803 L 200.0042 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path231\"\n               d=\" M 203.82307 280.15081 L 203.82307 283.88777 L 205.23278 285.26221 L 205.23278 278.76803 L 203.82307 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path233\"\n               d=\" M 203.82307 283.88777 L 200.0042 283.88777 L 198.6002 285.26221 L 205.23012 285.26221 L 203.82307 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path235\"\n               d=\" M 200.0042 283.88512 L 200.0042 280.1455 L 198.59755 278.76803 L 198.59755 285.26221 L 200.0042 283.88512 Z \" />\n          </g>\n          <g\n             id=\"GND2\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_GND2\"\n               d=\" M 209.89033 280.1455 L 213.70654 280.1455 L 213.70654 283.88512 L 209.89033 283.88512 L 209.89033 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path239\"\n               d=\" M 209.88767 280.1455 L 213.70654 280.1455 L 215.11775 278.76803 L 208.48176 278.76803 L 209.88767 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path241\"\n               d=\" M 213.70654 280.15081 L 213.70654 283.88777 L 215.11775 285.26221 L 215.11775 278.76803 L 213.70654 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path243\"\n               d=\" M 213.70654 283.88777 L 209.88767 283.88777 L 208.48215 285.26221 L 215.11509 285.26221 L 213.70654 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path245\"\n               d=\" M 209.88767 283.88512 L 209.88767 280.1455 L 208.47949 278.76803 L 208.47949 285.26221 L 209.88767 283.88512 Z \" />\n          </g>\n          <g\n             id=\"VIN\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_VIN\"\n               d=\" M 219.77531 280.1455 L 223.59151 280.1455 L 223.59151 283.88512 L 219.77531 283.88512 L 219.77531 280.1455 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path249\"\n               d=\" M 219.77114 280.1455 L 223.59304 280.1455 L 224.99819 278.76803 L 218.3656 278.76803 L 219.77114 280.1455 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path251\"\n               d=\" M 223.59265 280.15081 L 223.59265 283.88777 L 224.99819 285.26221 L 224.99819 278.76803 L 223.59265 280.15081 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path253\"\n               d=\" M 223.59001 283.88777 L 219.77114 283.88777 L 218.3656 285.26221 L 224.99706 285.26221 L 223.59001 283.88777 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path255\"\n               d=\" M 219.77114 283.88512 L 219.77114 280.1455 L 218.36257 278.76803 L 218.36257 285.26221 L 219.77114 283.88512 Z \" />\n          </g>\n        </g>\n        <g\n           id=\"CN1\">\n          <path\n             fill=\"rgb(64,64,64)\"\n             id=\"path257\"\n             d=\" M 111.89325 93.35876 L 210.72712 93.35876 L 210.72712 103.03217 L 111.89325 103.03217 L 111.89325 93.35876 Z \" />\n          <g\n             id=\"D15\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D15\"\n               d=\" M 114.92802 96.3268 L 118.74271 96.3268 L 118.74271 100.06528 L 114.92839 100.06528 L 114.92802 96.3268 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path261\"\n               d=\" M 114.92535 96.3268 L 118.74574 96.3268 L 120.15392 94.9497 L 113.52097 94.9497 L 114.92535 96.3268 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path263\"\n               d=\" M 118.74574 96.33097 L 118.74574 100.06793 L 120.15392 101.44237 L 120.15392 94.9497 L 118.74574 96.33097 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path265\"\n               d=\" M 118.74574 100.06793 L 114.92498 100.06793 L 113.52059 101.44237 L 120.15354 101.44237 L 118.74574 100.06793 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path267\"\n               d=\" M 114.92535 100.06528 L 114.92535 96.3268 L 113.51869 94.9497 L 113.51869 101.44237 L 114.92535 100.06528 Z \" />\n          </g>\n          <g\n             id=\"D14\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D14\"\n               d=\" M 124.81299 96.3268 L 128.63033 96.3268 L 128.63033 100.06528 L 124.81299 100.06528 L 124.81299 96.3268 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path271\"\n               d=\" M 124.80731 96.3268 L 128.62768 96.3268 L 130.03586 94.9497 L 123.40329 94.9497 L 124.80731 96.3268 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path273\"\n               d=\" M 128.62768 96.33097 L 128.62768 100.06793 L 130.03586 101.44237 L 130.03586 94.9497 L 128.62768 96.33097 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path275\"\n               d=\" M 128.62503 100.06793 L 124.80731 100.06793 L 123.40329 101.44237 L 130.03586 101.44237 L 128.62503 100.06793 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path277\"\n               d=\" M 124.80731 100.06528 L 124.80731 96.3268 L 123.40063 94.9497 L 123.40063 101.44237 L 124.80731 100.06528 Z \" />\n          </g>\n          <g\n             id=\"AREF\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_AREF\"\n               d=\" M 134.69494 96.3268 L 138.50962 96.3268 L 138.50962 100.06528 L 134.69494 100.06528 L 134.69494 96.3268 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path281\"\n               d=\" M 134.68925 96.3268 L 138.5138 96.3268 L 139.92047 94.9497 L 133.28523 94.9497 L 134.68925 96.3268 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path283\"\n               d=\" M 138.5138 96.33097 L 138.5138 100.06793 L 139.92047 101.44237 L 139.92047 94.9497 L 138.5138 96.33097 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path285\"\n               d=\" M 138.5138 100.06793 L 134.68925 100.06793 L 133.28523 101.44237 L 139.91782 101.44237 L 138.5138 100.06793 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path287\"\n               d=\" M 134.68925 100.06528 L 134.68925 96.3268 L 133.28523 94.9497 L 133.28523 101.44237 L 134.68925 100.06528 Z \" />\n          </g>\n          <g\n             id=\"GND3\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_GND3\"\n               d=\" M 144.57954 96.3268 L 148.39726 96.3268 L 148.39726 100.06528 L 144.57954 100.06528 L 144.57954 96.3268 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path291\"\n               d=\" M 144.5784 96.3268 L 148.39841 96.3268 L 149.80279 94.9497 L 143.16984 94.9497 L 144.5784 96.3268 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path293\"\n               d=\" M 148.39841 96.33097 L 148.39841 100.06793 L 149.80279 101.44237 L 149.80279 94.9497 L 148.39841 96.33097 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path295\"\n               d=\" M 148.39574 100.06793 L 144.5784 100.06793 L 143.16984 101.44237 L 149.80279 101.44237 L 148.39574 100.06793 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path297\"\n               d=\" M 144.5784 100.06528 L 144.5784 96.3268 L 143.16719 94.9497 L 143.16719 101.44237 L 144.5784 100.06528 Z \" />\n          </g>\n          <g\n             id=\"D13\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D13\"\n               d=\" M 154.46339 96.3268 L 158.2777 96.3268 L 158.2777 100.06528 L 154.46339 100.06528 L 154.46339 96.3268 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path301\"\n               d=\" M 154.46035 96.3268 L 158.28035 96.3268 L 159.68475 94.9497 L 153.05178 94.9497 L 154.46035 96.3268 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path303\"\n               d=\" M 158.28035 96.33097 L 158.28035 100.06793 L 159.68475 101.44237 L 159.68475 94.9497 L 158.28035 96.33097 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path305\"\n               d=\" M 158.2777 100.06793 L 154.46035 100.06793 L 153.05178 101.44237 L 159.68209 101.44237 L 158.2777 100.06793 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path307\"\n               d=\" M 154.46035 100.06528 L 154.46035 96.3268 L 153.04913 94.9497 L 153.04913 101.44237 L 154.46035 100.06528 Z \" />\n          </g>\n          <g\n             id=\"D12\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D12\"\n               d=\" M 164.34798 96.3268 L 168.16229 96.3268 L 168.16229 100.06528 L 164.34798 100.06528 L 164.34798 96.3268 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path311\"\n               d=\" M 164.3423 96.3268 L 168.16267 96.3268 L 169.57238 94.9497 L 162.93752 94.9497 L 164.3423 96.3268 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path313\"\n               d=\" M 168.16229 96.33097 L 168.16229 100.06793 L 169.57238 101.44237 L 169.57238 94.9497 L 168.16229 96.33097 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path315\"\n               d=\" M 168.15851 100.06793 L 164.3423 100.06793 L 162.9379 101.44237 L 169.57238 101.44237 L 168.15851 100.06793 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path317\"\n               d=\" M 164.3423 100.06528 L 164.3423 96.3268 L 162.93563 94.9497 L 162.93563 101.44237 L 164.3423 100.06528 Z \" />\n          </g>\n          <g\n             id=\"D11\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D11\"\n               d=\" M 174.22727 96.3268 L 178.04311 96.3268 L 178.04311 100.06528 L 174.22727 100.06528 L 174.22727 96.3268 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path321\"\n               d=\" M 174.22424 96.3268 L 178.04311 96.3268 L 179.45584 94.9497 L 172.8244 94.9497 L 174.22424 96.3268 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path323\"\n               d=\" M 178.04311 96.33097 L 178.04311 100.06793 L 179.45584 101.44237 L 179.45584 94.9497 L 178.04311 96.33097 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path325\"\n               d=\" M 178.04045 100.06793 L 174.22424 100.06793 L 172.82402 101.44237 L 179.45281 101.44237 L 178.04045 100.06793 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path327\"\n               d=\" M 174.22424 100.06528 L 174.22424 96.3268 L 172.82023 94.9497 L 172.82023 101.44237 L 174.22424 100.06528 Z \" />\n          </g>\n          <g\n             id=\"D10\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D10\"\n               d=\" M 184.11036 96.3268 L 187.92505 96.3268 L 187.92505 100.06528 L 184.11074 100.06528 L 184.11036 96.3268 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path331\"\n               d=\" M 184.10505 96.3268 L 187.93188 96.3268 L 189.33475 94.9497 L 182.70218 94.9497 L 184.10505 96.3268 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path333\"\n               d=\" M 187.93188 96.33097 L 187.93188 100.06793 L 189.33475 101.44237 L 189.33475 94.9497 L 187.93188 96.33097 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path335\"\n               d=\" M 187.93188 100.06793 L 184.10505 100.06793 L 182.70218 101.44237 L 189.33513 101.44237 L 187.93188 100.06793 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path337\"\n               d=\" M 184.10505 100.06528 L 184.10505 96.3268 L 182.69952 94.9497 L 182.69952 101.44237 L 184.10505 100.06528 Z \" />\n          </g>\n          <g\n             id=\"D9\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D9\"\n               d=\" M 193.99535 96.3268 L 197.81117 96.3268 L 197.81117 100.06528 L 193.99535 100.06528 L 193.99535 96.3268 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path341\"\n               d=\" M 193.99535 96.3268 L 197.81686 96.3268 L 199.21974 94.9497 L 192.58677 94.9497 L 193.99535 96.3268 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path343\"\n               d=\" M 197.81686 96.33097 L 197.81686 100.06793 L 199.21974 101.44237 L 199.21974 94.9497 L 197.81686 96.33097 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path345\"\n               d=\" M 197.81269 100.06793 L 193.99535 100.06793 L 192.58677 101.44237 L 199.21557 101.44237 L 197.81269 100.06793 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path347\"\n               d=\" M 193.99535 100.06528 L 193.99535 96.3268 L 192.58412 94.9497 L 192.58412 101.44237 L 193.99535 100.06528 Z \" />\n          </g>\n          <g\n             id=\"D8\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"PIN_D8\"\n               d=\" M 203.88146 96.3268 L 207.69463 96.3268 L 207.69463 100.06528 L 203.88146 100.06528 L 203.88146 96.3268 Z \" />\n            <path\n               fill=\"rgb(42,42,41)\"\n               id=\"path351\"\n               d=\" M 203.87729 96.3268 L 207.69463 96.3268 L 209.10055 94.9497 L 202.46758 94.9497 L 203.87729 96.3268 Z \" />\n            <path\n               fill=\"rgb(71,71,71)\"\n               id=\"path353\"\n               d=\" M 207.69463 96.33097 L 207.69463 100.06793 L 209.10055 101.44237 L 209.10055 94.9497 L 207.69463 96.33097 Z \" />\n            <path\n               fill=\"rgb(89,89,89)\"\n               id=\"path355\"\n               d=\" M 207.69463 100.06793 L 203.87729 100.06793 L 202.46758 101.44237 L 209.09752 101.44237 L 207.69463 100.06793 Z \" />\n            <path\n               fill=\"rgb(55,55,55)\"\n               id=\"path357\"\n               d=\" M 203.87729 100.06528 L 203.87729 96.3268 L 202.46494 94.9497 L 202.46494 101.44237 L 203.87729 100.06528 Z \" />\n          </g>\n        </g>\n        <path\n           fill=\"rgb(253,216,121)\"\n           id=\"DRILLS\"\n           fill-rule=\"evenodd\"\n           d=\" M 110.67881 194.66246 C 111.79137 194.66246 112.69326 195.56437 112.69326 196.67692 C 112.69326 197.78948 111.79137 198.69138 110.67881 198.69138 C 109.56641 198.69117 108.66473 197.78933 108.66473 196.67692 C 108.66473 195.56452 109.56641 194.66267 110.67881 194.66246 L 110.67881 194.66246 L 110.67881 194.66246 Z  M 110.67881 185.06754 C 111.79137 185.06754 112.69326 185.96944 112.69326 187.082 C 112.69326 188.19455 111.79137 189.09645 110.67881 189.09645 C 109.56641 189.09624 108.66473 188.1944 108.66473 187.082 C 108.66473 185.96959 109.56641 185.06775 110.67881 185.06754 L 110.67881 185.06754 L 110.67881 185.06754 Z  M 243.15636 206.8493 C 244.2689 206.8493 245.17081 207.75121 245.17081 208.86376 C 245.1706 209.97617 244.26876 210.87784 243.15636 210.87784 C 242.04409 210.87763 241.14248 209.97602 241.14228 208.86376 C 241.14228 207.75135 242.04395 206.84951 243.15636 206.8493 L 243.15636 206.8493 L 243.15636 206.8493 Z  M 233.56142 206.8493 C 234.67399 206.8493 235.5759 207.75121 235.5759 208.86376 C 235.57566 209.97617 234.67383 210.87784 233.56142 210.87784 C 232.44918 210.87763 231.54757 209.97602 231.54736 208.86376 C 231.54736 207.75135 232.44901 206.84951 233.56142 206.8493 L 233.56142 206.8493 L 233.56142 206.8493 Z  M 215.67436 122.71758 C 216.78661 122.71779 217.68821 123.6194 217.68844 124.73166 C 217.68844 125.84406 216.78677 126.74591 215.67436 126.74612 C 214.56179 126.74612 213.65991 125.84421 213.65991 124.73166 C 213.66012 123.61925 214.56196 122.71758 215.67436 122.71758 L 215.67436 122.71758 L 215.67436 122.71758 Z  M 206.07942 122.7172 C 207.19183 122.71741 208.09351 123.61925 208.09351 124.73166 C 208.09351 125.84406 207.19183 126.74591 206.07942 126.74612 C 204.96688 126.74612 204.06497 125.84421 204.06497 124.73166 C 204.06518 123.61925 204.96702 122.71758 206.07942 122.71758 L 206.07942 122.7172 L 206.07942 122.7172 Z  M 252.83317 64.52469 C 253.94558 64.52469 254.84741 65.42637 254.84762 66.53877 C 254.84762 67.65132 253.94574 68.55323 252.83317 68.55323 C 251.72063 68.55323 250.81872 67.65132 250.81872 66.53877 C 250.81893 65.42637 251.72076 64.52469 252.83317 64.52469 L 252.83317 64.52469 L 252.83317 64.52469 Z  M 243.20222 64.52469 C 244.31449 64.5249 245.2161 65.42651 245.21631 66.53877 C 245.21631 67.65118 244.31463 68.55302 243.20222 68.55323 C 242.08968 68.55323 241.18777 67.65132 241.18777 66.53877 C 241.18798 65.42637 242.08982 64.52469 243.20222 64.52469 L 243.20222 64.52469 L 243.20222 64.52469 Z  M 233.57091 64.52469 C 234.68331 64.52469 235.58515 65.42637 235.58536 66.53877 C 235.58536 67.65132 234.68345 68.55323 233.57091 68.55323 C 232.4585 68.55302 231.55683 67.65118 231.55683 66.53877 C 231.55703 65.42651 232.45864 64.5249 233.57091 64.52469 L 233.57091 64.52469 Z  M 223.93996 64.52469 C 225.05237 64.52469 225.95421 65.42637 225.95441 66.53877 C 225.95441 67.65132 225.05251 68.55323 223.93996 68.55323 C 222.82742 68.55323 221.92551 67.65132 221.92551 66.53877 C 221.92572 65.42637 222.82756 64.52469 223.93996 64.52469 L 223.93996 64.52469 L 223.93996 64.52469 Z  M 246.98999 187.16503 C 248.10256 187.16503 249.00447 188.06693 249.00447 189.17949 C 249.00447 190.29204 248.10256 191.19394 246.98999 191.19394 C 245.87758 191.19373 244.97593 190.29189 244.97593 189.17949 C 244.97593 188.06708 245.87758 187.16524 246.98999 187.16503 L 246.98999 187.16503 L 246.98999 187.16503 Z  M 246.98999 177.5701 C 248.10256 177.5701 249.00447 178.47201 249.00447 179.58456 C 249.00447 180.69711 248.10256 181.59902 246.98999 181.59902 C 245.87758 181.59881 244.97593 180.69697 244.97593 179.58456 C 244.97593 178.47216 245.87758 177.57031 246.98999 177.5701 L 246.98999 177.5701 L 246.98999 177.5701 Z  M 278.38414 201.72501 C 279.49668 201.72501 280.39859 202.62691 280.39859 203.73946 C 280.39838 204.85187 279.49655 205.75354 278.38414 205.75354 C 277.27187 205.75333 276.37027 204.85172 276.37006 203.73946 C 276.37006 202.62706 277.27173 201.72522 278.38414 201.72501 L 278.38414 201.72501 L 278.38414 201.72501 Z  M 268.7896 201.72501 C 269.902 201.72522 270.80365 202.62706 270.80365 203.73946 C 270.80345 204.85172 269.90184 205.75333 268.7896 205.75354 C 267.67719 205.75354 266.77533 204.85187 266.77512 203.73946 C 266.77512 202.62691 267.67703 201.72501 268.7896 201.72501 L 268.7896 201.72501 L 268.7896 201.72501 Z  M 131.69279 252.62483 C 132.80533 252.62483 133.70724 253.52673 133.70724 254.63929 C 133.70703 255.75169 132.80519 256.65336 131.69279 256.65336 C 130.58052 256.65315 129.67891 255.75154 129.6787 254.63929 C 129.6787 253.52688 130.58038 252.62504 131.69279 252.62483 L 131.69279 252.62483 L 131.69279 252.62483 Z  M 122.03643 252.62483 C 123.14899 252.62483 124.05089 253.52673 124.05089 254.63929 C 124.05067 255.75169 123.14884 256.65336 122.03643 256.65336 C 120.92402 256.65336 120.02219 255.75169 120.02198 254.63929 C 120.02198 253.52673 120.92387 252.62483 122.03643 252.62483 L 122.03643 252.62483 Z  M 112.38009 252.62483 C 113.49249 252.62504 114.39416 253.52688 114.39416 254.63929 C 114.39395 255.75154 113.49234 256.65315 112.38009 256.65336 C 111.26768 256.65336 110.36583 255.75169 110.36562 254.63929 C 110.36562 253.52673 111.26753 252.62483 112.38009 252.62483 L 112.38009 252.62483 Z  M 102.72373 252.62483 C 103.83614 252.62504 104.73781 253.52688 104.73781 254.63929 C 104.7376 255.75154 103.836 256.65315 102.72373 256.65336 C 101.61133 256.65336 100.70949 255.75169 100.70928 254.63929 C 100.70928 253.52673 101.61118 252.62483 102.72373 252.62483 L 102.72373 252.62483 Z  M 93.06739 252.62483 C 94.17979 252.62504 95.08146 253.52688 95.08146 254.63929 C 95.08125 255.75154 94.17964 256.65315 93.06739 256.65336 C 91.95498 256.65336 91.05314 255.75169 91.05293 254.63929 C 91.05293 253.52673 91.95483 252.62483 93.06739 252.62483 L 93.06739 252.62483 L 93.06739 252.62483 Z  M 83.41065 252.62483 C 84.52321 252.62483 85.42511 253.52673 85.42511 254.63929 C 85.4249 255.75169 84.52306 256.65336 83.41065 256.65336 C 82.2984 256.65315 81.39679 255.75154 81.39658 254.63929 C 81.39658 253.52688 82.29825 252.62504 83.41065 252.62483 L 83.41065 252.62483 L 83.41065 252.62483 Z  M 131.71325 242.84753 C 132.82566 242.84753 133.7275 243.7492 133.72771 244.86161 C 133.72771 245.97416 132.82581 246.87606 131.71325 246.87606 C 130.6007 246.87606 129.6988 245.97416 129.6988 244.86161 C 129.69901 243.7492 130.60085 242.84753 131.71325 242.84753 L 131.71325 242.84753 L 131.71325 242.84753 Z  M 122.05312 242.84753 C 123.16522 242.84795 124.06661 243.7495 124.06682 244.86161 C 124.06682 245.97401 123.16514 246.87585 122.05273 246.87606 C 120.94018 246.87606 120.03828 245.97416 120.03828 244.86161 C 120.03849 243.7492 120.94033 242.84753 122.05273 242.84753 L 122.05312 242.84753 L 122.05312 242.84753 Z  M 112.39221 242.84753 C 113.50462 242.84753 114.40647 243.7492 114.40668 244.86161 C 114.40668 245.97416 113.50477 246.87606 112.39221 246.87606 C 111.27981 246.87585 110.37814 245.97401 110.37814 244.86161 C 110.37835 243.74935 111.27996 242.84774 112.39221 242.84753 L 112.39221 242.84753 L 112.39221 242.84753 Z  M 102.73169 242.84753 C 103.8441 242.84753 104.74595 243.7492 104.74615 244.86161 C 104.74615 245.97416 103.84425 246.87606 102.73169 246.87606 C 101.61929 246.87585 100.71762 245.97401 100.71762 244.86161 C 100.71783 243.74935 101.61944 242.84774 102.73169 242.84753 L 102.73169 242.84753 L 102.73169 242.84753 Z  M 93.07117 242.84753 C 94.18358 242.84753 95.08542 243.7492 95.08563 244.86161 C 95.08563 245.97416 94.18373 246.87606 93.07117 246.87606 C 91.95877 246.87585 91.0571 245.97401 91.0571 244.86161 C 91.05731 243.74935 91.95892 242.84774 93.07117 242.84753 L 93.07117 242.84753 L 93.07117 242.84753 Z  M 83.41065 242.84753 C 84.52306 242.84753 85.4249 243.7492 85.42511 244.86161 C 85.42511 245.97416 84.52321 246.87606 83.41065 246.87606 C 82.29825 246.87585 81.39658 245.97401 81.39658 244.86161 C 81.39679 243.74935 82.2984 242.84774 83.41065 242.84753 L 83.41065 242.84753 L 83.41065 242.84753 Z  M 110.67881 193.05636 C 108.67931 193.05657 107.05845 194.67743 107.05825 196.67692 C 107.05845 198.67656 108.67954 200.29749 110.67918 200.29749 C 112.67868 200.29707 114.29937 198.67604 114.29937 196.67654 C 114.29895 194.67719 112.67815 193.05657 110.67881 193.05636 L 110.67881 193.05636 L 110.67881 193.05636 Z  M 107.24289 183.52627 C 107.21876 183.52627 107.19562 183.53586 107.17855 183.55292 C 107.16148 183.56999 107.1519 183.59313 107.1519 183.61727 L 107.1519 190.54672 C 107.1519 190.59715 107.19247 190.63772 107.24289 190.63772 L 114.1151 190.63772 C 114.13924 190.63772 114.16238 190.62814 114.17945 190.61107 C 114.19651 190.594 114.20609 190.57086 114.20609 190.54672 L 114.20609 183.61727 C 114.20609 183.59313 114.19651 183.56999 114.17945 183.55292 C 114.16238 183.53586 114.13924 183.52627 114.1151 183.52627 L 107.24289 183.52627 L 107.24289 183.52627 Z  M 243.15636 205.2432 C 241.15685 205.24341 239.536 206.86427 239.53579 208.86376 C 239.536 210.8634 241.15709 212.48432 243.15673 212.48432 C 245.15607 212.48391 246.77672 210.86311 246.77692 208.86376 C 246.77692 206.86412 245.156 205.24303 243.15636 205.24282 L 243.15636 205.2432 L 243.15636 205.2432 Z  M 230.09669 205.33647 C 230.07255 205.33647 230.04941 205.34606 230.03236 205.36312 C 230.01528 205.38019 230.0057 205.40333 230.0057 205.42747 L 230.0057 212.29967 C 230.0057 212.35048 230.04626 212.39067 230.09669 212.39067 L 237.02615 212.39067 C 237.05029 212.39067 237.07343 212.38108 237.09051 212.36402 C 237.10756 212.34695 237.11714 212.32381 237.11714 212.29967 L 237.11714 205.42747 C 237.11714 205.40333 237.10756 205.38019 237.09051 205.36312 C 237.07343 205.34606 237.05029 205.33647 237.02615 205.33647 L 230.09669 205.33647 L 230.09669 205.33647 Z  M 215.67436 121.1111 C 213.67456 121.1111 212.05342 122.73225 212.05342 124.73204 C 212.05384 126.73153 213.67486 128.35222 215.67436 128.35222 C 217.67384 128.35201 219.29472 126.73115 219.29493 124.73166 C 219.2947 122.73216 217.67384 121.11131 215.67436 121.1111 L 215.67436 121.1111 L 215.67436 121.1111 Z  M 202.61469 121.20437 C 202.59056 121.20437 202.56742 121.21396 202.55036 121.23102 C 202.53328 121.24809 202.5237 121.27123 202.5237 121.29537 L 202.5237 128.16795 C 202.5237 128.21838 202.56427 128.25895 202.61469 128.25895 L 209.54378 128.25895 C 209.56792 128.25895 209.59106 128.24936 209.60812 128.2323 C 209.6252 128.21523 209.63478 128.19209 209.63478 128.16795 L 209.63478 121.29575 C 209.63478 121.27161 209.6252 121.24847 209.60812 121.2314 C 209.59106 121.21434 209.56792 121.20475 209.54378 121.20475 L 202.61469 121.20437 L 202.61469 121.20437 Z  M 249.36844 63.01186 C 249.3443 63.01186 249.32116 63.02144 249.30411 63.03851 C 249.28703 63.05558 249.27745 63.07872 249.27745 63.10286 L 249.27745 69.97506 C 249.27745 70.02549 249.31802 70.06606 249.36844 70.06606 L 256.2979 70.06606 C 256.32204 70.06606 256.34518 70.05647 256.36226 70.03941 C 256.37931 70.02235 256.38889 69.9992 256.38889 69.97506 L 256.38889 63.10286 C 256.38889 63.07872 256.37931 63.05558 256.36226 63.03851 C 256.34518 63.02144 256.32204 63.01186 256.2979 63.01186 L 249.36844 63.01186 L 249.36844 63.01186 Z  M 243.20222 62.91821 C 241.20258 62.91821 239.5815 64.53913 239.58129 66.53877 C 239.58129 68.53856 241.20244 70.15972 243.20222 70.15972 C 245.20187 70.1595 246.82279 68.53841 246.82279 66.53877 C 246.82258 64.53913 245.2015 62.91821 243.20185 62.91821 L 243.20222 62.91821 L 243.20222 62.91821 Z  M 233.57091 62.91821 C 231.57141 62.91841 229.95055 64.53928 229.95034 66.53877 C 229.95034 68.53856 231.5715 70.15972 233.57128 70.15972 C 235.57092 70.1595 237.19184 68.53841 237.19184 66.53877 C 237.19164 64.53913 235.57055 62.91821 233.57091 62.91821 L 233.57091 62.91821 L 233.57091 62.91821 Z  M 223.93996 62.91821 C 221.94032 62.91821 220.31923 64.53913 220.31902 66.53877 C 220.31902 68.53856 221.94018 70.15972 223.93996 70.15972 C 225.9396 70.1595 227.56053 68.53841 227.56053 66.53877 C 227.56032 64.53928 225.93946 62.91841 223.93996 62.91821 L 223.93996 62.91821 L 223.93996 62.91821 Z  M 246.98999 185.55893 C 244.99035 185.55913 243.36945 187.18022 243.36945 189.17987 C 243.36986 191.17921 244.99065 192.79984 246.98999 192.80005 C 248.98966 192.80005 250.61074 191.17913 250.61095 189.17949 C 250.61074 187.17984 248.98966 185.55893 246.98999 185.55893 L 246.98999 185.55893 L 246.98999 185.55893 Z  M 243.5537 176.02921 C 243.5036 176.02921 243.46292 176.06972 243.46271 176.11983 L 243.46271 183.04929 C 243.46271 183.09972 243.50328 183.14029 243.5537 183.14029 L 250.42591 183.14029 C 250.45005 183.14029 250.47319 183.1307 250.49027 183.11364 C 250.50732 183.09657 250.5169 183.07342 250.5169 183.04929 L 250.5169 176.12021 C 250.5169 176.09608 250.50732 176.07293 250.49027 176.05587 C 250.47319 176.0388 250.45005 176.02921 250.42591 176.02921 L 243.5537 176.02921 L 243.5537 176.02921 Z  M 278.38414 200.1189 C 276.38464 200.11911 274.76378 201.73997 274.76357 203.73946 C 274.76378 205.73911 276.38487 207.36003 278.38451 207.36003 C 280.38415 207.35982 282.00508 205.73873 282.00508 203.73909 C 282.00466 201.73959 280.38362 200.1189 278.38414 200.1189 L 278.38414 200.1189 L 278.38414 200.1189 Z  M 265.32487 200.21217 C 265.30073 200.21217 265.27759 200.22176 265.26051 200.23883 C 265.24345 200.25589 265.23385 200.27904 265.23385 200.30317 L 265.23385 207.17576 C 265.23385 207.22618 265.27442 207.26675 265.32487 207.26675 L 272.25393 207.26675 C 272.27807 207.26675 272.30121 207.25717 272.31829 207.2401 C 272.33535 207.22304 272.34493 207.19989 272.34493 207.17576 L 272.34493 200.30279 C 272.34493 200.27866 272.33535 200.25551 272.31829 200.23845 C 272.30121 200.22138 272.27807 200.21179 272.25393 200.21179 L 265.32487 200.21217 L 265.32487 200.21217 Z  M 131.69279 251.01872 C 129.69313 251.01893 128.07222 252.64002 128.07222 254.63966 C 128.07264 256.63916 129.69367 258.25985 131.69316 258.25985 C 133.69251 258.25943 135.31313 256.63863 135.31334 254.63929 C 135.31334 252.63964 133.69243 251.01855 131.69279 251.01834 L 131.69279 251.01872 L 131.69279 251.01872 Z  M 122.03643 251.01872 C 120.03679 251.01893 118.41587 252.64002 118.41587 254.63966 C 118.41629 256.63916 120.03732 258.25985 122.03681 258.25985 C 124.03615 258.25943 125.65679 256.63863 125.657 254.63929 C 125.657 252.63964 124.03607 251.01855 122.03643 251.01834 L 122.03643 251.01872 L 122.03643 251.01872 Z  M 112.38009 251.01872 C 111.41974 251.01872 110.49875 251.40021 109.81969 252.07927 C 109.14063 252.75833 108.75914 253.67933 108.75914 254.63966 C 108.75957 256.63916 110.38058 258.25985 112.38009 258.25985 C 114.37958 258.25964 116.00043 256.63878 116.00064 254.63929 C 116.00064 252.63964 114.37973 251.01855 112.38009 251.01834 L 112.38009 251.01872 L 112.38009 251.01872 Z  M 102.72373 251.01872 C 101.7634 251.01872 100.8424 251.40021 100.16334 252.07927 C 99.48428 252.75833 99.10279 253.67933 99.10279 254.63966 C 99.10321 256.63916 100.72424 258.25985 102.72373 258.25985 C 104.72323 258.25964 106.34409 256.63878 106.3443 254.63929 C 106.3443 253.67895 105.9628 252.75795 105.28375 252.07889 C 104.60469 251.39984 103.68369 251.01834 102.72336 251.01834 L 102.72373 251.01872 L 102.72373 251.01872 Z  M 93.06739 251.01872 C 92.10705 251.01872 91.18605 251.40021 90.50699 252.07927 C 89.82794 252.75833 89.44644 253.67933 89.44644 254.63966 C 89.44686 256.63916 91.06789 258.25985 93.06739 258.25985 C 95.06673 258.25943 96.68736 256.63863 96.68757 254.63929 C 96.68757 252.63979 95.06688 251.01876 93.06739 251.01834 L 93.06739 251.01872 L 93.06739 251.01872 Z  M 83.41065 251.01872 C 81.41101 251.01893 79.79009 252.64002 79.79009 254.63966 C 79.79051 256.63916 81.41154 258.25985 83.41103 258.25985 C 85.41053 258.25964 87.03139 256.63878 87.0316 254.63929 C 87.0316 253.67895 86.65011 252.75795 85.97104 252.07889 C 85.29199 251.39984 84.37099 251.01834 83.41065 251.01834 L 83.41065 251.01872 L 83.41065 251.01872 Z  M 128.24853 241.3347 C 128.22439 241.3347 128.20125 241.34428 128.18418 241.36135 C 128.16711 241.37841 128.15753 241.40156 128.15753 241.42569 L 128.15753 248.2979 C 128.15753 248.34833 128.1981 248.3889 128.24853 248.3889 L 135.17798 248.3889 C 135.20212 248.3889 135.22526 248.37931 135.24233 248.36224 C 135.2594 248.34517 135.26898 248.32203 135.26898 248.2979 L 135.26898 241.42569 C 135.26898 241.40156 135.2594 241.37841 135.24233 241.36135 C 135.22526 241.34428 135.20212 241.3347 135.17798 241.3347 L 128.24853 241.3347 L 128.24853 241.3347 Z  M 122.05312 241.24142 C 120.05362 241.24142 118.43259 242.86211 118.43218 244.86161 C 118.43218 245.82194 118.81366 246.74294 119.49272 247.422 C 120.17179 248.10106 121.09279 248.48254 122.05312 248.48254 C 124.05261 248.48213 125.6733 246.8611 125.6733 244.86161 C 125.67288 242.86226 124.05209 241.24163 122.05273 241.24142 L 122.05312 241.24142 L 122.05312 241.24142 Z  M 112.39221 241.24142 C 110.39287 241.24163 108.77207 242.86226 108.77166 244.86161 C 108.77166 245.82194 109.15314 246.74294 109.8322 247.422 C 110.51126 248.10106 111.43226 248.48254 112.39259 248.48254 C 114.39208 248.48213 116.01278 246.8611 116.01278 244.86161 C 116.01236 242.86226 114.39156 241.24163 112.39221 241.24142 L 112.39221 241.24142 L 112.39221 241.24142 Z  M 102.73169 241.24142 C 100.73235 241.24163 99.11155 242.86226 99.11114 244.86161 C 99.11114 246.86125 100.73205 248.48234 102.73169 248.48254 C 103.69203 248.48254 104.61303 248.10106 105.29208 247.422 C 105.97115 246.74294 106.35264 245.82194 106.35264 244.86161 C 106.35222 242.86211 104.73119 241.24142 102.73169 241.24142 L 102.73169 241.24142 L 102.73169 241.24142 Z  M 93.07117 241.24142 C 91.07183 241.24163 89.45103 242.86226 89.45061 244.86161 C 89.45061 245.82194 89.8321 246.74294 90.51116 247.422 C 91.19022 248.10106 92.11122 248.48254 93.07156 248.48254 C 95.07105 248.48213 96.69174 246.8611 96.69174 244.86161 C 96.69132 242.86226 95.07052 241.24163 93.07117 241.24142 L 93.07117 241.24142 L 93.07117 241.24142 Z  M 83.41065 241.24142 C 81.41131 241.24163 79.79051 242.86226 79.79009 244.86161 C 79.79009 245.82194 80.17159 246.74294 80.85064 247.422 C 81.5297 248.10106 82.4507 248.48254 83.41103 248.48254 C 85.41068 248.48234 87.0316 246.86125 87.0316 244.86161 C 87.03118 242.86211 85.41015 241.24142 83.41065 241.24142 L 83.41065 241.24142 L 83.41065 241.24142 Z  M 208.18186 72.70271 C 209.29441 72.70271 210.19631 73.60462 210.19631 74.71717 C 210.19611 75.82957 209.29427 76.73124 208.18186 76.73124 C 207.06959 76.73104 206.16799 75.82943 206.16778 74.71717 C 206.16778 73.60476 207.06946 72.70292 208.18186 72.70271 L 208.18186 72.70271 L 208.18186 72.70271 Z  M 198.59565 72.70271 C 199.70819 72.70271 200.6101 73.60462 200.6101 74.71717 C 200.60989 75.82957 199.70805 76.73124 198.59565 76.73124 C 197.48324 76.73124 196.58139 75.82957 196.58118 74.71717 C 196.58118 73.60462 197.48309 72.70271 198.59565 72.70271 L 198.59565 72.70271 Z  M 189.00982 72.70271 C 190.12222 72.70292 191.0239 73.60476 191.0239 74.71717 C 191.02369 75.82943 190.12207 76.73104 189.00982 76.73124 C 188.47555 76.73135 187.96312 76.51921 187.58527 76.1415 C 187.20741 75.76378 186.99509 75.25144 186.99498 74.71717 C 186.99498 73.60462 187.89689 72.70271 189.00944 72.70271 L 189.00982 72.70271 L 189.00982 72.70271 Z  M 179.42323 72.70271 C 180.53579 72.70271 181.43769 73.60462 181.43769 74.71717 C 181.43748 75.82957 180.53564 76.73124 179.42323 76.73124 C 178.31098 76.73104 177.40937 75.82943 177.40915 74.71717 C 177.40915 73.60476 178.31083 72.70292 179.42323 72.70271 L 179.42323 72.70271 L 179.42323 72.70271 Z  M 169.8374 72.70271 C 170.94981 72.70292 171.85149 73.60476 171.85149 74.71717 C 171.85128 75.82943 170.94967 76.73104 169.8374 76.73124 C 168.725 76.73124 167.82316 75.82957 167.82295 74.71717 C 167.82295 73.60462 168.72486 72.70271 169.8374 72.70271 L 169.8374 72.70271 Z  M 208.18186 62.8856 C 209.29441 62.8856 210.19631 63.78751 210.19631 64.90006 C 210.19631 66.01261 209.29441 66.91452 208.18186 66.91452 C 207.06946 66.91431 206.16778 66.01246 206.16778 64.90006 C 206.16778 63.78766 207.06946 62.88581 208.18186 62.8856 L 208.18186 62.8856 L 208.18186 62.8856 Z  M 198.59565 62.8856 C 199.70819 62.8856 200.6101 63.78751 200.6101 64.90006 C 200.6101 66.01261 199.70819 66.91452 198.59565 66.91452 C 197.48309 66.91452 196.58118 66.01261 196.58118 64.90006 C 196.58118 63.78751 197.48309 62.8856 198.59565 62.8856 L 198.59565 62.8856 Z  M 189.00982 62.8856 C 190.12222 62.88581 191.0239 63.78766 191.0239 64.90006 C 191.0239 66.01246 190.12222 66.91431 189.00982 66.91452 C 188.47548 66.91461 187.96301 66.70242 187.58514 66.32463 C 187.20728 65.94683 186.99498 65.43439 186.99498 64.90006 C 186.99498 63.78751 187.89689 62.8856 189.00944 62.8856 L 189.00982 62.8856 L 189.00982 62.8856 Z  M 179.42323 62.8856 C 180.53579 62.8856 181.43769 63.78751 181.43769 64.90006 C 181.43769 66.01261 180.53579 66.91452 179.42323 66.91452 C 178.31083 66.91431 177.40915 66.01246 177.40915 64.90006 C 177.40915 63.78766 178.31083 62.88581 179.42323 62.8856 L 179.42323 62.8856 L 179.42323 62.8856 Z  M 169.8374 62.8856 C 170.94981 62.88581 171.85149 63.78766 171.85149 64.90006 C 171.85149 66.01246 170.94981 66.91431 169.8374 66.91452 C 168.72486 66.91452 167.82295 66.01261 167.82295 64.90006 C 167.82295 63.78751 168.72486 62.8856 169.8374 62.8856 L 169.8374 62.8856 Z  M 204.71713 71.18988 C 204.693 71.18988 204.66985 71.19947 204.65278 71.21653 C 204.63572 71.2336 204.62612 71.25674 204.62612 71.28087 L 204.62612 78.15308 C 204.62612 78.20351 204.66668 78.24408 204.71713 78.24408 L 211.64659 78.24408 C 211.6707 78.24408 211.69387 78.23449 211.71093 78.21743 C 211.72798 78.20036 211.73758 78.17722 211.73758 78.15308 L 211.73758 71.28087 C 211.73758 71.25674 211.72798 71.2336 211.71093 71.21653 C 211.69387 71.19947 211.6707 71.18988 211.64659 71.18988 L 204.71713 71.18988 L 204.71713 71.18988 Z  M 198.59565 71.09623 C 197.63531 71.09623 196.71431 71.47772 196.03526 72.15678 C 195.35619 72.83583 194.9747 73.75684 194.9747 74.71717 C 194.97491 76.71681 196.59601 78.33773 198.59565 78.33773 C 200.59543 78.33773 202.21659 76.71658 202.21659 74.71679 C 202.21638 72.71715 200.59529 71.09623 198.59565 71.09623 L 198.59565 71.09623 L 198.59565 71.09623 Z  M 189.00982 71.09623 C 188.04949 71.09623 187.12849 71.47772 186.44943 72.15678 C 185.77037 72.83583 185.38888 73.75684 185.38888 74.71717 C 185.38909 76.71681 187.01018 78.33773 189.00982 78.33773 C 191.00931 78.33731 192.63 76.71628 192.63 74.71679 C 192.62979 72.71745 191.00917 71.09665 189.00982 71.09623 L 189.00982 71.09623 L 189.00982 71.09623 Z  M 179.42323 71.09623 C 177.42374 71.09665 175.80305 72.71768 175.80305 74.71717 C 175.80326 76.71651 177.42389 78.33731 179.42323 78.33773 C 180.38356 78.33773 181.30456 77.95624 181.98363 77.27718 C 182.66269 76.59813 183.04417 75.67712 183.04417 74.71679 C 183.04396 72.71715 181.42288 71.09623 179.42323 71.09623 L 179.42323 71.09623 L 179.42323 71.09623 Z  M 169.8374 71.09623 C 168.87707 71.09623 167.95607 71.47772 167.27701 72.15678 C 166.59796 72.83583 166.21647 73.75684 166.21647 74.71717 C 166.21667 76.71681 167.83776 78.33773 169.8374 78.33773 C 171.83691 78.33731 173.45759 76.71628 173.45759 74.71679 C 173.45738 72.71745 171.83676 71.09665 169.8374 71.09623 L 169.8374 71.09623 L 169.8374 71.09623 Z  M 208.18186 61.2795 C 206.18236 61.27971 204.5615 62.90056 204.5613 64.90006 C 204.5613 66.8997 206.1822 68.52079 208.18186 68.521 C 210.18164 68.521 211.8028 66.89985 211.8028 64.90006 C 211.8028 62.90027 210.18164 61.27911 208.18186 61.27911 L 208.18186 61.2795 L 208.18186 61.2795 Z  M 198.59565 61.2795 C 196.59601 61.2795 194.97491 62.90041 194.9747 64.90006 C 194.9747 65.86039 195.35619 66.78139 196.03526 67.46045 C 196.71431 68.13951 197.63531 68.521 198.59565 68.521 C 200.59543 68.521 202.21659 66.89985 202.21659 64.90006 C 202.21659 62.90027 200.59543 61.27911 198.59565 61.27911 L 198.59565 61.2795 L 198.59565 61.2795 Z  M 189.00982 61.2795 C 187.01018 61.2795 185.38909 62.90041 185.38888 64.90006 C 185.38888 65.86039 185.77037 66.78139 186.44943 67.46045 C 187.12849 68.13951 188.04949 68.521 189.00982 68.521 C 191.00931 68.52058 192.63 66.89955 192.63 64.90006 C 192.63 62.90056 191.00931 61.27953 189.00982 61.27911 L 189.00982 61.2795 L 189.00982 61.2795 Z  M 179.42323 61.2795 C 177.42389 61.27991 175.80326 62.90071 175.80305 64.90006 C 175.80305 66.89955 177.42374 68.52058 179.42323 68.521 C 180.38356 68.521 181.30456 68.13951 181.98363 67.46045 C 182.66269 66.78139 183.04417 65.86039 183.04417 64.90006 C 183.04417 62.90027 181.42303 61.27911 179.42323 61.27911 L 179.42323 61.2795 L 179.42323 61.2795 Z  M 169.8374 61.2795 C 167.83776 61.2795 166.21667 62.90041 166.21647 64.90006 C 166.21647 65.86039 166.59796 66.78139 167.27701 67.46045 C 167.95607 68.13951 168.87707 68.521 169.8374 68.521 C 171.83691 68.52058 173.45759 66.89955 173.45759 64.90006 C 173.45759 62.90056 171.83691 61.27953 169.8374 61.27911 L 169.8374 61.2795 L 169.8374 61.2795 Z \" />\n        <g\n           id=\"USB_ST_LINK\">\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path385\"\n             d=\" M 284.86277 78.55044 L 283.34728 78.55044 L 283.34728 77.69885 L 284.86277 77.69885 L 284.86277 78.55044 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path387\"\n             d=\" M 284.86277 78.55044 L 284.72665 78.55044 L 284.72665 77.88085 L 284.86314 77.88085 L 284.86277 78.55044 Z \" />\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path389\"\n             d=\" M 282.04261 78.55044 L 280.52712 78.55044 L 280.52712 77.69885 L 282.04261 77.69885 L 282.04261 78.55044 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path391\"\n             d=\" M 282.04261 78.55044 L 281.90649 78.55044 L 281.90649 77.88085 L 282.04298 77.88085 L 282.04261 78.55044 Z \" />\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path393\"\n             d=\" M 279.22738 78.55044 L 277.7115 78.55044 L 277.7115 77.69885 L 279.22738 77.69885 L 279.22738 78.55044 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path395\"\n             d=\" M 279.22738 78.55044 L 279.09087 78.55044 L 279.09087 77.88085 L 279.22738 77.88085 L 279.22738 78.55044 Z \" />\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path397\"\n             d=\" M 276.4072 78.55044 L 274.89287 78.55044 L 274.89287 77.69885 L 276.4072 77.69885 L 276.4072 78.55044 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path399\"\n             d=\" M 276.4072 78.55044 L 276.27261 78.55044 L 276.27261 77.88085 L 276.4072 77.88085 L 276.4072 78.55044 Z \" />\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path401\"\n             d=\" M 273.59007 78.55044 L 272.07574 78.55044 L 272.07574 77.69885 L 273.59007 77.69885 L 273.59007 78.55044 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path403\"\n             d=\" M 273.59007 78.55044 L 273.45548 78.55044 L 273.45548 77.88085 L 273.59007 77.88085 L 273.59007 78.55044 Z \" />\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path405\"\n             d=\" M 263.72861 69.40785 L 260.92817 69.40785 L 260.92817 62.87461 L 263.72861 62.87461 L 263.72861 69.40785 Z  M 296.00428 69.40785 L 293.20724 69.40785 L 293.20724 62.83404 L 296.00428 62.83404 L 296.00428 69.40785 Z \" />\n          <path\n             fill=\"rgb(204,204,204)\"\n             id=\"path407\"\n             d=\" M 292.85386 78.07081 L 264.03307 78.07081 L 264.03307 77.90057 L 292.85386 77.90057 L 292.85386 78.07081 Z \" />\n          <path\n             fill=\"rgb(51,51,51)\"\n             id=\"path409\"\n             d=\" M 286.3373 78.07081 L 270.59855 78.07081 L 270.59855 56.36222 L 286.3373 56.36222 L 286.3373 78.07081 Z \" />\n          <path\n             fill=\"rgb(204,204,204)\"\n             id=\"path411\"\n             d=\" M 293.20724 77.32842 L 292.85539 78.07081 L 288.9804 78.07081 C 288.9804 78.07081 292.50088 77.92293 292.62638 77.70037 C 292.75151 77.47743 292.45652 77.32842 292.45652 77.32842 L 293.20724 77.32842 Z  M 263.72861 77.32842 L 264.08046 78.06967 L 267.95545 78.06967 C 267.95545 78.06967 264.43687 77.9218 264.31137 77.69885 C 264.18587 77.47629 264.4782 77.32842 264.4782 77.32842 L 263.72861 77.32842 Z \" />\n          <path\n             fill=\"rgb(230,230,230)\"\n             id=\"path413\"\n             d=\" M 268.91167 77.32842 L 268.91167 75.93085 L 271.36633 75.93085 L 271.36633 78.07081 L 272.07155 78.07081 L 272.07155 77.32956 L 284.86277 77.32956 L 284.86277 78.07081 L 285.66582 78.07081 L 285.66582 75.92933 L 288.122 75.92933 L 288.122 77.32842 L 293.20724 77.32842 L 293.20724 55.795 L 263.73012 55.795 L 263.73012 77.32842 L 268.91167 77.32842 Z  M 285.66582 59.92136 L 285.66582 58.85328 L 288.10228 58.85328 L 288.10228 60.00705 C 288.75368 60.3699 289.18477 61.00271 289.18477 61.71894 C 289.18477 62.50114 288.84998 63.16618 288.10228 63.51235 L 288.10228 69.38017 L 285.66735 69.38017 L 285.66735 63.50969 C 284.92116 63.1639 284.40551 62.49621 284.40551 61.71401 C 284.40551 60.93333 284.91965 60.26563 285.66582 59.92098 L 285.66582 59.92136 Z  M 269.01405 59.92136 L 269.01405 58.85328 L 271.44899 58.85328 L 271.44899 60.00705 C 272.10039 60.3699 272.52997 61.00271 272.52997 61.71894 C 272.52997 62.50114 272.19821 63.16618 271.44899 63.51235 L 271.44899 69.38017 L 269.01405 69.38017 L 269.01405 63.50969 C 268.26483 63.1639 267.75069 62.49621 267.75069 61.71401 C 267.75069 60.93333 268.26333 60.26563 269.01405 59.92098 L 269.01405 59.92136 Z \" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path415\"\n             d=\" M 292.58618 55.79121 L 293.20724 55.79121 L 293.20724 77.32842 L 290.86558 77.32842 L 292.58618 55.79121 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path417\"\n             d=\" M 263.72861 55.79121 L 264.59877 70.1726 L 265.46589 77.32842 L 263.72861 77.32842 L 263.72861 55.79121 Z \" />\n          <path\n             fill=\"rgb(204,204,204)\"\n             id=\"path419\"\n             d=\" M 288.10228 69.38017 L 285.66735 69.38017 L 285.66735 69.2103 L 288.10228 69.2103 L 288.10228 69.38017 Z  M 271.44596 69.38017 L 269.01252 69.38017 L 269.01252 69.2103 L 271.44596 69.2103 L 271.44596 69.38017 Z \" />\n          <path\n             fill=\"rgb(179,179,179)\"\n             id=\"path421\"\n             d=\" M 291.76189 56.92299 L 265.17243 56.92299 L 265.17243 56.05662 L 291.76189 56.05662 L 291.76189 56.92299 Z \" />\n          <path\n             fill=\"rgb(204,204,204)\"\n             id=\"path423\"\n             d=\" M 291.76189 56.20108 L 265.17243 56.20108 L 265.17243 55.79121 L 291.76189 55.79121 L 291.76189 56.20108 Z \" />\n        </g>\n        <g\n           id=\"USB_OTG\">\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path427\"\n             d=\" M 150.13835 78.55044 L 148.62286 78.55044 L 148.62286 77.69885 L 150.13835 77.69885 L 150.13835 78.55044 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path429\"\n             d=\" M 150.13835 78.55044 L 150.00223 78.55044 L 150.00223 77.88085 L 150.13835 77.88085 L 150.13835 78.55044 Z \" />\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path431\"\n             d=\" M 147.31819 78.55044 L 145.8027 78.55044 L 145.8027 77.69885 L 147.31819 77.69885 L 147.31819 78.55044 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path433\"\n             d=\" M 147.31819 78.55044 L 147.18207 78.55044 L 147.18207 77.88085 L 147.31819 77.88085 L 147.31819 78.55044 Z \" />\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path435\"\n             d=\" M 144.50295 78.55044 L 142.98709 78.55044 L 142.98709 77.69885 L 144.50257 77.69885 L 144.50295 78.55044 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path437\"\n             d=\" M 144.50295 78.55044 L 144.36646 78.55044 L 144.36646 77.88085 L 144.50295 77.88085 L 144.50295 78.55044 Z \" />\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path439\"\n             d=\" M 141.68241 78.55044 L 140.16843 78.55044 L 140.16843 77.69885 L 141.68241 77.69885 L 141.68241 78.55044 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path441\"\n             d=\" M 141.68241 78.55044 L 141.5478 78.55044 L 141.5478 77.88085 L 141.68241 77.88085 L 141.68241 78.55044 Z \" />\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path443\"\n             d=\" M 138.86528 78.55044 L 137.35131 78.55044 L 137.35131 77.69885 L 138.86528 77.69885 L 138.86528 78.55044 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path445\"\n             d=\" M 138.86528 78.55044 L 138.73068 78.55044 L 138.73068 77.88085 L 138.86528 77.88085 L 138.86528 78.55044 Z \" />\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path447\"\n             d=\" M 129.00419 69.40785 L 126.20373 69.40785 L 126.20373 62.87461 L 129.00419 62.87461 L 129.00419 69.40785 Z  M 161.27986 69.40785 L 158.48243 69.40785 L 158.48243 62.83404 L 161.27986 62.83404 L 161.27986 69.40785 Z \" />\n          <path\n             fill=\"rgb(204,204,204)\"\n             id=\"path449\"\n             d=\" M 158.12944 78.07081 L 129.30827 78.07081 L 129.30827 77.90057 L 158.12944 77.90057 L 158.12944 78.07081 Z \" />\n          <path\n             fill=\"rgb(51,51,51)\"\n             id=\"path451\"\n             d=\" M 151.61251 78.07081 L 135.87373 78.07081 L 135.87373 56.36222 L 151.61251 56.36222 L 151.61251 78.07081 Z \" />\n          <path\n             fill=\"rgb(204,204,204)\"\n             id=\"path453\"\n             d=\" M 158.48243 77.32842 L 158.13096 78.07081 L 154.25485 78.07081 C 154.25485 78.07081 157.77569 77.92293 157.90119 77.70037 C 158.02631 77.47743 157.73133 77.32842 157.73133 77.32842 L 158.48243 77.32842 Z  M 129.00419 77.32842 L 129.35567 78.06967 L 133.23101 78.06967 C 133.23101 78.06967 129.71244 77.9218 129.58656 77.69885 C 129.46145 77.47629 129.75339 77.32842 129.75339 77.32842 L 129.00419 77.32842 Z \" />\n          <path\n             fill=\"rgb(230,230,230)\"\n             id=\"path455\"\n             d=\" M 134.18686 77.32842 L 134.18686 75.93085 L 136.64153 75.93085 L 136.64153 78.07081 L 137.34676 78.07081 L 137.34676 77.32956 L 150.13835 77.32956 L 150.13835 78.07081 L 150.94141 78.07081 L 150.94141 75.92933 L 153.39758 75.92933 L 153.39758 77.32842 L 158.48243 77.32842 L 158.48243 55.795 L 129.0057 55.795 L 129.0057 77.32842 L 134.18686 77.32842 Z  M 150.94141 59.92136 L 150.94141 58.85328 L 153.37748 58.85328 L 153.37748 60.00705 C 154.02925 60.3699 154.46035 61.00271 154.46035 61.71894 C 154.46035 62.50114 154.12555 63.16618 153.37748 63.51235 L 153.37748 69.38017 L 150.94292 69.38017 L 150.94292 63.50969 C 150.19637 63.1639 149.68109 62.49621 149.68109 61.71401 C 149.68109 60.93333 150.19484 60.26563 150.94141 59.92098 L 150.94141 59.92136 Z  M 134.28963 59.92136 L 134.28963 58.85328 L 136.72418 58.85328 L 136.72418 60.00705 C 137.37595 60.3699 137.80553 61.00271 137.80553 61.71894 C 137.80553 62.50114 137.47377 63.16618 136.72418 63.51235 L 136.72418 69.38017 L 134.28963 69.38017 L 134.28963 63.50969 C 133.54003 63.1639 133.02628 62.49621 133.02628 61.71401 C 133.02628 60.93333 133.53851 60.26563 134.28963 59.92098 L 134.28963 59.92136 Z \" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path457\"\n             d=\" M 156.14115 77.32842 L 157.86176 55.79121 L 158.48243 55.79121 L 158.48243 77.32842 L 156.14115 77.32842 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path459\"\n             d=\" M 129.00419 77.32842 L 129.00419 55.79121 L 129.87435 70.1726 L 130.74148 77.32842 L 129.00419 77.32842 Z \" />\n          <path\n             fill=\"rgb(204,204,204)\"\n             id=\"path461\"\n             d=\" M 153.37748 69.38017 L 150.94292 69.38017 L 150.94292 69.2103 L 153.37748 69.2103 L 153.37748 69.38017 Z  M 136.72115 69.38017 L 134.28811 69.38017 L 134.28811 69.2103 L 136.72115 69.2103 L 136.72115 69.38017 Z \" />\n          <path\n             fill=\"rgb(179,179,179)\"\n             id=\"path463\"\n             d=\" M 157.03748 56.92299 L 130.44763 56.92299 L 130.44763 56.05662 L 157.03748 56.05662 L 157.03748 56.92299 Z \" />\n          <path\n             fill=\"rgb(204,204,204)\"\n             id=\"path465\"\n             d=\" M 157.03748 56.20108 L 130.44763 56.20108 L 130.44763 55.79121 L 157.03748 55.79121 L 157.03748 56.20108 Z \" />\n        </g>\n        <g\n           id=\"PMOD\">\n          <path\n             fill=\"rgb(48,48,48)\"\n             id=\"path471\"\n             d=\" M 78.97908 260.70843 L 136.50351 260.70843 L 136.50351 293.84441 L 78.97908 293.84441 L 78.97908 260.70843 Z \" />\n          <path\n             fill=\"rgb(0,0,0)\"\n             id=\"path473\"\n             d=\" M 78.98097 260.70843 L 78.98097 293.84516 L 80.08887 291.14937 L 80.08887 263.40424 L 78.98097 260.70843 Z \" />\n          <path\n             fill=\"rgb(61,61,61)\"\n             id=\"path475\"\n             d=\" M 135.44718 263.40424 L 136.50503 260.70843 L 136.50503 293.84516 L 135.44718 291.14937 L 135.44718 263.40424 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(255,255,255)\"\n             stroke-width=\"0.37916\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"none\"\n             id=\"path515\"\n             d=\" M 77.98531 293.84516 L 78.30001 239.67134 L 137.33918 239.67134 L 137.33918 293.84516\" />\n          <g\n             id=\"g268\"\n             transform=\"matrix(0,-0.36071,0.39855,0,136.80538,256.51992)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:13px;font-style:normal;stroke:#FFFFFF;stroke-width:0.24668;fill:#ffffff;fill-opacity:1;\"\n               id=\"tspan517\"\n               transform=\"matrix(1,0,0,1,0.49337,14.38839)\">PMOD</text>\n          </g>\n        </g>\n        <g\n           id=\"NUTS\">\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke-opacity=\"0.10400002\"\n             stroke=\"rgb(0,0,0)\"\n             stroke-width=\"0.33972\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(202,210,195)\"\n             id=\"path477\"\n             d=\" M 11.73459 82.0091 L 5.66165 70.91954 L 12.22863 60.11511 L 24.86932 60.40023 L 30.94264 71.48979 L 24.3749 82.29423 L 11.73459 82.0091 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke-opacity=\"0.10400002\"\n             stroke=\"rgb(0,0,0)\"\n             stroke-width=\"0.37916\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(202,210,195)\"\n             id=\"path479\"\n             d=\" M 20.68078 76.77902 C 19.20238 77.41 17.53387 77.42781 16.04233 76.82852 C 14.5508 76.22924 13.35845 75.06195 12.7276 73.58349 C 12.09665 72.10504 12.07889 70.43649 12.67825 68.94495 C 13.27761 67.45341 14.44498 66.26109 15.92351 65.63031 C 17.40191 64.99933 19.07043 64.98153 20.56196 65.58081 C 22.05349 66.1801 23.24585 67.34738 23.87669 68.82584 C 24.50767 70.30424 24.52548 71.97276 23.92619 73.46429 C 23.32691 74.95582 22.15962 76.14818 20.68116 76.77902 L 20.68078 76.77902 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke-opacity=\"0.10400002\"\n             stroke=\"rgb(0,0,0)\"\n             stroke-width=\"0.33972\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(202,210,195)\"\n             id=\"path481\"\n             d=\" M 343.88716 79.03538 L 333.08235 85.60161 L 321.99316 79.52752 L 321.7088 66.88646 L 332.51398 60.32061 L 343.60317 66.39469 L 343.88716 79.03538 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke-opacity=\"0.10400002\"\n             stroke=\"rgb(0,0,0)\"\n             stroke-width=\"0.37916\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(202,210,195)\"\n             id=\"path483\"\n             d=\" M 338.25934 70.33375 C 338.95624 71.78218 339.0492 73.44815 338.51774 74.96512 C 337.98631 76.4821 336.874 77.72582 335.42553 78.42266 C 333.97699 79.11952 332.31096 79.21237 330.79396 78.68077 C 329.27697 78.14918 328.0333 77.0367 327.33662 75.58809 C 325.88567 72.57186 327.15458 68.95051 330.1708 67.49955 C 331.61927 66.80267 333.28528 66.70977 334.80227 67.24129 C 336.31924 67.77281 337.56293 68.88521 338.25971 70.33375 L 338.25934 70.33375 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke-opacity=\"0.10400002\"\n             stroke=\"rgb(0,0,0)\"\n             stroke-width=\"0.33972\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(202,210,195)\"\n             id=\"path485\"\n             d=\" M 343.56639 286.94528 L 332.75702 293.50468 L 321.67202 287.42302 L 321.39599 274.78234 L 332.20573 268.22294 L 343.29036 274.3046 L 343.56639 286.94528 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke-opacity=\"0.10400002\"\n             stroke=\"rgb(0,0,0)\"\n             stroke-width=\"0.37916\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(202,210,195)\"\n             id=\"path487\"\n             d=\" M 337.94464 278.24024 C 338.64053 279.68922 338.73227 281.35532 338.19968 282.87195 C 337.6671 284.38859 336.55381 285.6315 335.10476 286.32726 C 333.6558 287.02304 331.98982 287.11473 330.47326 286.58214 C 328.95673 286.04955 327.71388 284.93634 327.01812 283.48738 C 325.56918 280.47021 326.84046 276.84972 329.85762 275.40074 C 331.30656 274.70481 332.97261 274.61301 334.48923 275.14553 C 336.00586 275.67805 337.24881 276.79126 337.94464 278.24024 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke-opacity=\"0.10400002\"\n             stroke=\"rgb(0,0,0)\"\n             stroke-width=\"0.33972\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(202,210,195)\"\n             id=\"path489\"\n             d=\" M 27.67697 286.40082 L 16.74325 292.75056 L 5.77729 286.45694 L 5.74506 273.81321 L 16.67803 267.46347 L 27.64399 273.75748 L 27.67697 286.40082 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke-opacity=\"0.10400002\"\n             stroke=\"rgb(0,0,0)\"\n             stroke-width=\"0.37916\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(202,210,195)\"\n             id=\"path491\"\n             d=\" M 22.22357 277.58885 C 22.89149 279.0509 22.95122 280.71843 22.38962 282.22453 C 21.82802 283.73062 20.6911 284.95194 19.22899 285.61976 C 16.1845 287.01038 12.58912 285.66966 11.19847 282.62518 C 9.8078 279.58078 11.14833 275.98544 14.19266 274.59466 C 15.65468 273.92672 17.32216 273.86692 18.82825 274.42845 C 20.33435 274.98997 21.55569 276.12681 22.22357 277.58885 L 22.22357 277.58885 Z \" />\n        </g>\n        <g\n           id=\"NFC_ANTENA\">\n          <ellipse\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke=\"rgb(0,86,121)\"\n             stroke-width=\"0.37916\"\n             fill=\"rgb(255,255,255)\"\n             id=\"ellipse497\"\n             ry=\"8.706942667036174\"\n             rx=\"8.656894052596172\"\n             cy=\"226.48542620552678\"\n             cx=\"29.763848831209998\"\n             vector-effect=\"non-scaling-stroke\" />\n          <path\n             fill=\"rgb(0,86,121)\"\n             id=\"path499\"\n             d=\" M 26.01248 223.98906 L 31.51669 223.98906 L 31.51669 229.4527 L 26.01248 229.4527 L 26.01248 223.98906 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke=\"rgb(0,86,121)\"\n             stroke-width=\"0.37916\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"none\"\n             id=\"path501\"\n             d=\" M 21.0698 225.48673 L 22.32974 225.48673 L 22.32974 227.99598 L 23.74626 227.99598 L 23.74626 225.20349 L 25.00089 225.20349 L 25.00089 227.91484 L 26.82198 227.91484\" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(0,86,121)\"\n             stroke-width=\"0.37916\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"none\"\n             id=\"path503\"\n             d=\" M 34.60264 221.8036 C 33.31048 223.87721 34.78008 225.37071 36.29254 225.42606 M 32.81189 221.03467 C 30.82738 223.59133 33.04127 227.43255 35.62484 227.14592 M 31.07156 220.71087 C 28.96156 223.43852 29.63911 228.32319 34.48131 228.74481\" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(255,255,255)\"\n             stroke-width=\"0.37916\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"none\"\n             id=\"path495\"\n             d=\" M 5.13083 199.46334 L 56.16601 199.46334 L 56.16601 214.27584 M 56.08146 232.77183 L 56.08146 255.27399 L 5.20856 255.27399\" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"round\"\n             stroke=\"rgb(0,70,86)\"\n             stroke-width=\"0.37916\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"none\"\n             id=\"path469\"\n             d=\" M 58.28891 223.64517 L 54.68692 223.64517 L 54.68692 201.2086 L 5.95398 201.2086 L 5.95398 253.55111 L 53.3739 253.55111 L 53.3739 202.56598 L 7.27003 202.52579 L 7.27003 252.19828 L 51.71244 252.19828 L 51.71244 204.11748 L 8.93339 204.11748 L 8.93339 250.70061 L 50.21477 250.70061 L 50.21477 205.65534 L 10.30972 205.65534 L 10.30972 249.08199 L 48.6773 249.08199 L 48.6773 207.23377 L 11.96929 207.23377 L 11.96929 247.7868 L 47.26077 247.7868 L 47.26077 208.73106 L 13.38582 208.73106 L 13.38582 246.1678 L 45.80367 246.1678 L 45.80367 210.26929 L 14.92368 210.26929 L 14.92368 244.7107 L 44.22525 244.7107 L 44.22525 211.84772 L 16.3402 211.84772 L 16.3402 243.33474 L 42.64682 243.33474 L 42.64682 213.26387 L 17.77683 213.26387 L 17.73664 241.93869 L 41.06839 241.85755 L 41.00773 227.67218\" />\n        </g>\n        <g\n           id=\"LABEL\">\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke=\"rgb(255,255,255)\"\n             stroke-width=\"0.37916\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"none\"\n             id=\"path507\"\n             d=\" M 96.93023 229.28284 L 150.61799 229.28284 L 150.61799 236.95241 L 96.93023 236.95241 L 96.93023 229.28284 Z \" />\n          <g\n             id=\"g289\"\n             transform=\"matrix(0.3708,0,0,0.3877,99.13878,228.99666)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:15px;font-style:normal;stroke:#FFFFFF;stroke-width:0.14643;fill:#ffffff;fill-opacity:1;\"\n               id=\"tspan509\"\n               transform=\"matrix(1,0,0,1,0.29285,16.32557)\">B-L475E-IOT01Ax</text>\n          </g>\n        </g>\n        <g\n           id=\"RoHS\">\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke=\"rgb(255,255,255)\"\n             stroke-width=\"0.74808\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"none\"\n             id=\"path521\"\n             d=\" M 111.74955 149.63388 L 146.96292 149.63388 L 146.96292 171.34929 L 111.74955 171.34929 L 111.74955 149.63388 Z \" />\n          <g\n             id=\"g294\"\n             transform=\"matrix(0.37684,0,0,0.38148,116.70801,149.04084)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:25px;font-style:normal;stroke:#FFFFFF;stroke-width:0.24077;fill:#ffffff;fill-opacity:1;\"\n               id=\"tspan523\"\n               transform=\"matrix(1,0,0,1,0.48154,27.20274)\">RoHS</text>\n          </g>\n          <g\n             id=\"g297\"\n             transform=\"matrix(0.36779,0,0,0.39087,116.04098,159.32857)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:12px;font-style:normal;stroke:#FFFFFF;stroke-width:0.11765;fill:#ffffff;fill-opacity:1;\"\n               id=\"tspan527\"\n               transform=\"matrix(1,0,0,1,0.23529,13.06147)\">COMPLIANT</text>\n          </g>\n          <g\n             id=\"g300\"\n             transform=\"matrix(0.38424,0,0,0.37414,114.12658,164.26995)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:13px;font-style:normal;stroke:#FFFFFF;stroke-width:0.13045;fill:#ffffff;fill-opacity:1;\"\n               id=\"tspan531\"\n               transform=\"matrix(1,0,0,1,0.26091,14.15593)\">2002/95/EC</text>\n          </g>\n        </g>\n        <g\n           id=\"ST\">\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(0,0,0)\"\n             stroke-width=\"0.10048\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(255,255,255)\"\n             id=\"path537\"\n             d=\" M 247.25277 233.18321 L 221.12813 233.18321 C 219.98157 233.209 218.402 234.20239 217.9508 235.2064 L 212.5884 247.93466 C 212.57097 248.07192 212.64944 248.20539 212.75485 248.23723 L 224.56671 248.23723 C 225.16616 248.07799 225.24389 247.41295 224.9959 246.94962 L 220.0631 242.01679 C 218.83994 239.86395 220.13891 236.40225 222.56362 235.95296 L 246.21615 235.96736 L 247.38963 233.44901 L 247.38963 233.26322 L 247.25277 233.18321 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(0,0,0)\"\n             stroke-width=\"0.10048\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(255,255,255)\"\n             id=\"path539\"\n             d=\" M 225.90475 251.78614 L 231.03472 251.76452 C 231.219 251.68489 231.30127 251.53628 231.41388 251.37817 L 236.32888 239.48745 C 236.30044 239.30469 236.16888 239.14696 235.98537 239.05104 L 223.65104 239.05104 C 222.9534 239.19625 222.60722 240.01106 222.97842 240.45316 L 227.50024 244.64587 C 227.90972 245.0963 228.12547 245.63774 228.37306 246.1841 C 228.68585 247.29047 228.46329 248.39875 228.07238 249.33906 C 227.83275 249.84713 227.46421 250.24447 227.09947 250.66269 C 226.76012 250.99066 226.31196 251.20148 225.92597 251.37817 L 225.90475 251.78614 Z  M 244.5706 239.1155 L 240.12084 239.1155 C 239.83039 239.13369 239.75571 239.19891 239.59834 239.4192 L 234.69738 251.20641 C 234.67197 251.50973 234.81682 251.61588 235.0481 251.72889 L 237.2874 251.72889 C 240.00444 250.67103 240.51515 249.90135 241.61243 247.41788 L 242.99332 244.10556 L 244.80681 239.66944 C 244.92132 239.38393 244.71355 239.11512 244.5706 239.1155 L 244.5706 239.1155 Z \" />\n        </g>\n        <g\n           id=\"g307\"\n           transform=\"matrix(0,-0.3993,0.36003,0,11.43599,123.69183)\">\n          <text\n             style=\"font-family:'Open Sans';font-weight:400;font-size:14px;font-style:normal;stroke:#FFFFFF;stroke-width:0.13762;fill:#ffffff;fill-opacity:1;\"\n             id=\"tspan553\"\n             transform=\"matrix(1,0,0,1,0.27524,15.23911)\">USER</text>\n        </g>\n        <g\n           id=\"g310\"\n           transform=\"matrix(0,-0.36191,0.39723,0,10.49619,170.65746)\">\n          <text\n             style=\"font-family:'Open Sans';font-weight:400;font-size:15px;font-style:normal;stroke:#FFFFFF;stroke-width:0.14401;fill:#ffffff;fill-opacity:1;\"\n             id=\"tspan557\"\n             transform=\"matrix(1,0,0,1,0.28802,16.32074)\">RESET</text>\n        </g>\n        <g\n           id=\"Group\">\n          <line\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(255,255,255)\"\n             stroke-width=\"0.90997\"\n             vector-effect=\"non-scaling-stroke\"\n             id=\"path561\"\n             y2=\"266.9103\"\n             x2=\"224.92539\"\n             y1=\"266.9103\"\n             x1=\"176.52421\" />\n          <g\n             id=\"g314\"\n             transform=\"matrix(0.37916,0,0,0.37916,209.29505,259.16591)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:11px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n               id=\"text563\"\n               transform=\"matrix(1,0,0,1,0,11.75732)\">POWER</text>\n          </g>\n          <g\n             id=\"g593\">\n            <g\n               id=\"g317\"\n               transform=\"matrix(0,-0.37916,0.37916,0,219.24431,276.08322)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan565\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">VIN</text>\n            </g>\n            <g\n               id=\"g320\"\n               transform=\"matrix(0,-0.37916,0.37916,0,209.28767,276.08322)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan569\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">GND</text>\n            </g>\n            <g\n               id=\"g323\"\n               transform=\"matrix(0,-0.37916,0.37916,0,199.33103,276.08322)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan573\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">GND</text>\n            </g>\n            <g\n               id=\"g326\"\n               transform=\"matrix(0,-0.37916,0.37916,0,189.37438,276.08322)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan577\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">5V</text>\n            </g>\n            <g\n               id=\"g329\"\n               transform=\"matrix(0,-0.37916,0.37916,0,179.41775,276.08322)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan581\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">3V3</text>\n            </g>\n            <g\n               id=\"g332\"\n               transform=\"matrix(0,-0.37916,0.37916,0,169.46111,276.08322)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan585\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">RST</text>\n            </g>\n            <g\n               id=\"g335\"\n               transform=\"matrix(0,-0.37916,0.37916,0,159.50446,276.08322)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan589\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">IOREF</text>\n            </g>\n          </g>\n          <line\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(255,255,255)\"\n             stroke-width=\"1.13747\"\n             vector-effect=\"non-scaling-stroke\"\n             id=\"path595\"\n             y2=\"266.9103\"\n             x2=\"294.99611\"\n             y1=\"266.9103\"\n             x1=\"237.01932\" />\n          <g\n             id=\"g340\"\n             transform=\"matrix(0.37916,0,0,0.37916,236.17154,259.16591)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:11px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n               id=\"text597\"\n               transform=\"matrix(1,0,0,1,0,11.75732)\">ANALOG IN</text>\n          </g>\n          <g\n             id=\"g623\">\n            <g\n               id=\"g343\"\n               transform=\"matrix(0,-0.37916,0.37916,0,238.49748,276.04417)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan599\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">A0</text>\n            </g>\n            <g\n               id=\"g346\"\n               transform=\"matrix(0,-0.37916,0.37916,0,248.44616,276.04417)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan603\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">A1</text>\n            </g>\n            <g\n               id=\"g349\"\n               transform=\"matrix(0,-0.37916,0.37916,0,258.39446,276.04417)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan607\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">A2</text>\n            </g>\n            <g\n               id=\"g352\"\n               transform=\"matrix(0,-0.37916,0.37916,0,268.34314,276.04417)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan611\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">A3</text>\n            </g>\n            <g\n               id=\"g355\"\n               transform=\"matrix(0,-0.37916,0.37916,0,278.29144,276.04417)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan615\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">A4</text>\n            </g>\n            <g\n               id=\"g358\"\n               transform=\"matrix(0,-0.37916,0.37916,0,288.23974,276.04417)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan619\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">A5</text>\n            </g>\n          </g>\n        </g>\n        <g\n           id=\"g423\">\n          <g\n             id=\"g657\">\n            <g\n               id=\"g363\"\n               transform=\"matrix(0,-0.37916,0.37916,0,288.39708,115.97164)\">\n              <text\n                 style=\"font-family:'Open Sans';font-weight:400;font-size:10px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n                 id=\"tspan625\"\n                 transform=\"matrix(1,0,0,1,0,10.68848)\">RX/D0</text>\n            </g>\n            <g\n               id=\"g366\"\n               transform=\"matrix(0,-0.37916,0.37916,0,278.47419,115.95988)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"2.3615623\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan629\">TX/D1</text>\n            </g>\n            <g\n               id=\"g369\"\n               transform=\"matrix(0,-0.37916,0.37916,0,268.55092,108.64975)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-3.6272249\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan633\">D2</text>\n            </g>\n            <g\n               id=\"g372\"\n               transform=\"matrix(0,-0.37916,0.37916,0,258.62764,111.10289)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-2.8311195\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan637\">~D3</text>\n            </g>\n            <g\n               id=\"g375\"\n               transform=\"matrix(0,-0.37916,0.37916,0,248.70474,108.79838)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-3.5721409\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan641\">D4</text>\n            </g>\n            <g\n               id=\"g378\"\n               transform=\"matrix(0,-0.37916,0.37916,0,238.78147,111.08318)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-2.8928685\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan645\">~D5</text>\n            </g>\n            <g\n               id=\"g382\"\n               transform=\"matrix(0,-0.37916,0.37916,0,228.85819,111.14384)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-2.8207738\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan649\">~D6</text>\n            </g>\n            <g\n               id=\"g385\"\n               transform=\"matrix(0,-0.37916,0.37916,0,218.9353,108.6888)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-3.5535309\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan653\">D7</text>\n            </g>\n          </g>\n          <g\n             id=\"g699\">\n            <g\n               id=\"g389\"\n               transform=\"matrix(0,-0.37916,0.37916,0,203.22193,108.73392)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-2.6431975\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan659\">D8</text>\n            </g>\n            <g\n               id=\"g392\"\n               transform=\"matrix(0,-0.37916,0.37916,0,193.28462,111.13209)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-2.0213673\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan663\">~D9</text>\n            </g>\n            <g\n               id=\"g395\"\n               transform=\"matrix(0,-0.37916,0.37916,0,183.34732,113.55793)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-1.3851539\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan667\">~D10</text>\n            </g>\n            <g\n               id=\"g398\"\n               transform=\"matrix(0,-0.37916,0.37916,0,173.41002,113.54617)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"0.31234586\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan671\">~D11</text>\n            </g>\n            <g\n               id=\"g401\"\n               transform=\"matrix(0,-0.37916,0.37916,0,163.47271,111.06346)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-2.2023728\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan675\">D12</text>\n            </g>\n            <g\n               id=\"g404\"\n               transform=\"matrix(0,-0.37916,0.37916,0,153.53541,111.10289)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-2.0495515\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan679\">D13</text>\n            </g>\n            <g\n               id=\"g407\"\n               transform=\"matrix(0,-0.37916,0.37916,0,143.5981,111.15559)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-5.2748179\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan683\">GND</text>\n            </g>\n            <g\n               id=\"g410\"\n               transform=\"matrix(0,-0.37916,0.37916,0,133.6608,112.73418)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"-2.6543992\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan687\">AREF</text>\n            </g>\n            <g\n               id=\"g413\"\n               transform=\"matrix(0,-0.37916,0.37916,0,123.7235,120.86806)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"0.54601604\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan691\">SDA/D14</text>\n            </g>\n            <g\n               id=\"g416\"\n               transform=\"matrix(0,-0.37916,0.37916,0,113.78619,120.73877)\">\n              <text\n                 y=\"10.68848\"\n                 x=\"2.690377\"\n                 style=\"font-style:normal;font-weight:400;font-size:10px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:none\"\n                 id=\"tspan695\">SCL/D15</text>\n            </g>\n          </g>\n          <line\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(255,255,255)\"\n             stroke-width=\"1.32856\"\n             vector-effect=\"non-scaling-stroke\"\n             id=\"path701\"\n             y2=\"119.57665\"\n             x2=\"294.76064\"\n             y1=\"119.57665\"\n             x1=\"153.76422\" />\n          <g\n             id=\"g421\"\n             transform=\"matrix(0.37916,0,0,0.37916,210.12275,112.56972)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:11px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n               id=\"text703\"\n               transform=\"matrix(1,0,0,1,0,11.75732)\">DIGITAL(PWM ~)</text>\n          </g>\n        </g>\n        <g\n           id=\"g721\">\n          <g\n             id=\"g426\"\n             transform=\"matrix(0.37624,0,0,0.3821,160.67555,239.13222)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:8px;font-style:normal;stroke:#FFFFFF;stroke-width:0.07659;fill:#ffffff;fill-opacity:1;\"\n               id=\"tspan705\"\n               transform=\"matrix(1,0,0,1,0.15319,8.70397)\">X</text>\n          </g>\n          <g\n             id=\"g429\"\n             transform=\"matrix(0.38507,0,0,0.37333,154.3337,235.26958)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:8px;font-style:normal;stroke:#FFFFFF;stroke-width:0.07737;fill:#ffffff;fill-opacity:1;\"\n               id=\"tspan709\"\n               transform=\"matrix(1,0,0,1,0.15473,8.70551)\">Y</text>\n          </g>\n          <g\n             id=\"g432\"\n             transform=\"matrix(0.39317,0,0,0.36564,153.22868,242.95975)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:9px;font-style:normal;stroke:#FFFFFF;stroke-width:0.08656;fill:#ffffff;fill-opacity:1;\"\n               id=\"tspan713\"\n               transform=\"matrix(1,0,0,1,0.17312,9.79275)\">Z</text>\n          </g>\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(254,254,254)\"\n             stroke-width=\"0.37916\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"none\"\n             id=\"path717\"\n             d=\" M 156.08731 238.35074 L 156.08731 242.92601 L 160.41424 242.92601\" />\n          <ellipse\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke=\"rgb(254,254,254)\"\n             stroke-width=\"0.37916\"\n             fill=\"none\"\n             id=\"ellipse719\"\n             ry=\"0.7647579948900045\"\n             rx=\"0.8652344178556177\"\n             cy=\"242.8554862621534\"\n             cx=\"156.19423203005002\"\n             vector-effect=\"non-scaling-stroke\" />\n        </g>\n        <g\n           id=\"g438\"\n           transform=\"matrix(0.42791,0,0,0.33596,155.66871,245.87848)\">\n          <text\n             style=\"font-family:'Open Sans';font-weight:400;font-size:8px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n             id=\"tspan723\"\n             transform=\"matrix(1,0,0,1,0,8.55078)\">U3</text>\n        </g>\n        <path\n           stroke-miterlimit=\"4\"\n           stroke-linecap=\"butt\"\n           stroke-linejoin=\"miter\"\n           stroke=\"rgb(245,245,245)\"\n           stroke-width=\"0.37916\"\n           vector-effect=\"non-scaling-stroke\"\n           fill=\"none\"\n           id=\"path727\"\n           d=\" M 262.70375 225.08595 L 259.44073 225.08595 L 259.44073 228.52604 M 277.03282 224.97942 L 279.51555 224.97942 L 279.51555 228.34897 M 279.44464 242.11045 L 279.44464 245.08986 L 275.50747 245.08986 M 261.71073 245.26693 L 259.44073 245.26693 L 259.44073 242.00391\" />\n        <g\n           id=\"g745\">\n          <g\n             id=\"g442\"\n             transform=\"matrix(0.37624,0,0,0.3821,269.49827,224.66874)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:8px;font-style:normal;stroke:#FFFFFF;stroke-width:0.07659;fill:#ffffff;fill-opacity:1;\"\n               id=\"tspan729\"\n               transform=\"matrix(1,0,0,1,0.15319,8.70397)\">X</text>\n          </g>\n          <g\n             id=\"g445\"\n             transform=\"matrix(0.38507,0,0,0.37333,276.92898,231.73789)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:8px;font-style:normal;stroke:#FFFFFF;stroke-width:0.07737;fill:#ffffff;fill-opacity:1;\"\n               id=\"tspan733\"\n               transform=\"matrix(1,0,0,1,0.15473,8.70551)\">Y</text>\n          </g>\n          <g\n             id=\"g448\"\n             transform=\"matrix(0.39317,0,0,0.36564,276.94669,224.56024)\">\n            <text\n               style=\"font-family:'Open Sans';font-weight:400;font-size:9px;font-style:normal;stroke:#FFFFFF;stroke-width:0.08656;fill:#ffffff;fill-opacity:1;\"\n               id=\"tspan737\"\n               transform=\"matrix(1,0,0,1,0.17312,9.79275)\">Z</text>\n          </g>\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(249,249,249)\"\n             stroke-width=\"0.37916\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"none\"\n             id=\"path741\"\n             d=\" M 271.485 228.50974 L 275.99962 228.50974 L 275.99962 233.51309\" />\n          <ellipse\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke=\"rgb(249,249,249)\"\n             stroke-width=\"0.37916\"\n             fill=\"none\"\n             id=\"ellipse743\"\n             ry=\"0.934240802879998\"\n             rx=\"0.8902586871599851\"\n             cy=\"228.3281176086034\"\n             cx=\"275.94919549143174\"\n             vector-effect=\"non-scaling-stroke\" />\n        </g>\n        <g\n           id=\"g454\"\n           transform=\"matrix(0,-0.4112,0.34961,0,261.62545,235.9588)\">\n          <text\n             style=\"font-family:'Open Sans';font-weight:400;font-size:9px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n             id=\"tspan747\"\n             transform=\"matrix(1,0,0,1,0,9.61963)\">U5</text>\n        </g>\n        <g\n           id=\"g457\"\n           transform=\"matrix(0.42699,0,0,0.33668,187.11437,240.55742)\">\n          <text\n             style=\"font-family:'Open Sans';font-weight:400;font-size:9px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n             id=\"tspan751\"\n             transform=\"matrix(1,0,0,1,0,9.61963)\">U7</text>\n        </g>\n        <g\n           id=\"g460\"\n           transform=\"matrix(0,-0.42699,0.33668,0,60.33704,270.75426)\">\n          <text\n             style=\"font-family:'Open Sans';font-weight:400;font-size:9px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n             id=\"tspan755\"\n             transform=\"matrix(1,0,0,1,0,9.61963)\">U6</text>\n        </g>\n        <g\n           id=\"g463\"\n           transform=\"matrix(0.42699,0,0,0.33668,34.27278,283.53537)\">\n          <text\n             style=\"font-family:'Open Sans';font-weight:400;font-size:9px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n             id=\"tspan759\"\n             transform=\"matrix(1,0,0,1,0,9.61963)\">U4</text>\n        </g>\n        <g\n           id=\"g466\"\n           transform=\"matrix(0.42699,0,0,0.33668,301.82222,265.77902)\">\n          <text\n             style=\"font-family:'Open Sans';font-weight:400;font-size:9px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n             id=\"tspan763\"\n             transform=\"matrix(1,0,0,1,0,9.61963)\">U2</text>\n        </g>\n        <g\n           id=\"g469\"\n           transform=\"matrix(0.42699,0,0,0.33668,301.2206,186.22687)\">\n          <text\n             style=\"font-family:'Open Sans';font-weight:400;font-size:9px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n             id=\"tspan767\"\n             transform=\"matrix(1,0,0,1,0,9.61963)\">U10</text>\n        </g>\n        <g\n           id=\"g472\"\n           transform=\"matrix(0.42699,0,0,0.33668,116.34389,62.08676)\">\n          <text\n             style=\"font-family:'Open Sans';font-weight:400;font-size:9px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n             id=\"tspan771\"\n             transform=\"matrix(1,0,0,1,0,9.61963)\">USB</text>\n        </g>\n        <g\n           id=\"g475\"\n           transform=\"matrix(0.42699,0,0,0.33668,116.34389,65.90979)\">\n          <text\n             style=\"font-family:'Open Sans';font-weight:400;font-size:9px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n             id=\"tspan773\"\n             transform=\"matrix(1,0,0,1,0,9.61963)\">OTG</text>\n        </g>\n        <g\n           id=\"g478\"\n           transform=\"matrix(0.42699,0,0,0.33668,236.62946,58.39402)\">\n          <text\n             style=\"font-family:'Open Sans';font-weight:400;font-size:9px;font-style:normal;stroke:none;fill:#ffffff;fill-opacity:1;\"\n             id=\"tspan777\"\n             transform=\"matrix(1,0,0,1,0,9.61963)\">USB STLINK</text>\n        </g>\n        <g\n           id=\"LED9\">\n          <line\n             id=\"path781\"\n             y2=\"73.82123\"\n             x2=\"116.05866\"\n             y1=\"73.82123\"\n             x1=\"125.82572\" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path783\"\n             d=\" M 125.82193 77.74435 L 115.90358 77.74435 L 115.90358 73.81591 L 125.82231 73.81591 L 125.82193 77.74435 Z \" />\n          <path\n             fill-opacity=\"0.7\"\n             fill=\"rgb(34,181,115)\"\n             id=\"path785\"\n             d=\" M 119.41419 73.81516 C 119.41419 73.81516 118.54364 74.29366 118.24412 74.25195 C 117.94837 74.20986 117.51385 74.40361 117.33186 74.25195 L 117.35613 73.81705 L 119.41419 73.81516 Z \" />\n          <path\n             fill=\"rgb(255,255,255)\"\n             id=\"path787\"\n             d=\" M 121.53443 76.30432 L 120.3818 76.30432 L 120.3818 75.31927 L 121.53443 75.31927 L 121.53443 76.30432 Z \" />\n          <path\n             fill=\"rgb(179,179,179)\"\n             id=\"path789\"\n             d=\" M 121.53443 75.34278 L 120.3818 75.34278 L 120.3818 75.29273 L 121.53443 75.29273 L 121.53443 75.34278 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path791\"\n             d=\" M 117.33186 74.14502 L 117.33186 74.89424 L 118.63161 74.78807 L 118.63161 74.25195 L 117.33186 74.14502 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path793\"\n             d=\" M 118.54933 74.45366 L 118.55994 74.45366 C 118.91901 74.48968 119.16318 74.5602 119.36717 74.61972 C 119.64927 74.70162 120.1217 75.42127 120.48493 75.33292 C 120.52132 75.32079 120.56568 75.3443 120.57403 75.37728 C 120.58464 75.41292 120.56037 75.44667 120.52094 75.4569 C 120.10956 75.55435 119.61135 74.82485 119.31599 74.73878 C 119.06517 74.65749 118.80616 74.60409 118.54364 74.57954 C 118.50459 74.57574 118.46971 74.54579 118.47768 74.51015 C 118.48146 74.4802 118.51293 74.45366 118.54933 74.45366 L 118.54933 74.45366 Z  M 124.55175 77.31515 L 124.55175 76.56707 L 123.24784 76.67248 L 123.24784 77.20974 L 124.55175 77.31515 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path795\"\n             d=\" M 121.0165 75.65065 C 121.05062 75.65065 121.08286 75.67113 121.09082 75.69881 C 121.17575 75.99834 122.55929 76.8795 123.63495 76.8795 C 123.6797 76.8795 123.71231 76.90604 123.71231 76.94395 C 123.70964 76.97883 123.67818 77.00841 123.63534 77.00841 L 123.63267 77.00841 C 122.62147 77.00841 121.0802 76.21976 120.94256 75.73293 C 120.93157 75.69691 120.95849 75.66317 120.99755 75.65293 C 121.00437 75.65065 121.01005 75.65065 121.0165 75.65065 L 121.0165 75.65065 Z  M 120.38217 75.63625 C 120.38217 75.63625 120.86256 75.63852 120.89934 75.31775 L 120.38217 75.31775 L 120.38217 75.63625 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path797\"\n             d=\" M 120.96949 75.96346 C 120.96949 75.96346 120.75603 75.6499 120.89783 75.60326 C 121.04228 75.55435 121.13821 75.55018 121.22163 75.63245 C 121.30428 75.71625 120.96949 75.96346 120.96949 75.96346 L 120.96949 75.96346 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path799\"\n             d=\" M 120.48493 75.2787 C 120.12018 75.36477 119.64927 74.64551 119.36717 74.56323 C 119.10491 74.47876 118.83424 74.42308 118.55994 74.39716 L 118.55994 74.45783 C 118.91901 74.49347 119.16318 74.56437 119.36717 74.6239 C 119.64927 74.70579 120.1217 75.42543 120.48493 75.33709 L 120.48493 75.2787 Z  M 124.55175 76.51172 L 124.55175 76.56707 L 123.24784 76.67248 L 123.24784 76.61826 L 124.55175 76.51172 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path801\"\n             d=\" M 121.09385 75.64269 C 121.17727 75.94071 122.53767 76.88481 123.63799 76.81997 L 123.63799 76.88177 C 122.45427 76.9432 121.17347 76.00023 121.09082 75.70108 L 121.09385 75.64269 Z  M 120.89934 75.26012 L 120.38483 75.26012 L 120.38483 75.31851 L 120.89934 75.31851 L 120.89934 75.26012 Z  M 121.22314 75.57899 C 121.13821 75.4971 121.04646 75.50127 120.90199 75.54715 L 120.89934 75.60856 C 121.04342 75.55852 121.14086 75.55548 121.22314 75.63738 L 121.22314 75.57899 Z \" />\n          <g\n             id=\"g492\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path803\"\n               d=\" M 123.82643 77.74587 L 118.1262 77.74587 L 118.1262 77.69355 L 123.82643 77.69355 L 123.82643 77.74587 Z \" />\n          </g>\n          <g\n             id=\"g495\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(242,242,242)\"\n               id=\"path805\"\n               d=\" M 124.529 77.7436 L 124.529 73.81705 L 117.35158 73.81705 L 117.34665 77.7436 L 124.529 77.7436 Z \" />\n          </g>\n          <g\n             id=\"g498\"\n             opacity=\"0.55\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path807\"\n               d=\" M 124.46 77.07628 L 124.46 77.3542 C 124.43573 77.5089 124.4763 77.63174 124.32767 77.63174 L 117.77585 77.63174 C 117.54912 77.63174 117.53813 77.56539 117.79177 77.56539 L 123.65808 77.56539 C 124.27496 77.56539 124.35725 77.45771 124.35725 77.3633 L 124.3546 77.08462 C 124.35611 76.89883 124.46 76.89883 124.46 77.07628 L 124.46 77.07628 Z \" />\n          </g>\n          <g\n             id=\"g501\"\n             opacity=\"0.02999998\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"path809\"\n               d=\" M 117.53964 74.04493 C 117.53964 73.97516 117.52334 73.90312 117.67197 73.90312 L 124.17373 73.90312 C 124.40047 73.90312 124.41147 73.96985 124.16312 73.96985 L 119.31864 73.97213 C 118.51559 73.97289 117.53964 74.04493 117.53964 74.04493 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path811\"\n             d=\" M 125.82193 73.81516 L 124.78115 73.81516 L 124.78115 74.34901 C 124.78115 74.47716 124.67309 74.56741 124.52711 74.6239 L 124.52711 77.74663 L 125.89094 77.74663 L 125.89094 73.81705\" />\n          <g\n             id=\"g505\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path813\"\n               d=\" M 125.88904 77.747 L 124.5309 77.747 L 124.5309 77.69355 L 125.88904 77.69355 L 125.88904 77.747 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path815\"\n             d=\" M 115.9051 73.81516 L 115.9051 77.7436 L 117.35196 77.7436 L 117.35196 74.19317 C 117.21015 74.1363 117.09413 74.04379 117.09413 73.91563 L 117.09413 73.81326 L 115.97373 73.81326\" />\n          <g\n             id=\"g509\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path817\"\n               d=\" M 117.35158 77.74549 L 115.9051 77.74549 L 115.9051 77.69241 L 117.35196 77.69241 L 117.35158 77.74549 Z \" />\n          </g>\n        </g>\n        <g\n           id=\"LED8\">\n          <line\n             id=\"path819\"\n             y2=\"79.68791\"\n             x2=\"115.89714\"\n             y1=\"79.68791\"\n             x1=\"125.66419\" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path821\"\n             d=\" M 125.66003 83.61103 L 115.74168 83.61103 L 115.74168 79.6826 L 125.66041 79.6826 L 125.66003 83.61103 Z \" />\n          <path\n             fill-opacity=\"0.7\"\n             fill=\"rgb(34,181,115)\"\n             id=\"path823\"\n             d=\" M 119.25267 79.68184 C 119.25267 79.68184 118.38174 80.16034 118.08222 80.11863 C 117.78647 80.07654 117.35196 80.27029 117.16996 80.11863 L 117.19423 79.68412 L 119.25267 79.68184 Z \" />\n          <path\n             fill=\"rgb(255,255,255)\"\n             id=\"path825\"\n             d=\" M 121.37252 82.171 L 120.2199 82.171 L 120.2199 81.18595 L 121.37252 81.18595 L 121.37252 82.171 Z \" />\n          <path\n             fill=\"rgb(179,179,179)\"\n             id=\"path827\"\n             d=\" M 121.37252 81.20984 L 120.2199 81.20984 L 120.2199 81.15941 L 121.37252 81.15941 L 121.37252 81.20984 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path829\"\n             d=\" M 118.46971 80.11863 L 117.16996 80.01208 L 117.16996 80.76092 L 118.46971 80.65476 L 118.46971 80.11863 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path831\"\n             d=\" M 118.38743 80.32034 L 118.39804 80.32034 C 118.75711 80.35636 119.00128 80.42688 119.20528 80.48641 C 119.48737 80.56831 119.9598 81.28795 120.32303 81.1996 C 120.35942 81.18747 120.40378 81.21098 120.41213 81.24396 C 120.42275 81.2796 120.39847 81.31335 120.35905 81.32359 C 119.94766 81.42103 119.44945 80.69153 119.15409 80.60546 C 118.90327 80.52417 118.64426 80.47077 118.38174 80.44622 C 118.34269 80.44243 118.30781 80.41248 118.31577 80.37683 C 118.31956 80.34688 118.35103 80.32034 118.38743 80.32034 L 118.38743 80.32034 Z  M 123.08594 83.07642 L 124.38985 83.18183 L 124.38985 82.43376 L 123.08594 82.53916 L 123.08594 83.07642 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path833\"\n             d=\" M 120.85498 81.51733 C 120.88835 81.51733 120.92096 81.53781 120.92892 81.56549 C 121.01385 81.86502 122.39738 82.74618 123.47305 82.74618 C 123.5178 82.74618 123.5504 82.77272 123.5504 82.81064 C 123.54774 82.8459 123.51628 82.87547 123.47344 82.87547 L 123.47079 82.87547 C 122.45957 82.87547 120.9183 82.08645 120.78067 81.59961 C 120.76967 81.56359 120.79659 81.52985 120.83603 81.51961 C 120.84247 81.51733 120.84815 81.51733 120.85498 81.51733 L 120.85498 81.51733 Z  M 120.22027 81.50331 C 120.22027 81.50331 120.70104 81.5052 120.73744 81.18444 L 120.22027 81.18444 L 120.22027 81.50331 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path835\"\n             d=\" M 120.80759 81.83014 C 120.80759 81.83014 120.59413 81.51658 120.73593 81.47032 C 120.88039 81.42103 120.97631 81.41724 121.05973 81.49914 C 121.14238 81.58293 120.80759 81.83014 120.80759 81.83014 L 120.80759 81.83014 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path837\"\n             d=\" M 120.32303 81.14539 C 119.95866 81.23145 119.48737 80.51219 119.20528 80.42991 C 118.94302 80.34545 118.67236 80.28976 118.39804 80.26384 L 118.39804 80.32451 C 118.75711 80.36053 119.00128 80.43105 119.20528 80.49058 C 119.48737 80.57248 119.9598 81.29212 120.32303 81.20377 L 120.32303 81.14539 Z  M 123.08594 82.48494 L 124.38985 82.3784 L 124.38985 82.43376 L 123.08594 82.53916 L 123.08594 82.48494 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path839\"\n             d=\" M 120.93157 81.50937 C 121.01536 81.80739 122.37615 82.75149 123.4757 82.68703 L 123.4757 82.74846 C 122.29237 82.80988 121.01119 81.86692 120.92892 81.56777 L 120.93157 81.50937 Z  M 120.73744 81.1268 L 120.22293 81.1268 L 120.22293 81.18557 L 120.73744 81.18557 L 120.73744 81.1268 Z  M 121.06124 81.44567 C 120.97631 81.36378 120.88456 81.36795 120.74009 81.41383 L 120.73744 81.47563 C 120.88152 81.4252 120.97896 81.42217 121.06124 81.50407 L 121.06124 81.44567 Z \" />\n          <g\n             id=\"g524\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path841\"\n               d=\" M 123.66453 83.61255 L 117.9643 83.61255 L 117.9643 83.56023 L 123.66453 83.56023 L 123.66453 83.61255 Z \" />\n          </g>\n          <g\n             id=\"g527\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(242,242,242)\"\n               id=\"path843\"\n               d=\" M 124.36672 83.61028 L 124.36672 79.68412 L 117.19006 79.68412 L 117.18475 83.61028 L 124.36672 83.61028 Z \" />\n          </g>\n          <g\n             id=\"g530\"\n             opacity=\"0.55\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path845\"\n               d=\" M 124.29772 82.94296 L 124.29772 83.22089 C 124.27383 83.37558 124.3144 83.49843 124.16577 83.49843 L 117.61395 83.49843 C 117.38722 83.49843 117.37623 83.43207 117.63026 83.43207 L 123.49618 83.43207 C 124.11308 83.43207 124.19535 83.32439 124.19535 83.22999 L 124.1927 82.95131 C 124.19421 82.76552 124.2981 82.76552 124.2981 82.94296 L 124.29772 82.94296 Z \" />\n          </g>\n          <g\n             id=\"g533\"\n             opacity=\"0.02999998\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"path847\"\n               d=\" M 117.37774 79.91161 C 117.37774 79.84185 117.36144 79.77019 117.51007 79.77019 L 124.01183 79.77019 C 124.23857 79.77019 124.24957 79.83653 124.00122 79.83653 L 119.15674 79.83881 C 118.35369 79.83957 117.37774 79.91161 117.37774 79.91161 L 117.37774 79.91161 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path849\"\n             d=\" M 125.66003 79.68184 L 124.61925 79.68184 L 124.61925 80.21569 C 124.61925 80.34384 124.51119 80.43409 124.36521 80.49058 L 124.36521 83.61331 L 125.72904 83.61331 L 125.72904 79.68412\" />\n          <g\n             id=\"g537\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path851\"\n               d=\" M 125.72714 83.61369 L 124.369 83.61369 L 124.369 83.56023 L 125.72714 83.56023 L 125.72714 83.61369 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path853\"\n             d=\" M 115.7432 79.68184 L 115.7432 83.61028 L 117.19006 83.61028 L 117.19006 80.06024 C 117.04825 80.00261 116.93223 79.91047 116.93223 79.78232 L 116.93223 79.67995 L 115.81183 79.67995\" />\n          <g\n             id=\"g541\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path855\"\n               d=\" M 117.19006 83.61217 L 115.7432 83.61217 L 115.7432 83.55909 L 117.19006 83.55909 L 117.19006 83.61217 Z \" />\n          </g>\n        </g>\n        <g\n           id=\"FAULT_POWER_LED\">\n          <line\n             id=\"path857\"\n             y2=\"68.27076\"\n             x2=\"301.80992\"\n             y1=\"78.03782\"\n             x1=\"301.80992\" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path859\"\n             d=\" M 297.88678 78.03365 L 297.88678 68.1153 L 301.81522 68.1153 L 301.81522 78.03403 L 297.88678 78.03365 Z \" />\n          <path\n             fill-opacity=\"0.7\"\n             fill=\"rgb(34,181,115)\"\n             id=\"path861\"\n             d=\" M 301.81599 71.62629 C 301.81599 71.62629 301.33748 70.75537 301.37921 70.45583 C 301.42128 70.16009 301.22754 69.72558 301.37921 69.54359 L 301.81372 69.56785 L 301.81599 71.62629 Z \" />\n          <path\n             fill=\"rgb(255,255,255)\"\n             id=\"path863\"\n             d=\" M 299.32683 73.74615 L 299.32683 72.59352 L 300.31188 72.59352 L 300.31188 73.74615 L 299.32683 73.74615 Z \" />\n          <path\n             fill=\"rgb(179,179,179)\"\n             id=\"path865\"\n             d=\" M 300.28837 73.74615 L 300.28837 72.59352 L 300.3384 72.59352 L 300.3384 73.74615 L 300.28837 73.74615 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path867\"\n             d=\" M 300.84345 70.84333 L 301.37921 70.84333 L 301.48573 69.54359 L 300.73691 69.54359 L 300.84345 70.84333 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path869\"\n             d=\" M 301.17748 70.76106 L 301.17748 70.77167 C 301.14147 71.13073 301.07093 71.37491 301.01141 71.5789 C 300.92951 71.86099 300.20987 72.33341 300.29823 72.69665 C 300.31035 72.73304 300.28684 72.77741 300.25387 72.78575 C 300.21823 72.79637 300.18449 72.7721 300.17423 72.73267 C 300.07678 72.32128 300.80628 71.82307 300.89235 71.52771 C 300.97365 71.27689 301.02706 71.01788 301.05161 70.75537 C 301.05541 70.71631 301.08535 70.68143 301.12099 70.68939 C 301.15094 70.69319 301.17748 70.72465 301.17748 70.76106 Z  M 298.95866 75.45956 L 298.4214 75.45956 L 298.31599 76.76348 L 299.06407 76.76348 L 298.95866 75.45956 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path871\"\n             d=\" M 299.98049 73.2286 C 299.98049 73.26197 299.96001 73.29457 299.93233 73.30254 C 299.63281 73.38747 298.75163 74.77101 298.75163 75.84668 C 298.75163 75.89142 298.72511 75.92402 298.68718 75.92402 C 298.65192 75.92137 298.62234 75.8899 298.62234 75.84706 L 298.62234 75.8444 C 298.62234 74.83319 299.41139 73.29192 299.89822 73.15429 C 299.93423 73.14329 299.96797 73.17021 299.97822 73.20927 C 299.97998 73.21542 299.98075 73.22182 299.98049 73.22822 L 299.98049 73.2286 Z  M 299.99491 72.5939 C 299.99491 72.5939 299.99262 73.07429 300.31339 73.11107 L 300.31339 72.5939 L 299.99491 72.5939 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path873\"\n             d=\" M 299.66768 73.18121 C 299.66768 73.18121 299.98125 72.96774 300.02751 73.10955 C 300.07678 73.25363 300.08058 73.34993 299.99868 73.43335 C 299.91488 73.516 299.66768 73.18121 299.66768 73.18121 L 299.66768 73.18121 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path875\"\n             d=\" M 300.35245 72.69665 C 300.26636 72.3319 300.98563 71.86099 301.0679 71.5789 C 301.12932 71.38325 301.19796 71.13339 301.23397 70.77167 L 301.17331 70.77167 C 301.13731 71.13073 301.06677 71.37491 301.00725 71.5789 C 300.92535 71.86099 300.20571 72.33341 300.29404 72.69665 L 300.35245 72.69665 Z  M 298.95866 75.45956 L 299.01288 75.45956 L 299.11943 76.76348 L 299.06407 76.76348 L 298.95866 75.45956 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path877\"\n             d=\" M 299.98845 73.30519 C 299.69043 73.38861 298.74634 74.74978 298.81079 75.84933 L 298.74937 75.84933 C 298.68795 74.66598 299.63091 73.38482 299.93006 73.30254 L 299.98845 73.30519 Z  M 300.37064 73.11107 L 300.37064 72.59655 L 300.31225 72.59655 L 300.31225 73.11107 L 300.37064 73.11107 Z  M 300.05177 73.43486 C 300.13404 73.34993 300.12987 73.25818 300.084 73.11372 L 300.02219 73.11107 C 300.07262 73.25514 300.07565 73.35259 299.99375 73.43486 L 300.05177 73.43486 Z \" />\n          <g\n             id=\"g556\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path879\"\n               d=\" M 297.88527 76.03815 L 297.88527 70.33791 L 297.9376 70.33791 L 297.9376 76.03815 L 297.88527 76.03815 Z \" />\n          </g>\n          <g\n             id=\"g559\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(242,242,242)\"\n               id=\"path881\"\n               d=\" M 297.88754 76.74035 L 301.81372 76.74035 L 301.81372 69.56368 L 297.88754 69.55837 L 297.88754 76.74035 Z \" />\n          </g>\n          <g\n             id=\"g562\"\n             opacity=\"0.55\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path883\"\n               d=\" M 298.55486 76.67134 L 298.27695 76.67134 C 298.12225 76.64745 297.99941 76.68802 297.99941 76.53939 L 297.99941 69.98757 C 297.99941 69.76084 298.06576 69.74984 298.06576 70.0035 L 298.06576 75.86981 C 298.06576 76.48669 298.17344 76.56897 298.26783 76.56897 L 298.54653 76.56631 C 298.73231 76.56783 298.73231 76.67172 298.55486 76.67172 L 298.55486 76.67134 Z \" />\n          </g>\n          <g\n             id=\"g565\"\n             opacity=\"0.02999998\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"path885\"\n               d=\" M 301.58621 69.75136 C 301.65598 69.75136 301.72763 69.73506 301.72763 69.88369 L 301.72763 76.38546 C 301.72763 76.61219 301.66128 76.62319 301.66128 76.37484 L 301.65902 71.53036 C 301.65825 70.72731 301.58621 69.75136 301.58621 69.75136 L 301.58621 69.75136 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path887\"\n             d=\" M 301.81599 78.03365 L 301.81599 76.99286 L 301.28213 76.99286 C 301.15397 76.99286 301.06374 76.88481 301.00725 76.73883 L 297.88451 76.73883 L 297.88451 78.10228 L 301.81372 78.10228\" />\n          <g\n             id=\"g569\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path889\"\n               d=\" M 297.88414 78.10076 L 297.88414 76.74262 L 297.93723 76.74262 L 297.93723 78.10038 L 297.88414 78.10076 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path891\"\n             d=\" M 301.81599 68.11682 L 297.88754 68.11682 L 297.88754 69.56368 L 301.43759 69.56368 C 301.49522 69.42187 301.58735 69.30585 301.7155 69.30585 L 301.81788 69.30585 L 301.81788 68.18545\" />\n          <g\n             id=\"g573\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path893\"\n               d=\" M 297.88564 77.56368 L 297.88564 76.11682 L 297.93873 76.11682 L 297.93873 77.56368 L 297.88564 77.56368 Z \" />\n          </g>\n        </g>\n        <g\n           id=\"ST_LINK_LED\">\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path895\"\n             d=\" M 305.37018 76.57655 L 305.37018 78.96372 L 307.71299 78.96372 C 307.90864 78.57963 308.29765 78.30854 308.75834 78.30854 C 309.219 78.30854 309.60841 78.57963 309.80405 78.96372 L 312.45131 78.96372 C 312.64582 78.57963 313.0337 78.30854 313.49552 78.30854 C 313.95732 78.30854 314.3452 78.57963 314.5397 78.96372 L 316.88402 78.96372 L 316.88402 76.57655 L 305.37018 76.57655 Z \" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path897\"\n             d=\" M 314.55525 65.54386 C 314.36454 65.94122 313.96567 66.22066 313.49436 66.22066 C 313.02421 66.22066 312.62534 65.94122 312.43463 65.54386 L 309.81731 65.54386 C 309.62622 65.94122 309.22886 66.22066 308.7572 66.22066 C 308.28589 66.22066 307.88968 65.94122 307.6986 65.54386 L 305.37018 65.54386 L 305.37018 77.63288 L 307.6986 77.63288 C 307.88968 77.23439 308.28819 76.95419 308.75834 76.95419 C 309.22849 76.95419 309.62736 77.23325 309.81846 77.63174 L 312.43576 77.63174 C 312.62687 77.23439 313.02421 76.95381 313.49552 76.95381 C 313.96717 76.95381 314.36454 77.23325 314.55525 77.63174 L 316.88402 77.63174 L 316.88402 65.54425 L 314.55525 65.54386 Z \" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path899\"\n             d=\" M 305.37018 65.70235 L 316.88289 65.70235 L 316.88289 74.11469 L 305.37018 74.11469 L 305.37018 65.70235 Z \" />\n          <path\n             fill=\"rgb(204,204,204)\"\n             id=\"path901\"\n             d=\" M 305.37018 74.11469 L 316.88289 74.11469 L 316.88289 75.04438 L 305.37018 75.04438 L 305.37018 74.11469 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path903\"\n             d=\" M 305.90481 75.04552 L 307.09839 75.04552 L 307.09839 77.63288 L 305.90481 77.63288 L 305.90481 75.04552 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path905\"\n             d=\" M 305.90481 74.11469 L 307.09839 74.11469 L 307.09839 75.04438 L 305.90481 75.04438 L 305.90481 74.11469 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path907\"\n             d=\" M 315.1547 75.04552 L 316.34789 75.04552 L 316.34789 77.63288 L 315.1547 77.63288 L 315.1547 75.04552 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path909\"\n             d=\" M 315.1547 74.11469 L 316.34789 74.11469 L 316.34789 75.04438 L 315.1547 75.04438 L 315.1547 74.11469 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path911\"\n             d=\" M 305.90481 69.28538 L 307.09839 69.28538 L 307.09839 74.11469 L 305.90481 74.11469 L 305.90481 69.28538 Z  M 305.90481 65.54386 L 307.09839 65.54386 L 307.09839 69.28538 L 305.90481 69.28538 L 305.90481 65.54386 Z  M 315.1547 65.70235 L 316.34789 65.70235 L 316.34789 71.19405 L 315.1547 71.19405 L 315.1547 65.70235 Z  M 315.1547 71.70022 L 316.34789 71.70022 L 316.34789 74.11469 L 315.1547 74.11469 L 315.1547 71.70022 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path913\"\n             d=\" M 307.50902 71.70022 L 316.34789 71.70022 L 316.34789 72.89343 L 307.50902 72.89343 L 307.50902 71.70022 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path915\"\n             d=\" M 307.50902 71.19405 L 308.15357 71.19405 L 308.15357 72.89457 L 307.50902 72.89457 L 307.50902 71.19405 Z  M 314.10179 71.19405 L 314.7452 71.19405 L 314.7452 72.89457 L 314.10179 72.89457 L 314.10179 71.19405 Z \" />\n          <path\n             fill=\"rgb(102,102,102)\"\n             id=\"path917\"\n             d=\" M 306.86445 69.28538 L 308.15357 69.28538 L 308.15357 71.19254 L 306.86445 71.19254 L 306.86445 69.28538 Z  M 314.10063 69.28538 L 315.38977 69.28538 L 315.38977 71.19254 L 314.10063 71.19254 L 314.10063 69.28538 Z \" />\n          <path\n             fill=\"rgb(179,179,179)\"\n             id=\"path919\"\n             d=\" M 314.22007 69.46358 L 315.2692 69.46358 L 315.2692 71.01509 L 314.22007 71.01509 L 314.22007 69.46358 Z  M 306.98502 69.46358 L 308.03413 69.46358 L 308.03413 71.01509 L 306.98502 71.01509 L 306.98502 69.46358 Z  M 305.37018 77.63288 L 305.90481 77.63288 L 305.90481 78.96372 L 305.37018 78.96372 L 305.37018 77.63288 Z  M 310.48199 77.63288 L 311.7711 77.63288 L 311.7711 78.96372 L 310.48199 78.96372 L 310.48199 77.63288 Z  M 316.34789 77.63288 L 316.88402 77.63288 L 316.88402 78.96372 L 316.34789 78.96372 L 316.34789 77.63288 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path921\"\n             d=\" M 305.90481 76.68423 L 305.90481 77.63288 L 307.69744 77.63288 C 307.88968 77.23439 308.28819 76.95419 308.75834 76.95419 C 309.22849 76.95419 309.62736 77.23325 309.81846 77.63174 L 310.48199 77.63174 L 310.48199 76.68385 L 305.90481 76.68423 Z  M 316.34789 76.68423 L 316.34789 77.63288 L 314.55525 77.63288 C 314.36341 77.23439 313.96454 76.95419 313.49552 76.95419 C 313.02421 76.95419 312.62534 77.23325 312.43463 77.63174 L 311.7711 77.63174 L 311.7711 76.68385 L 316.34789 76.68423 Z \" />\n          <g\n             id=\"g591\"\n             opacity=\"0.4\">\n            <path\n               fill=\"rgb(153,153,153)\"\n               id=\"path923\"\n               d=\" M 305.37018 74.95604 L 316.88289 74.95604 L 316.88289 75.04438 L 305.37018 75.04438 L 305.37018 74.95604 Z \" />\n          </g>\n          <g\n             id=\"g594\"\n             opacity=\"0.4\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path925\"\n               d=\" M 305.37018 74.11469 L 316.88289 74.11469 L 316.88289 74.20266 L 305.37018 74.20266 L 305.37018 74.11469 Z  M 308.1532 71.70022 L 310.80653 71.70022 L 310.80653 71.78819 L 308.1532 71.78819 L 308.1532 71.70022 Z \" />\n          </g>\n          <g\n             id=\"g597\"\n             opacity=\"0.4\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path927\"\n               d=\" M 310.80653 71.70022 L 314.10179 71.70022 L 314.10179 71.78819 L 310.80692 71.78819 L 310.80653 71.70022 Z  M 311.7696 76.68423 L 315.1547 76.68423 L 315.1547 76.77258 L 311.7696 76.77258 L 311.7696 76.68423 Z  M 307.09839 76.68423 L 310.48312 76.68423 L 310.48312 76.77258 L 307.09839 76.77258 L 307.09839 76.68423 Z  M 314.7452 71.70022 L 316.34905 71.70022 L 316.34905 71.78819 L 314.7452 71.78819 L 314.7452 71.70022 Z  M 307.09839 66.91034 L 311.77224 66.91034 L 311.77224 66.99869 L 307.09839 66.99869 L 307.09839 66.91034 Z  M 306.86445 69.28538 L 308.15473 69.28538 L 308.15473 69.37372 L 306.86445 69.37372 L 306.86445 69.28538 Z  M 314.10179 69.28538 L 315.38977 69.28538 L 315.38977 69.37372 L 314.10179 69.37372 L 314.10179 69.28538 Z  M 315.1547 65.70235 L 316.34789 65.70235 L 316.34789 65.79108 L 315.1547 65.79108 L 315.1547 65.70235 Z  M 305.90481 65.70235 L 307.09839 65.70235 L 307.09839 65.79108 L 305.90481 65.79108 L 305.90481 65.70235 Z \" />\n          </g>\n          <path\n             fill=\"rgb(99,92,59)\"\n             id=\"path929\"\n             d=\" M 315.1547 71.28126 L 316.34789 71.28126 L 316.34789 71.19405 L 315.1547 71.19405 M 307.50902 72.89343 L 315.1566 72.89343 L 315.1566 72.98063 L 307.50902 72.98063 L 307.50902 72.89343 Z \" />\n          <path\n             fill=\"rgb(77,77,77)\"\n             id=\"path931\"\n             d=\" M 306.86445 71.19254 L 308.15357 71.19254 L 308.15357 71.27974 L 306.86445 71.27974 L 306.86445 71.19254 Z  M 315.38864 71.27974 L 314.0995 71.27974 L 314.10063 71.19254 L 315.38977 71.19254\" />\n          <g\n             id=\"g602\"\n             opacity=\"0.2\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path933\"\n               d=\" M 305.90481 77.71895 L 305.36905 77.71895 L 305.37018 77.63288 L 305.90481 77.63288 M 310.48199 77.63288 L 311.7711 77.63288 L 311.7711 77.71895 L 310.48199 77.71895 L 310.48199 77.63288 Z  M 316.34789 77.71895 L 316.88402 77.71895 L 316.88518 77.63288 L 316.34789 77.63288 M 310.48083 77.71895 L 309.81731 77.71895 C 309.62622 77.32273 309.22772 77.0433 308.7572 77.0433 C 308.28705 77.0433 307.88855 77.32273 307.69744 77.71895 L 305.90481 77.71895 L 305.90594 77.63288 L 307.6986 77.63288 C 307.88968 77.23439 308.28819 76.95419 308.75834 76.95419 C 309.22849 76.95419 309.62736 77.23325 309.81846 77.63174 L 310.48199 77.63174\" />\n          </g>\n          <g\n             id=\"g605\"\n             opacity=\"0.2\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path935\"\n               d=\" M 311.7696 77.71895 L 312.43463 77.71895 C 312.62534 77.32273 313.02421 77.0433 313.49552 77.0433 C 313.96567 77.0433 314.36454 77.32273 314.55525 77.71895 L 316.34942 77.71895 L 316.35055 77.63288 L 314.55525 77.63288 C 314.36341 77.23439 313.96454 76.95419 313.49552 76.95419 C 313.02421 76.95419 312.62534 77.23325 312.43463 77.63174 L 311.7711 77.63174\" />\n          </g>\n          <path\n             fill=\"rgb(128,128,128)\"\n             id=\"path937\"\n             d=\" M 305.90481 78.96372 L 305.36905 78.96372 L 305.37018 78.87765 L 305.90481 78.87765 M 310.48199 78.87803 L 311.7711 78.87803 L 311.7711 78.96372 L 310.48199 78.96372 L 310.48199 78.87803 Z  M 316.34789 78.96372 L 316.88402 78.96372 L 316.88518 78.87765 L 316.34789 78.87765\" />\n          <path\n             fill=\"rgb(99,92,59)\"\n             id=\"path939\"\n             d=\" M 310.48083 78.96372 L 309.81731 78.96372 C 309.62622 78.5675 309.22772 78.28806 308.7572 78.28806 C 308.28705 78.28806 307.88855 78.5675 307.69744 78.96372 L 305.90481 78.96372 L 305.90594 78.87765 L 307.6986 78.87765 C 307.88968 78.47954 308.28819 78.2001 308.75834 78.2001 C 309.22849 78.2001 309.62736 78.47915 309.81846 78.87765 L 310.48199 78.87765 M 311.7696 78.96372 L 312.43463 78.96372 C 312.62534 78.5675 313.02421 78.28806 313.49552 78.28806 C 313.96567 78.28806 314.36454 78.5675 314.55525 78.96372 L 316.34942 78.96372 L 316.35055 78.87765 L 314.55525 78.87765 C 314.36454 78.47954 313.96567 78.2001 313.49552 78.2001 C 313.02421 78.2001 312.62534 78.47915 312.43463 78.87765 L 311.7711 78.87765\" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path941\"\n             d=\" M 305.90481 65.54386 L 305.90481 65.70273 L 307.80248 65.70273 C 307.76798 65.65003 307.72628 65.60112 307.6986 65.54386 L 305.90481 65.54386 Z  M 309.71342 65.70235 L 310.48199 65.70235 L 310.48199 65.54386 L 309.81846 65.54386 C 309.79079 65.60112 309.7502 65.65003 309.71342 65.70273 L 309.71342 65.70235 Z  M 311.7711 65.54386 L 311.7711 65.70273 L 312.5408 65.70273 C 312.50364 65.65003 312.46307 65.60112 312.43463 65.54386 L 311.7711 65.54386 Z  M 316.34789 65.54386 L 314.55525 65.54386 C 314.52681 65.60112 314.48625 65.65003 314.45024 65.70273 L 316.34942 65.70273 L 316.34942 65.54386 L 316.34789 65.54386 Z \" />\n          <g\n             id=\"g611\"\n             opacity=\"0.6\">\n            <path\n               fill=\"rgb(204,204,204)\"\n               id=\"path943\"\n               d=\" M 314.31562 70.86949 C 314.31562 70.86949 314.83809 70.5529 314.83809 70.10549 C 314.83809 69.85715 314.46463 69.90833 314.31562 69.64975 L 314.31562 70.86949 Z \" />\n          </g>\n          <g\n             id=\"g614\"\n             opacity=\"0.6\">\n            <path\n               fill=\"rgb(204,204,204)\"\n               id=\"path945\"\n               d=\" M 314.32397 70.86949 C 314.32397 70.86949 314.60455 70.5529 314.60455 70.10549 C 314.60455 69.85715 314.40358 69.90833 314.32397 69.64975 L 314.32397 70.86949 Z  M 307.09839 70.86949 C 307.09839 70.86949 307.62124 70.5529 307.62124 70.10549 C 307.62124 69.85715 307.2474 69.90833 307.098 69.64975 L 307.09839 70.86949 Z \" />\n          </g>\n          <g\n             id=\"g617\"\n             opacity=\"0.6\">\n            <path\n               fill=\"rgb(204,204,204)\"\n               id=\"path947\"\n               d=\" M 307.10672 70.86949 C 307.10672 70.86949 307.3873 70.5529 307.3873 70.10549 C 307.3873 69.85715 307.18636 69.90833 307.10672 69.64975 L 307.10672 70.86949 Z \" />\n          </g>\n          <path\n             fill=\"rgb(204,204,204)\"\n             id=\"path949\"\n             d=\" M 315.1926 70.42777 C 315.1926 70.42777 314.89081 70.30379 314.89081 70.12938 C 314.89081 70.0327 315.10693 70.05317 315.1926 69.95155 L 315.1926 70.42777 Z  M 307.98257 70.42777 C 307.98257 70.42777 307.68078 70.30379 307.68078 70.12938 C 307.68078 70.0327 307.89688 70.05317 307.98257 69.95155 L 307.98257 70.42777 Z \" />\n        </g>\n        <g\n           id=\"PWR_LED\">\n          <line\n             id=\"path951\"\n             y2=\"82.72533\"\n             x2=\"201.48861\"\n             y1=\"82.72533\"\n             x1=\"211.25568\" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path953\"\n             d=\" M 211.25188 86.64808 L 201.33315 86.64808 L 201.33315 82.71964 L 211.25188 82.71964 L 211.25188 86.64808 Z \" />\n          <path\n             fill-opacity=\"0.7\"\n             fill=\"rgb(34,181,115)\"\n             id=\"path955\"\n             d=\" M 204.84414 82.71888 C 204.84414 82.71888 203.97361 83.19775 203.67406 83.15567 C 203.37833 83.11358 202.94382 83.30733 202.76144 83.15567 L 202.78569 82.72116 L 204.84414 82.71888 Z \" />\n          <path\n             fill=\"rgb(255,255,255)\"\n             id=\"path957\"\n             d=\" M 206.96439 85.20804 L 205.81174 85.20804 L 205.81174 84.22299 L 206.96439 84.22299 L 206.96439 85.20804 Z \" />\n          <path\n             fill=\"rgb(179,179,179)\"\n             id=\"path959\"\n             d=\" M 206.96439 84.24688 L 205.81174 84.24688 L 205.81174 84.19645 L 206.96439 84.19645 L 206.96439 84.24688 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path961\"\n             d=\" M 204.06118 83.15567 L 202.76144 83.04913 L 202.76144 83.79834 L 204.06118 83.6918 L 204.06118 83.15567 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path963\"\n             d=\" M 203.97891 83.35738 L 203.9899 83.35738 C 204.34897 83.3934 204.59314 83.46392 204.79713 83.52345 C 205.07921 83.60573 205.55165 84.32499 205.91449 84.23702 C 205.95089 84.22451 205.99563 84.2484 206.00359 84.281 C 206.0146 84.31665 205.99033 84.35077 205.95089 84.36063 C 205.5395 84.45807 205.04091 83.72857 204.74555 83.64251 C 204.49486 83.56124 204.23599 83.50784 203.97361 83.48326 C 203.93454 83.47947 203.89928 83.44989 203.90763 83.41387 C 203.91143 83.3843 203.94251 83.35738 203.97891 83.35738 L 203.97891 83.35738 Z  M 208.67779 86.11347 L 209.9817 86.21887 L 209.9817 85.4708 L 208.6774 85.57658 L 208.67779 86.11347 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path965\"\n             d=\" M 206.44645 84.55476 C 206.48019 84.55476 206.51243 84.57523 206.52076 84.60291 C 206.60569 84.90206 207.98923 85.7836 209.06491 85.7836 C 209.10964 85.7836 209.14188 85.81014 209.14188 85.84806 C 209.13922 85.88294 209.10814 85.91251 209.06491 85.91251 L 209.06225 85.91251 C 208.05141 85.91251 206.50977 85.12349 206.37215 84.63665 C 206.36152 84.60063 206.38844 84.56689 206.4275 84.55665 C 206.43433 84.55476 206.43963 84.55476 206.44645 84.55476 L 206.44645 84.55476 Z  M 205.81214 84.54035 C 205.81214 84.54035 206.29251 84.54224 206.32892 84.22186 L 205.81214 84.22186 L 205.81214 84.54035 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path967\"\n             d=\" M 206.39906 84.86718 C 206.39906 84.86718 206.18597 84.55362 206.32778 84.50736 C 206.47186 84.45807 206.56779 84.45428 206.65158 84.53618 C 206.73385 84.62035 206.39906 84.86718 206.39906 84.86718 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path969\"\n             d=\" M 205.91489 84.18242 C 205.55012 84.26849 205.07921 83.54923 204.79713 83.46734 C 204.53475 83.38284 204.26395 83.32716 203.98953 83.30127 L 203.98953 83.36193 C 204.34897 83.39757 204.59314 83.4681 204.79713 83.52762 C 205.07921 83.60952 205.55165 84.32916 205.91449 84.24081 L 205.91489 84.18242 Z  M 208.67779 85.52198 L 209.9817 85.41582 L 209.9817 85.4708 L 208.6774 85.57658 L 208.67779 85.52198 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path971\"\n             d=\" M 206.52342 84.54641 C 206.60683 84.84481 207.96764 85.78853 209.06757 85.72407 L 209.06757 85.7855 C 207.88384 85.84692 206.60306 84.90396 206.52076 84.60481 L 206.52342 84.54641 Z  M 206.32892 84.16423 L 205.81477 84.16423 L 205.81477 84.22262 L 206.32892 84.22262 L 206.32892 84.16423 Z  M 206.65309 84.48272 C 206.56779 84.40082 206.47603 84.40499 206.33158 84.45125 L 206.32892 84.51267 C 206.47337 84.46224 206.57045 84.45959 206.65309 84.5411 L 206.65309 84.48272 Z \" />\n          <g\n             id=\"g633\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path973\"\n               d=\" M 209.25638 86.64959 L 203.55615 86.64959 L 203.55615 86.59727 L 209.25638 86.59727 L 209.25638 86.64959 Z \" />\n          </g>\n          <g\n             id=\"g636\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(242,242,242)\"\n               id=\"path975\"\n               d=\" M 209.95858 86.64732 L 209.95858 82.72116 L 202.78152 82.72116 L 202.77623 86.64732 L 209.95858 86.64732 Z \" />\n          </g>\n          <g\n             id=\"g639\"\n             opacity=\"0.55\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path977\"\n               d=\" M 209.88957 85.98038 L 209.88957 86.25792 C 209.86529 86.41262 209.90588 86.53585 209.75761 86.53585 L 203.20581 86.53585 C 202.97869 86.53585 202.96807 86.46912 203.22173 86.46912 L 209.08803 86.46912 C 209.70492 86.46912 209.78719 86.36143 209.78719 86.26702 L 209.78455 85.98834 C 209.78569 85.80256 209.88957 85.80256 209.88957 85.98038 L 209.88957 85.98038 Z \" />\n          </g>\n          <g\n             id=\"g642\"\n             opacity=\"0.02999998\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"path979\"\n               d=\" M 202.96921 82.94865 C 202.96921 82.87889 202.95328 82.80722 203.10192 82.80722 L 209.6037 82.80722 C 209.83042 82.80722 209.84104 82.87358 209.59268 82.87358 L 204.74821 82.87585 C 203.94517 82.87699 202.96921 82.94865 202.96921 82.94865 L 202.96921 82.94865 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path981\"\n             d=\" M 211.25188 82.71888 L 210.2111 82.71888 L 210.2111 83.25311 C 210.2111 83.38127 210.10303 83.47113 209.95705 83.52762 L 209.95705 86.65035 L 211.3205 86.65035 L 211.3205 82.72116\" />\n          <g\n             id=\"g646\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path983\"\n               d=\" M 211.3186 86.65073 L 209.96085 86.65073 L 209.96085 86.59765 L 211.3186 86.59765 L 211.3186 86.65073 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path985\"\n             d=\" M 201.33467 82.71888 L 201.33467 86.64732 L 202.78152 86.64732 L 202.78152 83.09728 C 202.6401 83.03965 202.5237 82.94751 202.5237 82.81936 L 202.5237 82.71699 L 201.40368 82.71699\" />\n          <g\n             id=\"g650\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path987\"\n               d=\" M 202.78152 86.64922 L 201.33467 86.64922 L 201.33467 86.59613 L 202.78152 86.59613 L 202.78152 86.64922 Z \" />\n          </g>\n        </g>\n        <g\n           id=\"BLE_LED\">\n          <line\n             id=\"path989\"\n             y2=\"195.6187\"\n             x2=\"323.95529\"\n             y1=\"205.38576\"\n             x1=\"323.95529\" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path991\"\n             d=\" M 320.03254 205.38197 L 320.03254 195.46324 L 323.96098 195.46324 L 323.96098 205.38197 L 320.03254 205.38197 Z \" />\n          <path\n             fill-opacity=\"0.7\"\n             fill=\"rgb(34,181,115)\"\n             id=\"path993\"\n             d=\" M 323.96135 198.97423 C 323.96135 198.97423 323.48287 198.10368 323.52534 197.80377 C 323.56704 197.50803 323.37367 197.07352 323.52534 196.89152 L 323.95946 196.91579 L 323.96135 198.97423 Z \" />\n          <path\n             fill=\"rgb(255,255,255)\"\n             id=\"path995\"\n             d=\" M 321.47259 201.09447 L 321.47259 199.94184 L 322.45762 199.94184 L 322.45762 201.09447 L 321.47259 201.09447 Z \" />\n          <path\n             fill=\"rgb(179,179,179)\"\n             id=\"path997\"\n             d=\" M 322.43411 201.09447 L 322.43411 199.94184 L 322.48416 199.94184 L 322.48416 201.09447 L 322.43411 201.09447 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path999\"\n             d=\" M 323.63149 196.89152 L 322.88227 196.89152 L 322.98882 198.19127 L 323.52495 198.19127 L 323.63149 196.89152 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1001\"\n             d=\" M 323.32324 198.109 L 323.32324 198.11961 C 323.28721 198.47867 323.2167 198.72323 323.15718 198.92721 C 323.07528 199.20892 322.35563 199.68174 322.4436 200.04459 C 322.45612 200.08099 322.43221 200.12573 322.3996 200.13369 C 322.36396 200.14431 322.32985 200.12004 322.32 200.08099 C 322.22255 199.66922 322.95205 199.17101 323.03811 198.87565 C 323.11938 198.62495 323.17277 198.36607 323.19735 198.10368 C 323.20114 198.06425 323.23072 198.02937 323.26675 198.03733 C 323.29633 198.04151 323.32324 198.0726 323.32324 198.109 Z  M 320.46175 204.11142 L 321.20981 204.11142 L 321.10403 202.8075 L 320.56716 202.8075 L 320.46175 204.11142 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1003\"\n             d=\" M 322.12625 200.57654 C 322.12625 200.61029 322.10538 200.64252 322.0777 200.65048 C 321.77855 200.73579 320.89703 202.11933 320.89703 203.195 C 320.89703 203.23974 320.87048 203.27196 320.83255 203.27196 C 320.79768 203.26931 320.7681 203.23822 320.7681 203.195 L 320.7681 203.19234 C 320.7681 202.18113 321.55712 200.63986 322.04396 200.50223 C 322.07999 200.49123 322.11373 200.51853 322.12396 200.55759 C 322.1256 200.56376 322.12625 200.57016 322.12586 200.57654 L 322.12625 200.57654 Z  M 322.14028 199.94184 C 322.14028 199.94184 322.13838 200.42261 322.45915 200.459 L 322.45915 199.94184 L 322.14028 199.94184 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1005\"\n             d=\" M 321.81344 200.52915 C 321.81344 200.52915 322.12699 200.31606 322.17325 200.45749 C 322.22255 200.60195 322.22634 200.69787 322.14444 200.78167 C 322.06027 200.86394 321.81344 200.52915 321.81344 200.52915 L 321.81344 200.52915 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path1007\"\n             d=\" M 322.49782 200.04459 C 322.41212 199.68022 323.1314 199.20892 323.21329 198.92683 C 323.29806 198.66466 323.35374 198.39396 323.37936 198.11961 L 323.31868 198.11961 C 323.28304 198.47867 323.21253 198.72323 323.15299 198.92721 C 323.07111 199.20892 322.35147 199.68174 322.4398 200.04459 L 322.49782 200.04459 Z  M 321.26519 204.11142 L 321.20981 204.11142 L 321.10403 202.8075 L 321.15864 202.8075 L 321.26519 204.11142 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path1009\"\n             d=\" M 322.13421 200.65351 C 321.8358 200.73693 320.8921 202.09772 320.95655 203.19765 L 320.89513 203.19765 C 320.83371 202.01393 321.77667 200.73313 322.07583 200.65048 L 322.13421 200.65351 Z  M 322.51677 200.459 L 322.51677 199.94487 L 322.45801 199.94487 L 322.45801 200.459 L 322.51677 200.459 Z  M 322.1979 200.78281 C 322.2798 200.69787 322.27563 200.60612 322.22937 200.46166 L 322.16795 200.459 C 322.21838 200.60309 322.22104 200.70053 322.13951 200.78281 L 322.1979 200.78281 Z \" />\n          <g\n             id=\"g665\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1011\"\n               d=\" M 320.03103 203.38609 L 320.03103 197.68661 L 320.08336 197.68661 L 320.08336 203.38647 L 320.03103 203.38609 Z \" />\n          </g>\n          <g\n             id=\"g668\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(242,242,242)\"\n               id=\"path1013\"\n               d=\" M 320.0333 204.08867 L 323.95946 204.08867 L 323.95946 196.91162 L 320.0333 196.90631 L 320.0333 204.08867 Z \" />\n          </g>\n          <g\n             id=\"g671\"\n             opacity=\"0.55\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1015\"\n               d=\" M 320.70062 204.01966 L 320.42269 204.01966 C 320.26801 203.9954 320.14478 204.03597 320.14478 203.88733 L 320.14478 197.33552 C 320.14478 197.10878 320.21149 197.09816 320.21149 197.35182 L 320.21149 203.21812 C 320.21149 203.83463 320.31917 203.91729 320.41359 203.91729 L 320.69227 203.91463 C 320.87805 203.91577 320.87805 204.01966 320.70023 204.01966 L 320.70062 204.01966 Z \" />\n          </g>\n          <g\n             id=\"g674\"\n             opacity=\"0.02999998\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"path1017\"\n               d=\" M 323.73197 197.0993 C 323.80172 197.0993 323.87339 197.083 323.87339 197.23163 L 323.87339 203.7334 C 323.87339 203.96051 323.80704 203.97113 323.80704 203.72278 L 323.80478 198.8783 C 323.80362 198.07525 323.73197 197.0993 323.73197 197.0993 L 323.73197 197.0993 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1019\"\n             d=\" M 323.96135 205.38159 L 323.96135 204.34081 L 323.4275 204.34081 C 323.29936 204.34081 323.2095 204.23313 323.15299 204.08715 L 320.03027 204.08715 L 320.03027 205.4506 L 323.95946 205.4506\" />\n          <g\n             id=\"g678\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1021\"\n               d=\" M 320.02988 205.4487 L 320.02988 204.09056 L 320.08296 204.09056 L 320.08296 205.4487 L 320.02988 205.4487 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1023\"\n             d=\" M 323.96135 195.46476 L 320.0333 195.46476 L 320.0333 196.91162 L 323.58333 196.91162 C 323.64098 196.76981 323.73311 196.65379 323.86127 196.65379 L 323.96362 196.65379 L 323.96362 195.53338\" />\n          <g\n             id=\"g682\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1025\"\n               d=\" M 320.0314 196.91162 L 320.0314 195.46476 L 320.08449 195.46476 L 320.08449 196.91162 L 320.0314 196.91162 Z \" />\n          </g>\n        </g>\n        <g\n           id=\"WIFI_LED\">\n          <line\n             id=\"path1027\"\n             y2=\"174.95961\"\n             x2=\"68.61105\"\n             y1=\"174.95961\"\n             x1=\"78.37812\" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path1029\"\n             d=\" M 78.37433 178.88236 L 68.45597 178.88236 L 68.45597 174.95393 L 78.37433 174.95393 L 78.37433 178.88236 Z \" />\n          <path\n             fill-opacity=\"0.7\"\n             fill=\"rgb(34,181,115)\"\n             id=\"path1031\"\n             d=\" M 71.96658 174.95317 C 71.96658 174.95317 71.09604 175.43204 70.79651 175.38996 C 70.50077 175.34825 70.06625 175.54162 69.88388 175.38996 L 69.90814 174.95544 L 71.96658 174.95317 Z \" />\n          <path\n             fill=\"rgb(255,255,255)\"\n             id=\"path1033\"\n             d=\" M 74.08683 177.44233 L 72.93419 177.44233 L 72.93419 176.45728 L 74.08683 176.45728 L 74.08683 177.44233 Z \" />\n          <path\n             fill=\"rgb(179,179,179)\"\n             id=\"path1035\"\n             d=\" M 74.08683 176.48117 L 72.93419 176.48117 L 72.93419 176.43074 L 74.08683 176.43074 L 74.08683 176.48117 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1037\"\n             d=\" M 69.88388 176.03263 L 71.18401 175.92608 L 71.18401 175.38996 L 69.88388 175.28341 L 69.88388 176.03263 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1039\"\n             d=\" M 71.10135 175.59205 L 71.11235 175.59205 C 71.4714 175.62769 71.71558 175.69821 71.91957 175.75774 C 72.20166 175.84001 72.67409 176.55927 73.03694 176.47131 C 73.07372 176.4588 73.11808 176.48269 73.12604 176.51529 C 73.13704 176.55131 73.11278 176.58506 73.07372 176.59491 C 72.66196 176.69274 72.16375 175.96286 71.868 175.87679 C 71.6173 175.79566 71.35841 175.74238 71.09604 175.71793 C 71.05699 175.71414 71.02173 175.6838 71.03007 175.64816 C 71.03386 175.61859 71.06495 175.59205 71.10135 175.59205 L 71.10135 175.59205 Z  M 77.10415 177.70508 L 75.79985 177.81087 L 75.79985 178.34775 L 77.10415 178.45354 L 77.10415 177.70508 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1041\"\n             d=\" M 73.5689 176.78904 C 73.60302 176.78904 73.63525 176.80952 73.64322 176.8372 C 73.72815 177.13673 75.11168 178.01789 76.18735 178.01789 C 76.23209 178.01789 76.26432 178.04443 76.26432 178.08234 C 76.26166 178.11723 76.23057 178.1468 76.18773 178.1468 L 76.1847 178.1468 C 75.17386 178.1468 73.63222 177.35778 73.49458 176.87094 C 73.48397 176.83492 73.51089 176.80117 73.54994 176.79132 C 73.55676 176.78904 73.56207 176.78904 73.5689 176.78904 Z  M 72.93457 176.77463 C 72.93457 176.77463 73.41496 176.77653 73.45136 176.45614 L 72.93457 176.45614 L 72.93457 176.77463 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1043\"\n             d=\" M 73.52188 177.10147 C 73.52188 177.10147 73.30842 176.7879 73.44984 176.74165 C 73.59468 176.69236 73.69061 176.68857 73.77402 176.77046 C 73.8563 176.85464 73.52188 177.10147 73.52188 177.10147 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path1045\"\n             d=\" M 73.03694 176.41709 C 72.67295 176.50316 72.20166 175.78352 71.91957 175.70162 C 71.65719 175.61713 71.38639 175.56144 71.11197 175.53555 L 71.11197 175.59622 C 71.4714 175.63186 71.71558 175.70238 71.91957 175.76191 C 72.20166 175.84381 72.67409 176.56344 73.03694 176.47548 L 73.03694 176.41709 Z  M 77.10415 177.70508 L 75.79985 177.81087 L 75.79985 177.75627 L 77.10415 177.65011 L 77.10415 177.70508 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path1047\"\n             d=\" M 73.64587 176.7807 C 73.72928 177.0791 75.09045 178.02282 76.19001 177.95836 L 76.19001 178.01978 C 75.00666 178.08121 73.72549 177.13825 73.64322 176.83909 L 73.64587 176.7807 Z  M 73.45136 176.39851 L 72.93722 176.39851 L 72.93722 176.4569 L 73.45136 176.4569 L 73.45136 176.39851 Z  M 73.77516 176.71738 C 73.69061 176.6351 73.59847 176.63928 73.4544 176.68553 L 73.45136 176.74696 C 73.59582 176.69653 73.69326 176.69387 73.77554 176.77577 L 73.77516 176.71738 Z \" />\n          <g\n             id=\"g697\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1049\"\n               d=\" M 76.37883 178.88426 L 70.67859 178.88426 L 70.67859 178.83156 L 76.37883 178.83156 L 76.37883 178.88426 Z \" />\n          </g>\n          <g\n             id=\"g700\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(242,242,242)\"\n               id=\"path1051\"\n               d=\" M 77.0814 178.88161 L 77.0814 174.95544 L 69.90397 174.95544 L 69.89867 178.88161 L 77.0814 178.88161 Z \" />\n          </g>\n          <g\n             id=\"g703\"\n             opacity=\"0.55\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1053\"\n               d=\" M 77.01239 178.21467 L 77.01239 178.49221 C 76.98813 178.64691 77.02832 178.77013 76.87969 178.77013 L 70.32787 178.77013 C 70.10114 178.77013 70.09052 178.7034 70.34418 178.7034 L 76.21048 178.7034 C 76.82737 178.7034 76.90964 178.59572 76.90964 178.50169 L 76.90699 178.22263 C 76.90851 178.03722 77.01239 178.03722 77.01239 178.21467 Z \" />\n          </g>\n          <g\n             id=\"g706\"\n             opacity=\"0.02999998\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"path1055\"\n               d=\" M 70.09203 175.18294 C 70.09203 175.11317 70.07573 175.04151 70.22398 175.04151 L 76.72613 175.04151 C 76.95287 175.04151 76.96386 175.10824 76.71514 175.10824 L 71.87104 175.11014 C 71.0676 175.11128 70.09203 175.18294 70.09203 175.18294 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1057\"\n             d=\" M 78.37433 174.95317 L 77.33354 174.95317 L 77.33354 175.4874 C 77.33354 175.61555 77.22548 175.70579 77.0795 175.76191 L 77.0795 178.88502 L 78.44295 178.88502 L 78.44295 174.95544\" />\n          <g\n             id=\"g710\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1059\"\n               d=\" M 78.44106 178.88502 L 77.0833 178.88502 L 77.0833 178.83194 L 78.44106 178.83194 L 78.44106 178.88502 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1061\"\n             d=\" M 68.45711 174.95317 L 68.45711 178.88161 L 69.90435 178.88161 L 69.90435 175.33157 C 69.76255 175.27431 69.64653 175.1818 69.64653 175.05365 L 69.64653 174.95127 L 68.52612 174.95127\" />\n          <g\n             id=\"g714\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1063\"\n               d=\" M 69.90397 178.8835 L 68.45711 178.8835 L 68.45711 178.83042 L 69.90435 178.83042 L 69.90397 178.8835 Z \" />\n          </g>\n        </g>\n        <g\n           id=\"LED2\">\n          <line\n             id=\"path1065\"\n             y2=\"73.73894\"\n             x2=\"246.83228\"\n             y1=\"73.73894\"\n             x1=\"256.59935\" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path1067\"\n             d=\" M 256.59555 77.66207 L 246.67681 77.66207 L 246.67681 73.73364 L 256.59555 73.73364 L 256.59555 77.66207 Z \" />\n          <path\n             fill-opacity=\"0.7\"\n             fill=\"rgb(34,181,115)\"\n             id=\"path1069\"\n             d=\" M 250.1878 73.73288 C 250.1878 73.73288 249.31725 74.21176 249.01773 74.16967 C 248.722 74.12758 248.28749 74.32133 248.1051 74.16967 L 248.12936 73.73516 L 250.1878 73.73288 Z \" />\n          <path\n             fill=\"rgb(255,255,255)\"\n             id=\"path1071\"\n             d=\" M 252.30804 76.22204 L 251.15541 76.22204 L 251.15541 75.23699 L 252.30804 75.23699 L 252.30804 76.22204 Z \" />\n          <path\n             fill=\"rgb(179,179,179)\"\n             id=\"path1073\"\n             d=\" M 252.30804 75.26088 L 251.15541 75.26088 L 251.15541 75.21045 L 252.30804 75.21045 L 252.30804 75.26088 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1075\"\n             d=\" M 249.40484 74.70542 L 249.40484 74.16967 L 248.1051 74.06313 L 248.1051 74.81234 L 249.40484 74.70542 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1077\"\n             d=\" M 249.32257 74.37138 L 249.33357 74.37138 C 249.69264 74.4074 249.93644 74.47792 250.14041 74.53745 C 250.42251 74.61935 250.89492 75.33898 251.25816 75.25064 C 251.29456 75.23851 251.33929 75.26201 251.34726 75.295 C 251.35827 75.33064 251.33362 75.36477 251.29456 75.37463 C 250.8828 75.47207 250.38458 74.74257 250.08922 74.6565 C 249.83852 74.57524 249.57966 74.52183 249.31725 74.49726 C 249.27821 74.49347 249.24294 74.46352 249.2509 74.42787 C 249.25507 74.39792 249.28617 74.37138 249.32294 74.37138 L 249.32257 74.37138 Z  M 254.02107 76.5902 L 254.02107 77.12747 L 255.32536 77.23287 L 255.32536 76.4848 L 254.02107 76.5902 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1079\"\n             d=\" M 251.79012 75.56838 C 251.82386 75.56838 251.8561 75.58885 251.86443 75.61653 C 251.94936 75.91606 253.3329 76.79722 254.40858 76.79722 C 254.45331 76.79722 254.48555 76.82376 254.48555 76.86168 C 254.48288 76.89694 254.4518 76.92652 254.40858 76.92652 L 254.40591 76.92652 C 253.39508 76.92652 251.85344 76.13749 251.71581 75.65065 C 251.70482 75.61463 251.7321 75.58089 251.77117 75.57065 C 251.77799 75.56838 251.78329 75.56838 251.79012 75.56838 L 251.79012 75.56838 Z  M 251.15578 75.55435 C 251.15578 75.55435 251.63618 75.55624 251.67258 75.23548 L 251.15578 75.23548 L 251.15578 75.55435 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1081\"\n             d=\" M 251.74273 75.88118 C 251.74273 75.88118 251.52964 75.56761 251.67106 75.52136 C 251.81553 75.47207 251.91145 75.46828 251.99525 75.55018 C 252.07752 75.63397 251.74273 75.88118 251.74273 75.88118 L 251.74273 75.88118 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path1083\"\n             d=\" M 251.25816 75.19642 C 250.89379 75.28249 250.42251 74.56323 250.14041 74.48095 C 249.87826 74.39664 249.60773 74.34108 249.33357 74.31526 L 249.33357 74.37555 C 249.69264 74.41157 249.93644 74.48209 250.14041 74.54162 C 250.42251 74.62352 250.89492 75.34316 251.25816 75.25481 L 251.25816 75.19642 Z  M 254.02107 76.5902 L 254.02107 76.53598 L 255.32536 76.42944 L 255.32536 76.4848 L 254.02107 76.5902 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path1085\"\n             d=\" M 251.86709 75.56041 C 251.95049 75.85843 253.3113 76.80253 254.41124 76.73807 L 254.41124 76.7995 C 253.22751 76.86092 251.94672 75.91796 251.86443 75.6188 L 251.86709 75.56041 Z  M 251.67258 75.17822 L 251.15844 75.17822 L 251.15844 75.23662 L 251.67258 75.23662 L 251.67258 75.17822 Z  M 251.99638 75.49671 C 251.91145 75.41481 251.8197 75.41899 251.67524 75.46486 L 251.67258 75.52667 C 251.81703 75.47624 251.91409 75.47321 251.99638 75.55511 L 251.99638 75.49671 Z \" />\n          <g\n             id=\"g729\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1087\"\n               d=\" M 254.60005 77.6636 L 248.89982 77.6636 L 248.89982 77.61127 L 254.60005 77.61127 L 254.60005 77.6636 Z \" />\n          </g>\n          <g\n             id=\"g732\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(242,242,242)\"\n               id=\"path1089\"\n               d=\" M 255.30224 77.66132 L 255.30224 73.73516 L 248.12519 73.73516 L 248.11989 77.66132 L 255.30224 77.66132 Z \" />\n          </g>\n          <g\n             id=\"g735\"\n             opacity=\"0.55\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1091\"\n               d=\" M 255.23324 76.994 L 255.23324 77.27193 C 255.20896 77.42662 255.24955 77.54985 255.10091 77.54985 L 248.54908 77.54985 C 248.32236 77.54985 248.31174 77.48311 248.5654 77.48311 L 254.43169 77.48311 C 255.04859 77.48311 255.13086 77.37543 255.13086 77.28103 L 255.12822 77.00235 C 255.12935 76.81656 255.23324 76.81656 255.23324 76.994 L 255.23324 76.994 Z \" />\n          </g>\n          <g\n             id=\"g738\"\n             opacity=\"0.02999998\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"path1093\"\n               d=\" M 248.31287 73.96265 C 248.31287 73.89288 248.29658 73.82123 248.44559 73.82123 L 254.94734 73.82123 C 255.17409 73.82123 255.18471 73.88757 254.93635 73.88757 L 250.09188 73.88985 C 249.28883 73.89061 248.31287 73.96265 248.31287 73.96265 L 248.31287 73.96265 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1095\"\n             d=\" M 256.59516 73.73288 L 255.55477 73.73288 L 255.55477 74.26673 C 255.55477 74.39489 255.4467 74.48513 255.30072 74.54162 L 255.30072 77.66435 L 256.66417 77.66435 L 256.66417 73.73516\" />\n          <g\n             id=\"g742\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1097\"\n               d=\" M 256.66227 77.66473 L 255.30451 77.66473 L 255.30451 77.61165 L 256.6619 77.61165 L 256.66227 77.66473 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1099\"\n             d=\" M 246.67834 73.73288 L 246.67834 77.66132 L 248.12519 77.66132 L 248.12519 74.11128 C 247.98377 74.05365 247.86737 73.96151 247.86737 73.83336 L 247.86737 73.73098 L 246.74735 73.73098\" />\n          <g\n             id=\"g746\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1101\"\n               d=\" M 248.12519 77.66321 L 246.67834 77.66321 L 246.67834 77.61013 L 248.12519 77.61013 L 248.12519 77.66321 Z \" />\n          </g>\n        </g>\n        <g\n           id=\"LED1\">\n          <line\n             id=\"path1103\"\n             y2=\"74.03772\"\n             x2=\"222.55529\"\n             y1=\"74.03772\"\n             x1=\"232.32234\" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path1105\"\n             d=\" M 232.31817 77.96047 L 222.39982 77.96047 L 222.39982 74.03204 L 232.31856 74.03204 L 232.31817 77.96047 Z \" />\n          <path\n             fill-opacity=\"0.7\"\n             fill=\"rgb(34,181,115)\"\n             id=\"path1107\"\n             d=\" M 225.91081 74.03128 C 225.91081 74.03128 225.03989 74.51015 224.74037 74.46806 C 224.44462 74.42636 224.0101 74.61973 223.82772 74.46806 L 223.85237 74.03355 L 225.91081 74.03128 Z \" />\n          <path\n             fill=\"rgb(255,255,255)\"\n             id=\"path1109\"\n             d=\" M 228.03105 76.52044 L 226.87805 76.52044 L 226.87805 75.53539 L 228.03068 75.53539 L 228.03105 76.52044 Z \" />\n          <path\n             fill=\"rgb(179,179,179)\"\n             id=\"path1111\"\n             d=\" M 228.03105 75.55928 L 226.87805 75.55928 L 226.87805 75.50885 L 228.03068 75.50885 L 228.03105 75.55928 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1113\"\n             d=\" M 223.82772 75.11073 L 225.12786 75.00419 L 225.12786 74.46806 L 223.82772 74.36152 L 223.82772 75.11073 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1115\"\n             d=\" M 225.04559 74.67015 L 225.05619 74.67015 C 225.41525 74.7058 225.65942 74.77632 225.86342 74.83585 C 226.14552 74.91812 226.61794 75.63738 226.98117 75.54942 C 227.01757 75.53691 227.06194 75.56079 227.07027 75.5934 C 227.08089 75.62942 227.05661 75.66316 227.0172 75.67302 C 226.60581 75.77084 226.10759 75.04097 225.81223 74.9549 C 225.5614 74.87374 225.30239 74.82046 225.03989 74.79603 C 225.00083 74.79224 224.96596 74.76191 224.97392 74.72627 C 224.97771 74.6967 225.00918 74.67015 225.04559 74.67015 Z  M 231.04801 76.78319 L 229.74408 76.88898 L 229.74408 77.42586 L 231.04801 77.53165 L 231.04801 76.78319 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1117\"\n             d=\" M 227.51274 75.86715 C 227.54687 75.86715 227.57911 75.88762 227.58707 75.9153 C 227.672 76.21484 229.05554 77.096 230.13119 77.096 C 230.17595 77.096 230.20856 77.12254 230.20856 77.16045 C 230.2059 77.19533 230.17442 77.22491 230.13159 77.22491 L 230.12893 77.22491 C 229.11772 77.22491 227.57645 76.43589 227.43883 75.94905 C 227.42781 75.91303 227.45475 75.87928 227.49379 75.86943 C 227.50061 75.86715 227.50631 75.86715 227.51274 75.86715 Z  M 226.87842 75.85236 C 226.87842 75.85236 227.3588 75.85464 227.3956 75.53387 L 226.87842 75.53387 L 226.87842 75.85236 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1119\"\n             d=\" M 227.46574 76.17957 C 227.46574 76.17957 227.25228 75.86601 227.39407 75.81976 C 227.53815 75.77047 227.63447 75.76667 227.71787 75.84857 C 227.80053 75.93275 227.46574 76.17957 227.46574 76.17957 L 227.46574 76.17957 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path1121\"\n             d=\" M 226.9808 75.4952 C 226.6168 75.58127 226.14552 74.86163 225.86342 74.77973 C 225.60115 74.69526 225.33049 74.63958 225.05619 74.61366 L 225.05619 74.67433 C 225.41525 74.70997 225.65942 74.78049 225.86342 74.84002 C 226.14552 74.92191 226.61794 75.64155 226.98117 75.55359 L 226.9808 75.4952 Z  M 231.04801 76.78319 L 229.74408 76.88898 L 229.74408 76.83438 L 231.04801 76.72821 L 231.04801 76.78319 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path1123\"\n             d=\" M 227.58971 75.85881 C 227.67314 76.15721 229.03429 77.10092 230.13386 77.03647 L 230.13386 77.09789 C 228.95052 77.15931 227.66934 76.21635 227.58707 75.9172 L 227.58971 75.85881 Z  M 227.3956 75.47662 L 226.88108 75.47662 L 226.88108 75.53501 L 227.3956 75.53501 L 227.3956 75.47662 Z  M 227.7194 75.79549 C 227.63447 75.71321 227.54271 75.71738 227.39823 75.76364 L 227.3956 75.82506 C 227.53968 75.77464 227.6371 75.77198 227.7194 75.85388 L 227.7194 75.79549 Z \" />\n          <g\n             id=\"g761\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1125\"\n               d=\" M 230.32267 77.96199 L 224.62244 77.96199 L 224.62244 77.90966 L 230.32267 77.90966 L 230.32267 77.96199 Z \" />\n          </g>\n          <g\n             id=\"g764\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(242,242,242)\"\n               id=\"path1127\"\n               d=\" M 231.02486 77.95971 L 231.02486 74.03355 L 223.8482 74.03355 L 223.8429 77.95971 L 231.02486 77.95971 Z \" />\n          </g>\n          <g\n             id=\"g767\"\n             opacity=\"0.55\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1129\"\n               d=\" M 230.95625 77.29278 L 230.95625 77.57032 C 230.93197 77.72502 230.97254 77.84824 230.82392 77.84824 L 224.27209 77.84824 C 224.04537 77.84824 224.03438 77.78151 224.28802 77.78151 L 230.15434 77.78151 C 230.77121 77.78151 230.8535 77.67383 230.8535 77.5798 L 230.85084 77.30074 C 230.85236 77.11533 230.95625 77.11533 230.95625 77.29278 L 230.95625 77.29278 Z \" />\n          </g>\n          <g\n             id=\"g770\"\n             opacity=\"0.02999998\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"path1131\"\n               d=\" M 224.03588 74.26105 C 224.03588 74.19128 224.01959 74.11962 224.16821 74.11962 L 230.66998 74.11962 C 230.89673 74.11962 230.90772 74.18635 230.65936 74.18635 L 225.81489 74.18825 C 225.01185 74.18938 224.03588 74.26105 224.03588 74.26105 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1133\"\n             d=\" M 232.31817 74.03128 L 231.27739 74.03128 L 231.27739 74.56551 C 231.27739 74.69366 231.16934 74.7839 231.02336 74.84002 L 231.02336 77.96313 L 232.38681 77.96313 L 232.38681 74.03355\" />\n          <g\n             id=\"g774\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1135\"\n               d=\" M 232.38491 77.96313 L 231.02753 77.96313 L 231.02753 77.91004 L 232.38491 77.91004 L 232.38491 77.96313 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1137\"\n             d=\" M 222.40135 74.03128 L 222.40135 77.95971 L 223.8482 77.95971 L 223.8482 74.40967 C 223.70639 74.35242 223.59038 74.25991 223.59038 74.13175 L 223.59038 74.02938 L 222.46997 74.02938\" />\n          <g\n             id=\"g778\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1139\"\n               d=\" M 223.8482 77.96161 L 222.40096 77.96161 L 222.40096 77.90853 L 223.8482 77.90853 L 223.8482 77.96161 Z \" />\n          </g>\n        </g>\n        <g\n           id=\"ST_LINK\">\n          <path\n             fill=\"rgb(140,140,140)\"\n             id=\"path1141\"\n             d=\" M 256.83139 138.67627 L 256.83139 137.94563 L 260.5676 137.94563 L 260.5676 138.67627 L 256.83139 138.67627 Z  M 256.83063 140.13715 L 256.83063 139.40652 L 260.56683 139.40652 L 260.56683 140.13715 L 256.83063 140.13715 Z  M 256.82986 141.59804 L 256.82986 140.86703 L 260.56607 140.86703 L 260.56607 141.59767 L 256.82986 141.59804 Z  M 256.83139 143.05855 L 256.83139 142.32792 L 260.5676 142.32792 L 260.5676 143.05855 L 256.83139 143.05855 Z  M 256.83063 144.51907 L 256.83063 143.78843 L 260.56683 143.78843 L 260.56683 144.51907 L 256.83063 144.51907 Z  M 256.82986 145.97995 L 256.82986 145.24932 L 260.56607 145.24932 L 260.56607 145.97995 L 256.82986 145.97995 Z  M 256.83176 147.44084 L 256.83176 146.70983 L 260.5676 146.70983 L 260.5676 147.44046 L 256.83176 147.44084 Z  M 256.83063 148.90135 L 256.83063 148.17072 L 260.56683 148.17072 L 260.56683 148.90135 L 256.83063 148.90135 Z  M 256.82986 150.36186 L 256.82986 149.63122 L 260.56607 149.63122 L 260.56607 150.36186 L 256.82986 150.36186 Z  M 256.83176 151.82274 L 256.83176 151.09212 L 260.5676 151.09212 L 260.5676 151.82274 L 256.83176 151.82274 Z  M 256.83063 153.28364 L 256.83063 152.55262 L 260.5672 152.55262 L 260.5672 153.28326 L 256.83063 153.28364 Z  M 256.83023 154.74414 L 256.83023 154.01351 L 260.56644 154.01351 L 260.56644 154.74414 L 256.83023 154.74414 Z  M 256.83176 156.20466 L 256.83176 155.47403 L 260.5676 155.47403 L 260.5676 156.20466 L 256.83176 156.20466 Z  M 256.83063 157.66555 L 256.83063 156.93491 L 260.5672 156.93491 L 260.5672 157.66555 L 256.83063 157.66555 Z  M 260.56644 158.39618 L 260.56644 159.12719 L 256.83063 159.12719 L 256.83063 158.39618 L 260.56644 158.39618 Z  M 260.5653 159.85707 L 260.5653 160.58771 L 256.8291 160.58771 L 256.8291 159.85707 L 260.5653 159.85707 Z  M 262.2461 165.17019 L 261.51549 165.17019 L 261.51549 161.53521 L 262.2461 161.53521 L 262.2461 165.17019 Z  M 263.707 165.17019 L 262.97636 165.17019 L 262.97636 161.53521 L 263.707 161.53521 L 263.707 165.17019 Z  M 265.16827 165.17019 L 264.43726 165.17019 L 264.43726 161.53521 L 265.16827 161.53521 L 265.16827 165.17019 Z  M 266.62801 165.17019 L 265.89737 165.17019 L 265.89737 161.53521 L 266.62801 161.53521 L 266.62801 165.17019 Z  M 268.08891 165.17019 L 267.35827 165.17019 L 267.35827 161.53521 L 268.08928 161.53521 L 268.08891 165.17019 Z  M 269.55018 165.17019 L 268.81954 165.17019 L 268.81954 161.53521 L 269.55018 161.53521 L 269.55018 165.17019 Z  M 271.00992 165.17019 L 270.27928 165.17019 L 270.27928 161.53521 L 271.00992 161.53521 L 271.00992 165.17019 Z  M 272.47119 165.17019 L 271.74055 165.17019 L 271.74055 161.53521 L 272.47119 161.53521 L 272.47119 165.17019 Z  M 273.93209 165.17019 L 273.20145 165.17019 L 273.20145 161.53521 L 273.93209 161.53521 L 273.93209 165.17019 Z  M 275.39222 165.17019 L 274.66159 165.17019 L 274.66159 161.53521 L 275.39222 161.53521 L 275.39222 165.17019 Z  M 276.8531 165.17019 L 276.12246 165.17019 L 276.12246 161.53521 L 276.8531 161.53521 L 276.8531 165.17019 Z  M 278.314 165.17019 L 277.58336 165.17019 L 277.58336 161.53521 L 278.314 161.53521 L 278.314 165.17019 Z  M 279.04463 161.53786 L 279.7745 161.53786 L 279.7745 165.17094 L 279.04463 165.17094 L 279.04463 161.53786 Z  M 280.504 161.53786 L 281.23348 161.53786 L 281.23348 165.17094 L 280.504 165.17094 L 280.504 161.53786 Z  M 281.96527 161.53786 L 282.69514 161.53786 L 282.69514 165.17094 L 281.96527 165.17094 L 281.96527 161.53786 Z  M 283.42691 161.53786 L 284.15641 161.53786 L 284.15641 165.17094 L 283.42691 165.17094 L 283.42691 161.53786 Z  M 289.00278 159.85707 L 289.00278 160.58808 L 285.10467 160.58808 L 285.10467 159.85707 L 289.00278 159.85707 Z  M 289.00431 158.39655 L 289.00431 159.12719 L 285.10657 159.12719 L 285.10657 158.39655 L 289.00431 158.39655 Z  M 289.00354 156.93567 L 289.00354 157.66668 L 285.10581 157.66668 L 285.10581 156.93567 L 289.00354 156.93567 Z  M 289.00315 155.47516 L 289.00315 156.2058 L 285.10504 156.2058 L 285.10504 155.47516 L 289.00315 155.47516 Z  M 289.00431 154.01427 L 289.00431 154.74528 L 285.10657 154.74528 L 285.10657 154.01427 L 289.00431 154.01427 Z  M 289.00354 152.55376 L 289.00354 153.28439 L 285.10581 153.28439 L 285.10581 152.55376 L 289.00354 152.55376 Z  M 289.00315 151.09325 L 289.00315 151.82388 L 285.10504 151.82388 L 285.10504 151.09325 L 289.00315 151.09325 Z  M 289.00468 149.63236 L 289.00468 150.363 L 285.10657 150.363 L 285.10657 149.63236 L 289.00468 149.63236 Z  M 289.00391 148.17148 L 289.00391 148.90249 L 285.10544 148.90249 L 285.10544 148.17148 L 289.00391 148.17148 Z  M 289.00315 146.71096 L 289.00315 147.4416 L 285.10504 147.4416 L 285.10504 146.71096 L 289.00315 146.71096 Z  M 289.00468 145.25045 L 289.00468 145.98109 L 285.10657 145.98109 L 285.10657 145.25045 L 289.00468 145.25045 Z  M 289.00391 143.78956 L 289.00391 144.5202 L 285.10544 144.5202 L 285.10544 143.78956 L 289.00391 143.78956 Z  M 289.00315 142.32868 L 289.00315 143.05969 L 285.10544 143.05969 L 285.10544 142.32868 L 289.00315 142.32868 Z  M 289.00468 140.86817 L 289.00468 141.5988 L 285.10694 141.5988 L 285.10694 140.86817 L 289.00468 140.86817 Z  M 289.00391 139.40766 L 289.00391 140.13829 L 285.10544 140.13829 L 285.10544 139.40766 L 289.00391 139.40766 Z  M 289.00315 137.74581 L 289.00315 138.47683 L 285.10544 138.47683 L 285.10544 137.7462 L 289.00315 137.74581 Z  M 283.42691 133.18078 L 284.15641 133.18078 L 284.15641 136.99584 L 283.42691 136.99584 L 283.42691 133.18078 Z  M 281.96527 133.18078 L 282.69514 133.18078 L 282.69514 136.99584 L 281.96527 136.99584 L 281.96527 133.18078 Z  M 280.504 133.18078 L 281.23348 133.18078 L 281.23348 136.99584 L 280.504 136.99584 L 280.504 133.18078 Z  M 279.04463 133.18078 L 279.7745 133.18078 L 279.7745 136.99584 L 279.04463 136.99584 L 279.04463 133.18078 Z  M 277.58297 133.18078 L 278.31284 133.18078 L 278.31284 136.99584 L 277.58336 136.99584 L 277.58297 133.18078 Z  M 276.12399 133.18078 L 276.85347 133.18078 L 276.85347 136.99584 L 276.12399 136.99584 L 276.12399 133.18078 Z  M 274.66272 133.18078 L 275.39222 133.18078 L 275.39222 136.99584 L 274.66272 136.99584 L 274.66272 133.18078 Z  M 273.20106 133.18078 L 273.93095 133.18078 L 273.93095 136.99584 L 273.20106 136.99584 L 273.20106 133.18078 Z  M 271.73979 133.18078 L 272.46929 133.18078 L 272.46929 136.99584 L 271.73979 136.99584 L 271.73979 133.18078 Z  M 270.28042 133.18078 L 271.00992 133.18078 L 271.00992 136.99584 L 270.28042 136.99584 L 270.28042 133.18078 Z  M 268.81917 133.18078 L 269.54865 133.18078 L 269.54865 136.99584 L 268.81917 136.99584 L 268.81917 133.18078 Z  M 267.35978 133.18078 L 268.08928 133.18078 L 268.08928 136.99584 L 267.35978 136.99584 L 267.35978 133.18078 Z  M 265.89814 133.18078 L 266.62801 133.18078 L 266.62801 136.99584 L 265.89814 136.99584 L 265.89814 133.18078 Z  M 264.43687 133.18078 L 265.16637 133.18078 L 265.16637 136.99584 L 264.43687 136.99584 L 264.43687 133.18078 Z  M 262.97789 133.18078 L 263.70737 133.18078 L 263.70737 136.99584 L 262.9775 136.99584 L 262.97789 133.18078 Z  M 261.51623 133.18078 L 262.24573 133.18078 L 262.24573 136.99584 L 261.51623 136.99584 L 261.51623 133.18078 Z \" />\n          <g\n             id=\"g1153\">\n            <path\n               fill=\"rgb(48,48,48)\"\n               id=\"path1143\"\n               d=\" M 259.69001 136.12054 L 285.98276 136.12054 L 285.98276 162.4133 L 259.69001 162.4133 L 259.69001 136.12054 Z \" />\n            <path\n               fill=\"rgb(31,31,31)\"\n               id=\"path1145\"\n               d=\" M 260.43204 136.86258 L 259.69001 136.12054 L 285.98276 136.12054 L 285.24072 136.86258 L 260.43204 136.86258 Z  M 260.43204 161.67126 L 259.69001 162.4133 L 285.98276 162.4133 L 285.24072 161.67126 L 260.43204 161.67126 Z \" />\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"path1147\"\n               d=\" M 260.43204 136.86258 L 259.69001 136.12054 L 259.69001 162.4133 L 260.43204 161.67126 L 260.43204 136.86258 Z \" />\n            <path\n               fill=\"rgb(61,61,61)\"\n               id=\"path1149\"\n               d=\" M 285.24072 136.86258 L 285.98276 136.12054 L 285.98276 162.4133 L 285.24072 161.67126 L 285.24072 136.86258 Z \" />\n            <circle\n               fill=\"rgb(31,31,31)\"\n               id=\"circle1151\"\n               r=\"0.7420344279216238\"\n               cy=\"160.18719362371883\"\n               cx=\"261.9161119492917\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n        </g>\n        <g\n           id=\"QSPI\">\n          <path\n             fill=\"rgb(140,140,140)\"\n             id=\"path1157\"\n             d=\" M 222.77519 167.29611 L 225.51421 167.29611 L 225.51421 174.48339 L 222.77519 174.48339 L 222.77519 167.29611 Z  M 227.2246 167.29611 L 229.96362 167.29611 L 229.96362 174.48339 L 227.2246 174.48339 L 227.2246 167.29611 Z  M 231.6755 167.29611 L 234.41452 167.29611 L 234.41452 174.48339 L 231.6755 174.48339 L 231.6755 167.29611 Z  M 236.12491 167.29611 L 238.86394 167.29611 L 238.86394 174.48339 L 236.12491 174.48339 L 236.12491 167.29611 Z  M 236.12491 145.78355 L 238.86394 145.78355 L 238.86394 152.97083 L 236.12491 152.97083 L 236.12491 145.78355 Z  M 231.6755 145.78355 L 234.41452 145.78355 L 234.41452 152.97083 L 231.6755 152.97083 L 231.6755 145.78355 Z  M 227.2246 145.78355 L 229.96362 145.78355 L 229.96362 152.97083 L 227.2246 152.97083 L 227.2246 145.78355 Z  M 222.77519 145.78355 L 225.51421 145.78355 L 225.51421 152.97083 L 222.77519 152.97083 L 222.77519 145.78355 Z \" />\n          <path\n             fill=\"rgb(48,48,48)\"\n             id=\"path1159\"\n             d=\" M 220.16441 149.57321 L 241.47397 149.57321 L 241.47397 169.97651 L 220.16441 169.97651 L 220.16441 149.57321 Z \" />\n          <path\n             fill=\"rgb(31,31,31)\"\n             id=\"path1161\"\n             d=\" M 241.47397 149.57321 L 239.73512 151.2328 L 221.90469 151.2328 L 220.16441 149.57321 L 241.47397 149.57321 Z  M 220.16441 169.97651 L 241.47397 169.97651 L 239.73512 168.31692 L 221.90469 168.31692 L 220.16441 169.97651 Z \" />\n          <path\n             fill=\"rgb(0,0,0)\"\n             id=\"path1163\"\n             d=\" M 221.90469 151.2328 L 220.16441 149.57321 L 220.16441 169.97651 L 221.90469 168.31692 L 221.90469 151.2328 Z \" />\n          <path\n             fill=\"rgb(61,61,61)\"\n             id=\"path1165\"\n             d=\" M 239.73512 168.31692 L 239.73512 151.2328 L 241.47397 149.57321 L 241.47397 169.97651 L 239.73512 168.31692 Z \" />\n          <ellipse\n             fill=\"rgb(31,31,31)\"\n             id=\"circle1167\"\n             ry=\"1.659598860195672\"\n             rx=\"1.7388603048994185\"\n             cy=\"164.99771584286088\"\n             cx=\"225.38241515814954\"\n             vector-effect=\"non-scaling-stroke\" />\n        </g>\n        <g\n           id=\"MIC2\">\n          <path\n             fill=\"rgb(178,178,178)\"\n             id=\"path1171\"\n             d=\" M 301.70376 201.16841 L 301.70376 197.68548 L 306.94825 197.68548 L 306.94825 201.16841 L 301.70376 201.16841 Z  M 301.70376 194.0433 L 301.70376 190.55696 L 306.94825 190.55696 L 306.94825 194.0433 L 301.70376 194.0433 Z  M 311.83671 201.16841 L 311.83671 197.68548 L 317.08006 197.68548 L 317.08006 201.16841 L 311.83671 201.16841 Z  M 311.83671 194.0433 L 311.83671 190.55696 L 317.08006 190.55696 L 317.08006 194.0433 L 311.83671 194.0433 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path1173\"\n             d=\" M 302.33543 201.16841 L 302.33543 190.56038 L 316.29444 190.56038 L 316.29444 201.16841 L 302.33543 201.16841 Z \" />\n          <path\n             fill=\"rgb(229,229,229)\"\n             id=\"path1175\"\n             d=\" M 303.07099 200.31075 L 303.07099 191.41348 L 315.55888 191.41348 L 315.55888 200.31075 L 303.07099 200.31075 Z \" />\n          <path\n             fill=\"rgb(204,204,204)\"\n             id=\"path1177\"\n             d=\" M 303.57148 199.84781 L 303.57148 191.87757 L 315.06066 191.87757 L 315.06066 199.84781 L 303.57148 199.84781 Z \" />\n          <circle\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(170,170,170)\"\n             stroke-width=\"0.0364\"\n             fill=\"rgb(62,44,40)\"\n             id=\"ellipse1179\"\n             r=\"1.3088470609243927\"\n             cy=\"195.8298877571251\"\n             cx=\"311.9383124085383\"\n             vector-effect=\"non-scaling-stroke\" />\n        </g>\n        <g\n           id=\"NFC\">\n          <path\n             fill=\"rgb(140,140,140)\"\n             id=\"path1183\"\n             d=\" M 73.73535 217.81071 L 73.73535 220.54973 L 68.02753 220.54973 L 68.02753 217.81071 L 73.73535 217.81071 Z  M 73.73535 222.26011 L 73.73535 224.99913 L 68.02753 224.99913 L 68.02753 222.26011 L 73.73535 222.26011 Z  M 73.73535 226.71102 L 73.73535 229.45005 L 68.02753 229.45005 L 68.02753 226.71102 L 73.73535 226.71102 Z  M 73.73535 231.1608 L 73.73535 233.89944 L 68.02753 233.89944 L 68.02753 231.1608 L 73.73535 231.1608 Z  M 90.81937 231.1608 L 90.81937 233.89944 L 85.11155 233.89944 L 85.11155 231.1608 L 90.81937 231.1608 Z  M 90.81937 226.71102 L 90.81937 229.45005 L 85.11155 229.45005 L 85.11155 226.71102 L 90.81937 226.71102 Z  M 90.81937 222.26011 L 90.81937 224.99913 L 85.11155 224.99913 L 85.11155 222.26011 L 90.81937 222.26011 Z  M 90.81937 217.81071 L 90.81937 220.54973 L 85.11155 220.54973 L 85.11155 217.81071 L 90.81937 217.81071 Z \" />\n          <path\n             fill=\"rgb(48,48,48)\"\n             id=\"path1185\"\n             d=\" M 87.80994 215.20005 L 87.80994 236.50978 L 71.60705 236.50978 L 71.60705 215.20005 L 87.80994 215.20005 Z \" />\n          <path\n             fill=\"rgb(31,31,31)\"\n             id=\"path1187\"\n             d=\" M 86.49201 216.94034 L 87.80994 215.20005 L 87.80994 236.50978 L 86.49201 234.77091 L 86.49201 216.94034 Z  M 72.92499 234.77091 L 72.92499 216.94034 L 71.60705 215.20005 L 71.60705 236.50978 L 72.92499 234.77091 Z \" />\n          <path\n             fill=\"rgb(0,0,0)\"\n             id=\"path1189\"\n             d=\" M 71.60705 215.20005 L 72.92499 216.94034 L 86.49201 216.94034 L 87.80994 215.20005 L 71.60705 215.20005 Z \" />\n          <path\n             fill=\"rgb(61,61,61)\"\n             id=\"path1191\"\n             d=\" M 87.80994 236.50978 L 71.60705 236.50978 L 72.92499 234.77091 L 86.49201 234.77091 L 87.80994 236.50978 Z \" />\n          <path\n             fill=\"rgb(31,31,31)\"\n             id=\"circle1193\"\n             d=\" M 75.56087 218.67922 C 76.28826 218.67922 76.87881 219.45838 76.87881 220.41809 C 76.87881 221.3778 76.28826 222.15697 75.56087 222.15697 C 74.83348 222.15697 74.24293 221.3778 74.24293 220.41809 C 74.24293 219.45838 74.83348 218.67922 75.56087 218.67922 Z \" />\n        </g>\n        <g\n           id=\"BAROMETER\">\n          <path\n             fill=\"rgb(48,48,48)\"\n             id=\"path1197\"\n             d=\" M 187.31158 244.39714 L 194.7328 244.39714 L 194.7328 251.81836 L 187.31158 251.81836 L 187.31158 244.39714 Z \" />\n          <path\n             fill=\"rgb(31,31,31)\"\n             id=\"path1199\"\n             d=\" M 194.7328 244.39676 L 194.6073 244.52264 L 187.464 244.52264 L 187.31158 244.39676 L 194.7328 244.39676 Z  M 194.6073 251.69286 L 187.43707 251.69286 L 187.31158 251.81799 L 194.7328 251.81799 L 194.6073 251.69286 Z \" />\n          <path\n             fill=\"rgb(0,0,0)\"\n             id=\"path1201\"\n             d=\" M 187.43707 251.69286 L 187.46438 244.52264 L 187.31158 244.39676 L 187.31158 251.81836 L 187.43707 251.69286 Z \" />\n          <path\n             fill=\"rgb(61,61,61)\"\n             id=\"path1203\"\n             d=\" M 194.6073 251.69286 L 194.6073 244.52264 L 194.7328 244.39676 L 194.7328 251.81836 L 194.6073 251.69286 Z \" />\n        </g>\n        <g\n           id=\"TEMPERATURE\">\n          <path\n             fill=\"rgb(48,48,48)\"\n             id=\"path1205\"\n             d=\" M 64.31711 265.19424 L 71.73833 265.19424 L 71.73833 272.61546 L 64.31711 272.61546 L 64.31711 265.19424 Z \" />\n          <path\n             fill=\"rgb(31,31,31)\"\n             id=\"path1207\"\n             d=\" M 71.73833 265.19424 L 71.61283 265.31936 L 64.46953 265.31936 L 64.31711 265.19424 L 71.73833 265.19424 Z  M 71.61283 272.48995 L 64.44261 272.48995 L 64.31711 272.61546 L 71.73833 272.61546 L 71.61283 272.48995 Z \" />\n          <path\n             fill=\"rgb(0,0,0)\"\n             id=\"path1209\"\n             d=\" M 64.44261 272.48995 L 64.46991 265.31974 L 64.31711 265.19424 L 64.31711 272.61546 L 64.44261 272.48995 Z \" />\n          <path\n             fill=\"rgb(61,61,61)\"\n             id=\"path1211\"\n             d=\" M 71.61283 272.48995 L 71.61283 265.31974 L 71.73833 265.19424 L 71.73833 272.61546 L 71.61283 272.48995 Z \" />\n        </g>\n        <g\n           id=\"MAGNETOMETER\">\n          <path\n             fill=\"rgb(48,48,48)\"\n             id=\"path1213\"\n             d=\" M 265.56371 231.33938 L 273.41035 231.33938 L 273.41035 239.18564 L 265.56371 239.18564 L 265.56371 231.33938 Z \" />\n          <path\n             fill=\"rgb(31,31,31)\"\n             id=\"path1215\"\n             d=\" M 273.41035 231.33938 L 273.27766 231.47208 L 265.72561 231.47208 L 265.56371 231.33938 L 273.41035 231.33938 Z  M 273.27766 239.05293 L 265.69643 239.05293 L 265.56371 239.18564 L 273.40998 239.18564 L 273.27766 239.05293 Z \" />\n          <path\n             fill=\"rgb(0,0,0)\"\n             id=\"path1217\"\n             d=\" M 265.69643 239.05293 L 265.72561 231.47208 L 265.56371 231.33938 L 265.56371 239.18564 L 265.69643 239.05293 Z \" />\n          <path\n             fill=\"rgb(61,61,61)\"\n             id=\"path1219\"\n             d=\" M 273.27766 239.05293 L 273.27766 231.47208 L 273.41035 231.33938 L 273.41035 239.18564 L 273.27766 239.05293 Z \" />\n        </g>\n        <g\n           id=\"ToF\">\n          <path\n             fill=\"rgb(48,48,48)\"\n             id=\"path1221\"\n             d=\" M 33.83864 274.79446 L 49.9888 274.79446 L 49.9888 283.81839 L 33.83902 283.81839 L 33.83864 274.79446 Z \" />\n          <path\n             fill=\"rgb(31,31,31)\"\n             id=\"path1223\"\n             d=\" M 49.9888 274.79446 L 49.71542 274.94727 L 34.17154 274.94727 L 33.83864 274.79446 L 49.9888 274.79446 Z  M 49.71542 283.66558 L 34.11201 283.66558 L 33.83902 283.81839 L 49.9888 283.81839 L 49.71542 283.66558 Z \" />\n          <path\n             fill=\"rgb(0,0,0)\"\n             id=\"path1225\"\n             d=\" M 34.11201 283.66596 L 34.17154 274.94727 L 33.83864 274.79446 L 33.83864 283.81839 L 34.11201 283.66596 Z \" />\n          <path\n             fill=\"rgb(61,61,61)\"\n             id=\"path1227\"\n             d=\" M 49.71542 283.66558 L 49.71542 274.94727 L 49.98842 274.79446 L 49.98842 283.81839 L 49.71542 283.66558 Z \" />\n        </g>\n        <g\n           id=\"ACCELEROMETER\">\n          <path\n             fill=\"rgb(31,31,31)\"\n             id=\"path1233\"\n             d=\" M 161.83536 245.65029 L 173.09314 245.65029 L 172.17869 246.56474 L 162.7498 246.56474 L 161.83536 245.65029 Z  M 162.7498 255.99362 L 161.83536 256.90807 L 173.09314 256.90807 L 172.17869 255.99362 L 162.7498 255.99362 Z \" />\n          <path\n             fill=\"rgb(0,0,0)\"\n             id=\"path1235\"\n             d=\" M 162.7498 255.99362 L 162.7498 246.56474 L 161.83536 245.65029 L 161.83536 256.90807 L 162.7498 255.99362 Z \" />\n          <path\n             fill=\"rgb(61,61,61)\"\n             id=\"path1237\"\n             d=\" M 173.09314 256.90807 L 172.17869 255.99362 L 172.17869 246.56474 L 173.09314 245.65029 L 173.09314 256.90807 Z \" />\n          <circle\n             fill=\"rgb(31,31,31)\"\n             id=\"circle1239\"\n             r=\"0.9144488508059965\"\n             cy=\"254.1647219401878\"\n             cx=\"164.57870258727604\"\n             vector-effect=\"non-scaling-stroke\" />\n          <path\n             fill=\"rgb(140,140,140)\"\n             id=\"path1229\"\n             d=\" M 161.34393 247.1028 L 164.224 247.1028 L 164.224 248.25505 L 161.34393 248.25505 L 161.34393 247.1028 Z  M 161.34393 248.90303 L 164.224 248.90303 L 164.224 250.05491 L 161.34393 250.05491 L 161.34393 248.90303 Z  M 161.34393 250.70288 L 164.224 250.70288 L 164.224 251.85514 L 161.34393 251.85514 L 161.34393 250.70288 Z  M 161.34393 252.50312 L 164.224 252.50312 L 164.224 253.65499 L 161.34393 253.65499 L 161.34393 252.50312 Z  M 161.34393 254.30335 L 164.224 254.30335 L 164.224 255.45523 L 161.34393 255.45523 L 161.34393 254.30335 Z  M 166.88833 254.51909 L 168.04021 254.51909 L 168.04021 257.39916 L 166.88795 257.39916 L 166.88833 254.51909 Z  M 170.70416 254.30335 L 173.58423 254.30335 L 173.58423 255.45523 L 170.70416 255.45523 L 170.70416 254.30335 Z  M 170.70416 252.50312 L 173.58423 252.50312 L 173.58423 253.65499 L 170.70416 253.65499 L 170.70416 252.50312 Z  M 170.70416 250.70288 L 173.58423 250.70288 L 173.58423 251.85514 L 170.70416 251.85514 L 170.70416 250.70288 Z  M 170.70416 248.90303 L 173.58423 248.90303 L 173.58423 250.05491 L 170.70416 250.05491 L 170.70416 248.90303 Z  M 170.70416 247.1028 L 173.58423 247.1028 L 173.58423 248.25505 L 170.70416 248.25505 L 170.70416 247.1028 Z  M 166.88833 245.15887 L 168.04021 245.15887 L 168.04021 248.03893 L 166.88795 248.03893 L 166.88833 245.15887 Z \" />\n          <path\n             fill=\"rgb(48,48,48)\"\n             id=\"path1231\"\n             d=\" M 161.83532 245.65025 L 173.09285 245.65025 L 173.09285 256.90778 L 161.83532 256.90778 L 161.83532 245.65025 Z \" />\n        </g>\n        <g\n           id=\"MIC1\">\n          <path\n             fill=\"rgb(178,178,178)\"\n             id=\"path1243\"\n             d=\" M 301.70376 280.79916 L 301.70376 277.31623 L 306.94825 277.31623 L 306.94825 280.79916 L 301.70376 280.79916 Z  M 301.70376 273.67406 L 301.70376 270.18772 L 306.94825 270.18772 L 306.94825 273.67406 L 301.70376 273.67406 Z  M 311.83671 280.79916 L 311.83671 277.31623 L 317.08006 277.31623 L 317.08006 280.79916 L 311.83671 280.79916 Z  M 311.83671 273.67406 L 311.83671 270.18772 L 317.08006 270.18772 L 317.08006 273.67406 L 311.83671 273.67406 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path1245\"\n             d=\" M 302.33543 280.79916 L 302.33543 270.19113 L 316.29444 270.19113 L 316.29444 280.79916 L 302.33543 280.79916 Z \" />\n          <path\n             fill=\"rgb(229,229,229)\"\n             id=\"path1247\"\n             d=\" M 303.07099 279.94151 L 303.07099 271.04424 L 315.55888 271.04424 L 315.55888 279.94151 L 303.07099 279.94151 Z \" />\n          <path\n             fill=\"rgb(204,204,204)\"\n             id=\"path1249\"\n             d=\" M 303.57148 279.47856 L 303.57148 271.50832 L 315.06066 271.50832 L 315.06066 279.47856 L 303.57148 279.47856 Z \" />\n          <circle\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(170,170,170)\"\n             stroke-width=\"0.0364\"\n             fill=\"rgb(62,44,40)\"\n             id=\"ellipse1251\"\n             r=\"1.3088470609243927\"\n             cy=\"275.46064422007044\"\n             cx=\"311.9383124085383\"\n             vector-effect=\"non-scaling-stroke\" />\n        </g>\n        <g\n           id=\"BUTTON_RESET\">\n          <path\n             fill=\"rgb(140,140,140)\"\n             id=\"path1273\"\n             d=\" M 36.63234 178.21098 L 36.63234 167.48287 L 39.43292 167.48287 L 39.43292 178.21098 L 36.63234 178.21098 Z  M 17.96178 158.15319 L 17.96178 147.42509 L 20.7605 147.42509 L 20.7605 158.15319 L 17.96178 158.15319 Z  M 36.63234 158.15413 L 36.63234 147.42416 L 39.43292 147.42416 L 39.43292 158.15413 L 36.63234 158.15413 Z  M 17.96271 178.21284 L 17.96271 167.48287 L 20.76236 167.48287 L 20.76236 178.21284 L 17.96271 178.21284 Z \" />\n          <path\n             fill=\"rgb(0,0,0)\"\n             id=\"path1275\"\n             d=\" M 17.42593 151.37485 L 40.31417 151.37485 L 40.31417 174.26495 L 17.42593 174.26495 L 17.42593 151.37485 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"BUTTON_RESET_OUTER\"\n             d=\" M 40.31324 172.3979 C 40.3117 173.42825 39.47654 174.26299 38.44618 174.26402 L 19.29206 174.26402 C 18.26228 174.26196 17.42799 173.42768 17.42593 172.3979 L 17.42593 153.24003 C 17.42593 152.21315 18.26424 151.37485 19.29206 151.37485 L 38.44898 151.37485 C 39.47831 151.37639 40.31221 152.21071 40.31324 153.24003 L 40.31324 172.3979 Z \" />\n          <circle\n             fill=\"rgb(0,0,0)\"\n             id=\"circle1279\"\n             r=\"1.982813542584367\"\n             cy=\"154.70847438546537\"\n             cx=\"20.75956306654887\"\n             vector-effect=\"non-scaling-stroke\" />\n          <circle\n             fill=\"rgb(0,0,0)\"\n             id=\"circle1281\"\n             r=\"1.982813542584367\"\n             cy=\"154.74301510777434\"\n             cx=\"37.035623653005445\"\n             vector-effect=\"non-scaling-stroke\" />\n          <circle\n             fill=\"rgb(0,0,0)\"\n             id=\"circle1283\"\n             r=\"1.982813542584367\"\n             cy=\"171.01907541417253\"\n             cx=\"37.00108405093006\"\n             vector-effect=\"non-scaling-stroke\" />\n          <circle\n             fill=\"rgb(0,0,0)\"\n             id=\"circle1285\"\n             r=\"1.982813542584367\"\n             cy=\"170.9826678225906\"\n             cx=\"20.725022624298298\"\n             vector-effect=\"non-scaling-stroke\" />\n          <circle\n             fill=\"rgb(47,47,47)\"\n             id=\"circle1287\"\n             r=\"6.6747252167076585\"\n             cy=\"162.8189646228055\"\n             cx=\"28.869120802780508\"\n             vector-effect=\"non-scaling-stroke\" />\n          <linearGradient\n             gradientUnits=\"userSpaceOnUse\"\n             gradientTransform=\"matrix(13.34945,0,0,13.34945,22.1944,156.14424)\"\n             y2=\"0.5000699999990184\"\n             x2=\"0.9999999930069923\"\n             y1=\"0.5000699999990184\"\n             x1=\"6.993007228839332e-9\"\n             id=\"_lgradient_6\">\n            <stop\n               id=\"stop850\"\n               style=\"stop-color:rgb(51,51,51)\"\n               stop-opacity=\"1\"\n               offset=\"0%\" />\n            <stop\n               id=\"stop852\"\n               style=\"stop-color:rgb(60,60,60)\"\n               stop-opacity=\"1\"\n               offset=\"100%\" />\n          </linearGradient>\n          <circle\n             fill=\"url(#_lgradient_6)\"\n             id=\"circle1289\"\n             r=\"6.6747252167076585\"\n             cy=\"162.8189646228055\"\n             cx=\"28.869120802780508\"\n             vector-effect=\"non-scaling-stroke\" />\n          <g\n             id=\"g857\"\n             opacity=\"0.6\">\n            <circle\n               fill=\"rgb(0,0,0)\"\n               id=\"circle1291\"\n               r=\"5.87375792184668\"\n               cy=\"163.61246434722185\"\n               cx=\"28.985811801440555\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <circle\n             fill=\"rgb(62,44,40)\"\n             id=\"BUTTON_RESET_INNER\"\n             r=\"5.724393630267411\"\n             cy=\"162.85817466541127\"\n             cx=\"28.87752255468403\"\n             vector-effect=\"non-scaling-stroke\" />\n          <g\n             id=\"g861\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1295\"\n               d=\" M 20.50284 154.60485 C 20.53687 154.51081 20.6176 154.44141 20.71569 154.42188 L 20.51965 153.17282 C 20.44496 153.18496 20.36561 153.17469 20.29187 153.19709 L 20.29 153.19149 C 19.83793 153.33446 19.4757 153.67573 19.30606 154.11848 L 20.50284 154.60485 Z  M 36.77704 154.63846 C 36.80981 154.54302 36.89155 154.47271 36.99081 154.45455 L 36.79757 153.20549 C 36.72102 153.2195 36.64261 153.20736 36.56886 153.22977 L 36.56606 153.22323 C 36.1142 153.3662 35.75226 153.70752 35.58305 154.15022 L 36.77704 154.63846 Z  M 36.7453 170.91452 C 36.78357 170.8193 36.85359 170.74649 36.95721 170.73061 L 36.76397 169.48249 C 36.68742 169.49649 36.609 169.48436 36.53432 169.50676 L 36.53245 169.49743 C 36.08003 169.63998 35.71783 169.9819 35.54945 170.42535 L 36.7453 170.91452 Z  M 20.4683 170.87998 C 20.50147 170.78515 20.58318 170.71557 20.68208 170.69794 L 20.48604 169.44795 C 20.40949 169.46382 20.33107 169.44981 20.25733 169.47315 L 20.25546 169.46662 C 19.79336 169.60665 19.44796 169.95299 19.26965 170.39268 L 20.4683 170.87998 Z \" />\n          </g>\n          <g\n             id=\"g864\"\n             opacity=\"0.6\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1297\"\n               d=\" M 30.92568 157.52306 C 30.47494 157.3451 30.00298 157.22648 29.52166 157.17019 C 28.34052 157.04004 27.14824 157.28222 26.11148 157.86287 L 25.98639 158.18773 C 27.14731 157.56622 28.46996 157.31289 29.77838 157.46145 C 30.1966 157.50999 30.60362 157.60334 30.9929 157.72657 L 30.92568 157.52306 Z \" />\n          </g>\n          <path\n             fill=\"none\"\n             id=\"path1269\"\n             d=\" M 36.65122 147.42605 L 39.45167 147.42605 L 39.45167 151.39354 L 36.65122 151.39354 L 36.65122 147.42605 Z  M 36.65122 174.265 L 39.45167 174.265 L 39.45167 178.23249 L 36.65122 178.23249 L 36.65122 174.265 Z  M 17.98043 147.42605 L 20.78088 147.42605 L 20.78088 151.39354 L 17.98043 151.39354 L 17.98043 147.42605 Z  M 17.98043 174.265 L 20.78088 174.265 L 20.78088 178.23249 L 17.98043 178.23249 L 17.98043 174.265 Z \" />\n          <path\n             fill=\"none\"\n             id=\"path1271\"\n             d=\" M 36.65122 147.42605 L 39.45167 147.42605 L 39.45167 150.2265 L 36.65122 150.2265 L 36.65122 147.42605 Z  M 36.65122 175.43204 L 39.45167 175.43204 L 39.45167 178.23249 L 36.65122 178.23249 L 36.65122 175.43204 Z  M 17.98043 147.42605 L 20.78088 147.42605 L 20.78088 150.2265 L 17.98043 150.2265 L 17.98043 147.42605 Z  M 17.98043 175.43204 L 20.78088 175.43204 L 20.78088 178.23249 L 17.98043 178.23249 L 17.98043 175.43204 Z \" />\n        </g>\n        <g\n           id=\"BTN_USER\">\n          <path\n             fill=\"rgb(140,140,140)\"\n             id=\"path1305\"\n             d=\" M 39.43292 130.77854 L 36.63234 130.77854 L 36.63234 120.05044 L 39.43292 120.05044 L 39.43292 130.77854 Z  M 20.7605 110.72076 L 17.96178 110.72076 L 17.96178 99.99265 L 20.7605 99.99265 L 20.7605 110.72076 Z  M 39.43292 110.72169 L 36.63234 110.72169 L 36.63234 99.99172 L 39.43292 99.99172 L 39.43292 110.72169 Z  M 20.76236 130.78041 L 17.96271 130.78041 L 17.96271 120.05044 L 20.76236 120.05044 L 20.76236 130.78041 Z \" />\n          <path\n             fill=\"rgb(0,0,0)\"\n             id=\"BTN_USER_OUTER\"\n             d=\" M 17.42593 103.94241 L 40.31417 103.94241 L 40.31417 126.83252 L 17.42593 126.83252 L 17.42593 103.94241 Z \" />\n          <path\n             fill=\"rgb(153,153,153)\"\n             id=\"path1309\"\n             d=\" M 40.31324 124.96546 C 40.3117 125.99582 39.47654 126.83056 38.44618 126.83158 L 19.29206 126.83158 C 18.26228 126.82953 17.42799 125.99524 17.42593 124.96546 L 17.42593 105.8076 C 17.42593 104.78072 18.26424 103.94241 19.29206 103.94241 L 38.44898 103.94241 C 39.47831 103.94395 40.31221 104.77827 40.31324 105.8076 L 40.31324 124.96546 Z \" />\n          <circle\n             fill=\"rgb(0,0,0)\"\n             id=\"circle1311\"\n             r=\"1.982813542584367\"\n             cy=\"107.27603903509005\"\n             cx=\"20.75956306654887\"\n             vector-effect=\"non-scaling-stroke\" />\n          <circle\n             fill=\"rgb(0,0,0)\"\n             id=\"circle1313\"\n             r=\"1.982813542584367\"\n             cy=\"107.31057975739903\"\n             cx=\"37.035623653005445\"\n             vector-effect=\"non-scaling-stroke\" />\n          <circle\n             fill=\"rgb(0,0,0)\"\n             id=\"circle1315\"\n             r=\"1.982813542584367\"\n             cy=\"123.5866400637972\"\n             cx=\"37.00108405093006\"\n             vector-effect=\"non-scaling-stroke\" />\n          <circle\n             fill=\"rgb(0,0,0)\"\n             id=\"circle1317\"\n             r=\"1.982813542584367\"\n             cy=\"123.55023247221527\"\n             cx=\"20.725022624298298\"\n             vector-effect=\"non-scaling-stroke\" />\n          <circle\n             fill=\"rgb(63,63,63)\"\n             id=\"circle1319\"\n             r=\"6.6747252167076585\"\n             cy=\"115.38652927243018\"\n             cx=\"28.869120802780508\"\n             vector-effect=\"non-scaling-stroke\" />\n          <linearGradient\n             gradientUnits=\"userSpaceOnUse\"\n             gradientTransform=\"matrix(13.34945,0,0,13.34945,22.1944,108.7118)\"\n             y2=\"0.5000699999990184\"\n             x2=\"0.9999999930069923\"\n             y1=\"0.5000699999990184\"\n             x1=\"6.993007228839332e-9\"\n             id=\"_lgradient_7\">\n            <stop\n               id=\"stop877\"\n               style=\"stop-color:rgb(51,51,51)\"\n               stop-opacity=\"1\"\n               offset=\"0%\" />\n            <stop\n               id=\"stop879\"\n               style=\"stop-color:rgb(60,60,60)\"\n               stop-opacity=\"1\"\n               offset=\"100%\" />\n          </linearGradient>\n          <circle\n             fill=\"url(#_lgradient_7)\"\n             id=\"circle1321\"\n             r=\"6.6747252167076585\"\n             cy=\"115.38652927243018\"\n             cx=\"28.869120802780508\"\n             vector-effect=\"non-scaling-stroke\" />\n          <g\n             id=\"g884\"\n             opacity=\"0.6\">\n            <circle\n               fill=\"rgb(0,0,0)\"\n               id=\"circle1323\"\n               r=\"5.87375792184668\"\n               cy=\"116.18002899684652\"\n               cx=\"28.985811801440555\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <circle\n             fill=\"rgb(0,71,187)\"\n             id=\"BTN_USER_INNER\"\n             r=\"5.724393630267411\"\n             cy=\"115.42573931503593\"\n             cx=\"28.87752255468403\"\n             vector-effect=\"non-scaling-stroke\" />\n          <g\n             id=\"g888\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1327\"\n               d=\" M 20.50284 107.17242 C 20.53687 107.07837 20.6176 107.00897 20.71569 106.98945 L 20.51965 105.74039 C 20.44496 105.75252 20.36561 105.74225 20.29187 105.76466 L 20.29 105.75906 C 19.83793 105.90203 19.4757 106.24329 19.30606 106.68605 L 20.50284 107.17242 Z  M 36.77704 107.20602 C 36.80981 107.11059 36.89155 107.04027 36.99081 107.02212 L 36.79757 105.77306 C 36.72102 105.78706 36.64261 105.77493 36.56886 105.79733 L 36.56606 105.7908 C 36.1142 105.93377 35.75226 106.27508 35.58305 106.71779 L 36.77704 107.20602 Z  M 36.7453 123.48209 C 36.78357 123.38687 36.85359 123.31405 36.95721 123.29818 L 36.76397 122.05005 C 36.68742 122.06406 36.609 122.05192 36.53432 122.07433 L 36.53245 122.06499 C 36.08003 122.20755 35.71783 122.54946 35.54945 122.99292 L 36.7453 123.48209 Z  M 20.4683 123.44754 C 20.50147 123.35272 20.58318 123.28314 20.68208 123.26551 L 20.48604 122.01551 C 20.40949 122.03138 20.33107 122.01738 20.25733 122.04072 L 20.25546 122.03418 C 19.79336 122.17421 19.44796 122.52055 19.26965 122.96024 L 20.4683 123.44754 Z \" />\n          </g>\n          <g\n             id=\"g891\"\n             opacity=\"0.6\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1329\"\n               d=\" M 30.92568 110.09063 C 30.47494 109.91266 30.00298 109.79404 29.52166 109.73775 C 28.34052 109.60761 27.14824 109.84978 26.11148 110.43043 L 25.98639 110.7553 C 27.14731 110.13378 28.46996 109.88045 29.77838 110.02901 C 30.1966 110.07756 30.60362 110.17091 30.9929 110.29414 L 30.92568 110.09063 Z \" />\n          </g>\n          <path\n             fill=\"none\"\n             id=\"path1301\"\n             d=\" M 36.65122 99.99362 L 39.45167 99.99362 L 39.45167 103.9611 L 36.65122 103.9611 L 36.65122 99.99362 Z  M 36.65122 126.83256 L 39.45167 126.83256 L 39.45167 130.80005 L 36.65122 130.80005 L 36.65122 126.83256 Z  M 17.98043 99.99362 L 20.78088 99.99362 L 20.78088 103.9611 L 17.98043 103.9611 L 17.98043 99.99362 Z  M 17.98043 126.83256 L 20.78088 126.83256 L 20.78088 130.80005 L 17.98043 130.80005 L 17.98043 126.83256 Z \" />\n          <path\n             fill=\"none\"\n             id=\"path1303\"\n             d=\" M 36.65122 99.99362 L 39.45167 99.99362 L 39.45167 102.79407 L 36.65122 102.79407 L 36.65122 99.99362 Z  M 36.65122 127.99961 L 39.45167 127.99961 L 39.45167 130.80005 L 36.65122 130.80005 L 36.65122 127.99961 Z  M 17.98043 99.99362 L 20.78088 99.99362 L 20.78088 102.79407 L 17.98043 102.79407 L 17.98043 99.99362 Z  M 17.98043 127.99961 L 20.78088 127.99961 L 20.78088 130.80005 L 17.98043 130.80005 L 17.98043 127.99961 Z \" />\n        </g>\n        <g\n           id=\"WIFI\">\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(193,193,147)\"\n             stroke-width=\"0.41214\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(0,144,58)\"\n             id=\"path1333\"\n             d=\" M 48.3425 59.75188 L 104.04774 59.75188 L 104.04774 174.4724 L 48.34212 174.4724 L 48.3425 59.75188 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(170,170,170)\"\n             stroke-width=\"0.03792\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(167,153,124)\"\n             id=\"path1335\"\n             d=\" M 102.19443 173.01681 L 50.2144 173.00507 L 50.2144 109.06265 L 66.15412 95.9101 L 102.19443 95.95181 L 102.19443 173.01681 Z \" />\n          <path\n             fill=\"rgb(242,221,184)\"\n             id=\"path1337\"\n             d=\" M 100.45107 95.92868 L 102.19443 95.92868 L 102.19443 173.01644 L 100.45107 173.01644 L 100.45107 95.92868 Z \" />\n          <path\n             fill=\"rgb(244,227,193)\"\n             id=\"path1339\"\n             d=\" M 50.2144 109.06265 L 52.17425 110.66762 L 52.17425 173.00469 L 50.2144 173.00469 L 50.2144 109.06265 Z \" />\n          <path\n             fill=\"rgb(173,158,125)\"\n             id=\"path1341\"\n             d=\" M 52.23644 171.32388 L 100.45449 171.32047 L 102.19671 173.01681 L 50.21174 173.01681 L 52.23644 171.32388 Z \" />\n          <g\n             id=\"g1347\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1343\"\n               r=\"2.1534741858815494\"\n               cy=\"90.40439765663265\"\n               cx=\"51.04125092808679\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1345\"\n               r=\"1.1981787642600565\"\n               cy=\"90.40439765663265\"\n               cx=\"51.04125092808679\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1353\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1349\"\n               r=\"2.1534741858815494\"\n               cy=\"80.81667558584266\"\n               cx=\"50.88617605455679\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1351\"\n               r=\"1.1981787642600565\"\n               cy=\"80.81667558584266\"\n               cx=\"50.88617605455679\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1359\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1355\"\n               r=\"2.1534741858815494\"\n               cy=\"71.31919268351265\"\n               cx=\"50.73299696187679\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1357\"\n               r=\"1.1981787642600565\"\n               cy=\"71.31919268351265\"\n               cx=\"50.73299696187679\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1365\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1361\"\n               r=\"2.1534741858815494\"\n               cy=\"62.25129372179266\"\n               cx=\"50.90475470688679\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1363\"\n               r=\"1.1981787642600565\"\n               cy=\"62.25129372179266\"\n               cx=\"50.90475470688679\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1371\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1367\"\n               r=\"2.1534741858815494\"\n               cy=\"62.194041140122664\"\n               cx=\"57.52520059125679\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1369\"\n               r=\"1.1981787642600565\"\n               cy=\"62.19404114012266\"\n               cx=\"57.52520059125679\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1377\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1373\"\n               r=\"2.1534741858815494\"\n               cy=\"62.07801935210267\"\n               cx=\"64.74433406805679\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1375\"\n               r=\"1.198178764260053\"\n               cy=\"62.078019352102665\"\n               cx=\"64.74433406805679\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1383\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1379\"\n               r=\"2.1534741858815494\"\n               cy=\"62.123518092502664\"\n               cx=\"72.0313364992868\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1381\"\n               r=\"1.1981787642600494\"\n               cy=\"62.123518092502664\"\n               cx=\"72.0313364992868\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1389\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1385\"\n               r=\"2.1534741858815494\"\n               cy=\"62.123518092502664\"\n               cx=\"79.3194763990268\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1387\"\n               r=\"1.1981787642600494\"\n               cy=\"62.123518092502664\"\n               cx=\"79.3194763990268\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1395\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1391\"\n               r=\"2.1534741858815494\"\n               cy=\"62.123518092502664\"\n               cx=\"86.4441999894968\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1393\"\n               r=\"1.1981787642600494\"\n               cy=\"62.123518092502664\"\n               cx=\"86.4441999894968\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1401\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1397\"\n               r=\"2.1534741858815494\"\n               cy=\"62.21603219798267\"\n               cx=\"93.7664639445368\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1399\"\n               r=\"1.1981787642600494\"\n               cy=\"62.21603219798266\"\n               cx=\"93.7664639445368\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1407\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1403\"\n               r=\"2.1534741858815494\"\n               cy=\"62.33925795323266\"\n               cx=\"100.8691964771468\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1405\"\n               r=\"1.1981787642600494\"\n               cy=\"62.33925795323266\"\n               cx=\"100.8691964771468\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1413\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1409\"\n               r=\"2.1534741858815494\"\n               cy=\"69.14359458005266\"\n               cx=\"100.8373473588668\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1411\"\n               r=\"1.1981787642600494\"\n               cy=\"69.14359458005266\"\n               cx=\"100.8373473588668\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1419\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1415\"\n               r=\"2.1534741858815494\"\n               cy=\"76.39988536151267\"\n               cx=\"100.9670187690068\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1417\"\n               r=\"1.1981787642600494\"\n               cy=\"76.39988536151267\"\n               cx=\"100.9670187690068\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1425\">\n            <circle\n               fill=\"rgb(253,216,121)\"\n               id=\"circle1421\"\n               r=\"2.1534741858815494\"\n               cy=\"82.20779957357266\"\n               cx=\"100.7751657469868\"\n               vector-effect=\"non-scaling-stroke\" />\n            <circle\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.34000017\"\n               stroke=\"rgb(104,95,63)\"\n               stroke-width=\"0.19733\"\n               fill=\"rgb(160,156,127)\"\n               id=\"ellipse1423\"\n               r=\"1.1981787642600494\"\n               cy=\"82.20779957357266\"\n               cx=\"100.7751657469868\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <path\n             fill=\"rgb(251,245,233)\"\n             id=\"path1427\"\n             d=\" M 66.15412 95.9101 L 102.19671 95.9101 L 100.45259 97.70996 L 68.04459 97.70275 L 66.15412 95.9101 Z \" />\n          <path\n             fill=\"rgb(247,236,212)\"\n             id=\"path1429\"\n             d=\" M 50.2144 109.06265 C 50.20681 109.03422 66.11886 95.92148 66.16019 95.92148 C 66.19052 95.92148 68.04421 97.67394 68.04459 97.70275 C 68.04459 97.72778 52.20345 110.66838 52.17425 110.66762 L 50.2144 109.06265 Z \" />\n        </g>\n        <g\n           id=\"RADIO\">\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(193,193,147)\"\n             stroke-width=\"0.24039\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(0,144,58)\"\n             id=\"path1433\"\n             d=\" M 301.75001 89.85195 L 344.54803 89.85195 L 344.54803 140.68845 L 301.75001 140.68845 L 301.75001 89.85195 Z \" />\n          <g\n             id=\"g1443\">\n            <path\n               fill=\"rgb(187,179,153)\"\n               id=\"path1435\"\n               d=\" M 301.77658 92.68644 L 326.36393 92.68644 L 326.36393 137.93949 L 301.77658 137.93949 L 301.77658 92.68644 Z \" />\n            <path\n               fill-opacity=\"0.21499999\"\n               fill=\"rgb(31,31,31)\"\n               id=\"path1437\"\n               d=\" M 325.67002 93.96357 L 302.47049 93.96357 L 301.77658 92.68644 L 326.36393 92.68644 L 325.67002 93.96357 Z  M 325.67002 136.66236 L 302.47049 136.66236 L 301.77658 137.93949 L 326.36393 137.93949 L 325.67002 136.66236 Z \" />\n            <path\n               fill-opacity=\"0.21499999\"\n               fill=\"rgb(31,31,31)\"\n               id=\"path1439\"\n               d=\" M 302.47049 136.66236 L 302.47049 93.96357 L 301.77658 92.68644 L 301.77658 137.93949 L 302.47049 136.66236 Z  M 325.67002 136.66236 L 325.67002 93.96357 L 326.36393 92.68644 L 326.36393 137.93949 L 325.67002 136.66236 Z \" />\n            <ellipse\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke=\"rgb(202,194,168)\"\n               stroke-width=\"0.41396\"\n               fill=\"rgb(187,179,153)\"\n               id=\"ellipse1441\"\n               ry=\"4.771508376295678\"\n               rx=\"4.789868195469012\"\n               cy=\"129.29046867289247\"\n               cx=\"318.43028892157406\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1449\">\n            <path\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"round\"\n               stroke-linejoin=\"round\"\n               stroke-opacity=\"0.66199999\"\n               stroke=\"rgb(202,194,168)\"\n               stroke-width=\"0.37916\"\n               vector-effect=\"non-scaling-stroke\"\n               fill=\"rgb(255,255,255)\"\n               id=\"path1445\"\n               d=\" M 332.77977 90.83548 L 341.25656 90.83548 L 341.25656 130.81219 L 332.77977 130.81219 L 332.77977 90.83548 Z \" />\n            <path\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke-opacity=\"0.44900004\"\n               stroke=\"rgb(202,194,168)\"\n               stroke-width=\"0.10048\"\n               vector-effect=\"non-scaling-stroke\"\n               fill=\"rgb(243,238,222)\"\n               id=\"path1447\"\n               d=\" M 331.34997 95.60071 L 331.34997 91.71322 L 342.66097 91.71322 L 342.66097 95.55028 L 338.40379 95.5882 L 338.44779 97.2307 L 332.57883 101.34379 L 331.23736 101.34379 L 331.23736 97.68228 L 333.40652 97.68228 L 335.51349 96.27788 L 335.51349 95.62574 L 331.34997 95.60071 Z  M 332.67929 107.16232 L 331.22484 107.16232 L 331.22484 103.24981 L 333.35646 103.24981 L 340.72992 97.78238 L 342.57338 97.78238 L 342.57338 101.49432 L 340.77998 101.49432 L 332.67929 107.16232 Z  M 331.42544 108.86776 L 333.43153 108.86776 L 340.65448 103.35028 L 342.63593 103.35028 L 342.63593 106.91132 L 340.88044 106.91132 L 332.82982 112.70483 L 331.45045 112.70483 L 331.42544 108.86776 Z  M 331.32495 114.61084 L 331.32495 118.49833 L 332.75438 118.49833 L 341.20653 112.60435 L 342.76106 112.60435 L 342.76106 108.99289 L 340.95551 108.99289 L 332.95532 114.58848 L 331.32495 114.61084 Z  M 333.17484 120.20984 L 340.96347 114.62108 L 342.73718 114.62108 L 342.73718 118.25643 L 340.76859 118.25643 L 332.82376 124.19743 L 331.28059 124.19743 L 331.29425 120.22046 L 333.17484 120.20984 Z  M 332.75285 129.94279 L 331.42278 129.94279 L 331.42278 125.84638 L 335.41301 125.84638 L 335.41301 124.60502 L 340.87514 120.40208 L 342.87897 120.40208 L 342.87897 124.16179 L 341.12349 124.16179 L 338.95964 125.50969 L 338.95964 126.09473 L 342.94987 126.09473 L 342.94987 129.85444 L 341.58871 129.85444 L 332.75285 129.94279 Z \" />\n          </g>\n          <path\n             fill=\"rgb(253,216,121)\"\n             id=\"path1451\"\n             d=\" M 302.50985 89.75299 L 302.50985 92.08783 C 302.50973 92.10204 302.51533 92.1157 302.52538 92.12575 C 302.53544 92.13579 302.5491 92.1414 302.56331 92.14129 L 306.61116 92.14129 C 306.64069 92.14129 306.66462 92.11736 306.66462 92.08783 L 306.66462 89.75299 L 305.73571 89.75299 C 305.76059 89.84909 305.77334 89.94793 305.77361 90.04721 C 305.77361 90.70249 305.24251 91.23376 304.58725 91.23397 C 303.9318 91.23397 303.40049 90.70264 303.40049 90.04721 C 303.40113 89.94789 303.41426 89.84904 303.43953 89.75299 L 302.50985 89.75299 Z  M 307.31336 89.75299 L 307.31336 92.08783 C 307.31336 92.1174 307.33726 92.14129 307.36721 92.14129 L 311.4147 92.14129 C 311.44423 92.14129 311.46815 92.11736 311.46815 92.08783 L 311.46815 89.75299 L 310.53924 89.75299 C 310.56412 89.84909 310.57687 89.94793 310.57715 90.04721 C 310.57715 90.70235 310.04627 91.23355 309.39115 91.23397 C 308.73573 91.23397 308.20439 90.70264 308.20439 90.04721 C 308.20492 89.94791 308.2179 89.84906 308.24306 89.75299 L 307.31336 89.75299 Z  M 312.11689 89.75299 L 312.11689 92.08783 C 312.11689 92.1174 312.1408 92.14129 312.17074 92.14129 L 316.21823 92.14129 C 316.23248 92.1414 316.24616 92.13581 316.25627 92.12577 C 316.26639 92.11573 316.27208 92.10208 316.27208 92.08783 L 316.27208 89.75299 L 315.34314 89.75299 C 315.36804 89.84909 315.38077 89.94793 315.38105 90.04721 C 315.38105 90.70249 314.84997 91.23376 314.19468 91.23397 C 313.53923 91.23397 313.00792 90.70264 313.00792 90.04721 C 313.00845 89.94791 313.02144 89.84906 313.04659 89.75299 L 312.11689 89.75299 Z  M 316.92042 89.75299 L 316.92042 92.08783 C 316.92042 92.1174 316.9447 92.14129 316.97427 92.14129 L 321.02176 92.14129 C 321.03602 92.1414 321.04969 92.13581 321.05981 92.12577 C 321.06992 92.11573 321.07561 92.10208 321.07561 92.08783 L 321.07561 89.75299 L 320.14667 89.75299 C 320.17155 89.84909 320.1843 89.94793 320.18458 90.04721 C 320.18458 90.70249 319.65347 91.23376 318.99821 91.23397 C 318.34277 91.23397 317.81145 90.70264 317.81145 90.04721 C 317.81198 89.94791 317.82497 89.84906 317.85012 89.75299 L 316.92042 89.75299 Z  M 321.72435 89.75299 L 321.72435 92.08783 C 321.72423 92.10204 321.72983 92.1157 321.73988 92.12575 C 321.74994 92.13579 321.7636 92.1414 321.7778 92.14129 L 325.82566 92.14129 C 325.85519 92.14129 325.87912 92.11736 325.87912 92.08783 L 325.87912 89.75299 L 324.95021 89.75299 C 324.97508 89.84909 324.98783 89.94793 324.98811 90.04721 C 324.98811 90.70249 324.45701 91.23376 323.80172 91.23397 C 323.1463 91.23397 322.61498 90.70264 322.61498 90.04721 C 322.61563 89.94789 322.62875 89.84904 322.65402 89.75299 L 321.72435 89.75299 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke-opacity=\"0.66199999\"\n             stroke=\"rgb(202,194,168)\"\n             stroke-width=\"0.06711\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(160,156,127)\"\n             id=\"path1453\"\n             d=\" M 304.29983 91.19113 C 304.21471 91.16454 304.13179 91.13132 304.05186 91.09178 C 303.6837 90.91131 303.41338 90.48741 303.41338 90.09005 L 303.41338 89.97783 L 305.77588 89.97783 L 305.76339 90.11432 C 305.74594 90.29859 305.7118 90.4241 305.63939 90.57197 C 305.48925 90.87681 305.19236 91.1153 304.86743 91.1915 C 304.72334 91.22563 304.42988 91.22563 304.29983 91.1915 L 304.29983 91.19113 Z  M 309.10602 91.19227 C 308.78032 91.10392 308.48533 90.86619 308.3462 90.58069 C 308.25595 90.39565 308.21918 90.25575 308.21918 90.09802 L 308.21918 89.97783 L 309.38735 89.97783 C 310.73109 89.97783 310.58474 89.9528 310.55896 90.17802 C 310.52975 90.44116 310.43117 90.65197 310.24538 90.84912 C 310.11669 90.98755 309.95681 91.09323 309.77903 91.15738 C 309.66603 91.19947 309.61447 91.20743 309.42489 91.21274 C 309.26679 91.21729 309.1754 91.21122 309.10565 91.19227 L 309.10602 91.19227 Z  M 313.91182 91.19113 C 313.82663 91.1647 313.7436 91.13175 313.66348 91.09255 C 313.46025 90.99396 313.2411 90.77709 313.14555 90.58069 C 313.05265 90.39111 313.00982 90.19053 313.02271 90.00892 C 313.02498 89.97972 313.09322 89.97783 314.19542 89.97783 L 315.36589 89.97783 L 315.36589 90.09802 C 315.36589 90.49158 315.09518 90.9132 314.72738 91.09217 C 314.64481 91.13246 314.5591 91.16594 314.47109 91.19227 C 314.33837 91.22639 314.04264 91.22563 313.91182 91.19113 L 313.91182 91.19113 Z  M 318.71269 91.1915 C 318.54813 91.14522 318.39396 91.06788 318.25846 90.96363 C 317.9995 90.7513 317.85505 90.46997 317.82168 90.11432 L 317.80916 89.97783 L 320.17169 89.97783 L 320.17169 90.09005 C 320.17169 90.48741 319.90135 90.91169 319.53318 91.09178 C 319.45066 91.13228 319.36494 91.16588 319.27689 91.19227 C 319.1457 91.22563 318.85223 91.22525 318.71269 91.1915 L 318.71269 91.1915 Z  M 323.51472 91.19037 C 323.26182 91.12282 323.03742 90.97565 322.87471 90.77064 C 322.72796 90.58033 322.64111 90.3507 322.62521 90.11091 L 322.61383 89.97783 L 324.98281 89.97783 L 324.97256 90.13556 C 324.95361 90.42637 324.84366 90.66107 324.62298 90.8825 C 324.39397 91.11188 324.12668 91.22032 323.79869 91.21766 C 323.70342 91.21714 323.60835 91.208 323.51472 91.19037 L 323.51472 91.19037 Z \" />\n          <path\n             fill=\"rgb(253,216,121)\"\n             id=\"path1455\"\n             d=\" M 302.73657 140.83442 L 302.73657 138.49996 C 302.73657 138.47 302.76045 138.44612 302.79042 138.44612 L 306.83791 138.44612 C 306.86748 138.44612 306.89174 138.47 306.89174 138.49996 L 306.89174 140.83442 L 305.96282 140.83442 C 305.98768 140.73844 306.00043 140.63972 306.00073 140.54058 C 306.00073 139.88515 305.46939 139.35382 304.81397 139.35382 C 304.15868 139.35403 303.6276 139.88529 303.6276 140.54058 C 303.62816 140.63976 303.64114 140.73847 303.66627 140.83442 L 302.73657 140.83442 Z  M 307.5401 140.83442 L 307.5401 138.49996 C 307.5401 138.47 307.56438 138.44612 307.59395 138.44612 L 311.64144 138.44612 C 311.67139 138.44612 311.69527 138.47 311.69527 138.49996 L 311.69527 140.83442 L 310.76635 140.83442 C 310.79121 140.73844 310.80394 140.63972 310.80426 140.54058 C 310.80426 139.88529 310.27316 139.35403 309.61787 139.35382 C 308.96245 139.35382 308.43113 139.88515 308.43113 140.54058 C 308.43169 140.63976 308.44467 140.73847 308.4698 140.83442 L 307.5401 140.83442 Z  M 312.344 140.83442 L 312.344 138.49996 C 312.344 138.47 312.36791 138.44612 312.39748 138.44612 L 316.44534 138.44612 C 316.47492 138.44612 316.4988 138.47 316.4988 138.49996 L 316.4988 140.83442 L 315.56986 140.83442 C 315.59474 140.73844 315.60747 140.63972 315.60779 140.54058 C 315.60779 139.88529 315.07669 139.35403 314.4214 139.35382 C 313.76598 139.35382 313.23464 139.88515 313.23464 140.54058 C 313.23534 140.63977 313.24846 140.73849 313.2737 140.83442 L 312.344 140.83442 Z  M 317.14754 140.83442 L 317.14754 138.49996 C 317.14754 138.47 317.17142 138.44612 317.20099 138.44612 L 321.24887 138.44612 C 321.27845 138.44612 321.30233 138.47 321.30233 138.49996 L 321.30233 140.83442 L 320.37339 140.83442 C 320.39827 140.73844 320.411 140.63972 320.41132 140.54058 C 320.41132 139.88544 319.88045 139.35424 319.22533 139.35382 C 318.56988 139.35382 318.03857 139.88515 318.03857 140.54058 C 318.03912 140.63976 318.0521 140.73847 318.07724 140.83442 L 317.14754 140.83442 Z  M 321.95107 140.83442 L 321.95107 138.49996 C 321.95107 138.47 321.97495 138.44612 322.00492 138.44612 L 326.05241 138.44612 C 326.08198 138.44612 326.10623 138.47 326.10623 138.49996 L 326.10623 140.83442 L 325.17732 140.83442 C 325.20217 140.73844 325.2149 140.63972 325.21523 140.54058 C 325.21523 139.88515 324.68389 139.35382 324.02847 139.35382 C 323.37318 139.35403 322.8421 139.88529 322.8421 140.54058 C 322.84265 140.63976 322.85564 140.73847 322.88077 140.83442 L 321.95107 140.83442 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke-opacity=\"0.66199999\"\n             stroke=\"rgb(202,194,168)\"\n             stroke-width=\"0.06711\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(160,156,127)\"\n             id=\"path1457\"\n             d=\" M 304.52694 139.39628 C 304.44171 139.42285 304.35865 139.45607 304.2786 139.49562 C 303.91081 139.6761 303.6401 140.10038 303.6401 140.49735 L 303.6401 140.60958 L 306.003 140.60958 L 305.99011 140.47347 C 305.95748 139.9577 305.59531 139.52213 305.09417 139.3959 C 304.95009 139.36178 304.65663 139.36216 304.52694 139.3959 L 304.52694 139.39628 Z  M 309.33276 139.39514 C 309.00706 139.48387 308.71207 139.72122 308.57292 140.00672 C 308.48269 140.19175 308.4459 140.33166 308.4459 140.48939 L 308.4459 140.60958 L 309.61447 140.60958 C 310.9582 140.60958 310.81146 140.63461 310.78607 140.40939 C 310.75687 140.14663 310.65791 139.93544 310.47213 139.73866 C 310.34358 139.60015 310.18383 139.49434 310.00614 139.43003 C 309.89277 139.38794 309.84121 139.37998 309.652 139.37467 C 309.4939 139.3705 309.40214 139.37619 309.33276 139.39514 Z  M 314.13856 139.39628 C 314.05335 139.4227 313.97034 139.45566 313.8902 139.49486 C 313.68737 139.59382 313.46821 139.81032 313.37229 140.00672 C 313.27977 140.19668 313.23693 140.39687 313.24982 140.57887 C 313.25172 140.60807 313.32034 140.60958 314.42217 140.60958 L 315.59263 140.60958 L 315.59263 140.48939 C 315.59263 140.09582 315.32229 139.67458 314.9545 139.49524 C 314.87181 139.45493 314.78596 139.42145 314.69781 139.39514 C 314.56511 139.3614 314.26936 139.36216 314.13856 139.39628 Z  M 318.93943 139.39628 C 318.77487 139.44238 318.62068 139.51961 318.4852 139.62378 C 318.22662 139.8361 318.08217 140.11744 318.0488 140.47347 L 318.03591 140.60996 L 320.3988 140.60996 L 320.3988 140.49735 C 320.3988 140.1 320.12809 139.67572 319.75993 139.49562 C 319.67752 139.45515 319.59192 139.42154 319.504 139.39514 C 319.37244 139.36178 319.07896 139.36254 318.93943 139.39628 L 318.93943 139.39628 Z  M 323.74144 139.39704 C 323.48857 139.46458 323.26416 139.61175 323.10143 139.81677 C 322.95468 140.00707 322.86786 140.23671 322.85196 140.4765 L 322.84057 140.60958 L 325.20993 140.60958 L 325.19968 140.45185 C 325.18072 140.16142 325.07078 139.92634 324.84972 139.70492 C 324.62108 139.47591 324.35379 139.36709 324.02543 139.36974 C 323.93028 139.37029 323.83535 139.37943 323.74183 139.39704 L 323.74144 139.39704 Z \" />\n        </g>\n        <g\n           id=\"BLE\">\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"butt\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(193,193,147)\"\n             stroke-width=\"0.24039\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(0,144,58)\"\n             id=\"path1459\"\n             d=\" M 301.71021 211.10268 L 344.50783 211.10268 L 344.50783 261.93918 L 301.71021 261.93918 L 301.71021 211.10268 Z \" />\n          <g\n             id=\"g1467\">\n            <path\n               fill-opacity=\"0.20100002\"\n               fill=\"rgb(255,255,255)\"\n               id=\"path1461\"\n               d=\" M 325.58186 235.26857 L 338.84856 235.26857 L 339.9898 234.1277 L 339.9898 226.89226 L 342.25981 226.89226 L 342.25981 235.14345 L 340.77998 236.62331 L 340.77998 237.45062 L 325.55685 237.45062 L 325.58186 235.26857 Z \" />\n            <path\n               fill-opacity=\"0.20100002\"\n               fill=\"rgb(255,255,255)\"\n               id=\"path1463\"\n               d=\" M 342.91157 233.26246 L 342.91157 235.1935 L 342.0092 236.09665 L 341.26908 236.836 L 341.26908 237.97727 L 325.28081 237.97727 L 325.20574 241.18759 L 327.03631 241.18759 L 327.03631 261.12589 L 344.16584 261.12589 L 344.16584 258.11652 L 342.51043 258.11652 L 342.61128 257.7404 L 343.73929 257.7404 L 343.73929 249.3383 L 342.41034 249.3383 L 342.53168 248.88597 L 343.86479 248.88597 L 343.86479 233.26246 L 342.91157 233.26246 Z  M 342.80163 235.97229 C 342.8916 235.97219 342.9779 236.00786 343.04156 236.07143 C 343.1052 236.13501 343.14098 236.22129 343.14098 236.31125 C 343.14098 236.40116 343.10527 236.48737 343.0417 236.55094 C 342.97813 236.61451 342.8919 236.65022 342.80202 236.65022 C 342.71204 236.65032 342.62572 236.61465 342.56208 236.55107 C 342.49842 236.4875 342.46267 236.40122 342.46267 236.31125 C 342.46267 236.22129 342.49842 236.13501 342.56208 236.07143 C 342.62572 236.00786 342.71204 235.97219 342.80202 235.97229 L 342.80163 235.97229 Z  M 326.65222 238.54372 C 326.74213 238.54372 326.82835 238.57944 326.89192 238.64301 C 326.95549 238.70657 326.9912 238.7928 326.9912 238.88269 C 326.9912 238.97259 326.95549 239.05881 326.89192 239.12237 C 326.82835 239.18594 326.74213 239.22166 326.65222 239.22166 C 326.56234 239.22166 326.47611 239.18594 326.41254 239.12237 C 326.34897 239.05881 326.31326 238.97259 326.31326 238.88269 C 326.31326 238.7928 326.34897 238.70657 326.41254 238.64301 C 326.47611 238.57944 326.56234 238.54372 326.65222 238.54372 Z  M 330.67279 238.98051 L 333.6325 238.98051 L 333.6325 239.78319 L 337.10556 243.25664 L 337.14349 245.3257 L 337.07561 245.57859 L 337.97118 245.57859 L 337.97118 256.00955 L 334.03364 256.00955 L 334.03364 245.77726 L 334.86133 245.77726 L 334.86133 244.34785 L 331.87663 241.41318 L 330.6982 241.41318 L 330.67279 238.98051 Z  M 342.80202 239.15227 C 342.8919 239.15227 342.97813 239.18798 343.0417 239.25155 C 343.10527 239.31512 343.14098 239.40133 343.14098 239.49124 C 343.14098 239.58114 343.10527 239.66735 343.0417 239.73092 C 342.97813 239.79449 342.8919 239.8302 342.80202 239.8302 C 342.71204 239.8303 342.62572 239.79463 342.56208 239.73106 C 342.49842 239.66748 342.46267 239.5812 342.46267 239.49124 C 342.46267 239.40128 342.49842 239.31499 342.56208 239.25142 C 342.62572 239.18784 342.71204 239.15217 342.80202 239.15227 L 342.80202 239.15227 Z  M 335.83843 239.46583 C 335.9284 239.46574 336.0147 239.5014 336.07836 239.56498 C 336.142 239.62856 336.17778 239.71484 336.17778 239.8048 C 336.17787 239.89483 336.14214 239.9812 336.0785 240.04486 C 336.01484 240.10853 335.92845 240.14425 335.83843 240.14414 C 335.74845 240.14414 335.66218 240.10838 335.59861 240.04472 C 335.53504 239.98108 335.49935 239.89477 335.49947 239.8048 C 335.49947 239.7149 335.53518 239.62868 335.59875 239.56511 C 335.66232 239.50155 335.74852 239.46583 335.83843 239.46583 Z  M 339.66905 242.03727 C 339.759 242.03717 339.84532 242.07284 339.90896 242.13641 C 339.97263 242.2 340.00838 242.28627 340.00838 242.37623 C 340.0085 242.46627 339.97277 242.55264 339.9091 242.61631 C 339.84544 242.67996 339.75907 242.71568 339.66905 242.71558 C 339.57908 242.71558 339.4928 242.67982 339.42923 242.61617 C 339.36564 242.55252 339.32998 242.4662 339.33007 242.37623 C 339.33007 242.28634 339.36578 242.20012 339.42935 242.13655 C 339.49292 242.07298 339.57915 242.03727 339.66905 242.03727 Z  M 329.11713 242.07253 C 329.20715 242.07244 329.29352 242.10816 329.35718 242.17181 C 329.42084 242.23547 329.45657 242.32185 329.45646 242.41188 C 329.45646 242.50178 329.42075 242.58799 329.35718 242.65156 C 329.29361 242.71513 329.20741 242.75084 329.1175 242.75084 C 329.02755 242.75094 328.94123 242.71527 328.87756 242.6517 C 328.81392 242.58812 328.77815 242.50185 328.77815 242.41188 C 328.77805 242.32185 328.81379 242.23547 328.87745 242.17181 C 328.94109 242.10816 329.02748 242.07244 329.1175 242.07253 L 329.11713 242.07253 Z  M 342.80202 242.51615 C 342.8919 242.51615 342.97813 242.55186 343.0417 242.61543 C 343.10527 242.679 343.14098 242.76521 343.14098 242.85511 C 343.14098 242.94501 343.10527 243.03123 343.0417 243.0948 C 342.97813 243.15837 342.8919 243.19408 342.80202 243.19408 C 342.71204 243.19418 342.62572 243.15851 342.56208 243.09493 C 342.49842 243.03135 342.46267 242.94507 342.46267 242.85511 C 342.46267 242.76514 342.49842 242.67887 342.56208 242.61529 C 342.62572 242.55172 342.71204 242.51604 342.80202 242.51615 L 342.80202 242.51615 Z  M 332.55798 244.07675 C 332.64786 244.07675 332.73409 244.11246 332.79766 244.17603 C 332.86123 244.2396 332.89693 244.32582 332.89693 244.41571 C 332.89693 244.50562 332.86123 244.59183 332.79766 244.6554 C 332.73409 244.71897 332.64786 244.75468 332.55798 244.75468 C 332.468 244.75479 332.38168 244.71911 332.31804 244.65553 C 332.25438 244.59196 332.21862 244.50569 332.21862 244.41571 C 332.21862 244.32575 332.25438 244.23948 332.31804 244.17589 C 332.38168 244.11232 332.468 244.07665 332.55798 244.07675 L 332.55798 244.07675 Z  M 328.23066 244.30728 C 328.32056 244.30728 328.40677 244.34299 328.47034 244.40656 C 328.53391 244.47013 328.56962 244.55635 328.56962 244.64624 C 328.56973 244.73622 328.53405 244.82252 328.47048 244.88617 C 328.40691 244.94983 328.32063 244.98559 328.23066 244.98559 C 328.14068 244.98559 328.05441 244.94983 327.99084 244.88617 C 327.92727 244.82252 327.89158 244.73622 327.8917 244.64624 C 327.8917 244.55635 327.92741 244.47013 327.99098 244.40656 C 328.05455 244.34299 328.14075 244.30728 328.23066 244.30728 Z  M 342.80163 245.8148 C 342.8916 245.81471 342.9779 245.85037 343.04156 245.91395 C 343.1052 245.97753 343.14098 246.06381 343.14098 246.15377 C 343.14098 246.24366 343.10527 246.32989 343.0417 246.39345 C 342.97813 246.45702 342.8919 246.49274 342.80202 246.49274 C 342.71211 246.49274 342.62589 246.45702 342.56232 246.39345 C 342.49875 246.32989 342.46304 246.24366 342.46304 246.15377 C 342.46304 246.06388 342.49875 245.97765 342.56232 245.91409 C 342.62589 245.85052 342.71211 245.8148 342.80202 245.8148 L 342.80163 245.8148 Z  M 331.97293 247.28631 C 332.06283 247.28641 332.14901 247.32221 332.21249 247.38585 C 332.27599 247.44949 332.31161 247.53576 332.31151 247.62565 C 332.31151 247.71556 332.27581 247.80177 332.21224 247.86534 C 332.14867 247.92891 332.06244 247.96462 331.97256 247.96462 C 331.88265 247.96462 331.79642 247.92891 331.73285 247.86534 C 331.66931 247.80177 331.63357 247.71556 331.63357 247.62565 C 331.63348 247.53569 331.66914 247.44938 331.73274 247.38573 C 331.79631 247.32207 331.88258 247.28631 331.97256 247.28631 L 331.97293 247.28631 Z  M 341.22965 247.57029 C 341.31955 247.57029 341.40576 247.60601 341.46933 247.66957 C 341.5329 247.73314 341.5686 247.81936 341.5686 247.90926 C 341.56872 247.99923 341.53304 248.08555 341.46946 248.14919 C 341.40589 248.21284 341.31962 248.24861 341.22965 248.24861 C 341.13969 248.24861 341.0534 248.21284 340.98983 248.14919 C 340.92626 248.08555 340.89057 247.99923 340.89069 247.90926 C 340.89069 247.81936 340.92639 247.73314 340.98997 247.66957 C 341.05354 247.60601 341.13974 247.57029 341.22965 247.57029 Z  M 328.23066 247.60556 C 328.32063 247.60556 328.40691 247.64133 328.47048 247.70497 C 328.53405 247.76862 328.56973 247.85494 328.56962 247.9449 C 328.56962 248.0348 328.53391 248.12102 328.47034 248.18458 C 328.40677 248.24815 328.32056 248.28387 328.23066 248.28387 C 328.14075 248.28387 328.05455 248.24815 327.99098 248.18458 C 327.92741 248.12102 327.8917 248.0348 327.8917 247.9449 C 327.89158 247.85494 327.92727 247.76862 327.99084 247.70497 C 328.05441 247.64133 328.14068 247.60556 328.23066 247.60556 Z  M 333.51533 258.88469 C 333.60531 258.8846 333.69163 258.92026 333.75527 258.98383 C 333.81891 259.04743 333.85468 259.1337 333.85468 259.22365 C 333.85468 259.31363 333.81891 259.3999 333.75527 259.46347 C 333.69163 259.52707 333.60531 259.56273 333.51533 259.56264 C 333.42542 259.56264 333.33922 259.5269 333.27565 259.46336 C 333.21208 259.39979 333.17637 259.31356 333.17637 259.22365 C 333.17637 259.13377 333.21208 259.04754 333.27565 258.98397 C 333.33922 258.9204 333.42542 258.88469 333.51533 258.88469 Z  M 338.32113 258.90214 C 338.41118 258.90203 338.49754 258.93776 338.5612 259.00142 C 338.62487 259.06509 338.66058 259.15145 338.66048 259.24147 C 338.66048 259.33145 338.62473 259.41772 338.56107 259.48129 C 338.49743 259.54489 338.41111 259.58055 338.32113 259.58045 C 338.23125 259.58045 338.14502 259.54475 338.08145 259.48118 C 338.01788 259.41761 337.98217 259.33138 337.98217 259.24147 C 337.98208 259.15152 338.01774 259.0652 338.08131 259.00156 C 338.14491 258.9379 338.23118 258.90214 338.32113 258.90214 Z  M 342.76029 259.45192 C 342.85034 259.45181 342.9367 259.48754 343.00037 259.5512 C 343.06403 259.61487 343.09974 259.70123 343.09965 259.79125 C 343.09965 259.88123 343.06389 259.9675 343.00023 260.03107 C 342.93659 260.09467 342.85027 260.13033 342.76029 260.13024 C 342.67041 260.13024 342.58418 260.0945 342.52061 260.03093 C 342.45704 259.96739 342.42134 259.88116 342.42134 259.79125 C 342.42124 259.7013 342.4569 259.61498 342.52048 259.55132 C 342.58407 259.48768 342.67034 259.45192 342.76029 259.45192 Z  M 328.37247 259.70026 C 328.46249 259.70017 328.54886 259.73588 328.61252 259.79954 C 328.67618 259.8632 328.71191 259.94957 328.7118 260.03961 C 328.7118 260.12956 328.67604 260.21584 328.61238 260.27943 C 328.54874 260.343 328.46242 260.37866 328.37247 260.37857 C 328.28256 260.37857 328.19634 260.34286 328.13277 260.27929 C 328.06922 260.21572 328.03349 260.1295 328.03349 260.03961 C 328.0334 259.94964 328.06906 259.86332 328.13265 259.79968 C 328.19622 259.73601 328.28249 259.70026 328.37247 259.70026 Z \" />\n            <path\n               fill-opacity=\"0.20100002\"\n               fill=\"rgb(255,255,255)\"\n               id=\"path1465\"\n               d=\" M 333.11799 232.76084 L 332.39075 233.41299 L 331.58847 232.79875 L 330.86087 232.79875 L 330.0836 233.43801 L 329.58198 233.43801 L 329.01778 232.87383 L 328.20261 232.87383 L 327.45036 233.60105 L 326.91081 233.65109 L 326.08349 232.83591 L 326.08349 234.91747 L 326.58511 234.87994 L 326.81072 234.4788 L 327.78895 234.4788 L 328.07709 234.77985 L 329.41932 234.77985 L 329.58198 234.51633 L 330.38465 234.4913 L 330.67279 234.75482 L 331.95208 234.75482 L 332.2152 234.4788 L 332.51625 234.4788 L 332.86736 234.7423 L 334.17166 234.75482 L 334.77337 234.4788 L 335.16201 234.70439 L 336.40376 234.70439 L 336.87997 234.3912 L 338.02124 234.69187 L 338.87394 234.34078 L 338.88646 233.26246 L 338.27223 232.86131 L 337.50709 232.92387 L 336.8174 233.42549 L 336.2282 232.83629 L 335.36295 232.8234 L 334.6983 233.38796 L 333.82055 232.77373 L 333.11799 232.76084 Z  M 335.65757 233.37507 C 335.74746 233.37507 335.83368 233.41078 335.89725 233.47435 C 335.96082 233.53792 335.99653 233.62413 335.99653 233.71404 C 335.99653 233.80393 335.96082 233.89015 335.89725 233.95372 C 335.83368 234.01729 335.74746 234.053 335.65757 234.053 C 335.5676 234.0531 335.48128 234.01743 335.41764 233.95386 C 335.354 233.89028 335.31822 233.804 335.31822 233.71404 C 335.31813 233.62401 335.35384 233.53763 335.4175 233.47396 C 335.48116 233.41031 335.56753 233.37459 335.65757 233.37469 L 335.65757 233.37507 Z  M 337.88965 233.38113 C 337.97956 233.38113 338.06578 233.41685 338.12935 233.48042 C 338.19293 233.54398 338.22863 233.63021 338.22863 233.7201 C 338.22873 233.81007 338.19306 233.89638 338.12947 233.96004 C 338.0659 234.02368 337.97963 234.05944 337.88965 234.05944 C 337.79963 234.05955 337.71326 234.02383 337.6496 233.96016 C 337.58594 233.8965 337.55021 233.81014 337.55032 233.7201 C 337.55032 233.63014 337.58608 233.54386 337.64974 233.48028 C 337.71338 233.4167 337.7997 233.38104 337.88965 233.38113 L 337.88965 233.38113 Z  M 333.41941 233.39365 C 333.50931 233.39365 333.59552 233.42936 333.65909 233.49293 C 333.72266 233.5565 333.75837 233.64272 333.75837 233.73261 C 333.75848 233.82264 333.72275 233.90902 333.65909 233.97268 C 333.59543 234.03634 333.50906 234.07205 333.41904 234.07196 C 333.32906 234.07196 333.24279 234.0362 333.17922 233.97254 C 333.11562 233.90889 333.07996 233.82257 333.08006 233.73261 C 333.08006 233.64272 333.11579 233.5565 333.17933 233.49293 C 333.24291 233.42936 333.32913 233.39365 333.41904 233.39365 L 333.41941 233.39365 Z  M 331.16835 233.41867 C 331.25826 233.41867 331.34449 233.45439 331.40803 233.51796 C 331.4716 233.58152 331.50734 233.66774 331.50734 233.75764 C 331.50743 233.8476 331.47177 233.93392 331.40817 233.99757 C 331.3446 234.06121 331.25833 234.09698 331.16835 234.09698 C 331.07833 234.09708 330.99197 234.06136 330.9283 233.9977 C 330.86464 233.93404 330.82891 233.84767 330.82902 233.75764 C 330.82902 233.66767 330.86478 233.5814 330.92842 233.51782 C 330.99208 233.45424 331.0784 233.41857 331.16835 233.41867 L 331.16835 233.41867 Z  M 328.53018 233.48729 C 328.62009 233.48729 328.70631 233.52301 328.76989 233.58658 C 328.83343 233.65014 328.86916 233.73637 328.86916 233.82626 C 328.86926 233.91623 328.83359 234.00255 328.77 234.0662 C 328.70643 234.12984 328.62016 234.16561 328.53018 234.16561 C 328.44016 234.16571 328.35379 234.12999 328.29013 234.06633 C 328.22647 234.00266 328.19074 233.9163 328.19085 233.82626 C 328.19085 233.7363 328.22661 233.65003 328.29027 233.58645 C 328.35391 233.52286 328.44023 233.4872 328.53018 233.48729 L 328.53018 233.48729 Z \" />\n          </g>\n          <g\n             id=\"g1477\">\n            <path\n               fill=\"rgb(187,179,153)\"\n               id=\"path1469\"\n               d=\" M 301.73639 213.93717 L 326.32374 213.93717 L 326.32374 259.19022 L 301.73639 259.19022 L 301.73639 213.93717 Z \" />\n            <path\n               fill-opacity=\"0.21499999\"\n               fill=\"rgb(31,31,31)\"\n               id=\"path1471\"\n               d=\" M 302.4303 215.2143 L 301.73639 213.93717 L 326.32374 213.93717 L 325.62983 215.2143 L 302.4303 215.2143 Z  M 302.4303 257.91309 L 301.73639 259.19022 L 326.32374 259.19022 L 325.62983 257.91309 L 302.4303 257.91309 Z \" />\n            <path\n               fill-opacity=\"0.21499999\"\n               fill=\"rgb(31,31,31)\"\n               id=\"path1473\"\n               d=\" M 302.4303 215.2143 L 301.73639 213.93717 L 301.73639 259.19022 L 302.4303 257.91309 L 302.4303 215.2143 Z  M 325.62983 215.2143 L 326.32374 213.93717 L 326.32374 259.19022 L 325.62983 257.91309 L 325.62983 215.2143 Z \" />\n            <ellipse\n               stroke-miterlimit=\"4\"\n               stroke-linecap=\"butt\"\n               stroke-linejoin=\"miter\"\n               stroke=\"rgb(202,194,168)\"\n               stroke-width=\"0.41396\"\n               fill=\"rgb(187,179,153)\"\n               id=\"ellipse1475\"\n               ry=\"4.771508376295685\"\n               rx=\"4.789868195469012\"\n               cy=\"250.54119791673781\"\n               cx=\"318.39009836755406\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <path\n             fill=\"rgb(253,216,121)\"\n             id=\"path1479\"\n             d=\" M 302.46965 211.00334 L 302.46965 213.33818 C 302.46965 213.36776 302.49353 213.39165 302.52348 213.39165 L 306.57099 213.39165 C 306.58522 213.39174 306.59892 213.38616 306.60904 213.37612 C 306.61915 213.36609 306.62482 213.35243 306.62482 213.33818 L 306.62482 211.00334 L 305.69588 211.00334 C 305.72078 211.09944 305.73353 211.19829 305.73381 211.29756 C 305.73381 211.95299 305.20247 212.48432 304.54705 212.48432 C 303.89177 212.48411 303.36066 211.95285 303.36066 211.29756 C 303.36119 211.19825 303.3742 211.09941 303.39933 211.00334 L 302.46965 211.00334 Z  M 307.27318 211.00334 L 307.27318 213.33818 C 307.27318 213.36776 307.29744 213.39165 307.32701 213.39165 L 311.37452 213.39165 C 311.38875 213.39174 311.40245 213.38616 311.41257 213.37612 C 311.42266 213.36609 311.42835 213.35243 311.42835 213.33818 L 311.42835 211.00334 L 310.49941 211.00334 C 310.52431 211.09944 310.53704 211.19829 310.53734 211.29756 C 310.53734 211.95285 310.00624 212.48411 309.35095 212.48432 C 308.69553 212.48432 308.16419 211.95299 308.16419 211.29756 C 308.16472 211.19825 308.17773 211.09941 308.20286 211.00334 L 307.27318 211.00334 Z  M 312.07709 211.00334 L 312.07709 213.33818 C 312.07699 213.35239 312.08259 213.36605 312.09264 213.37609 C 312.10268 213.38614 312.11633 213.39174 312.13054 213.39165 L 316.17842 213.39165 C 316.20795 213.39165 316.23188 213.36771 316.23188 213.33818 L 316.23188 211.00334 L 315.30294 211.00334 C 315.32785 211.09944 315.34057 211.19829 315.34087 211.29756 C 315.34087 211.95285 314.80977 212.48411 314.15448 212.48432 C 313.49906 212.48432 312.96772 211.95299 312.96772 211.29756 C 312.96837 211.19824 312.98149 211.09939 313.00679 211.00334 L 312.07709 211.00334 Z  M 316.88062 211.00334 L 316.88062 213.33818 C 316.88053 213.35239 316.88613 213.36605 316.89617 213.37609 C 316.90621 213.38614 316.91987 213.39174 316.93408 213.39165 L 320.98196 213.39165 C 321.01149 213.39165 321.03541 213.36771 321.03541 213.33818 L 321.03541 211.00334 L 320.10648 211.00334 C 320.13138 211.09944 320.14411 211.19829 320.14438 211.29756 C 320.14438 211.9527 319.61353 212.48391 318.95839 212.48432 C 318.30296 212.48432 317.77163 211.95299 317.77163 211.29756 C 317.77216 211.19825 317.78516 211.09941 317.81032 211.00334 L 316.88062 211.00334 Z  M 321.68415 211.00334 L 321.68415 213.33818 C 321.68415 213.36776 321.70803 213.39165 321.73798 213.39165 L 325.78549 213.39165 C 325.79972 213.39174 325.81342 213.38616 325.82353 213.37612 C 325.83362 213.36609 325.83932 213.35243 325.83932 213.33818 L 325.83932 211.00334 L 324.91038 211.00334 C 324.93528 211.09944 324.94803 211.19829 324.94831 211.29756 C 324.94831 211.95299 324.41697 212.48432 323.76155 212.48432 C 323.10626 212.48411 322.57516 211.95285 322.57516 211.29756 C 322.57569 211.19825 322.5887 211.09941 322.61383 211.00334 L 321.68415 211.00334 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke-opacity=\"0.66199999\"\n             stroke=\"rgb(202,194,168)\"\n             stroke-width=\"0.06711\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(160,156,127)\"\n             id=\"path1481\"\n             d=\" M 304.26002 212.44186 C 304.17477 212.41529 304.09173 212.38207 304.01169 212.34252 C 303.64389 212.16204 303.37318 211.73777 303.37318 211.34079 L 303.37318 211.22818 L 305.73608 211.22818 L 305.72319 211.36467 C 305.70574 211.54895 305.672 211.67444 305.59919 211.82232 C 305.44944 212.12716 305.15219 212.36565 304.82725 212.44186 C 304.68317 212.47598 304.38969 212.47598 304.26002 212.44186 L 304.26002 212.44186 Z  M 309.06582 212.44262 C 308.74012 212.35427 308.44516 212.11654 308.306 211.83103 C 308.21575 211.64601 308.17898 211.5061 308.17898 211.34875 L 308.17898 211.22818 L 309.34755 211.22818 C 310.69128 211.22818 310.54454 211.20316 310.51913 211.42837 C 310.48995 211.69151 310.39097 211.90232 310.20519 212.09948 C 310.07661 212.23785 309.91686 212.34353 309.7392 212.40774 C 309.62585 212.44982 309.57427 212.45816 309.38509 212.46309 C 309.22698 212.46764 309.13522 212.46157 309.06582 212.44262 L 309.06582 212.44262 Z  M 313.87201 212.44186 C 313.78667 212.41533 313.70352 212.38224 313.62329 212.3429 C 313.42045 212.24432 313.20129 212.02744 313.10535 211.83103 C 313.01285 211.64146 312.96999 211.44126 312.98288 211.25927 C 312.98478 211.23007 313.05342 211.22818 314.15525 211.22818 L 315.32569 211.22818 L 315.32569 211.34875 C 315.32569 211.74193 315.05535 212.16318 314.68758 212.34252 C 314.60489 212.38296 314.51906 212.41656 314.43089 212.44299 C 314.29819 212.47636 314.00244 212.47598 313.87164 212.44186 L 313.87201 212.44186 Z  M 318.67251 212.44186 C 318.50798 212.3957 318.35378 212.31847 318.21829 212.21436 C 317.9597 212.00204 317.81525 211.7207 317.78188 211.3643 L 317.76899 211.22818 L 320.13189 211.22818 L 320.13189 211.34079 C 320.13189 211.73777 319.86117 212.16204 319.49301 212.34214 C 319.4106 212.38274 319.32502 212.41647 319.23708 212.44299 C 319.1055 212.47598 318.81204 212.4756 318.67251 212.44186 L 318.67251 212.44186 Z  M 323.47489 212.4411 C 323.22188 212.37363 322.99733 212.22645 322.83451 212.02137 C 322.68777 211.83106 322.60094 211.60143 322.58502 211.36164 L 322.57365 211.22818 L 324.94338 211.22818 L 324.93313 211.38591 C 324.91417 211.67672 324.80423 211.9118 324.58318 212.13284 C 324.35453 212.36223 324.08725 212.47068 323.75889 212.46802 C 323.66373 212.46759 323.56882 212.45858 323.47528 212.4411 L 323.47489 212.4411 Z \" />\n          <path\n             fill=\"rgb(253,216,121)\"\n             id=\"path1483\"\n             d=\" M 302.69677 262.08515 L 302.69677 259.75031 C 302.69677 259.72036 302.72065 259.69647 302.75022 259.69647 L 306.79771 259.69647 C 306.82768 259.69647 306.85156 259.72036 306.85156 259.75031 L 306.85156 262.08515 L 305.92262 262.08515 C 305.94753 261.98905 305.96025 261.89021 305.96053 261.79093 C 305.96053 261.13564 305.42945 260.60438 304.77416 260.60417 C 304.11874 260.60417 303.5874 261.1355 303.5874 261.79093 C 303.58805 261.89025 303.60117 261.9891 303.62644 262.08515 L 302.69677 262.08515 Z  M 307.5003 262.08515 L 307.5003 259.75031 C 307.5003 259.72036 307.52418 259.69647 307.55376 259.69647 L 311.60164 259.69647 C 311.63119 259.69647 311.65509 259.72036 311.65509 259.75031 L 311.65509 262.08515 L 310.72616 262.08515 C 310.75106 261.98905 310.76379 261.89021 310.76406 261.79093 C 310.76406 261.13579 310.23321 260.60458 309.57807 260.60417 C 308.92264 260.60417 308.39131 261.1355 308.39131 261.79093 C 308.39184 261.89023 308.40484 261.98908 308.42998 262.08515 L 307.5003 262.08515 Z  M 312.30383 262.08515 L 312.30383 259.75031 C 312.30383 259.72036 312.32771 259.69647 312.35766 259.69647 L 316.40515 259.69647 C 316.43472 259.69647 316.459 259.72036 316.459 259.75031 L 316.459 262.08515 L 315.53006 262.08515 C 315.55496 261.98905 315.56769 261.89021 315.56799 261.79093 C 315.56799 261.1355 315.03665 260.60417 314.38123 260.60417 C 313.72594 260.60438 313.19484 261.13564 313.19484 261.79093 C 313.19537 261.89023 313.20835 261.98908 313.23351 262.08515 L 312.30383 262.08515 Z  M 317.10736 262.08515 L 317.10736 259.75031 C 317.10736 259.72036 317.13161 259.69647 317.16119 259.69647 L 321.20868 259.69647 C 321.23865 259.69647 321.26253 259.72036 321.26253 259.75031 L 321.26253 262.08515 L 320.33359 262.08515 C 320.35849 261.98905 320.37122 261.89021 320.3715 261.79093 C 320.3715 261.13564 319.84041 260.60438 319.18513 260.60417 C 318.52971 260.60417 317.99837 261.1355 317.99837 261.79093 C 317.9989 261.89023 318.01188 261.98908 318.03704 262.08515 L 317.10736 262.08515 Z  M 321.91126 262.08515 L 321.91126 259.75031 C 321.91126 259.72036 321.93515 259.69647 321.96472 259.69647 L 326.01221 259.69647 C 326.04218 259.69647 326.06606 259.72036 326.06606 259.75031 L 326.06606 262.08515 L 325.13712 262.08515 C 325.16202 261.98905 325.17475 261.89021 325.17503 261.79093 C 325.17503 261.13564 324.64395 260.60438 323.98866 260.60417 C 323.33324 260.60417 322.8019 261.1355 322.8019 261.79093 C 322.80255 261.89025 322.81567 261.9891 322.84094 262.08515 L 321.91126 262.08515 Z \" />\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"round\"\n             stroke-linejoin=\"round\"\n             stroke-opacity=\"0.66199999\"\n             stroke=\"rgb(202,194,168)\"\n             stroke-width=\"0.06711\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(160,156,127)\"\n             id=\"path1485\"\n             d=\" M 304.48677 260.64663 C 304.40163 260.67322 304.31873 260.70643 304.2388 260.74597 C 303.87064 260.92645 303.59992 261.35072 303.59992 261.7477 L 303.59992 261.86032 L 305.96282 261.86032 L 305.94993 261.72382 C 305.93285 261.53917 305.89874 261.41367 305.82631 261.26618 C 305.67616 260.96096 305.37891 260.72285 305.05437 260.64625 C 304.91028 260.61251 304.6168 260.61251 304.48677 260.64625 L 304.48677 260.64663 Z  M 309.29257 260.6455 C 308.96724 260.73423 308.67227 260.97157 308.53312 261.25708 C 308.44287 261.4421 308.40609 261.58202 308.40609 261.73974 L 308.40609 261.86032 L 309.57427 261.86032 C 310.918 261.86032 310.77128 261.88534 310.74587 261.66012 C 310.71667 261.39698 310.61808 261.18617 310.43193 260.98902 C 310.30349 260.85056 310.14386 260.74474 309.96632 260.68039 C 309.85257 260.63867 309.80139 260.63033 309.61181 260.62502 C 309.4537 260.62085 309.36234 260.62653 309.29257 260.6455 L 309.29257 260.6455 Z  M 314.09876 260.64663 C 314.01355 260.67306 313.93052 260.70602 313.8504 260.74522 C 313.64717 260.84417 313.42801 261.06068 313.33246 261.25708 C 313.23957 261.44703 313.19674 261.64723 313.20963 261.82923 C 313.21189 261.85842 313.28014 261.86032 314.38236 261.86032 L 315.55281 261.86032 L 315.55281 261.73974 C 315.55281 261.34656 315.28209 260.92494 314.91432 260.74597 C 314.83175 260.70555 314.74604 260.67195 314.658 260.6455 C 314.52531 260.61176 314.22919 260.61251 314.09876 260.64663 L 314.09876 260.64663 Z  M 318.89963 260.64663 C 318.75934 260.68076 318.55914 260.78086 318.4454 260.87413 C 318.18642 261.08646 318.04197 261.36779 318.0086 261.72382 L 317.99571 261.86032 L 320.35861 261.86032 L 320.35861 261.7477 C 320.35861 261.35072 320.08829 260.92645 319.72012 260.74597 C 319.6376 260.70548 319.55186 260.67188 319.4638 260.6455 C 319.33261 260.61213 319.03915 260.61289 318.89963 260.64663 L 318.89963 260.64663 Z  M 323.70163 260.6474 C 323.44876 260.71494 323.22436 260.86211 323.06162 261.06712 C 322.91488 261.25743 322.82805 261.48706 322.81213 261.72685 L 322.80077 261.86032 L 325.16973 261.86032 L 325.1595 261.70258 C 325.14052 261.41177 325.03058 261.1767 324.80992 260.95565 C 324.58091 260.72625 324.3136 260.61744 323.98563 260.62009 C 323.89033 260.62062 323.79529 260.62976 323.70163 260.6474 Z \" />\n          <line\n             id=\"path1487\"\n             y2=\"213.55847\"\n             x2=\"343.43178\"\n             y1=\"227.17587\"\n             x1=\"343.43178\" />\n          <path\n             fill=\"rgb(242,242,242)\"\n             id=\"path1489\"\n             d=\" M 337.28111 227.17056 L 337.28111 213.34197 L 343.4405 213.34197 L 343.4405 227.1698 L 337.28111 227.17056 Z \" />\n          <path\n             fill-opacity=\"0.7\"\n             fill=\"rgb(34,181,115)\"\n             id=\"path1491\"\n             d=\" M 343.44164 218.23688 C 343.44164 218.23688 342.69092 217.0232 342.75689 216.60537 C 342.82287 216.19323 342.51916 215.58734 342.75689 215.3333 L 343.43823 215.36705 L 343.44164 218.23688 Z \" />\n          <path\n             fill=\"rgb(255,255,255)\"\n             id=\"path1493\"\n             d=\" M 339.5386 221.19278 L 339.5386 219.58554 L 341.0833 219.58554 L 341.0833 221.19278 L 339.5386 221.19278 Z \" />\n          <path\n             fill=\"rgb(179,179,179)\"\n             id=\"path1495\"\n             d=\" M 341.04613 221.19278 L 341.04613 219.58554 L 341.125 219.58554 L 341.125 221.19278 L 341.04613 221.19278 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1497\"\n             d=\" M 341.91629 217.14529 L 342.75689 217.14529 L 342.92409 215.33292 L 341.74948 215.33292 L 341.91629 217.14529 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1499\"\n             d=\" M 342.44029 217.03041 L 342.44029 217.04557 C 342.38417 217.54606 342.27346 217.88692 342.1802 218.17091 C 342.05127 218.56447 340.92329 219.22306 341.06168 219.72924 C 341.08064 219.78005 341.04386 219.84223 340.9923 219.8536 C 340.96594 219.86051 340.93792 219.85664 340.91445 219.84283 C 340.89096 219.82903 340.87396 219.80643 340.86717 219.78005 C 340.71437 219.206 341.85866 218.51177 341.99326 218.09962 C 342.08994 217.82094 342.19119 217.50094 342.24275 217.02282 C 342.24921 216.9686 342.29584 216.91969 342.35196 216.93069 C 342.40171 216.93804 342.43899 216.98011 342.44029 217.03041 L 342.44029 217.03041 Z  M 338.96077 223.58147 L 338.11906 223.58147 L 337.95336 225.39952 L 339.12647 225.39952 L 338.96077 223.58147 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1501\"\n             d=\" M 340.56346 220.47087 C 340.56362 220.51827 340.53289 220.56024 340.48765 220.57438 C 340.01863 220.69268 338.6366 222.62182 338.6366 224.12138 C 338.6366 224.18357 338.5949 224.22869 338.53536 224.22869 C 338.4784 224.22565 338.43385 224.17843 338.43413 224.12138 L 338.43413 224.11759 C 338.43413 222.70827 339.67132 220.55921 340.43456 220.36736 C 340.49105 220.35219 340.54414 220.39011 340.56006 220.44433 C 340.56286 220.45288 340.56402 220.46189 340.56346 220.47087 L 340.56346 220.47087 Z  M 340.58584 219.5863 C 340.58584 219.5863 340.58244 220.25627 341.08556 220.30669 L 341.08556 219.58667 L 340.58584 219.5863 Z \" />\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1503\"\n             d=\" M 340.07322 220.4049 C 340.07322 220.4049 340.56499 220.10764 340.6374 220.30518 C 340.71437 220.50613 340.72083 220.63997 340.5919 220.75637 C 340.46034 220.87164 340.07322 220.4049 340.07322 220.4049 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path1505\"\n             d=\" M 341.14661 219.72924 C 341.01163 219.22117 342.14 218.56447 342.26853 218.17091 C 342.36485 217.89791 342.47253 217.54985 342.52864 217.04557 L 342.43386 217.04557 C 342.37774 217.54606 342.26703 217.88692 342.17374 218.17091 C 342.04484 218.56447 340.91684 219.22306 341.05523 219.72924 L 341.14661 219.72924 Z  M 338.96077 223.58147 L 339.0461 223.58147 L 339.2133 225.39952 L 339.12647 225.39952 L 338.96077 223.58147 Z \" />\n          <path\n             fill=\"rgb(157,149,108)\"\n             id=\"path1507\"\n             d=\" M 340.57598 220.57779 C 340.10849 220.69457 338.62825 222.59149 338.72949 224.12517 L 338.63318 224.12517 C 338.53688 222.47509 340.01521 220.68888 340.48459 220.57438 L 340.57598 220.57779 Z  M 341.17542 220.30707 L 341.17542 219.59009 L 341.08406 219.59009 L 341.08406 220.30669 L 341.17542 220.30707 Z  M 340.6757 220.75827 C 340.80462 220.63997 340.7978 220.51182 340.72575 220.31086 L 340.62907 220.30707 C 340.70794 220.50803 340.71247 220.64377 340.58431 220.75827 L 340.6757 220.75827 Z \" />\n          <g\n             id=\"g986\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1509\"\n               d=\" M 337.27808 224.38831 L 337.27808 216.4412 L 337.35998 216.4412 L 337.35998 224.38831 L 337.27808 224.38831 Z \" />\n          </g>\n          <g\n             id=\"g989\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(242,242,242)\"\n               id=\"path1511\"\n               d=\" M 337.28148 225.36729 L 343.43823 225.36729 L 343.43823 215.36136 L 337.28148 215.35377 L 337.28148 225.36729 Z \" />\n          </g>\n          <g\n             id=\"g992\"\n             opacity=\"0.55\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1513\"\n               d=\" M 338.32759 225.27137 L 337.89231 225.27137 C 337.64965 225.23724 337.45667 225.29412 337.45667 225.08709 L 337.45667 215.95208 C 337.45667 215.63625 337.56131 215.62108 337.56131 215.97483 L 337.56131 224.15323 C 337.56131 225.01392 337.73004 225.12842 337.87789 225.12842 L 338.31507 225.12463 C 338.60589 225.12653 338.60589 225.27137 338.32796 225.27137 L 338.32759 225.27137 Z \" />\n          </g>\n          <g\n             id=\"g995\"\n             opacity=\"0.02999998\">\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"path1515\"\n               d=\" M 343.08146 215.62298 C 343.19101 215.62298 343.30325 215.60023 343.30325 215.80724 L 343.30325 224.87249 C 343.30325 225.18871 343.19899 225.2035 343.19899 224.85732 C 343.19899 224.60329 343.19557 218.95197 343.19557 218.10341 C 343.19407 216.98339 343.08183 215.62298 343.08183 215.62298 L 343.08146 215.62298 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1517\"\n             d=\" M 343.44164 227.17018 L 343.44164 225.71915 L 342.60446 225.71915 C 342.40352 225.71915 342.2621 225.56862 342.17374 225.36539 L 337.27695 225.36539 L 337.27695 227.2661 L 343.43823 227.2661\" />\n          <g\n             id=\"g999\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1519\"\n               d=\" M 337.27655 227.26345 L 337.27655 225.37032 L 337.35998 225.37032 L 337.35998 227.26345 L 337.27655 227.26345 Z \" />\n          </g>\n          <path\n             fill=\"rgb(209,198,144)\"\n             id=\"path1521\"\n             d=\" M 343.44164 213.34387 L 337.28111 213.34387 L 337.28111 215.36136 L 342.84826 215.36136 C 342.93812 215.16382 343.08296 215.00192 343.28353 215.00192 L 343.4443 215.00192 L 343.4443 213.4398\" />\n          <g\n             id=\"g1003\"\n             opacity=\"0.5\">\n            <path\n               fill=\"rgb(255,255,255)\"\n               id=\"path1523\"\n               d=\" M 337.27884 215.36136 L 337.27884 213.34425 L 337.36225 213.34425 L 337.36225 215.36136 L 337.27884 215.36136 Z \" />\n          </g>\n        </g>\n        <g\n           id=\"STM32L475\">\n          <path\n             stroke-miterlimit=\"4\"\n             stroke-linecap=\"square\"\n             stroke-linejoin=\"miter\"\n             stroke=\"rgb(170,170,170)\"\n             stroke-width=\"1.05709\"\n             vector-effect=\"non-scaling-stroke\"\n             fill=\"rgb(255,255,255)\"\n             id=\"path1255\"\n             d=\" M 153.01994 146.71058 L 156.28333 146.71058 M 153.01994 148.6003 L 156.28333 148.6003 M 153.01994 150.49115 L 156.28333 150.49115 M 153.01994 152.38124 L 156.28333 152.38124 M 153.01994 154.27172 L 156.28333 154.27172 M 153.01994 156.16143 L 156.28333 156.16143 M 153.01994 158.05228 L 156.28333 158.05228 M 153.01994 159.94162 L 156.28333 159.94162 M 153.01994 161.83285 L 156.28333 161.83285 M 153.01994 163.72256 L 156.28333 163.72256 M 153.01994 165.61304 L 156.28333 165.61304 M 153.01994 167.50313 L 156.28333 167.50313 M 153.01994 169.39398 L 156.28333 169.39398 M 153.01994 171.28332 L 156.28333 171.28332 M 153.01994 173.17417 L 156.28333 173.17417 M 153.01994 175.06388 L 156.28333 175.06388 M 153.01994 176.95473 L 156.28333 176.95473 M 153.01994 178.84445 L 156.28333 178.84445 M 153.01994 180.7353 L 156.28333 180.7353 M 153.01994 182.62501 L 156.28333 182.62501 M 153.01994 184.51587 L 156.28333 184.51587 M 153.01994 186.40558 L 156.28333 186.40558 M 153.01994 188.29643 L 156.28333 188.29643 M 153.01994 190.18615 L 156.28333 190.18615 M 153.01994 192.07662 L 156.28333 192.07662 M 161.07283 200.12952 L 161.07283 196.8665 M 162.96255 200.12952 L 162.96255 196.8665 M 164.85302 200.12952 L 164.85302 196.8665 M 166.74312 200.12952 L 166.74312 196.8665 M 168.63359 200.12952 L 168.63359 196.8665 M 170.5233 200.12952 L 170.5233 196.8665 M 172.41416 200.12952 L 172.41416 196.8665 M 174.30387 200.12952 L 174.30387 196.8665 M 176.19473 200.12952 L 176.19473 196.8665 M 178.08481 200.12952 L 178.08481 196.8665 M 179.97528 200.12952 L 179.97528 196.8665 M 181.865 200.12952 L 181.865 196.8665 M 183.75585 200.12952 L 183.75585 196.8665 M 185.64519 200.12952 L 185.64519 196.8665 M 187.53642 200.12952 L 187.53642 196.8665 M 189.42613 200.12952 L 189.42613 196.8665 M 191.31661 200.12952 L 191.31661 196.8665 M 193.2067 200.12952 L 193.2067 196.8665 M 195.09755 200.12952 L 195.09755 196.8665 M 196.98688 200.12952 L 196.98688 196.8665 M 198.87774 200.12952 L 198.87774 196.8665 M 200.76744 200.12952 L 200.76744 196.8665 M 202.65792 200.12952 L 202.65792 196.8665 M 204.54801 200.12952 L 204.54801 196.8665 M 206.43886 200.12952 L 206.43886 196.8665 M 214.4914 192.07662 L 211.22837 192.07662 M 214.4914 190.1869 L 211.22837 190.1869 M 214.4914 188.29643 L 211.22837 188.29643 M 214.4914 186.40672 L 211.22837 186.40672 M 214.4914 184.51587 L 211.22837 184.51587 M 214.4914 182.62615 L 211.22837 182.62615 M 214.4914 180.7353 L 211.22837 180.7353 M 214.4914 178.84559 L 211.22837 178.84559 M 214.4914 176.95473 L 211.22837 176.95473 M 214.4914 175.06502 L 211.22837 175.06502 M 214.4914 173.17417 L 211.22837 173.17417 M 214.4914 171.28445 L 211.22837 171.28445 M 214.4914 169.39398 L 211.22837 169.39398 M 214.4914 167.50389 L 211.22837 167.50389 M 214.4914 165.61304 L 211.22837 165.61304 M 214.4914 163.72332 L 211.22837 163.72332 M 214.4914 161.83285 L 211.22837 161.83285 M 214.4914 159.94275 L 211.22837 159.94275 M 214.4914 158.05228 L 211.22837 158.05228 M 214.4914 156.16257 L 211.22837 156.16257 M 214.4914 154.27172 L 211.22837 154.27172 M 214.4914 152.382 L 211.22837 152.382 M 214.4914 150.49115 L 211.22837 150.49115 M 214.4914 148.60106 L 211.22837 148.60106 M 214.4914 146.71058 L 211.22837 146.71058 M 206.43886 138.65806 L 206.43886 141.92108 M 204.54915 138.65806 L 204.54915 141.92108 M 202.65792 138.65806 L 202.65792 141.92108 M 200.7686 138.65806 L 200.7686 141.92108 M 198.87774 138.65806 L 198.87774 141.92108 M 196.98802 138.65806 L 196.98802 141.92108 M 195.09755 138.65806 L 195.09755 141.92108 M 193.20746 138.65806 L 193.20746 141.92108 M 191.31661 138.65806 L 191.31661 141.92108 M 189.42689 138.65806 L 189.42689 141.92108 M 187.53642 138.65806 L 187.53642 141.92108 M 185.64632 138.65806 L 185.64632 141.92108 M 183.75585 138.65806 L 183.75585 141.92108 M 181.86613 138.65806 L 181.86613 141.92108 M 179.97528 138.65806 L 179.97528 141.92108 M 178.08558 138.65806 L 178.08558 141.92108 M 176.19473 138.65806 L 176.19473 141.92108 M 174.30463 138.65806 L 174.30463 141.92108 M 172.41416 138.65806 L 172.41416 141.92108 M 170.52444 138.65806 L 170.52444 141.92108 M 168.63359 138.65806 L 168.63359 141.92108 M 166.74425 138.65806 L 166.74425 141.92108 M 164.85302 138.65806 L 164.85302 141.92108 M 162.96331 138.65806 L 162.96331 141.92108 M 161.07283 138.65806 L 161.07283 141.92108\" />\n          <g\n             id=\"g1267\">\n            <path\n               fill=\"rgb(48,48,48)\"\n               id=\"path1257\"\n               d=\" M 156.11292 141.45142 L 211.39856 141.45142 L 211.39856 197.33572 L 156.11292 197.33572 L 156.11292 141.45142 Z \" />\n            <path\n               fill=\"rgb(31,31,31)\"\n               id=\"path1259\"\n               d=\" M 209.83829 143.02858 L 157.6732 143.02858 L 156.11292 141.45142 L 211.39856 141.45142 L 209.83829 143.02858 Z  M 209.83829 195.75855 L 157.6732 195.75855 L 156.11292 197.33572 L 211.39856 197.33572 L 209.83829 195.75855 Z \" />\n            <path\n               fill=\"rgb(0,0,0)\"\n               id=\"path1261\"\n               d=\" M 157.6732 195.75855 L 157.6732 143.02858 L 156.11292 141.45142 L 156.11292 197.33572 L 157.6732 195.75855 Z \" />\n            <path\n               fill=\"rgb(61,61,61)\"\n               id=\"path1263\"\n               d=\" M 209.83829 195.75855 L 209.83829 143.02858 L 211.39856 141.45142 L 211.39856 197.33572 L 209.83829 195.75855 Z \" />\n            <ellipse\n               fill=\"rgb(31,31,31)\"\n               id=\"circle1265\"\n               ry=\"1.5771674929661117\"\n               rx=\"1.5602719900019792\"\n               cy=\"192.60421334977454\"\n               cx=\"160.793739831352\"\n               vector-effect=\"non-scaling-stroke\" />\n          </g>\n          <g\n             id=\"g1014\"\n             transform=\"matrix(1,0,0,1,164.14488,157.8833)\">\n          </g>\n          <g\n             id=\"g541-3\">\n            <path\n               fill=\"rgb(113,113,113)\"\n               id=\"path537-6\"\n               d=\" M 193.54876 175.49354 L 179.12404 175.49354 C 178.49097 175.50778 177.61881 176.05628 177.36968 176.61065 L 174.40883 183.63856 C 174.3992 183.71434 174.44253 183.78804 174.50074 183.80562 L 181.02265 183.80562 C 181.35364 183.7177 181.39656 183.35049 181.25963 183.09466 L 178.53598 180.371 C 177.86061 179.18231 178.57784 177.27094 179.91665 177.02286 L 192.97639 177.03081 L 193.62433 175.6403 L 193.62433 175.53772 L 193.54876 175.49354 Z \" />\n            <path\n               fill=\"rgb(113,113,113)\"\n               id=\"path539-7\"\n               d=\" M 181.76145 185.76515 L 184.59397 185.75321 C 184.69572 185.70925 184.74114 185.62719 184.80332 185.53989 L 187.51714 178.97443 C 187.50143 178.87352 187.42879 178.78643 187.32746 178.73346 L 180.51706 178.73346 C 180.13186 178.81364 179.94072 179.26354 180.14568 179.50764 L 182.6424 181.82265 C 182.86849 182.07136 182.98762 182.37031 183.12433 182.67198 C 183.29703 183.28287 183.17415 183.8948 182.95831 184.41399 C 182.82599 184.69452 182.62251 184.91392 182.42112 185.14484 C 182.23374 185.32593 181.98629 185.44233 181.77317 185.53989 L 181.76145 185.76515 Z  M 192.0678 178.76905 L 189.61087 178.76905 C 189.45049 178.7791 189.40926 178.81511 189.32237 178.93674 L 186.6163 185.44505 C 186.60227 185.61253 186.68225 185.67114 186.80995 185.73354 L 188.04638 185.73354 C 189.54659 185.14944 189.82859 184.72446 190.43444 183.35322 L 191.19691 181.52432 L 192.19822 179.07492 C 192.26145 178.91727 192.14673 178.76884 192.0678 178.76905 L 192.0678 178.76905 Z \" />\n          </g>\n        </g>\n      </g>\n    </g>\n  </switch>\n</svg>",
            "config.ts": "namespace config {\n       \n    // ====================================================\n    // ===  UART  =======================================\n    // ================================================\n    export const PIN_UART1_TX = DAL.PB_6;\n    export const PIN_UART1_RX = DAL.PB_7;\n    \n    export const PIN_UART2_TX = DAL.PD_5;\n    export const PIN_UART2_RX = DAL.PD_6;\n    \n    export const PIN_UART3_TX = DAL.PD_8;\n    export const PIN_UART3_RX = DAL.PD_9;\n    \n    export const PIN_UART4_TX = DAL.PA_0;\n    export const PIN_UART4_RX = DAL.PA_1;\n    \n\n    // ====================================================\n    // ===  SPI  ========================================\n    // ================================================\n    export const PIN_SPI1_MISO = DAL.PA_6;\n    export const PIN_SPI1_MOSI = DAL.PA_7_ALT1;\n    export const PIN_SPI1_SCK = DAL.PA_5;\n    \n    export const PIN_SPI2_MISO = DAL.PD_3;\n    export const PIN_SPI2_MOSI = DAL.PD_4;\n    export const PIN_SPI2_SCK = DAL.PD_1;\n    \n    export const PIN_SPI3_MISO = DAL.PC_11;\n    export const PIN_SPI3_MOSI = DAL.PC_12;\n    export const PIN_SPI3_SCK = DAL.PC_10;\n\n\n    // ====================================================\n    // ===  I2C  ========================================\n    // ================================================\n    export const PIN_I2C1_SCL = DAL.PB_8;\n    export const PIN_I2C1_SDA = DAL.PB_9;\n    \n    export const PIN_I2C2_SCL = DAL.PB_10;\n    export const PIN_I2C2_SDA = DAL.PB_11;\n\n    \n    // ====================================================\n    // ===  PERIPHERALS  ================================\n    // ================================================\n    export const PIN_ACCELEROMETER_SDA = PIN_I2C2_SDA;\n    export const PIN_ACCELEROMETER_SCL = PIN_I2C2_SCL;\n    export const PIN_ACCELEROMETER_INT = DAL.PD_11; \n\n    export const PIN_HTS221_SDA = PIN_I2C2_SDA;\n    export const PIN_HTS221_SCL = PIN_I2C2_SCL;\n\n    export const PIN_LPS22HB_SDA = PIN_I2C2_SDA;\n    export const PIN_LPS22HB_SCL = PIN_I2C2_SCL;\n\n    export const PIN_VL53L0X_SDA = PIN_I2C2_SDA;\n    export const PIN_VL53L0X_SCL = PIN_I2C2_SCL;\n    export const PIN_VL53L0X_SHUT = DAL.PC_6;\n\n    export const PIN_LSM6DSL_SDA = PIN_I2C2_SDA;\n    export const PIN_LSM6DSL_SCL = PIN_I2C2_SCL;\n\n    export const PIN_BLE_SPI_MOSI = PIN_SPI3_MOSI;\n    export const PIN_BLE_SPI_MISO = PIN_SPI3_MISO;\n    export const PIN_BLE_SPI_SCLK = PIN_SPI3_SCK;\n\n    export const PIN_BLE_SPI_CS = DAL.PD_13;\n    export const PIN_BLE_SPI_IRQ = DAL.PE_6;\n    export const PIN_BLE_RST = DAL.PA_8;\n\n    export const PIN_WIFI_ISM43362_MOSI = PIN_SPI3_MOSI;\n    export const PIN_WIFI_ISM43362_MISO = PIN_SPI3_MISO;\n    export const PIN_WIFI_ISM43362_SCK = PIN_SPI3_SCK;\n    \n    export const PIN_WIFI_ISM43362_CS = DAL.PE_0;\n    export const PIN_WIFI_ISM43362_COMMAND_DATA_READY = DAL.PE_1;\n    export const PIN_WIFI_ISM43362_RESET = DAL.PE_8;\n    export const PIN_WIFI_ISM43362_WAKE_UP = DAL.PB_13;\n    \n\n    // ====================================================\n    // ===  ARDUINO  ====================================\n    // ================================================\n    export const PIN_A0 = DAL.PC_5;\n    export const PIN_A1 = DAL.PC_4;\n    export const PIN_A2 = DAL.PC_3;\n    export const PIN_A3 = DAL.PC_2;\n    export const PIN_A4 = DAL.PC_1;\n    export const PIN_A5 = DAL.PC_0;\n\n    export const PIN_D0 = DAL.PA_1;\n    export const PIN_D1 = DAL.PA_0;\n    export const PIN_D2 = DAL.PD_14;\n    export const PIN_D3 = DAL.PB_0_ALT1;\n    export const PIN_D4 = DAL.PA_3;\n    export const PIN_D5 = DAL.PB_4;\n    export const PIN_D6 = DAL.PB_1_ALT1;\n    export const PIN_D7 = DAL.PA_4;\n    export const PIN_D8 = DAL.PB_2;\n    export const PIN_D9 = DAL.PA_15;\n    export const PIN_D10 = DAL.PA_2;\n    export const PIN_D11 = DAL.PA_7_ALT1;\n    export const PIN_D12 = DAL.PA_6;\n    export const PIN_D13 = DAL.PA_5;\n    export const PIN_D14 = DAL.PB_9;\n    export const PIN_D15 = DAL.PB_8;\n\n    export const PIN_RX = PIN_UART1_RX;\n    export const PIN_TX = PIN_UART1_TX;\n\n    export const PIN_MISO = PIN_SPI1_MISO;\n    export const PIN_MOSI = PIN_SPI1_MOSI;\n    export const PIN_SCK = PIN_SPI1_SCK;\n\n    export const PIN_SCL = PIN_I2C1_SCL;\n    export const PIN_SDA = PIN_I2C1_SDA;\n\n\n    // ====================================================\n    // ===  ON-BOARD COMPONENTS  ========================\n    // ================================================\n    export const PIN_LED = DAL.PA_5;\n    export const PIN_LED2 = DAL.PB_14;\n    export const PIN_LED3 = DAL.PC_9;\n\n    export const PIN_BTN_USER = DAL.PC_13;\n    export const PIN_RESET = DAL.NO_CONN;\n    export const PIN_TEMPERATURE = DAL.NO_CONN;\n\n\n    // ====================================================\n    // ===  EXTERNAL DEFINITION  ========================\n    // ================================================\n    export const PIN_SPEAKER_AMP = PIN_D3;\n}\n",
            "device.d.ts": "declare namespace pins {\n    //% fixedInstance shim=pxt::getPin(PIN_A0)\n    const A0: AnalogInPin;\n    //% fixedInstance shim=pxt::getPin(PIN_A1)\n    const A1: AnalogInPin;\n    //% fixedInstance shim=pxt::getPin(PIN_A2)\n    const A2: AnalogInPin;\n    //% fixedInstance shim=pxt::getPin(PIN_A3)\n    const A3: AnalogInPin;\n    //% fixedInstance shim=pxt::getPin(PIN_A4)\n    const A4: AnalogInPin;\n    //% fixedInstance shim=pxt::getPin(PIN_A5)\n    const A5: AnalogInPin;\n\n    //% fixedInstance shim=pxt::getPin(PIN_D0)\n    const D0: PwmPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D1)\n    const D1: PwmPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D2)\n    const D2: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D3)\n    const D3: PwmPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D4)\n    const D4: PwmPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D5)\n    const D5: PwmPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D6)\n    const D6: PwmPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D7)\n    const D7: DigitalInOutPin;\n\n    //% fixedInstance shim=pxt::getPin(PIN_D8)\n    const D8: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D9)\n    const D9: PwmPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D10)\n    const D10: PwmPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D11)\n    const D11: PwmPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D12)\n    const D12: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D13)\n    const D13: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D14)\n    const D14: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_D15)\n    const D15: DigitalInOutPin;\n\n    //% fixedInstance shim=pxt::getPin(PIN_LED)\n    const LED: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_LED2)\n    const LED2: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_LED3)\n    const LED3: DigitalInOutPin;\n\n    //% fixedInstance shim=pxt::getPin(PIN_RX)\n    const RX: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_TX)\n    const TX: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_MISO)\n    const MISO: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_MOSI)\n    const MOSI: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_SCK)\n    const SCK: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_SCL)\n    const SCL: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(PIN_SDA)\n    const SDA: DigitalInOutPin;\n}\n\ndeclare namespace input {\n    /**\n     * Button connecting A0 to GND.\n     */\n    //% block=\"button A0\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_A0,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonA0: Button;\n\n    /**\n     * Button connecting A1 to GND.\n     */\n    //% block=\"button A1\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_A1,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonA1: Button;\n\n    /**\n     * Button connecting A2 to GND.\n     */\n    //% block=\"button A2\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_A2,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonA2: Button;\n\n    /**\n     * Button connecting A3 to GND.\n     */\n    //% block=\"button A3\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_A3,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonA3: Button;\n\n    /**\n     * Button connecting A4 to GND.\n     */\n    //% block=\"button A4\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_A4,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonA4: Button;\n\n    /**\n     * Button connecting A5 to GND.\n     */\n    //% block=\"button A5\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_A5,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonA5: Button;\n\n    /**\n     * Button connecting D0 to GND.\n     */\n    //% block=\"button D0\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D0,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD0: Button;\n\n    /**\n     * Button connecting D1 to GND.\n     */\n    //% block=\"button D1\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D1,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD1: Button;\n\n    /**\n     * Button connecting D2 to GND.\n     */\n    //% block=\"button D2\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D2,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD2: Button;\n\n    /**\n     * Button connecting D3 to GND.\n     */\n    //% block=\"button D3\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D3,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD3: Button;\n\n    /**\n     * Button connecting D4 to GND.\n     */\n    //% block=\"button D4\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D4,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD4: Button;\n\n    /**\n     * Button connecting D5 to GND.\n     */\n    //% block=\"button D5\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D5,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD5: Button;\n\n    /**\n     * Button connecting D6 to GND.\n     */\n    //% block=\"button D6\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D6,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD6: Button;\n\n    /**\n     * Button connecting D7 to GND.\n     */\n    //% block=\"button D7\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D7,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD7: Button;\n\n    /**\n     * Button connecting D8 to GND.\n     */\n    //% block=\"button D8\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D8,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD8: Button;\n\n    /**\n     * Button connecting D9 to GND.\n     */\n    //% block=\"button D9\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D9,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD9: Button;\n\n    /**\n     * Button connecting D10 to GND.\n     */\n    //% block=\"button D10\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D10,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD10: Button;\n\n    /**\n     * Button connecting D11 to GND.\n     */\n    //% block=\"button D11\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D11,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD11: Button;\n\n    /**\n     * Button connecting D12 to GND.\n     */\n    //% block=\"button D12\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D12,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD12: Button;\n\n    /**\n     * Button connecting D13 to GND.\n     */\n    //% block=\"button D13\" fixedInstance\n    //% shim=pxt::getButtonByPin(PIN_D13,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonD13: Button;\n\n    /**\n     * Button connecting BTN_USER to GND.\n     */\n    //% block=\"button USER\" fixedInstance\n    //% shim=pxt::getButton(0)\n    const buttonUser: Button;\n}\n",
            "ns.ts": "//% color=\"#d65cd6\" weight=90\n//% groups='[\"Buttons\", \"Temperature\", \"Humidity\", \"Pressure\", \"Distance\", \"Movement\"]'\nnamespace input {\n}\n\n//% color=\"#EF2D56\" weight=80  advanced=false\nnamespace pins {\n}\n\n//% color=\"#00b295\" weight=70  advanced=true\nnamespace control {\n\n}\n\n//% color=\"#61b22f\" weight=70 \nnamespace loops {\n\n}\n\n//% color=\"#006E90\" weight=30 icon=\"\\uf1e6\" advanced=false\nnamespace serial {\n\n}",
            "pxt.json": "{\n    \"name\": \"stm32-discovery-DISCO_L475VG_IOT\",\n    \"description\": \"DISCO_L475VG_IOT - beta\",\n    \"dependencies\": {\n        \"accelerometer---lsm6dsl\": \"*\",\n        \"barometer---lps22hb\": \"*\",\n        \"buttons\": \"*\",\n        \"core---stm32\": \"*\",\n        \"distance---vl53l0x\": \"*\",\n        \"hygrometer---hts221\": \"*\",\n        \"thermometer---lps22hb\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"ns.ts\",\n        \"config.ts\",\n        \"device.d.ts\",\n        \"board.json\",\n        \"board.svg\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    },\n    \"compileServiceVariant\": \"stm32-DISCO_L475VG_IOT\",\n    \"core\": true,\n    \"dalDTS\": {\n        \"corePackage\": \"../core---stm32\"\n    },\n    \"features\": [\n        \"pina0\",\n        \"pina1\"\n    ],\n    \"icon\": \"/docs/static/libs/stm32-discovery-DISCO_L475VG_IOT.jpg\"\n}\n"
        },
        "buttons": {
            "README.md": "# buttons\n\nA library to handle 2 buttons A and B.\n",
            "buttons.cpp": "#include \"pxt.h\"\n\n/*\nThese button events need CODAL work.\n    // % block=\"double click\"\n    DoubleClick = DEVICE_BUTTON_EVT_DOUBLE_CLICK,\n    // % block=\"hold\"\n    Hold = DEVICE_BUTTON_EVT_HOLD\n*/\n\n/**\n * User interaction on buttons\n */\nenum class ButtonEvent {\n    //% block=\"click\"\n    Click = DEVICE_BUTTON_EVT_CLICK,\n    //% block=\"long click\"\n    LongClick = DEVICE_BUTTON_EVT_LONG_CLICK,\n    //% block=\"up\"\n    Up = DEVICE_BUTTON_EVT_UP,\n    //% block=\"down\"\n    Down = DEVICE_BUTTON_EVT_DOWN\n};\n\nnamespace pxt {\n//%\nButton *getButtonByPin(int pin, int flags) {\n    auto cpid = DEVICE_ID_FIRST_BUTTON + pin;\n    auto btn = (Button *)lookupComponent(cpid);\n    if (btn == NULL) {\n        auto pull = PullMode::None;\n        if ((flags & 0xf0) == 0x10)\n            pull = PullMode::Down;\n        else if ((flags & 0xf0) == 0x20)\n            pull = PullMode::Up;\n        else if ((flags & 0xf0) == 0x20)\n            pull = PullMode::None;\n        else\n            target_panic(42);\n        btn = new Button(*lookupPin(pin), cpid, DEVICE_BUTTON_ALL_EVENTS, (ButtonPolarity)(flags & 0xf), pull);\n    }\n    return btn;\n}\n\n//%\nButton *getButtonByPinCfg(int key, int flags) {\n    int pin = getConfig(key);\n    if (pin == -1)\n        target_panic(42);\n    return getButtonByPin(pin, flags);\n}\n\nMultiButton *getMultiButton(int id, int pinA, int pinB, int flags) {\n    auto btn = (MultiButton *)lookupComponent(id);\n    if (btn == NULL) {\n        auto bA = getButtonByPin(pinA, flags);\n        auto bB = getButtonByPin(pinB, flags);\n        btn = new codal::MultiButton(bA->id, bB->id, id);\n\n        // A user has registered to receive events from the buttonAB multibutton.\n        // Disable click events from being generated by ButtonA and ButtonB, and defer the\n        // control of this to the multibutton handler.\n        //\n        // This way, buttons look independent unless a buttonAB is requested, at which\n        // point button A+B clicks can be correclty handled without breaking\n        // causal ordering.\n        bA->setEventConfiguration(DEVICE_BUTTON_SIMPLE_EVENTS);\n        bB->setEventConfiguration(DEVICE_BUTTON_SIMPLE_EVENTS);\n        btn->setEventConfiguration(DEVICE_BUTTON_ALL_EVENTS);\n    }\n    return btn;\n}\n\n// This is for A, B, and AB\n//%\nAbstractButton *getButton(int id) {\n    // int pa = getConfig(CFG_PIN_BTN_A);\n    // int pb = getConfig(CFG_PIN_BTN_B);\n    // int flags = getConfig(CFG_DEFAULT_BUTTON_MODE, BUTTON_ACTIVE_LOW_PULL_UP);\n    // if (id == 0)\n    //     return getButtonByPin(pa, flags);\n    // else if (id == 1)\n    //     return getButtonByPin(pb, flags);\n    // else if (id == 2)\n    //     return getMultiButton(DEVICE_ID_BUTTON_AB, pa, pb, flags);\n    // else {\n    //     target_panic(42);\n    //     return NULL;\n    // }\n\n    int pUser = getConfig(CFG_PIN_BTN_USER);\n    int flags = getConfig(CFG_DEFAULT_BUTTON_MODE, BUTTON_ACTIVE_LOW_PULL_UP);\n\n    if (id == 0) {\n        return getButtonByPin(pUser, flags);\n    } else {\n        target_panic(42);\n        return NULL;\n    }\n}\n\n} // namespace pxt\n\nnamespace DigitalInOutPinMethods {\n\n/**\n * Get the push button (connected to GND) for given pin\n */\n//%\nButton_ pushButton(DigitalInOutPin pin) {\n    return pxt::getButtonByPin((uint8_t)pin->name, BUTTON_ACTIVE_LOW_PULL_UP);\n}\n\n} // namespace DigitalInOutPinMethods\n\n//% noRefCounting fixedInstances\nnamespace ButtonMethods {\n\n/**\n * Do something when a button (`A`, `B` or both `A` + `B`) is clicked, double clicked, etc...\n * @param button the button that needs to be clicked or used\n * @param event the kind of button gesture that needs to be detected\n * @param body code to run when the event is raised\n */\n//% help=input/button/on-event\n//% blockId=buttonEvent block=\"on %button|%event\"\n//% parts=\"buttons\"\n//% group=\"Buttons\"\n//% blockNamespace=input\n//% weight=96 blockGap=12\n//% button.fieldEditor=\"gridpicker\"\n//% button.fieldOptions.width=220\n//% button.fieldOptions.columns=3\n//% trackArgs=0\nvoid onEvent(Button_ button, ButtonEvent ev, Action body) {\n    registerWithDal(button->id, (int)ev, body);\n}\n\n/**\n * Check if a button is pressed or not.\n * @param button the button to query the request\n */\n//% help=input/button/is-pressed\n//% block=\"%button|is pressed\"\n//% blockId=buttonIsPressed\n//% parts=\"buttons\"\n//% group=\"Buttons\"\n//% blockNamespace=input\n//% button.fieldEditor=\"gridpicker\"\n//% button.fieldOptions.width=220\n//% button.fieldOptions.columns=3\n//% weight=50 blockGap=8\n//% trackArgs=0\nbool isPressed(Button_ button) {\n    return button->isPressed();\n}\n\n/**\n * See if the button was pressed again since the last time you checked.\n * @param button the button to query the request\n */\n//% help=input/button/was-pressed\n//% block=\"%button|was pressed\"\n//% blockId=buttonWasPressed\n//% parts=\"buttons\"\n//% group=\"Buttons\" advanced=true\n//% blockNamespace=input\n//% button.fieldEditor=\"gridpicker\"\n//% button.fieldOptions.width=220\n//% button.fieldOptions.columns=3\n//% weight=46 blockGap=8\n//% trackArgs=0\nbool wasPressed(Button_ button) {\n    return button->wasPressed();\n}\n\n/**\n * Gets the component identifier for the buton\n */\n//%\nint id(Button_ button) {\n    return button->id;\n}\n\n} // namespace ButtonMethods",
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    /**\n     * User interaction on buttons\n     */\n\n    declare const enum ButtonEvent {\n    //% block=\"click\"\n    Click = 3,  // DEVICE_BUTTON_EVT_CLICK\n    //% block=\"long click\"\n    LongClick = 4,  // DEVICE_BUTTON_EVT_LONG_CLICK\n    //% block=\"up\"\n    Up = 2,  // DEVICE_BUTTON_EVT_UP\n    //% block=\"down\"\n    Down = 1,  // DEVICE_BUTTON_EVT_DOWN\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "pxt.json": "{\n    \"name\": \"buttons\",\n    \"description\": \"Button A and B drivers\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"buttons.cpp\",\n        \"shims.d.ts\",\n        \"enums.d.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\n\n\ndeclare interface DigitalInOutPin {\n    /**\n     * Get the push button (connected to GND) for given pin\n     */\n    //% shim=DigitalInOutPinMethods::pushButton\n    pushButton(): Button;\n}\n\n\n\n    //% noRefCounting fixedInstances\ndeclare interface Button {\n    /**\n     * Do something when a button (`A`, `B` or both `A` + `B`) is clicked, double clicked, etc...\n     * @param button the button that needs to be clicked or used\n     * @param event the kind of button gesture that needs to be detected\n     * @param body code to run when the event is raised\n     */\n    //% help=input/button/on-event\n    //% blockId=buttonEvent block=\"on %button|%event\"\n    //% parts=\"buttons\"\n    //% group=\"Buttons\"\n    //% blockNamespace=input\n    //% weight=96 blockGap=12\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.width=220\n    //% button.fieldOptions.columns=3\n    //% trackArgs=0 shim=ButtonMethods::onEvent\n    onEvent(ev: ButtonEvent, body: () => void): void;\n\n    /**\n     * Check if a button is pressed or not.\n     * @param button the button to query the request\n     */\n    //% help=input/button/is-pressed\n    //% block=\"%button|is pressed\"\n    //% blockId=buttonIsPressed\n    //% parts=\"buttons\"\n    //% group=\"Buttons\"\n    //% blockNamespace=input\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.width=220\n    //% button.fieldOptions.columns=3\n    //% weight=50 blockGap=8\n    //% trackArgs=0 shim=ButtonMethods::isPressed\n    isPressed(): boolean;\n\n    /**\n     * See if the button was pressed again since the last time you checked.\n     * @param button the button to query the request\n     */\n    //% help=input/button/was-pressed\n    //% block=\"%button|was pressed\"\n    //% blockId=buttonWasPressed\n    //% parts=\"buttons\"\n    //% group=\"Buttons\" advanced=true\n    //% blockNamespace=input\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.width=220\n    //% button.fieldOptions.columns=3\n    //% weight=46 blockGap=8\n    //% trackArgs=0 shim=ButtonMethods::wasPressed\n    wasPressed(): boolean;\n\n    /**\n     * Gets the component identifier for the buton\n     */\n    //% shim=ButtonMethods::id\n    id(): int32;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "test.ts": ""
        },
        "music": {
            "README.md": "# music\n\nThe music library.\n\n",
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum SoundOutputDestination {\n    //% block=\"pin\"\n    Pin = 1,\n    //% block=\"speaker\"\n    Speaker = 0,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "headphone.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"142\" height=\"180\" viewBox=\"0 0 142 180\"><rect ry=\".3\" rx=\"1\" y=\"58.615\" x=\"-8.878\" height=\"23.571\" width=\"17.143\" transform=\"rotate(-45)\" fill=\"#b3b3b3\"/><rect ry=\".3\" rx=\"1\" y=\"32.043\" x=\"-8.878\" height=\"23.571\" width=\"17.143\" transform=\"rotate(-45)\" fill=\"#b3b3b3\"/><path d=\"M.346 7.296c-.394.39-.31 4.797-.18 4.898l13.404 10.18c.117.12.337 4.76.73 4.368l5.506-5.56.01.01 6.51-6.444c.39-.392-4.25-.614-4.366-.73L11.777.612c-.1-.132-4.51-.215-4.898.18L4.087 3.636l-.01-.01-3.73 3.67z\" fill=\"#b3b3b3\"/><rect ry=\"6.85\" rx=\"4.571\" y=\"84.758\" x=\"-20.128\" height=\"75.571\" width=\"39.643\" transform=\"rotate(-45)\"/><rect ry=\".374\" rx=\"1.038\" y=\"29.442\" x=\"-8.925\" height=\"2.228\" width=\"17.238\" transform=\"rotate(-45)\" fill=\"#fff\"/><rect ry=\".374\" rx=\"1.038\" y=\"55.939\" x=\"-8.925\" height=\"2.228\" width=\"17.238\" transform=\"rotate(-45)\" fill=\"#fff\"/><rect ry=\".374\" rx=\"1.038\" y=\"82.392\" x=\"-8.925\" height=\"2.228\" width=\"17.238\" transform=\"rotate(-45)\" fill=\"#fff\"/><rect ry=\"2.317\" rx=\"2.183\" y=\"158.876\" x=\"-9.774\" height=\"25.568\" width=\"18.935\" transform=\"rotate(-45)\"/><path d=\"M128.588 128.82s14.97 11.165 7.547 26.35c-8.426 17.24-25.57 20.653-25.57 20.653\" fill=\"none\" stroke=\"#000\" stroke-width=\"6.6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>",
            "melodies.ts": "/*\nThe MIT License (MIT)\n\nCopyright (c) 2013-2016 The MicroPython-on-micro:bit Developers, as listed\nin the accompanying AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n// Melodies from file microbitmusictunes.c https://github.com/bbcmicrobit/MicroPython\n\nenum Sounds {\n    //% block=\"power up\"\n    PowerUp,\n    //% block=\"power down\"\n    PowerDown,\n    //% block=\"jump up\"\n    JumpUp,\n    //% block=\"jump down\"\n    JumpDown,\n    //% block=\"ba ding\"\n    BaDing,\n    //% block=\"wawawawaa\"\n    Wawawawaa,\n    //% block=\"magic wand\"\n    MagicWand,\n    //% block=\"siren\"\n    Siren,\n    //% block=\"pew pew\"\n    PewPew\n}\n\nnamespace music {\n    let _soundQueue: control.AnimationQueue;\n\n    /**\n     * Get the melody string for a built-in melody.\n     * @param name the note name, eg: Note.C\n     */\n    //% help=music/sounds\n    //% blockId=music_sounds block=\"%name\"\n    //% blockHidden=true\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=285\n    //% name.fieldOptions.columns=3\n    export function sounds(name: Sounds): string {\n        switch (name) {\n            case Sounds.BaDing:\n                return 'b5:1 e6:3';\n            case Sounds.Wawawawaa:\n                return 'e3:3 r:1 d#:3 r:1 d:4 r:1 c#:8';\n            case Sounds.JumpUp:\n                return 'c5:1 d e f g';\n            case Sounds.JumpDown:\n                return 'g5:1 f e d c';\n            case Sounds.PowerUp:\n                return 'g4:1 c5 e g:2 e:1 g:3';\n            case Sounds.PowerDown:\n                return 'g5:1 d# c g4:2 b:1 c5:3';\n            case Sounds.MagicWand:\n                return 'F#6:1-300 G# A# B C7# D# F F# G# A# B:6'; //A#7:1-200 A:1 A#7:1 A:1 A#7:2\n            case Sounds.Siren:\n                return 'a4 d5 a4 d5 a4 d5';\n            case Sounds.PewPew:\n                return '!1200,200^50';\n            default:\n                return '';\n        }\n    }\n\n    function soundQueue(): control.AnimationQueue {\n        if (!_soundQueue) _soundQueue = new control.AnimationQueue();\n        return _soundQueue;\n    }\n\n    /**\n     * Start playing a sound and don't wait for it to finish.\n     * Notes are expressed as a string of characters with this format: NOTE[octave][:duration]\n     * @param sound the melody to play\n     */\n    //% help=music/play-sound\n    //% blockId=music_play_sound block=\"play sound %sound=music_sounds\"\n    //% parts=\"headphone\"\n    //% weight=95 blockGap=8\n    export function playSound(sound: string) {\n        const queue = soundQueue();\n        const melody = new Melody(sound);\n        control.runInParallel(() => {\n            queue.cancel();\n            queue.runUntilDone(() => melody.playNextNote());\n        })\n        pause(1);\n    }\n\n\n    /**\n     * Play a sound and wait until the sound is done.\n     * Notes are expressed as a string of characters with this format: NOTE[octave][:duration]\n     * @param sound the melody to play\n     */\n    //% help=music/play-sound-until-done\n    //% blockId=music_play_sound_until_done block=\"play sound %sound=music_sounds|until done\"\n    //% parts=\"headphone\"\n    //% weight=94 blockGap=8\n    export function playSoundUntilDone(sound: string) {\n        const queue = soundQueue();\n        const melody = new Melody(sound);\n        queue.runUntilDone(() => melody.playNextNote());\n    }\n\n    /**\n     * Stop all sounds from playing.\n     */\n    //% help=music/stop-all-sounds\n    //% blockId=music_stop_all_sounds block=\"stop all sounds\"\n    //% weight=93\n    export function stopAllSounds() {\n        const queue = soundQueue();\n        queue.cancel();\n        music.rest(1);\n    }\n\n    class Melody {\n        static freqTable: number[];\n        notes: string;\n        duration: number;\n        octave: number;\n        pos: number;\n        tempo: number;\n\n        constructor(notes: string) {\n            this.notes = notes;\n            this.duration = 4; //Default duration (Crotchet)\n            this.octave = 4; //Middle octave\n            this.pos = 0;\n            this.tempo = 120; // default tempo\n            // TODO: use HEX literal\n            if (!Melody.freqTable)\n                Melody.freqTable = [31, 33, 35, 37, 39, 41, 44, 46, 49, 52, 55, 58, 62, 65, 69, 73, 78, 82, 87, 92, 98, 104, 110, 117, 123, 131, 139, 147, 156, 165, 175, 185, 196, 208, 220, 233, 247, 262, 277, 294, 311, 330, 349, 370, 392, 415, 440, 466, 494, 523, 554, 587, 622, 659, 698, 740, 784, 831, 880, 932, 988, 1047, 1109, 1175, 1245, 1319, 1397, 1480, 1568, 1661, 1760, 1865, 1976, 2093, 2217, 2349, 2489, 2637, 2794, 2960, 3136, 3322, 3520, 3729, 3951, 4186, 4435, 4699, 4978, 5274, 5588, 5920, 6272, 6645, 7040, 7459, 7902]\n        }\n\n        hasNextNote() {\n            return this.pos < this.notes.length;\n        }\n\n        scanNextNote(): string {\n            // eat space\n            while (this.pos < this.notes.length) {\n                const c = this.notes[this.pos];\n                if (c != ' ' && c != '\\r' && c != '\\n' && c != '\\t')\n                    break;\n                this.pos++;\n            }\n\n            // read note\n            let note = \"\";\n            while (this.pos < this.notes.length) {\n                const c = this.notes[this.pos];\n                if (c == ' ' || c == '\\r' || c == '\\n' || c == '\\t')\n                    break;\n                note += c;\n                this.pos++;\n            }\n            return note;\n        }\n\n        playNextNote(): boolean {\n            let currNote = this.scanNextNote();\n            if (!currNote)\n                return false;\n\n            enum Token {\n                Note = 0,\n                Octave = 1,\n                Beat = 2,\n                Tempo = 3\n            }\n\n            let note: number = 0;\n            let isrest: boolean = false;\n            let token: string = \"\";\n            let tokenKind = Token.Note;\n            const consumeToken = () => {\n                if (token && tokenKind != Token.Note) {\n                    const d = parseInt(token);\n                    switch (tokenKind) {\n                        case Token.Octave: this.octave = d; break;\n                        case Token.Beat: this.duration = Math.max(1, Math.min(16, d)); break;\n                        case Token.Tempo: this.tempo = Math.max(1, d); break;\n                    }\n                    token = \"\";\n                }\n            }\n            for (let i = 0; i < currNote.length; i++) {\n                let noteChar = currNote.charAt(i);\n                switch (noteChar) {\n                    case 'c': case 'C': note = 1; break;\n                    case 'd': case 'D': note = 3; break;\n                    case 'e': case 'E': note = 5; break;\n                    case 'f': case 'F': note = 6; break;\n                    case 'g': case 'G': note = 8; break;\n                    case 'a': case 'A': note = 10; break;\n                    case 'b': case 'B': note = 12; break;\n                    case 'r': case 'R': isrest = true; break;\n                    case '#': note++; break;\n                    case 'b': note--; break;\n                    case ':':\n                        consumeToken();\n                        tokenKind = Token.Beat;\n                        break;\n                    case '-':\n                        consumeToken();\n                        tokenKind = Token.Tempo;\n                        break;\n                    default:\n                        if(tokenKind == Token.Note)\n                            tokenKind = Token.Octave;\n                        token += noteChar;\n                        break;\n                }\n            }\n            consumeToken();\n            let beat = 15000 / this.tempo;\n            if (isrest) {\n                music.rest(this.duration * beat)\n            } else {\n                const keyNumber = note + (12 * (this.octave - 1));\n                const frequency = Melody.freqTable[keyNumber] || 0;\n                music.playTone(frequency, this.duration * beat);\n            }\n\n            return this.hasNextNote();\n        }\n    }\n}",
            "music.cpp": "#include \"pxt.h\"\n\n#define NOTE_PAUSE 20\n\nnamespace music {\n\n/**\n * Play a tone through the speaker for some amount of time.\n * @param frequency pitch of the tone to play in Hertz (Hz), eg: Note.C\n * @param ms tone duration in milliseconds (ms), eg: BeatFraction.Half\n */\n//% help=music/play-tone\n//% blockId=music_play_note block=\"play tone|at %note=device_note|for %duration=device_beat\"\n//% parts=\"headphone\" async\n//% blockNamespace=music\n//% weight=76 blockGap=8\nvoid playTone(int frequency, int ms) {\n    auto pitchPin = LOOKUP_PIN(SPEAKER_AMP);\n\n    if (!pitchPin)\n        return;\n\n    if (frequency <= 0) {\n        pitchPin->setAnalogValue(0);\n    } else {\n        pitchPin->setAnalogPeriodUs(1000000 / frequency);\n        pitchPin->setAnalogValue(512);\n        if (ms > 0) {\n            int d = max(1, ms - NOTE_PAUSE); // allow for short rest\n            int r = max(1, ms - d);\n            fiber_sleep(d);\n            pitchPin->setAnalogValue(0);\n            fiber_sleep(r);\n        }\n    }\n}\n\n} // namespace music\n",
            "music.ts": "enum Note {\n    //% blockIdentity=music.noteFrequency enumval=262\n    C = 262,\n    //% block=C#\n    //% blockIdentity=music.noteFrequency enumval=277\n    CSharp = 277,\n    //% blockIdentity=music.noteFrequency enumval=294\n    D = 294,\n    //% blockIdentity=music.noteFrequency enumval=311\n    Eb = 311,\n    //% blockIdentity=music.noteFrequency enumval=330\n    E = 330,\n    //% blockIdentity=music.noteFrequency enumval=349\n    F = 349,\n    //% block=F#\n    //% blockIdentity=music.noteFrequency enumval=370\n    FSharp = 370,\n    //% blockIdentity=music.noteFrequency enumval=392\n    G = 392,\n    //% block=G#\n    //% blockIdentity=music.noteFrequency enumval=415\n    GSharp = 415,\n    //% blockIdentity=music.noteFrequency enumval=440\n    A = 440,\n    //% blockIdentity=music.noteFrequency enumval=466\n    Bb = 466,\n    //% blockIdentity=music.noteFrequency enumval=494\n    B = 494,\n    //% blockIdentity=music.noteFrequency enumval=131\n    C3 = 131,\n    //% block=C#3\n    //% blockIdentity=music.noteFrequency enumval=139\n    CSharp3 = 139,\n    //% blockIdentity=music.noteFrequency enumval=147\n    D3 = 147,\n    //% blockIdentity=music.noteFrequency enumval=156\n    Eb3 = 156,\n    //% blockIdentity=music.noteFrequency enumval=165\n    E3 = 165,\n    //% blockIdentity=music.noteFrequency enumval=175\n    F3 = 175,\n    //% block=F#3\n    //% blockIdentity=music.noteFrequency enumval=185\n    FSharp3 = 185,\n    //% blockIdentity=music.noteFrequency enumval=196\n    G3 = 196,\n    //% block=G#3\n    //% blockIdentity=music.noteFrequency enumval=208\n    GSharp3 = 208,\n    //% blockIdentity=music.noteFrequency enumval=220\n    A3 = 220,\n    //% blockIdentity=music.noteFrequency enumval=233\n    Bb3 = 233,\n    //% blockIdentity=music.noteFrequency enumval=247\n    B3 = 247,\n    //% blockIdentity=music.noteFrequency enumval=262\n    C4 = 262,\n    //% block=C#4\n    //% blockIdentity=music.noteFrequency enumval=277\n    CSharp4 = 277,\n    //% blockIdentity=music.noteFrequency enumval=294\n    D4 = 294,\n    //% blockIdentity=music.noteFrequency enumval=311\n    Eb4 = 311,\n    //% blockIdentity=music.noteFrequency enumval=330\n    E4 = 330,\n    //% blockIdentity=music.noteFrequency enumval=349\n    F4 = 349,\n    //% block=F#4\n    //% blockIdentity=music.noteFrequency enumval=370\n    FSharp4 = 370,\n    //% blockIdentity=music.noteFrequency enumval=392\n    G4 = 392,\n    //% block=G#4\n    //% blockIdentity=music.noteFrequency enumval=415\n    GSharp4 = 415,\n    //% blockIdentity=music.noteFrequency enumval=440\n    A4 = 440,\n    //% blockIdentity=music.noteFrequency enumval=466\n    Bb4 = 466,\n    //% blockIdentity=music.noteFrequency enumval=494\n    B4 = 494,\n    //% blockIdentity=music.noteFrequency enumval=523\n    C5 = 523,\n    //% block=C#5\n    //% blockIdentity=music.noteFrequency enumval=555\n    CSharp5 = 555,\n    //% blockIdentity=music.noteFrequency enumval=587\n    D5 = 587,\n    //% blockIdentity=music.noteFrequency enumval=622\n    Eb5 = 622,\n    //% blockIdentity=music.noteFrequency enumval=659\n    E5 = 659,\n    //% blockIdentity=music.noteFrequency enumval=698\n    F5 = 698,\n    //% block=F#5\n    //% blockIdentity=music.noteFrequency enumval=740\n    FSharp5 = 740,\n    //% blockIdentity=music.noteFrequency enumval=784\n    G5 = 784,\n    //% block=G#5\n    //% blockIdentity=music.noteFrequency enumval=831\n    GSharp5 = 831,\n    //% blockIdentity=music.noteFrequency enumval=880\n    A5 = 880,\n    //% blockIdentity=music.noteFrequency enumval=932\n    Bb5 = 932,\n    //% blockIdentity=music.noteFrequency enumval=988\n    B5 = 988,\n}\n\nenum BeatFraction {\n    //% block=1\n    Whole = 1,\n    //% block=\"1/2\"\n    Half = 2,\n    //% block=\"1/4\"\n    Quarter = 4,\n    //% block=\"1/8\"\n    Eighth = 8,\n    //% block=\"1/16\"\n    Sixteenth = 16,\n    //% block=\"2\"\n    Double = 32,\n    //% block=\"4\",\n    Breve = 64,\n    //% block=\"1/3\",\n    Triplet = 128\n}\n\nnamespace music {\n\n    let beatsPerMinute: number;\n\n    /**\n    * Play a tone.\n    * @param frequency pitch of the tone to play in Hertz (Hz), eg: Note.C\n    */\n    //% help=music/ring-tone\n    //% blockId=music_ring block=\"ring tone|at %note=device_note\"\n    //% parts=\"headphone\" trackArgs=0\n    //% blockNamespace=music inBasicCategory=true\n    //% weight=75 blockGap=8\n    //% group=\"Tone\"\n    export function ringTone(frequency: number) {\n        playTone(frequency, 0);\n    }\n\n    /**\n    * Rest, or play silence, for some time (in milliseconds).\n    * @param ms rest duration in milliseconds (ms), eg: BeatFraction.Half\n    */\n    //% help=music/rest\n    //% blockId=music_rest block=\"rest|for %duration=device_beat\"\n    //% parts=\"headphone\" trackArgs=0\n    //% blockNamespace=music\n    //% weight=74\n    //% group=\"Tone\"\n    export function rest(ms: number) {\n        playTone(0, Math.max(ms, 20));\n    }\n\n    function init() {\n        if (!beatsPerMinute) beatsPerMinute = 120;\n    }\n\n    /**\n     * Return the duration of a beat in milliseconds (the beat fraction).\n     * @param fraction the fraction of the current whole note, eg: BeatFraction.Half\n     */\n    //% help=music/beat\n    //% blockId=device_beat block=\"%fraction|beat\"\n    //% weight=9 blockGap=8\n    //% group=\"Tempo\"\n    export function beat(fraction?: BeatFraction): number {\n        init();\n        if (fraction == null) fraction = BeatFraction.Whole;\n        let beat = 60000 / beatsPerMinute;\n        switch (fraction) {\n            case BeatFraction.Half: beat /= 2; break;\n            case BeatFraction.Quarter: beat /= 4; break;\n            case BeatFraction.Eighth: beat /= 8; break;\n            case BeatFraction.Sixteenth: beat /= 16; break;\n            case BeatFraction.Double: beat *= 2; break;\n            case BeatFraction.Breve: beat *= 4; break;\n            case BeatFraction.Triplet: beat /= 3; break;\n        }\n        return beat >> 0;\n    }\n\n    /**\n     * Return the tempo in beats per minute (bpm).\n     * Tempo is the speed (bpm = beats per minute) at which notes play. The larger the tempo value, the faster the notes will play.\n     */\n    //% help=music/tempo\n    //% blockId=device_tempo block=\"tempo (bpm)\"\n    //% weight=64\n    //% group=\"Tempo\"\n    export function tempo(): number {\n        init();\n        return beatsPerMinute;\n    }\n\n    /**\n     * Change the tempo up or down by some amount of beats per minute (bpm).\n     * @param bpm The change in beats per minute to the tempo, eg: 20\n     */\n    //% help=music/change-tempo-by weight=37\n    //% blockId=device_change_tempo block=\"change tempo by %value|(bpm)\"\n    //% weight=66 blockGap=8\n    //% group=\"Tempo\"\n    export function changeTempoBy(bpm: number): void {\n        init();\n        setTempo(beatsPerMinute + bpm);\n    }\n\n    /**\n     * Set the tempo a number of beats per minute (bpm).\n     * @param bpm The new tempo in beats per minute, eg: 120\n     */\n    //% help=music/set-tempo\n    //% blockId=device_set_tempo block=\"set tempo to %value|(bpm)\"\n    //% bpm.min=4 bpm.max=400\n    //% weight=65 blockGap=8\n    //% group=\"Tempo\"\n    export function setTempo(bpm: number): void {\n        init();\n        if (bpm > 0) {\n            beatsPerMinute = Math.max(1, bpm >> 0);\n        }\n    }\n}\n",
            "ns.ts": "\n/**\n * Generation of music tones.\n */\n//% color=#E30FC0 weight=90 icon=\"\\uf025\"\n//% blockGap=8\n//% groups='[\"Sounds\", \"Melody\", \"Tone\",  \"Volume\", \"Tempo\"]'\nnamespace music {\n}",
            "piano.ts": "namespace music {\n    /**\n     * Get the frequency of a note.\n     * @param name the note name, eg: Note.C\n     */\n    //% weight=1 help=music/note-frequency\n    //% blockId=device_note block=\"%note\"\n    //% shim=TD_ID\n    //% color=\"#FFFFFF\" colorSecondary=\"#FFFFFF\" colorTertiary=\"#D83B01\"\n    //% note.fieldEditor=\"note\" note.defl=\"262\"\n    //% note.fieldOptions.decompileLiterals=true\n    //% useEnumVal=1\n    //% weight=10 blockGap=8\n    //% group=\"Tone\"\n    export function noteFrequency(name: Note): number {\n        return name;\n    }\n}",
            "pxt.json": "{\n    \"name\": \"music\",\n    \"description\": \"The music library\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"music.cpp\",\n        \"enums.d.ts\",\n        \"shims.d.ts\",\n        \"melodies.ts\",\n        \"music.ts\",\n        \"piano.ts\",\n        \"ns.ts\",\n        \"headphone.svg\",\n        \"pxtparts.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "pxtparts.json": "{\n  \"headphone\": {\n    \"numberOfPins\": 2,\n    \"visual\": {\n      \"image\": \"headphone.svg\",\n      \"width\": 142,\n      \"height\": 180,\n      \"pinDistance\": 20,\n      \"pinLocations\": [\n        {\n          \"x\": 17,\n          \"y\": 11\n        },\n        {\n          \"x\": 55,\n          \"y\": 50\n        }\n      ]\n    },\n    \"pinDefinitions\": [\n      {\n        \"target\": \"D3\",\n        \"style\": \"croc\",\n        \"orientation\": \"Y\"\n      },\n      {\n        \"target\": \"ground\",\n        \"style\": \"croc\",\n        \"orientation\": \"Y\"\n      }\n    ],\n    \"instantiation\": {\n      \"kind\": \"singleton\"\n    },\n    \"assembly\": [\n      {\n        \"part\": true,\n        \"pinIndices\": [0]\n      },\n      {\n        \"pinIndices\": [1]\n      }\n    ]\n  }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace music {\n\n    /**\n     * Play a tone through the speaker for some amount of time.\n     * @param frequency pitch of the tone to play in Hertz (Hz), eg: Note.C\n     * @param ms tone duration in milliseconds (ms), eg: BeatFraction.Half\n     */\n    //% help=music/play-tone\n    //% blockId=music_play_note block=\"play tone|at %note=device_note|for %duration=device_beat\"\n    //% parts=\"headphone\" async\n    //% blockNamespace=music\n    //% weight=76 blockGap=8 shim=music::playTone\n    function playTone(frequency: int32, ms: int32): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "test.ts": "for(let i = 1000; i > 0; i -= 50)\n    music.playTone(440, i)\n\nfor(let i = 0; i < 1000; i += 20)\n    music.playTone(440, i)\n"
        },
        "serial": {
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum BaudRate {\n    //% block=115200\n    BaudRate115200 = 115200,\n    //% block=57600\n    BaudRate57600 = 57600,\n    //% block=38400\n    BaudRate38400 = 38400,\n    //% block=31250\n    BaudRate31250 = 31250,\n    //% block=28800\n    BaudRate28800 = 28800,\n    //% block=19200\n    BaudRate19200 = 19200,\n    //% block=14400\n    BaudRate14400 = 14400,\n    //% block=9600\n    BaudRate9600 = 9600,\n    //% block=4800\n    BaudRate4800 = 4800,\n    //% block=2400\n    BaudRate2400 = 2400,\n    //% block=1200\n    BaudRate1200 = 1200,\n    //% block=300\n    BaudRate300 = 300,\n    }\n\n\n    declare const enum SerialEvent {\n    //% block=\"data received\"\n    DataReceived = 4,  // CODAL_SERIAL_EVT_DATA_RECEIVED\n    //% block=\"rx buffer full\"\n    RxBufferFull = 3,  // CODAL_SERIAL_EVT_RX_FULL\n    }\n\n\n    declare const enum Delimiters {\n    //% block=\"new line (\\n)\"\n    NewLine = 10,\n    //% block=\",\"\n    Comma = 44,\n    //% block=\"$\"\n    Dollar = 36,\n    //% block=\":\"\n    Colon = 58,\n    //% block=\".\"\n    Fullstop = 46,\n    //% block=\"#\"\n    Hash = 35,\n    //% block=\"carriage return (\\r)\"\n    CarriageReturn = 13,\n    //% block=\"space\"\n    Space = 32,\n    //% block=\"tab (\\t)\"\n    Tab = 9,\n    //% block=\"|\"\n    Pipe = 124,\n    //% block=\";\"\n    SemiColon = 59,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "pxt.json": "{\n    \"name\": \"serial\",\n    \"description\": \"UART communication\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"serial-target.h\",\n        \"serial-common.h\",\n        \"serial-target.cpp\",\n        \"serial-common.cpp\",\n        \"serial-target.ts\",\n        \"serial.ts\",\n        \"enums.d.ts\",\n        \"shims.d.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "serial-common.cpp": "#include \"pxt.h\"\n#include \"serial-target.h\"\n\nnamespace STMSerialDeviceMethods {\n/**\n * Sets the size of the RX buffer in bytes\n */\n//%\nvoid setRxBufferSize(Serial::STMSerialDevice device, uint8_t size) {\n    device->setRxBufferSize(size);\n}\n\n/**\n * Sets the size of the TX buffer in bytes\n */\n//%\nvoid setTxBufferSize(Serial::STMSerialDevice device, uint8_t size) {\n    device->setTxBufferSize(size);\n}\n\n/**\nSet the baud rate of the serial port\n*/\n//%\nvoid setBaudRate(Serial::STMSerialDevice device, BaudRate rate) {\n    device->setBaudRate((int)rate);\n}\n\n/**\n * Reads a single byte from the serial receive buffer. Negative if error, 0 if no data.\n */\n//%\nint read(Serial::STMSerialDevice device) {\n    return device->read();\n}\n\n/**\n * Read the buffered received data as a buffer\n */\n//%\nBuffer readBuffer(Serial::STMSerialDevice device) {\n    return device->readBuffer();\n}\n\n/**\n * Send a buffer across the serial connection.\n */\n//%\nvoid writeBuffer(Serial::STMSerialDevice device, Buffer buffer) {\n    device->writeBuffer(buffer);\n}\n\n/**\n * Register code when a serial event occurs\n */\n//%\nvoid onEvent(Serial::STMSerialDevice device, SerialEvent event, Action handler) {\n    device->onEvent(event, handler);\n}\n\n/**\n * Registers code when a delimiter is received\n **/\n//%\nvoid onDelimiterReceived(Serial::STMSerialDevice device, Delimiters delimiter, Action handler) {\n    device->onDelimiterReceived(delimiter, handler);\n}\n\n/**\n * Attach serial output to console\n *\n */\n//%\nvoid attachToConsole(Serial::STMSerialDevice device) {\n    return;\n}\n\n} // namespace STMSerialDeviceMethods\n",
            "serial-common.h": "#pragma once\n#include \"pxt.h\"\n#include \"serial-target.h\"\n\nenum class BaudRate {\n  //% block=115200\n  BaudRate115200 = 115200,\n  //% block=57600\n  BaudRate57600 = 57600,\n  //% block=38400\n  BaudRate38400 = 38400,\n  //% block=31250\n  BaudRate31250 = 31250,\n  //% block=28800\n  BaudRate28800 = 28800,\n  //% block=19200\n  BaudRate19200 = 19200,\n  //% block=14400\n  BaudRate14400 = 14400,\n  //% block=9600\n  BaudRate9600 = 9600,\n  //% block=4800\n  BaudRate4800 = 4800,\n  //% block=2400\n  BaudRate2400 = 2400,\n  //% block=1200\n  BaudRate1200 = 1200,\n  //% block=300\n  BaudRate300 = 300\n};\n\nenum class SerialEvent {\n    //% block=\"data received\"\n    DataReceived = CODAL_SERIAL_EVT_DATA_RECEIVED,\n    //% block=\"rx buffer full\"\n    RxBufferFull = CODAL_SERIAL_EVT_RX_FULL\n};\n\nenum class Delimiters {\n    //% block=\"new line (\\n)\"\n    NewLine = 10,\n    //% block=\",\"\n    Comma = 44,\n    //% block=\"$\"\n    Dollar = 36,\n    //% block=\":\"\n    Colon = 58,\n    //% block=\".\"\n    Fullstop = 46,\n    //% block=\"#\"\n    Hash = 35,\n    //% block=\"carriage return (\\r)\"\n    CarriageReturn = 13,\n    //% block=\"space\"\n    Space = 32,\n    //% block=\"tab (\\t)\"\n    Tab = 9,\n    //% block=\"|\"\n    Pipe = 124,\n    //% block=\";\"\n    SemiColon = 59,\n};\n\n",
            "serial-target.cpp": "#include \"pxt.h\"\n#include \"serial-target.h\"\n\nnamespace Serial {\n\nstatic STMSerialDevice serialDevices(NULL);\n/**\n * Opens a Serial communication driver\n */\n//%\nSTMSerialDevice internalCreateSerialDevice(DigitalInOutPin tx, DigitalInOutPin rx, int id) {\n    auto dev = serialDevices;\n    while (dev) {\n        if (dev->matchPins(tx, rx))\n            return dev;\n        dev = dev->next;\n    }\n\n    // allocate new one\n    auto ser = new CodalSTMSerialDeviceProxy(tx, rx, id);\n    ser->next = serialDevices;\n    serialDevices = ser;\n    return ser;\n}\n\n} // namespace Serial\n\nnamespace STMSerialDeviceMethods {\n\n/**\n */\n//%\nvoid redirect(Serial::STMSerialDevice device, DigitalInOutPin tx, DigitalInOutPin rx, BaudRate rate) {\n    device->redirect(tx, rx, rate);\n}\n\n} // namespace STMSerialDeviceMethods\n",
            "serial-target.h": "#pragma once\n#include \"pxt.h\"\n#include \"Serial.h\"\n\nenum class SerialEvent;\nenum class BaudRate;\nenum class Delimiters;\n\nnamespace Serial {\n\nclass CodalSTMSerialDeviceProxy {\n  private:\n    DevicePin *tx;\n    DevicePin *rx;\n\n  public:\n    CODAL_SERIAL ser;\n    CodalSTMSerialDeviceProxy *next;\n\n    CodalSTMSerialDeviceProxy(DevicePin *_tx, DevicePin *_rx, uint16_t id) : tx(_tx), rx(_rx), ser(*tx, *rx), next(NULL) {\n        if (id <= 0)\n            id = allocateNotifyEvent();\n        ser.id = id;\n\n        ser.setRxBufferSize(64);\n        ser.setTxBufferSize(64);\n\n        ser.init(115200);\n    }\n\n    bool matchPins(DevicePin *_tx, DevicePin *_rx) { return this->tx == _tx && this->rx == _rx; }\n\n    void setRxBufferSize(uint8_t size) { ser.setRxBufferSize(size); }\n\n    void setTxBufferSize(uint8_t size) { ser.setTxBufferSize(size); }\n\n    void setBaudRate(int rate) { ser.setBaud(rate); }\n\n    int read() {\n        uint8_t buf[1];\n        auto r = ser.read(buf, 1, codal::SerialMode::ASYNC);\n        // r < 0 => error\n        if (r < 0)\n            return r;\n        // r == 0, nothing read\n        if (r == 0)\n            return DEVICE_NO_DATA;\n        // read 1 char\n        return buf[0];\n    }\n\n    Buffer readBuffer() {\n        int n = ser.getRxBufferSize();\n        // n maybe 0 but we still call read to force\n        // to initialize rx\n        auto buf = mkBuffer(NULL, n);\n        auto res = buf;\n        registerGCObj(buf);\n        auto read = ser.read(buf->data, buf->length, SerialMode::ASYNC);\n        if (read == DEVICE_SERIAL_IN_USE || read == 0) { // someone else is reading\n            res = mkBuffer(NULL, 0);\n        } else if (buf->length != read) {\n            res = mkBuffer(buf->data, read);\n        }\n        unregisterGCObj(buf);\n        return res;\n    }\n\n    void writeBuffer(Buffer buffer) {\n        if (NULL == buffer)\n            return;\n        ser.send(buffer->data, buffer->length);\n    }\n\n    void redirect(DevicePin *tx, DevicePin *rx, BaudRate rate) {\n        this->tx = tx;\n        this->rx = rx;\n        this->ser.redirect(*tx, *rx);\n        this->setBaudRate((int)rate);\n    }\n\n    void onEvent(SerialEvent event, Action handler) {\n        ser.setRxBufferSize(ser.getRxBufferSize()); // turn on reading\n        registerWithDal(ser.id, (int)event, handler);\n    }\n\n    void onDelimiterReceived(Delimiters delimiter, Action handler) {\n        registerWithDal(ser.id, CODAL_SERIAL_EVT_DELIM_MATCH, handler);\n        ManagedString d((char)delimiter);\n        ser.eventOn(d);\n    }\n};\n\ntypedef CodalSTMSerialDeviceProxy *STMSerialDevice;\n\n} // namespace Serial\n",
            "serial-target.ts": "namespace Serial {\n    /**\n     * Creates a serial comm device\n     * @param tx \n     * @param rx \n     * @param id \n     */\n    //% help=serial/create-serial\n    //% parts=serial\n    export function createSerial(tx: DigitalInOutPin, rx: DigitalInOutPin, id?: number): SerialWrapper {\n        const dev = Serial.internalCreateSerialDevice(tx, rx, id || 0);\n        return new SerialWrapper(dev);\n    }\n\n    let _device: SerialWrapper;\n    export function device(): SerialWrapper {\n        if (!_device) {\n            const tx = pins.pinByCfg(DAL.CFG_PIN_TX);\n            const rx = pins.pinByCfg(DAL.CFG_PIN_RX);\n            if (!tx || !rx) return undefined;\n            _device = Serial.createSerial(tx, rx, DAL.DEVICE_ID_SERIAL);\n        }\n        return _device;\n    }\n\n\n    /**\n    * Set the serial input and output to use pins instead of the USB connection.\n    * @param tx the new transmission pin\n    * @param rx the new reception pin\n    * @param rate the new baud rate\n    */\n    //% weight=10\n    //% help=serial/redirect\n    //% blockId=serial_redirect block=\"serial|redirect to|TX %tx|RX %rx at rate %rate\"\n    //% tx.fieldEditor=\"gridpicker\" tx.fieldOptions.columns=3\n    //% tx.fieldOptions.tooltips=\"false\"\n    //% rx.fieldEditor=\"gridpicker\" rx.fieldOptions.columns=3\n    //% rx.fieldOptions.tooltips=\"false\"\n    //% blockGap=8 inlineInputMode=inline\n    //% group=\"Configuration\"\n    export function redirect(tx: DigitalInOutPin, rx: DigitalInOutPin, rate: BaudRate) {\n        const ser = device();\n        if (ser)\n            ser.serialDevice.redirect(tx, rx, rate);\n    }\n}\n",
            "serial.ts": "/**\n * Reading and writing data over a serial connection.\n */\n//% weight=2 color=#002050 icon=\"\\uf287\"\n//% advanced=true blockGap=8\n//% groups='[\"Write\", \"Read\", \"Events\", \"Configuration\"]'\n//% block=\"serial\"\nnamespace Serial {\n    export let NEW_LINE = \"\\r\\n\"; // \\r require or Putty really unhappy on windows\n    export let NEW_LINE_DELIMITER: Delimiters = Delimiters.NewLine;\n\n    export class SerialWrapper {\n        serialDevice: STMSerialDevice;\n        decoder: UTF8Decoder;\n        constructor(serialDevice: STMSerialDevice) {\n            this.serialDevice = serialDevice;\n            this.decoder = new UTF8Decoder();\n        }\n\n        readString(): string {\n            const buf = this.serialDevice.readBuffer();\n            this.decoder.add(buf);\n            return this.decoder.decode();\n        }\n\n        readLine(timeOut?: number): string {\n            return this.readUntil(NEW_LINE_DELIMITER, timeOut);\n        }\n\n        readUntil(delimiter: Delimiters, timeOut?: number): string {\n            const start = control.millis();\n            do {\n                const s = this.decoder.decodeUntil(delimiter);\n                if (s !== undefined)\n                    return s;\n                const b = this.serialDevice.readBuffer()\n                this.decoder.add(b);\n                pause(1);\n            }\n            while (timeOut === undefined || (control.millis() - start < timeOut));\n            // giving up\n            return \"\";\n        }\n\n        writeString(text: string) {\n            if (!text) return;\n            const buf = control.createBufferFromUTF8(text);\n            this.serialDevice.writeBuffer(buf);\n        }\n\n        writeLine(text: string) {\n            this.writeString(text);\n            this.writeString(Serial.NEW_LINE);\n        }\n    }\n\n    /**\n    * Read the buffered received data as a string\n    */\n    //% help=serial/read-string\n    //% blockId=serial_read_string block=\"serial|read string\"\n    //% weight=18\n    //% group=\"Read\"\n    export function readString(): string {\n        const d = device();\n        return d ? d.readString() : \"\";\n    }\n\n    /**\n     * Read a line of text from the serial port.\n     */\n    //% help=serial/read-line\n    //% blockId=serial_read_line block=\"serial|read line\"\n    //% weight=20 blockGap=8\n    //% group=\"Read\"\n    export function readLine(): string {\n        const d = device();\n        return d ? d.readLine() : \"\";\n    }\n\n    /**\n     * Read a line of text from the serial port and return the buffer when the delimiter is met.\n     * @param delimiter text delimiter that separates each text chunk\n     */\n    //% help=serial/read-until\n    //% blockId=serial_read_until block=\"serial|read until %delimiter=serial_delimiter_conv\"\n    //% weight=19\n    //% group=\"Read\"    \n    export function readUntil(delimiter: Delimiters, timeOut?: number): string {\n        const d = device();\n        return d ? d.readUntil(delimiter, timeOut) : \"\";\n    }\n\n    /**\n     * Write some text to the serial port.\n     */\n    //% help=serial/write-string\n    //% weight=87\n    //% blockId=serial_writestring block=\"serial|write string %text\"\n    //% group=\"Write\"\n    export function writeString(text: string) {\n        const d = device();\n        if (d) d.writeString(text);\n    }\n\n    /**\n     * Write a line of text to the serial port.\n     * @param value to send over serial\n     */\n    //% weight=90\n    //% help=serial/write-line blockGap=8\n    //% blockId=serial_writeline block=\"serial|write line %text\"\n    //% group=\"Write\"\n    export function writeLine(text: string): void {\n        const d = device();\n        if (d) d.writeLine(text);\n    }\n\n    /**\n     * Write a number to the serial port.\n     */\n    //% help=serial/write-number\n    //% weight=89 blockGap=8\n    //% blockId=serial_writenumber block=\"serial|write number %value\"\n    //% group=\"Write\"\n    export function writeNumber(value: number): void {\n        writeString(value.toString());\n    }\n\n    /**\n     * Write a name:value pair as a line of text to the serial port.\n     * @param name name of the value stream, eg: \"x\"\n     * @param value to write\n     */\n    //% weight=88 blockGap=8\n    //% help=serial/write-value\n    //% blockId=serial_writevalue block=\"serial|write value %name|= %value\"\n    //% group=\"Write\"\n    export function writeValue(name: string, value: number): void {\n        if (name) {\n            writeString(name);\n            writeString(\":\");\n        }\n        writeNumber(value);\n        writeString(NEW_LINE);\n    }\n\n    /**\n    * Sets the size of the RX buffer in bytes\n    */\n    //% help=serial/set-rx-buffer-size\n    //% blockId=serialsetrxbuffersize block=\"serial set rx buffer size to $size\"\n    //% weight=10\n    //% group=\"Configuration\"\n    export function setRxBufferSize(size: number) {\n        const ser = device();\n        if (ser)\n            ser.serialDevice.setRxBufferSize(size);\n    }\n\n    /**\n    * Sets the size of the TX buffer in bytes\n    */\n    //% help=serial/set-tx-buffer-size\n    //% blockId=serialsettxbuffersize block=\"serial set tx buffer size to $size\"\n    //% weight=9\n    //% group=\"Configuration\"\n    export function setTxBufferSize(size: number) {\n        const ser = device();\n        if (ser)\n            ser.serialDevice.setTxBufferSize(size);\n    }\n\n    /**\n    * Reads a single byte from the serial receive buffer. Negative if error, 0 if no data.\n    */\n    //% Group=\"Read\"\n    export function read(): number {\n        const ser = device();\n        if (ser)\n            return ser.serialDevice.read();\n        else return DAL.DEVICE_NOT_SUPPORTED;\n    }\n\n    /**\n    * Read the buffered received data as a buffer\n    */\n    //% help=serial/read-buffer\n    //% blockId=serial_read_buffer block=\"serial|read buffer\"\n    //% weight=17\n    //% group=\"Read\"\n    export function readBuffer(): Buffer {\n        const ser = device();\n        if (ser)\n            return ser.serialDevice.readBuffer();\n        else\n            return control.createBuffer(0);\n    }\n\n\n    /**\n    * Send a buffer across the serial connection.\n    */\n    //% help=serial/write-buffer weight=6\n    //% blockId=serial_writebuffer block=\"serial|write buffer %buffer\"\n    //% group=\"Write\"\n    export function writeBuffer(buffer: Buffer) {\n        const ser = device();\n        if (ser)\n            ser.serialDevice.writeBuffer(buffer);\n    }\n\n    /**\n    Set the baud rate of the serial port\n    */\n    //% weight=10\n    //% blockId=serial_setbaudrate block=\"serial|set baud rate %rate\"\n    //% blockGap=8 inlineInputMode=inline\n    //% help=serial/set-baud-rate\n    //% group=\"Configuration\"\n    export function setBaudRate(rate: BaudRate) {\n        const ser = device();\n        if (ser)\n            ser.serialDevice.setBaudRate(rate);\n    }\n\n    /**\n      Send console messages through the TX, RX pins\n      **/\n    //% blockId=serialsendtoconsole block=\"serial attach to console\"\n    //% group=\"Configuration\"\n    //% help=serial/attach-to-console\n    export function attachToConsole() {\n        const ser = device();\n        if(ser)\n            ser.serialDevice.attachToConsole();\n    }\n\n\n\n    /**\n    * Registers code when serial events happen\n    **/\n    //% weight=9\n    //% help=serial/on-event\n    //% blockId=serial_onevent block=\"serial on %event\"\n    //% blockGap=8\n    //% group=\"Events\"\n    export function onEvent(event: SerialEvent, handler: () => void) {\n        const ser = device();\n        if (ser)\n            ser.serialDevice.onEvent(event, handler);\n    }\n\n    /**\n    * Registers code when a delimiter is received\n    **/\n    //% weight=10\n    //% help=serial/on-delimiter-received\n    //% blockId=serial_ondelimiter block=\"serial on delimiter $delimiter received\"\n    //% blockGap=8\n    //% group=\"Events\"\n    export function onDelimiterReceived(delimiter: Delimiters, handler: () => void) {\n        const ser = device();\n        if (ser)\n            ser.serialDevice.onDelimiterReceived(delimiter, handler);\n    }\n\n    /**\n     * Return the corresponding delimiter string\n     */\n    //% blockId=\"serial_delimiter_conv\" block=\"%del\"\n    //% weight=1 blockHidden=true hidden=true\n    export function delimiters(del: Delimiters): string {\n        return String.fromCharCode(del as number);\n    }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace Serial {\n\n    /**\n     * Opens a Serial communication driver\n     */\n    //% shim=Serial::internalCreateSerialDevice\n    function internalCreateSerialDevice(tx: DigitalInOutPin, rx: DigitalInOutPin, id: int32): STMSerialDevice;\n}\n\n\ndeclare interface STMSerialDevice {\n    /**\n     */\n    //% shim=STMSerialDeviceMethods::redirect\n    redirect(tx: DigitalInOutPin, rx: DigitalInOutPin, rate: BaudRate): void;\n}\n\n\ndeclare interface STMSerialDevice {\n    /**\n     * Sets the size of the RX buffer in bytes\n     */\n    //% shim=STMSerialDeviceMethods::setRxBufferSize\n    setRxBufferSize(size: uint8): void;\n\n    /**\n     * Sets the size of the TX buffer in bytes\n     */\n    //% shim=STMSerialDeviceMethods::setTxBufferSize\n    setTxBufferSize(size: uint8): void;\n\n    /**\n    Set the baud rate of the serial port\n     */\n    //% shim=STMSerialDeviceMethods::setBaudRate\n    setBaudRate(rate: BaudRate): void;\n\n    /**\n     * Reads a single byte from the serial receive buffer. Negative if error, 0 if no data.\n     */\n    //% shim=STMSerialDeviceMethods::read\n    read(): int32;\n\n    /**\n     * Read the buffered received data as a buffer\n     */\n    //% shim=STMSerialDeviceMethods::readBuffer\n    readBuffer(): Buffer;\n\n    /**\n     * Send a buffer across the serial connection.\n     */\n    //% shim=STMSerialDeviceMethods::writeBuffer\n    writeBuffer(buffer: Buffer): void;\n\n    /**\n     * Register code when a serial event occurs\n     */\n    //% shim=STMSerialDeviceMethods::onEvent\n    onEvent(event: SerialEvent, handler: () => void): void;\n\n    /**\n     * Registers code when a delimiter is received\n     **/\n    //% shim=STMSerialDeviceMethods::onDelimiterReceived\n    onDelimiterReceived(delimiter: Delimiters, handler: () => void): void;\n\n    /**\n     * Attach serial output to console\n     *\n     */\n    //% shim=STMSerialDeviceMethods::attachToConsole\n    attachToConsole(): void;\n}\n\n// Auto-generated. Do not edit. Really.\n"
        },
        "lcd": {
            "README.md": "# lcd\n\nPorted from STM32 lcd Support.\n",
            "lcd.cpp": "#include \"pxt.h\"\n#include \"target_lcd.h\"\n\nnamespace pxt {\nSINGLETON(WLCD);\n}\n\nnamespace lcd {\nuint8_t unpackR(uint32_t rgb) {\n    uint8_t r = (rgb >> 16) & 0xFF;\n    return r;\n}\nuint8_t unpackG(uint32_t rgb) {\n    uint8_t g = (rgb >> 8) & 0xFF;\n    return g;\n}\nuint8_t unpackB(uint32_t rgb) {\n    uint8_t b = (rgb >> 0) & 0xFF;\n    return b;\n}\n\n/**\n * Set cursor position at given position\n * @param x is lcd column position, eg: 0\n * @param y is lcd row position, eg: 0\n */\n//% blockId=\"LCD_SET_CURSOR\"\n//% block=\"set cursor position |at x %x|y %y\"\n//% weight=89\n//% blockGap=8\n//% x.min=0 x.max=15\n//% y.min=0 y.max=1\n//% parts=lcd trackArgs=0\nvoid setCursor(uint8_t x, uint8_t y) {\n    getWLCD()->lcd.setCursor(x, y);\n}\n\n/**\n * Show a number in lcd at given position\n * @param n is number will be show, eg: 10, 100, 200\n */\n//% blockId=\"LCD_SHOW_NUMBER\"\n//% block=\"show number %n\"\n//% weight=90\n//% blockGap=8\n//% parts=lcd trackArgs=0\nvoid ShowNumber(int n) {\n    getWLCD()->lcd.print(n);\n}\n\n/**\n * Show a string in lcd at given position\n * @param s is string will be show, eg: \"Hello\"\n */\n//% blockId=\"LCD_SHOW_STRING\"\n//% block=\"show string %s\"\n//% weight=90\n//% blockGap=8\n//% parts=lcd trackArgs=0\nvoid ShowString(String s) {\n    getWLCD()->lcd.print(s->getUTF8Data());\n}\n\n/**\n * Show a name:value pair in lcd at given position\n * @param name : a string that is the name part of the name:value pair, eg: \"x\"\n * @param value : a number that is the value part of the name:value pair, eg: 0\n */\n//% blockId=\"LCD_SHOW_VALUE\"\n//% block=\"show value %name = %value\"\n//% weight=90\n//% blockGap=8\n//% parts=lcd trackArgs=0\nvoid ShowValue(String name, int value) {\n    getWLCD()->lcd.print(name->getUTF8Data());\n    getWLCD()->lcd.print(':');\n    getWLCD()->lcd.print(value);\n}\n\n/**\n * Clear all display content\n */\n//% blockId=\"LCD_CLEAR\"\n//% block=\"clear screen\"\n//% weight=85\n//% blockGap=8\n//% parts=lcd trackArgs=0\nvoid clear() {\n    getWLCD()->lcd.clear();\n}\n\n/**\n * Set lcd backlight color\n *\n * @param rgb RGB color of the backlight LED\n */\n//% blockId=\"LCD_BACKLIGHT_COLOR\"\n//% block=\"set backlight color %rgb=colorNumberPicker\"\n//% weight=69\n//% blockGap=8\n//% group=\"Backlight\"\n//% parts=lcd trackArgs=0\nvoid SetBacklightColor(uint32_t rgb) {\n    uint8_t r = unpackR(rgb);\n    uint8_t g = unpackG(rgb);\n    uint8_t b = unpackB(rgb);\n    getWLCD()->lcd.setRGB(r, g, b);\n}\n\n/**\n * Turn on lcd backlight\n */\n//% blockId=\"LCD_BACKLIGHT_ON\"\n//% block=\"turn on backlight\"\n//% group=\"Backlight\"\n//% weight=71\n//% blockGap=8\n//% parts=lcd trackArgs=0\nvoid BacklightOn() {\n    getWLCD()->lcd.setColorWhite();\n}\n\n/**\n * Turn off lcd backlight\n */\n//% blockId=\"LCD_BACKLIGHT_OFF\"\n//% block=\"turn off backlight\"\n//% group=\"Backlight\"\n//% weight=70\n//% blockGap=8\n//% parts=lcd trackArgs=0\nvoid BacklightOff() {\n    getWLCD()->lcd.setColorAll();\n}\n\n/**\n * Show a number in lcd at given position\n * @param n is number will be show, eg: 10, 100, 200\n * @param x is lcd column position, eg: 0\n * @param y is lcd row position, eg: 0\n */\n//% blockId=\"LCD_SHOW_NUMBER_AT_POS\"\n//% block=\"show number %n|at x %x|y %y\"\n//% group=\"More\"\n//% weight=10\n//% blockGap=8\n//% x.min=0 x.max=15\n//% y.min=0 y.max=1\n//% parts=lcd trackArgs=0\nvoid ShowNumberAtPos(int n, uint8_t x, uint8_t y) {\n    getWLCD()->lcd.setCursor(x, y);\n    ShowNumber(n);\n}\n\n/**\n * Show a string in lcd at given position\n * @param s is string will be show, eg: \"Hello\"\n * @param x is lcd column position, [0 - 15], eg: 0\n * @param y is lcd row position, [0 - 1], eg: 0\n */\n//% blockId=\"LCD_SHOW_STRING_AT_POS\"\n//% block=\"show string %s|at x %x|y %y\"\n//% group=\"More\"\n//% weight=10\n//% blockGap=8\n//% x.min=0 x.max=15\n//% y.min=0 y.max=1\n//% parts=lcd trackArgs=0\nvoid ShowStringAtPos(String s, uint8_t x, uint8_t y) {\n    getWLCD()->lcd.setCursor(x, y);\n    ShowString(s);\n}\n} // namespace lcd",
            "ns.ts": "/**\n * Character lcd support\n */\n//% icon=\"\\uf0ae\" color=\"#219E42\" blockGap=8\n//% groups='[\"Display\", \"Configuration\"]'\nnamespace lcd {\n\n}",
            "pxt.json": "{\n    \"name\": \"lcd\",\n    \"description\": \"Support for I2C Characeter LCD display with RGB backlight\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"lcd.cpp\",\n        \"pxtparts.json\",\n        \"shims.d.ts\",\n        \"target_lcd.h\",\n        \"ns.ts\"\n    ],\n    \"public\": \"true\",\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "pxtparts.json": "{\n  \"lcd\": {\n    \"simulationBehavior\": \"lcd\",\n    \"visual\": {\n      \"builtIn\": \"lcd\",\n      \"width\": 322.7900085449219,\n      \"height\": 129.2734832763672,\n      \"pinDistance\": 15,\n      \"pinLocations\": [\n        {\n          \"x\": 10,\n          \"y\": 8.037069860858837\n        },\n        {\n          \"x\": 25,\n          \"y\": 8.037069860858837\n        },\n        {\n          \"x\": 40,\n          \"y\": 8.037069860858837\n        },\n        {\n          \"x\": 55,\n          \"y\": 8.037069860858837\n        }\n      ]\n    },\n    \"numberOfPins\": 4,\n    \"instantiation\": {\n      \"kind\": \"singleton\"\n    },\n    \"pinDefinitions\": [\n      {\n        \"target\": \"ground\",\n        \"style\": \"male\",\n        \"orientation\": \"-Z\"\n      },\n      {\n        \"target\": \"threeVolt\",\n        \"style\": \"male\",\n        \"orientation\": \"-Z\"\n      },\n      {\n        \"target\": \"SDA\",\n        \"style\": \"male\",\n        \"orientation\": \"-Z\"\n      },\n      {\n        \"target\": \"SCL\",\n        \"style\": \"male\",\n        \"orientation\": \"-Z\"\n      }\n    ],\n    \"assembly\": [\n      { \"part\": true },\n      { \"pinIndices\": [0] },\n      { \"pinIndices\": [1] },\n      { \"pinIndices\": [2, 3] }\n    ]\n  }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace lcd {\n\n    /**\n     * Set cursor position at given position\n     * @param x is lcd column position, eg: 0\n     * @param y is lcd row position, eg: 0\n     */\n    //% blockId=\"LCD_SET_CURSOR\"\n    //% block=\"set cursor position |at x %x|y %y\"\n    //% weight=89\n    //% blockGap=8\n    //% x.min=0 x.max=15\n    //% y.min=0 y.max=1\n    //% parts=lcd trackArgs=0 shim=lcd::setCursor\n    function setCursor(x: uint8, y: uint8): void;\n\n    /**\n     * Show a number in lcd at given position\n     * @param n is number will be show, eg: 10, 100, 200\n     */\n    //% blockId=\"LCD_SHOW_NUMBER\"\n    //% block=\"show number %n\"\n    //% weight=90\n    //% blockGap=8\n    //% parts=lcd trackArgs=0 shim=lcd::ShowNumber\n    function ShowNumber(n: int32): void;\n\n    /**\n     * Show a string in lcd at given position\n     * @param s is string will be show, eg: \"Hello\"\n     */\n    //% blockId=\"LCD_SHOW_STRING\"\n    //% block=\"show string %s\"\n    //% weight=90\n    //% blockGap=8\n    //% parts=lcd trackArgs=0 shim=lcd::ShowString\n    function ShowString(s: string): void;\n\n    /**\n     * Show a name:value pair in lcd at given position\n     * @param name : a string that is the name part of the name:value pair, eg: \"x\"\n     * @param value : a number that is the value part of the name:value pair, eg: 0\n     */\n    //% blockId=\"LCD_SHOW_VALUE\"\n    //% block=\"show value %name = %value\"\n    //% weight=90\n    //% blockGap=8\n    //% parts=lcd trackArgs=0 shim=lcd::ShowValue\n    function ShowValue(name: string, value: int32): void;\n\n    /**\n     * Clear all display content\n     */\n    //% blockId=\"LCD_CLEAR\"\n    //% block=\"clear screen\"\n    //% weight=85\n    //% blockGap=8\n    //% parts=lcd trackArgs=0 shim=lcd::clear\n    function clear(): void;\n\n    /**\n     * Set lcd backlight color\n     *\n     * @param rgb RGB color of the backlight LED\n     */\n    //% blockId=\"LCD_BACKLIGHT_COLOR\"\n    //% block=\"set backlight color %rgb=colorNumberPicker\"\n    //% weight=69\n    //% blockGap=8\n    //% group=\"Backlight\"\n    //% parts=lcd trackArgs=0 shim=lcd::SetBacklightColor\n    function SetBacklightColor(rgb: uint32): void;\n\n    /**\n     * Turn on lcd backlight\n     */\n    //% blockId=\"LCD_BACKLIGHT_ON\"\n    //% block=\"turn on backlight\"\n    //% group=\"Backlight\"\n    //% weight=71\n    //% blockGap=8\n    //% parts=lcd trackArgs=0 shim=lcd::BacklightOn\n    function BacklightOn(): void;\n\n    /**\n     * Turn off lcd backlight\n     */\n    //% blockId=\"LCD_BACKLIGHT_OFF\"\n    //% block=\"turn off backlight\"\n    //% group=\"Backlight\"\n    //% weight=70\n    //% blockGap=8\n    //% parts=lcd trackArgs=0 shim=lcd::BacklightOff\n    function BacklightOff(): void;\n\n    /**\n     * Show a number in lcd at given position\n     * @param n is number will be show, eg: 10, 100, 200\n     * @param x is lcd column position, eg: 0\n     * @param y is lcd row position, eg: 0\n     */\n    //% blockId=\"LCD_SHOW_NUMBER_AT_POS\"\n    //% block=\"show number %n|at x %x|y %y\"\n    //% group=\"More\"\n    //% weight=10\n    //% blockGap=8\n    //% x.min=0 x.max=15\n    //% y.min=0 y.max=1\n    //% parts=lcd trackArgs=0 shim=lcd::ShowNumberAtPos\n    function ShowNumberAtPos(n: int32, x: uint8, y: uint8): void;\n\n    /**\n     * Show a string in lcd at given position\n     * @param s is string will be show, eg: \"Hello\"\n     * @param x is lcd column position, [0 - 15], eg: 0\n     * @param y is lcd row position, [0 - 1], eg: 0\n     */\n    //% blockId=\"LCD_SHOW_STRING_AT_POS\"\n    //% block=\"show string %s|at x %x|y %y\"\n    //% group=\"More\"\n    //% weight=10\n    //% blockGap=8\n    //% x.min=0 x.max=15\n    //% y.min=0 y.max=1\n    //% parts=lcd trackArgs=0 shim=lcd::ShowStringAtPos\n    function ShowStringAtPos(s: string, x: uint8, y: uint8): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "target_lcd.h": "#include \"pxt.h\"\n#include \"STM32I2C.h\"\n#include \"rgb_lcd.h\"\n\nnamespace pxt {\nclass WLCD {\n  public:\n    codal::STM32I2C i2c;\n    codal::rgb_lcd lcd;\n    WLCD() : i2c(*LOOKUP_PIN(SDA), *LOOKUP_PIN(SCL)), lcd(i2c, 16, 2) { lcd.init(); }\n};\n} // namespace pxt"
        },
        "accelerometer---lsm6dsl": {
            "accelerometer.cpp": "#include \"CoordinateSystem.h\"\n#include \"I2C.h\"\n#include \"Pin.h\"\n#include \"axis.h\"\n#include \"pxt.h\"\n#include \"target_accelerometer.h\"\n#include \"target_compass.h\"\n#include \"target_gyroscope.h\"\n\nenum class Dimension {\n    //% block=x\n    X = 0,\n    //% block=y\n    Y = 1,\n    //% block=z\n    Z = 2,\n    //% block=strength\n    Strength = 3,\n};\n\nenum class Rotation {\n    //% block=pitch\n    Pitch = 0,\n    //% block=roll\n    Roll = 1,\n};\n\nenum class AcceleratorRange {\n    /**\n     * The accelerator measures forces up to 1 gravity\n     */\n    //%  block=\"1g\"\n    OneG = 1,\n    /**\n     * The accelerator measures forces up to 2 gravity\n     */\n    //%  block=\"2g\"\n    TwoG = 2,\n    /**\n     * The accelerator measures forces up to 4 gravity\n     */\n    //% block=\"4g\"\n    FourG = 4,\n    /**\n     * The accelerator measures forces up to 8 gravity\n     */\n    //% block=\"8g\"\n    EightG = 8\n};\n\nenum class Gesture {\n    /**\n     * Raised when shaken\n     */\n    //% block=shake\n    Shake = ACCELEROMETER_EVT_SHAKE,\n    /**\n     * Raised when the device tilts up\n     */\n    //% block=\"tilt up\"\n    TiltUp = ACCELEROMETER_EVT_TILT_UP,\n    /**\n     * Raised when the device tilts down\n     */\n    //% block=\"tilt down\"\n    TiltDown = ACCELEROMETER_EVT_TILT_DOWN,\n    /**\n     * Raised when the screen is pointing left\n     */\n    //% block=\"tilt left\"\n    TiltLeft = ACCELEROMETER_EVT_TILT_LEFT,\n    /**\n     * Raised when the screen is pointing right\n     */\n    //% block=\"tilt right\"\n    TiltRight = ACCELEROMETER_EVT_TILT_RIGHT,\n    /**\n     * Raised when the screen faces up\n     */\n    //% block=\"face up\"\n    FaceUp = ACCELEROMETER_EVT_FACE_UP,\n    /**\n     * Raised when the screen is pointing up and the board is horizontal\n     */\n    //% block=\"face down\"\n    FaceDown = ACCELEROMETER_EVT_FACE_DOWN,\n    /**\n     * Raised when the board is falling!\n     */\n    //% block=\"free fall\"\n    FreeFall = ACCELEROMETER_EVT_FREEFALL,\n    /**\n     * Raised when a 3G shock is detected\n     */\n    //% block=\"3g\"\n    ThreeG = ACCELEROMETER_EVT_3G,\n    /**\n     * Raised when a 6G shock is detected\n     */\n    //% block=\"6g\"\n    SixG = ACCELEROMETER_EVT_6G,\n    /**\n     * Raised when a 8G shock is detected\n     */\n    //% block=\"8g\"\n    EightG = ACCELEROMETER_EVT_8G\n};\n\nnamespace pxt {\n\nSINGLETON(WAccel);\nSINGLETON(WCompas);\nSINGLETON(WGyro);\n} // namespace pxt\n\nnamespace input {\n/**\n * Do something when a gesture happens (like shaking the board).\n * @param gesture the type of gesture to track, eg: Gesture.Shake\n * @param body code to run when gesture is raised\n */\n//% help=input/on-gesture\n//% blockId=device_gesture_event block=\"on |%NAME\"\n//% parts=\"accelerometer\"\n//% gesture.fieldEditor=\"gridpicker\"\n//% gesture.fieldOptions.width=220\n//% gesture.fieldOptions.columns=3\n//% group=\"Movement\"\n//% weight=92 blockGap=12\nvoid onGesture(Gesture gesture, Action body) {\n    auto acc = getWAccel()->acc;\n    acc->requestUpdate();\n    int gi = (int)gesture;\n    if (gi == ACCELEROMETER_EVT_3G && acc->getRange() < 3)\n        acc->setRange(4);\n    else if ((gi == ACCELEROMETER_EVT_6G || gi == ACCELEROMETER_EVT_8G) && acc->getRange() < 6)\n        acc->setRange(8);\n    registerWithDal(DEVICE_ID_GESTURE, gi, body);\n}\n\nint getAccelerationStrength() {\n    auto acc = getWAccel()->acc;\n    float x = acc->getX();\n    float y = acc->getY();\n    float z = acc->getZ();\n    return (int)sqrtf(x * x + y * y + z * z);\n}\n\n/**\n * Get the acceleration value in milli-gravitys (when the board is laying flat with the screen up,\n * x=0, y=0 and z=-1023)\n * @param dimension TODO\n */\n//% help=input/acceleration\n//% blockId=device_acceleration block=\"acceleration (mg)|%NAME\"\n//% parts=\"accelerometer\"\n//% dimension.fieldEditor=\"gridpicker\"\n//% dimension.fieldOptions.width=180\n//% dimension.fieldOptions.columns=2\n//% group=\"Movement\"\n//% weight=42 blockGap=8\nint acceleration(Dimension dimension) {\n    switch (dimension) {\n    case Dimension::X:\n        return getWAccel()->acc->getX();\n    case Dimension::Y:\n        return getWAccel()->acc->getY();\n    case Dimension::Z:\n        return getWAccel()->acc->getZ();\n    case Dimension::Strength:\n        return getAccelerationStrength();\n    }\n    return 0;\n}\n\n/**\n * The pitch or roll of the device, rotation along the ``x-axis`` or ``y-axis``, in degrees.\n * @param kind TODO\n */\n//% help=input/rotation\n//% blockId=device_get_rotation block=\"rotation (°)|%NAME\"\n//% parts=\"accelerometer\"\n//% group=\"Movement\"\n//% weight=38\nint rotation(Rotation kind) {\n    switch (kind) {\n    case Rotation::Pitch:\n        return getWAccel()->acc->getPitch();\n    case Rotation::Roll:\n        return getWAccel()->acc->getRoll();\n    }\n    return 0;\n}\n\n/**\n * Sets the accelerometer sample range in gravities.\n * @param range a value describe the maximum strengh of acceleration measured\n */\n//% help=input/set-accelerometer-range\n//% blockId=device_set_accelerometer_range block=\"set accelerometer|range %range\"\n//% weight=5 advanced=true\n//% parts=\"accelerometer\"\n//% group=\"Movement\"\n//% weight=15 blockGap=8\nvoid setAccelerometerRange(AcceleratorRange range) {\n    getWAccel()->acc->setRange((int)range);\n}\n\n/**\n * Get the magnetic force value in ``micro-Teslas`` (``µT``). This function is not supported in the\n * simulator.\n * @param dimension TODO\n */\n//% help=input/magnetic-force weight=51\n//% blockId=device_get_magnetic_force block=\"magnetic force (µT)|%NAME\"\n//% group=\"Movement\" blockGap=8\n//% parts=\"compass\"\nint magneticForce(Dimension dimension) {\n    if (!getWCompas()->magnetometer->isCalibrated())\n        getWCompas()->magnetometer->calibrate();\n\n    switch (dimension) {\n    case Dimension::X:\n        return getWCompas()->magnetometer->getX();\n    case Dimension::Y:\n        return getWCompas()->magnetometer->getY();\n    case Dimension::Z:\n        return getWCompas()->magnetometer->getZ();\n    case Dimension::Strength:\n        return getWCompas()->magnetometer->getFieldStrength();\n    }\n    return 0;\n}\n\n/**\n * Get the current compass heading in degrees.\n */\n//% help=input/compass-heading\n//% weight=56\n//% blockId=device_heading block=\"compass heading (°)\"\n//% group=\"Movement\" blockGap=8\n//% parts=\"compass\"\nint compassHeading() {\n    return getWCompas()->magnetometer->heading();\n}\n\n/**\n * Get the angular acceleration. This function is not supported in the simulator.\n * @param dimension TODO\n */\n//% help=input/gyroscopic-force weight=51\n//% blockId=device_get_gyroscopic_force block=\"angular acceleration|%NAME\"\n//% group=\"Movement\" blockGap=8\n//% parts=\"gyroscope\"\nint gyroscopicForce(Dimension dimension) {\n    switch (dimension) {\n    case Dimension::X:\n        return getWGyro()->gyroscope->getX();\n    case Dimension::Y:\n        return getWGyro()->gyroscope->getY();\n    case Dimension::Z:\n        return getWGyro()->gyroscope->getZ();\n    case Dimension::Strength:\n        return 0; // getWGyro()->gyroscope.getStrength();\n    }\n    return 0;\n}\n\n} // namespace input\n",
            "axis.h": "// Override in target to change inversion of axis\n\n#define ACC_SYSTEM SIMPLE_CARTESIAN\n#define ACC_UPSIDEDOWN true\n#define ACC_ROTATION COORDINATE_SPACE_ROTATED_180",
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum Dimension {\n    //% block=x\n    X = 0,\n    //% block=y\n    Y = 1,\n    //% block=z\n    Z = 2,\n    //% block=strength\n    Strength = 3,\n    }\n\n\n    declare const enum Rotation {\n    //% block=pitch\n    Pitch = 0,\n    //% block=roll\n    Roll = 1,\n    }\n\n\n    declare const enum AcceleratorRange {\n    /**\n     * The accelerator measures forces up to 1 gravity\n     */\n    //%  block=\"1g\"\n    OneG = 1,\n    /**\n     * The accelerator measures forces up to 2 gravity\n     */\n    //%  block=\"2g\"\n    TwoG = 2,\n    /**\n     * The accelerator measures forces up to 4 gravity\n     */\n    //% block=\"4g\"\n    FourG = 4,\n    /**\n     * The accelerator measures forces up to 8 gravity\n     */\n    //% block=\"8g\"\n    EightG = 8,\n    }\n\n\n    declare const enum Gesture {\n    /**\n     * Raised when shaken\n     */\n    //% block=shake\n    Shake = 11,  // ACCELEROMETER_EVT_SHAKE\n    /**\n     * Raised when the device tilts up\n     */\n    //% block=\"tilt up\"\n    TiltUp = 1,  // ACCELEROMETER_EVT_TILT_UP\n    /**\n     * Raised when the device tilts down\n     */\n    //% block=\"tilt down\"\n    TiltDown = 2,  // ACCELEROMETER_EVT_TILT_DOWN\n    /**\n     * Raised when the screen is pointing left\n     */\n    //% block=\"tilt left\"\n    TiltLeft = 3,  // ACCELEROMETER_EVT_TILT_LEFT\n    /**\n     * Raised when the screen is pointing right\n     */\n    //% block=\"tilt right\"\n    TiltRight = 4,  // ACCELEROMETER_EVT_TILT_RIGHT\n    /**\n     * Raised when the screen faces up\n     */\n    //% block=\"face up\"\n    FaceUp = 5,  // ACCELEROMETER_EVT_FACE_UP\n    /**\n     * Raised when the screen is pointing up and the board is horizontal\n     */\n    //% block=\"face down\"\n    FaceDown = 6,  // ACCELEROMETER_EVT_FACE_DOWN\n    /**\n     * Raised when the board is falling!\n     */\n    //% block=\"free fall\"\n    FreeFall = 7,  // ACCELEROMETER_EVT_FREEFALL\n    /**\n     * Raised when a 3G shock is detected\n     */\n    //% block=\"3g\"\n    ThreeG = 8,  // ACCELEROMETER_EVT_3G\n    /**\n     * Raised when a 6G shock is detected\n     */\n    //% block=\"6g\"\n    SixG = 9,  // ACCELEROMETER_EVT_6G\n    /**\n     * Raised when a 8G shock is detected\n     */\n    //% block=\"8g\"\n    EightG = 10,  // ACCELEROMETER_EVT_8G\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "pxt.json": "{\n    \"name\": \"accelerometer---lsm6dsl\",\n    \"description\": \"The accelerometer library\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"accelerometer.cpp\",\n        \"target_accelerometer.h\",\n        \"target_compass.h\",\n        \"target_gyroscope.h\",\n        \"axis.h\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace input {\n\n    /**\n     * Do something when a gesture happens (like shaking the board).\n     * @param gesture the type of gesture to track, eg: Gesture.Shake\n     * @param body code to run when gesture is raised\n     */\n    //% help=input/on-gesture\n    //% blockId=device_gesture_event block=\"on |%NAME\"\n    //% parts=\"accelerometer\"\n    //% gesture.fieldEditor=\"gridpicker\"\n    //% gesture.fieldOptions.width=220\n    //% gesture.fieldOptions.columns=3\n    //% group=\"Movement\"\n    //% weight=92 blockGap=12 shim=input::onGesture\n    function onGesture(gesture: Gesture, body: () => void): void;\n\n    /**\n     * Get the acceleration value in milli-gravitys (when the board is laying flat with the screen up,\n     * x=0, y=0 and z=-1023)\n     * @param dimension TODO\n     */\n    //% help=input/acceleration\n    //% blockId=device_acceleration block=\"acceleration (mg)|%NAME\"\n    //% parts=\"accelerometer\"\n    //% dimension.fieldEditor=\"gridpicker\"\n    //% dimension.fieldOptions.width=180\n    //% dimension.fieldOptions.columns=2\n    //% group=\"Movement\"\n    //% weight=42 blockGap=8 shim=input::acceleration\n    function acceleration(dimension: Dimension): int32;\n\n    /**\n     * The pitch or roll of the device, rotation along the ``x-axis`` or ``y-axis``, in degrees.\n     * @param kind TODO\n     */\n    //% help=input/rotation\n    //% blockId=device_get_rotation block=\"rotation (°)|%NAME\"\n    //% parts=\"accelerometer\"\n    //% group=\"Movement\"\n    //% weight=38 shim=input::rotation\n    function rotation(kind: Rotation): int32;\n\n    /**\n     * Sets the accelerometer sample range in gravities.\n     * @param range a value describe the maximum strengh of acceleration measured\n     */\n    //% help=input/set-accelerometer-range\n    //% blockId=device_set_accelerometer_range block=\"set accelerometer|range %range\"\n    //% weight=5 advanced=true\n    //% parts=\"accelerometer\"\n    //% group=\"Movement\"\n    //% weight=15 blockGap=8 shim=input::setAccelerometerRange\n    function setAccelerometerRange(range: AcceleratorRange): void;\n\n    /**\n     * Get the magnetic force value in ``micro-Teslas`` (``µT``). This function is not supported in the\n     * simulator.\n     * @param dimension TODO\n     */\n    //% help=input/magnetic-force weight=51\n    //% blockId=device_get_magnetic_force block=\"magnetic force (µT)|%NAME\"\n    //% group=\"Movement\" blockGap=8\n    //% parts=\"compass\" shim=input::magneticForce\n    function magneticForce(dimension: Dimension): int32;\n\n    /**\n     * Get the current compass heading in degrees.\n     */\n    //% help=input/compass-heading\n    //% weight=56\n    //% blockId=device_heading block=\"compass heading (°)\"\n    //% group=\"Movement\" blockGap=8\n    //% parts=\"compass\" shim=input::compassHeading\n    function compassHeading(): int32;\n\n    /**\n     * Get the angular acceleration. This function is not supported in the simulator.\n     * @param dimension TODO\n     */\n    //% help=input/gyroscopic-force weight=51\n    //% blockId=device_get_gyroscopic_force block=\"angular acceleration|%NAME\"\n    //% group=\"Movement\" blockGap=8\n    //% parts=\"gyroscope\" shim=input::gyroscopicForce\n    function gyroscopicForce(dimension: Dimension): int32;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "target_accelerometer.h": "#include \"LSM6DSL_Accelerometer.h\"\n#include \"Pin.h\"\n#include \"axis.h\"\n#include \"pxt.h\"\n\nnamespace pxt {\n\n// Wrapper classes\nclass WAccel {\n  private:\n    CODAL_I2C *i2c;\n    codal::CoordinateSpace coordinateSpace;\n\n  public:\n    codal::Accelerometer *acc = nullptr;\n\n    WAccel()\n        : i2c(getI2C(LOOKUP_PIN(LSM6DSL_SDA), LOOKUP_PIN(LSM6DSL_SCL))),\n          coordinateSpace(SIMPLE_CARTESIAN, true, COORDINATE_SPACE_ROTATED_180),\n          acc(new codal::LSM6DSL_Accelerometer(i2c, 0xD4, coordinateSpace)) {}\n\n    ~WAccel() { delete acc; }\n};\n} // namespace pxt",
            "target_compass.h": "#include \"LIS3MDL_Magnetometer.h\"\n#include \"Pin.h\"\n#include \"axis.h\"\n#include \"pxt.h\"\n\nnamespace pxt {\n\n// Wrapper classes\nclass WCompas {\n  private:\n    CODAL_I2C *i2c;\n    codal::CoordinateSpace coordinateSpace;\n\n  public:\n    codal::Compass *magnetometer;\n\n    WCompas()\n        : i2c(getI2C(LOOKUP_PIN(LSM6DSL_SDA), LOOKUP_PIN(LSM6DSL_SCL))),\n          coordinateSpace(codal::CoordinateSystem::SIMPLE_CARTESIAN),\n          magnetometer(new codal::LIS3MDL_Magnetometer(i2c, 0x3C, coordinateSpace)) {\n        magnetometer->configure();\n    }\n\n    ~WCompas() { delete magnetometer; }\n};\n} // namespace pxt",
            "target_gyroscope.h": "#include \"LSM6DSL_Gyroscope.h\"\n#include \"Pin.h\"\n#include \"axis.h\"\n#include \"pxt.h\"\n\nnamespace pxt {\n\n// Wrapper classes\nclass WGyro {\n  private:\n    CODAL_I2C *i2c;\n    codal::CoordinateSpace coordinateSpace;\n\n  public:\n    codal::Gyroscope *gyroscope = nullptr;\n\n    WGyro()\n        : i2c(getI2C(LOOKUP_PIN(LSM6DSL_SDA), LOOKUP_PIN(LSM6DSL_SCL))),\n          coordinateSpace(SIMPLE_CARTESIAN, true, COORDINATE_SPACE_ROTATED_180),\n          gyroscope(new codal::LSM6DSL_Gyroscope(i2c, 0xD4, coordinateSpace)) {}\n\n    ~WGyro() { delete gyroscope; }\n};\n} // namespace pxt",
            "test.ts": ""
        },
        "barometer---lps22hb": {
            "barometer.cpp": "#include \"pxt.h\"\n#include \"target_barometer.h\"\n\nenum class PressureCondition {\n    //% block=\"high\"\n    High = SENSOR_THRESHOLD_HIGH,\n    //% block=\"low\"\n    Low = SENSOR_THRESHOLD_LOW\n};\n\nenum class PressureUnit {\n    //% block=\"hPa\"\n    HectoPascal,\n    //% block=\"mBar\"\n    mBar\n};\n\nnamespace pxt {\nSINGLETON(WBarometer);\n}\n\nnamespace input {\n\n/**\n * Run some code when the pressure changes from high to low, or from low to high.\n * @param condition the condition, low or high, the event triggers on\n * @param pressure the pressure at which this event happens, eg: 1013.25\n * @param unit the unit of the pressure\n */\n//% blockId=input_on_pressure_condition_changed block=\"on pressure %condition|at %pressure |%unit\"\n//% help=input/on-pressure-condition-changed blockExternalInputs=0\n//% parts=\"pressure\"\n//% group=\"Pressure\"\n//% weight=76\nvoid onPressureConditionChanged(PressureCondition condition, int pressure, PressureUnit unit, Action handler) {\n    auto sensor = getWBarometer()->sensor;\n    sensor->updateSample();\n\n    float t = pressure;\n\n    if (condition == PressureCondition::Low)\n        sensor->setLowThreshold(t);\n    else\n        sensor->setHighThreshold(t);\n    registerWithDal(sensor->id, (int)condition, handler);\n}\n\n/**\n * Get the pressure.\n */\n//% help=input/pressure\n//% blockId=device_pressure block=\"pressure in %unit\"\n//% parts=\"pressure\"\n//% group=\"Pressure\"\n//% weight=26\nint pressure(PressureUnit unit) {\n    return (int)getWBarometer()->sensor->getValue();\n}\n} // namespace input",
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum PressureCondition {\n    //% block=\"high\"\n    High = 2,  // SENSOR_THRESHOLD_HIGH\n    //% block=\"low\"\n    Low = 1,  // SENSOR_THRESHOLD_LOW\n    }\n\n\n    declare const enum PressureUnit {\n    //% block=\"hPa\"\n    HectoPascal = 0,\n    //% block=\"mBar\"\n    mBar = 1,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "pxt.json": "{\n    \"name\": \"barometer---lps22hb\",\n    \"description\": \"A barometer sensor driver\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"barometer.cpp\",\n        \"target_barometer.h\",\n        \"shims.d.ts\",\n        \"enums.d.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace input {\n\n    /**\n     * Run some code when the pressure changes from high to low, or from low to high.\n     * @param condition the condition, low or high, the event triggers on\n     * @param pressure the pressure at which this event happens, eg: 1013.25\n     * @param unit the unit of the pressure\n     */\n    //% blockId=input_on_pressure_condition_changed block=\"on pressure %condition|at %pressure |%unit\"\n    //% help=input/on-pressure-condition-changed blockExternalInputs=0\n    //% parts=\"pressure\"\n    //% group=\"Pressure\"\n    //% weight=76 shim=input::onPressureConditionChanged\n    function onPressureConditionChanged(condition: PressureCondition, pressure: int32, unit: PressureUnit, handler: () => void): void;\n\n    /**\n     * Get the pressure.\n     */\n    //% help=input/pressure\n    //% blockId=device_pressure block=\"pressure in %unit\"\n    //% parts=\"pressure\"\n    //% group=\"Pressure\"\n    //% weight=26 shim=input::pressure\n    function pressure(unit: PressureUnit): int32;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "target_barometer.h": "#include \"LPS22HB_Pressure.h\"\n#include \"pxt.h\"\n\nnamespace pxt {\nclass WBarometer {\n  private:\n    CODAL_I2C *i2c;\n\n  public:\n    codal::LPS22HB_Pressure *sensor;\n\n    WBarometer()\n        : i2c(getI2C(LOOKUP_PIN(LPS22HB_SDA), LOOKUP_PIN(LPS22HB_SCL))),\n          sensor(new codal::LPS22HB_Pressure(DEVICE_ID_PRESSURE, i2c, 0xBA, 1023)) {}\n\n    ~WBarometer() { delete sensor; }\n};\n} // namespace pxt"
        },
        "distance---vl53l0x": {
            "distance.cpp": "#include \"pxt.h\"\n#include \"target_distance.h\"\n\nenum class DistanceCondition {\n    //% block=\"far\"\n    Far = SENSOR_THRESHOLD_HIGH,\n    //% block=\"near\"\n    Near = SENSOR_THRESHOLD_LOW\n};\n\nenum class DistanceUnit {\n    //% block=\"mm\"\n    Millimeter,\n    //% block=\"cm\"\n    Centimeter,\n    //% block=\"dm\"\n    Decimeter,\n    //% block=\"m\"\n    Meter\n};\n\nnamespace pxt {\nSINGLETON(WDistance);\n}\n\nnamespace input {\n\n/**\n * Run some code when the distance changes from near to far, or from far to near.\n * @param condition the condition, far or near, the event triggers on\n * @param distance the distance at which this event happens, eg: 15\n * @param unit the unit of the distance\n */\n//% blockId=input_on_distance_condition_changed block=\"on distance %condition|at %distance|%unit\"\n//% parts=\"distance\"\n//% help=input/on-distance-condition-changed blockExternalInputs=0\n//% group=\"Distance\" weight=76\nvoid onDistanceConditionChanged(DistanceCondition condition, int distance, DistanceUnit unit, Action handler) {\n    auto sensor = getWDistance()->sensor;\n    sensor->updateSample();\n\n    int d;\n\n    switch (unit) {\n    case DistanceUnit::Millimeter:\n        d = distance;\n        break;\n    case DistanceUnit::Centimeter:\n        d = distance * 10;\n        break;\n    case DistanceUnit::Decimeter:\n        d = distance * 100;\n        break;\n    case DistanceUnit::Meter:\n        d = distance * 1000;\n        break;\n    default:\n        d = 0;\n        break;\n    }\n\n    if (condition == DistanceCondition::Near)\n        sensor->setLowThreshold(d);\n    else\n        sensor->setHighThreshold(d);\n    registerWithDal(sensor->id, (int)condition, handler);\n}\n\n/**\n * Get the distance.\n */\n//% help=input/distance\n//% blockId=device_distance block=\"distance in %unit\"\n//% parts=\"distance\"\n//% group=\"Distance\"\n//% weight=26\nfloat distance(DistanceUnit unit) {\n    int distance = getWDistance()->sensor->getValue();\n    switch (unit) {\n    case DistanceUnit::Millimeter:\n        return distance;\n    case DistanceUnit::Centimeter:\n        return distance / 10.;\n    case DistanceUnit::Decimeter:\n        return distance / 100.;\n    case DistanceUnit::Meter:\n        return distance / 1000.;\n    default:\n        return 0;\n    }\n}\n} // namespace input",
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum DistanceCondition {\n    //% block=\"far\"\n    Far = 2,  // SENSOR_THRESHOLD_HIGH\n    //% block=\"near\"\n    Near = 1,  // SENSOR_THRESHOLD_LOW\n    }\n\n\n    declare const enum DistanceUnit {\n    //% block=\"mm\"\n    Millimeter = 0,\n    //% block=\"cm\"\n    Centimeter = 1,\n    //% block=\"dm\"\n    Decimeter = 2,\n    //% block=\"m\"\n    Meter = 3,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "pxt.json": "{\n    \"name\": \"distance---vl53l0x\",\n    \"description\": \"A distance sensor driver\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"distance.cpp\",\n        \"target_distance.h\",\n        \"shims.d.ts\",\n        \"enums.d.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace input {\n\n    /**\n     * Run some code when the distance changes from near to far, or from far to near.\n     * @param condition the condition, far or near, the event triggers on\n     * @param distance the distance at which this event happens, eg: 15\n     * @param unit the unit of the distance\n     */\n    //% blockId=input_on_distance_condition_changed block=\"on distance %condition|at %distance|%unit\"\n    //% parts=\"distance\"\n    //% help=input/on-distance-condition-changed blockExternalInputs=0\n    //% group=\"Distance\" weight=76 shim=input::onDistanceConditionChanged\n    function onDistanceConditionChanged(condition: DistanceCondition, distance: int32, unit: DistanceUnit, handler: () => void): void;\n\n    /**\n     * Get the distance.\n     */\n    //% help=input/distance\n    //% blockId=device_distance block=\"distance in %unit\"\n    //% parts=\"distance\"\n    //% group=\"Distance\"\n    //% weight=26 shim=input::distance\n    function distance(unit: DistanceUnit): number;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "target_distance.h": "#include \"VL53L0X_Distance.h\"\n#include \"pxt.h\"\n\nnamespace pxt {\nclass WDistance {\n  private:\n    CODAL_I2C *i2c;\n\n  public:\n    codal::VL53L0X_Distance *sensor;\n\n    WDistance()\n        : i2c(getI2C(LOOKUP_PIN(VL53L0X_SDA), LOOKUP_PIN(VL53L0X_SCL))),\n          sensor(new codal::VL53L0X_Distance(DEVICE_ID_DISTANCE, i2c, LOOKUP_PIN(VL53L0X_SHUT), 0x52, 1023, 1000)) {\n\n        // The VL53L0X need time to internally initialize, but when it is done, we can reduce the samplePerdiod\n        sensor->setPeriod(100);\n    }\n    ~WDistance() { delete sensor; }\n};\n} // namespace pxt",
            "test.ts": ""
        },
        "thermometer---hts221": {
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum TemperatureCondition {\n    //% block=\"hot\"\n    Hot = 2,  // SENSOR_THRESHOLD_HIGH\n    //% block=\"cold\"\n    Cold = 1,  // SENSOR_THRESHOLD_LOW\n    }\n\n\n    declare const enum TemperatureUnit {\n    //% block=\"°C\"\n    Celsius = 0,\n    //% block=\"°F\"\n    Fahrenheit = 1,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "ns.ts": "\n//% color=\"#B4009E\" weight=98 icon=\"\\uf192\"\nnamespace input {\n}",
            "pxt.json": "{\n    \"name\": \"thermometer---hts221\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"thermometer.cpp\",\n        \"target_thermometer.h\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"ns.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace input {\n\n    /**\n     * Run some code when the temperature changes from hot to cold, or from cold to hot.\n     * @param condition the condition, hot or cold, the event triggers on\n     * @param temperature the temperature at which this event happens, eg: 15\n     * @param unit the unit of the temperature\n     */\n    //% blockId=input_on_temperature_condition_changed block=\"on temperature %condition|at %temperature|%unit\"\n    //% parts=\"thermometer\"\n    //% help=input/on-temperature-condition-changed blockExternalInputs=0\n    //% group=\"Temperature\" weight=76 shim=input::onTemperatureConditionChanged\n    function onTemperatureConditionChanged(condition: TemperatureCondition, temperature: int32, unit: TemperatureUnit, handler: () => void): void;\n\n    /**\n     * Get the temperature in Celsius or Fahrenheit degrees.\n     */\n    //% help=input/temperature\n    //% blockId=device_temperature block=\"temperature in %unit\"\n    //% parts=\"thermometer\"\n    //% group=\"Temperature\"\n    //% weight=26 shim=input::temperature\n    function temperature(unit: TemperatureUnit): int32;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "target_thermometer.h": "#include \"HTS221_Temperature.h\"\n#include \"pxt.h\"\n\nnamespace pxt {\nclass WTemp {\n  private:\n    CODAL_I2C *i2c;\n\n  public:\n    codal::HTS221_Temperature *sensor;\n\n    WTemp()\n        : i2c(getI2C(LOOKUP_PIN(HTS221_SDA), LOOKUP_PIN(HTS221_SCL))),\n          sensor(new codal::HTS221_Temperature(DEVICE_ID_THERMOMETER, i2c, 0xBE, 1023)) {}\n    ~WTemp() { delete sensor; }\n};\n} // namespace pxt\n",
            "thermometer.cpp": "#include \"pxt.h\"\n#include \"target_thermometer.h\"\n\nenum class TemperatureCondition {\n    //% block=\"hot\"\n    Hot = SENSOR_THRESHOLD_HIGH,\n    //% block=\"cold\"\n    Cold = SENSOR_THRESHOLD_LOW\n};\n\nenum class TemperatureUnit {\n    //% block=\"°C\"\n    Celsius,\n    //% block=\"°F\"\n    Fahrenheit\n};\n\nnamespace pxt {\nSINGLETON(WTemp);\n}\n\nnamespace input {\n\n/**\n * Run some code when the temperature changes from hot to cold, or from cold to hot.\n * @param condition the condition, hot or cold, the event triggers on\n * @param temperature the temperature at which this event happens, eg: 15\n * @param unit the unit of the temperature\n */\n//% blockId=input_on_temperature_condition_changed block=\"on temperature %condition|at %temperature|%unit\"\n//% parts=\"thermometer\"\n//% help=input/on-temperature-condition-changed blockExternalInputs=0\n//% group=\"Temperature\" weight=76\nvoid onTemperatureConditionChanged(TemperatureCondition condition, int temperature, TemperatureUnit unit, Action handler) {\n    auto thermo = getWTemp();\n    if (!thermo)\n        return;\n\n    auto sensor = thermo->sensor;\n    sensor->updateSample();\n\n    int t = unit == TemperatureUnit::Celsius ? temperature : ((temperature - 32) * 10) / 18;\n\n    if (condition == TemperatureCondition::Cold)\n        sensor->setLowThreshold(t);\n    else\n        sensor->setHighThreshold(t);\n    registerWithDal(sensor->id, (int)condition, handler);\n}\n\n/**\n * Get the temperature in Celsius or Fahrenheit degrees.\n */\n//% help=input/temperature\n//% blockId=device_temperature block=\"temperature in %unit\"\n//% parts=\"thermometer\"\n//% group=\"Temperature\"\n//% weight=26\nint temperature(TemperatureUnit unit) {\n    auto thermo = getWTemp();\n\n    // default to -1000 if not present\n    int value = (NULL != thermo) ? (int)thermo->sensor->getValue() : -1000;\n\n    if (unit == TemperatureUnit::Celsius)\n        return value;\n    else\n        return (value * 18) / 10 + 32;\n}\n} // namespace input\n"
        },
        "thermometer---lps22hb": {
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum TemperatureCondition {\n    //% block=\"hot\"\n    Hot = 2,  // SENSOR_THRESHOLD_HIGH\n    //% block=\"cold\"\n    Cold = 1,  // SENSOR_THRESHOLD_LOW\n    }\n\n\n    declare const enum TemperatureUnit {\n    //% block=\"°C\"\n    Celsius = 0,\n    //% block=\"°F\"\n    Fahrenheit = 1,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "ns.ts": "\n//% color=\"#B4009E\" weight=98 icon=\"\\uf192\"\nnamespace input {\n}",
            "pxt.json": "{\n    \"name\": \"thermometer---lps22hb\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"thermometer.cpp\",\n        \"target_thermometer.h\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"ns.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace input {\n\n    /**\n     * Run some code when the temperature changes from hot to cold, or from cold to hot.\n     * @param condition the condition, hot or cold, the event triggers on\n     * @param temperature the temperature at which this event happens, eg: 15\n     * @param unit the unit of the temperature\n     */\n    //% blockId=input_on_temperature_condition_changed block=\"on temperature %condition|at %temperature|%unit\"\n    //% parts=\"thermometer\"\n    //% help=input/on-temperature-condition-changed blockExternalInputs=0\n    //% group=\"Temperature\" weight=76 shim=input::onTemperatureConditionChanged\n    function onTemperatureConditionChanged(condition: TemperatureCondition, temperature: int32, unit: TemperatureUnit, handler: () => void): void;\n\n    /**\n     * Get the temperature in Celsius or Fahrenheit degrees.\n     */\n    //% help=input/temperature\n    //% blockId=device_temperature block=\"temperature in %unit\"\n    //% parts=\"thermometer\"\n    //% group=\"Temperature\"\n    //% weight=26 shim=input::temperature\n    function temperature(unit: TemperatureUnit): int32;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "target_thermometer.h": "#include \"LPS22HB_Temperature.h\"\n#include \"pxt.h\"\n\nnamespace pxt {\nclass WTemp {\n  private:\n    CODAL_I2C *i2c;\n\n  public:\n    codal::LPS22HB_Temperature *sensor;\n\n    WTemp()\n        : i2c(getI2C(LOOKUP_PIN(HTS221_SDA), LOOKUP_PIN(HTS221_SCL))),\n          sensor(new codal::LPS22HB_Temperature(DEVICE_ID_THERMOMETER, i2c, 0xBA, 1023)) {}\n    ~WTemp() { delete sensor; }\n};\n} // namespace pxt\n",
            "thermometer.cpp": "#include \"pxt.h\"\n#include \"target_thermometer.h\"\n\nenum class TemperatureCondition {\n    //% block=\"hot\"\n    Hot = SENSOR_THRESHOLD_HIGH,\n    //% block=\"cold\"\n    Cold = SENSOR_THRESHOLD_LOW\n};\n\nenum class TemperatureUnit {\n    //% block=\"°C\"\n    Celsius,\n    //% block=\"°F\"\n    Fahrenheit\n};\n\nnamespace pxt {\nSINGLETON(WTemp);\n}\n\nnamespace input {\n\n/**\n * Run some code when the temperature changes from hot to cold, or from cold to hot.\n * @param condition the condition, hot or cold, the event triggers on\n * @param temperature the temperature at which this event happens, eg: 15\n * @param unit the unit of the temperature\n */\n//% blockId=input_on_temperature_condition_changed block=\"on temperature %condition|at %temperature|%unit\"\n//% parts=\"thermometer\"\n//% help=input/on-temperature-condition-changed blockExternalInputs=0\n//% group=\"Temperature\" weight=76\nvoid onTemperatureConditionChanged(TemperatureCondition condition, int temperature, TemperatureUnit unit, Action handler) {\n    auto thermo = getWTemp();\n    if (!thermo)\n        return;\n\n    auto sensor = thermo->sensor;\n    sensor->updateSample();\n\n    int t = unit == TemperatureUnit::Celsius ? temperature : ((temperature - 32) * 10) / 18;\n\n    if (condition == TemperatureCondition::Cold)\n        sensor->setLowThreshold(t);\n    else\n        sensor->setHighThreshold(t);\n    registerWithDal(sensor->id, (int)condition, handler);\n}\n\n/**\n * Get the temperature in Celsius or Fahrenheit degrees.\n */\n//% help=input/temperature\n//% blockId=device_temperature block=\"temperature in %unit\"\n//% parts=\"thermometer\"\n//% group=\"Temperature\"\n//% weight=26\nint temperature(TemperatureUnit unit) {\n    auto thermo = getWTemp();\n\n    // default to -1000 if not present\n    int value = (NULL != thermo) ? (int)thermo->sensor->getValue() : -1000;\n\n    if (unit == TemperatureUnit::Celsius)\n        return value;\n    else\n        return (value * 18) / 10 + 32;\n}\n} // namespace input\n"
        },
        "hygrometer---hts221": {
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum HumidityCondition {\n    //% block=\"wet\"\n    Wet = 2,  // SENSOR_THRESHOLD_HIGH\n    //% block=\"dry\"\n    Dry = 1,  // SENSOR_THRESHOLD_LOW\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "hygrometer.cpp": "#include \"pxt.h\"\n#include \"target_hygrometer.h\"\n\nenum class HumidityCondition {\n    //% block=\"wet\"\n    Wet = SENSOR_THRESHOLD_HIGH,\n    //% block=\"dry\"\n    Dry = SENSOR_THRESHOLD_LOW\n};\n\nnamespace pxt {\nSINGLETON(WHygrometer);\n}\n\nnamespace input {\n\n/**\n * Run some code when the humidity changes from dry to wet, or from wet to dry.\n * @param condition the condition, wet or dry, the event triggers on\n * @param humidity the humidity at which this event happens, eg: 50\n * @param unit the unit of the humidity\n */\n//% blockId=input_on_humidity_condition_changed block=\"on humidity %condition|at %humidity percent\"\n//% help=input/on-humidity-condition-changed blockExternalInputs=0\n//% parts=\"humidity\"\n//% group=\"Humidity\" weight=76\nvoid onHumidityConditionChanged(HumidityCondition condition, int humidity, Action handler) {\n    auto sensor = getWHygrometer()->sensor;\n    sensor->updateSample();\n\n    float t = humidity; //*10.;\n\n    if (condition == HumidityCondition::Dry)\n        sensor->setLowThreshold(t);\n    else\n        sensor->setHighThreshold(t);\n    registerWithDal(sensor->id, (int)condition, handler);\n}\n\n/**\n * Get the relative humidity in percent.\n */\n//% help=input/humidity\n//% blockId=device_humidity block=\"relative humidity in percent\"\n//% parts=\"humidity\"\n//% group=\"Humidity\"\n//% weight=26\nint humidity() {\n    return (int)getWHygrometer()->sensor->getValue(); /// 10.;\n}\n} // namespace input",
            "pxt.json": "{\n    \"name\": \"hygrometer---hts221\",\n    \"description\": \"A hygrometer sensor driver\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"hygrometer.cpp\",\n        \"target_hygrometer.h\",\n        \"shims.d.ts\",\n        \"enums.d.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace input {\n\n    /**\n     * Run some code when the humidity changes from dry to wet, or from wet to dry.\n     * @param condition the condition, wet or dry, the event triggers on\n     * @param humidity the humidity at which this event happens, eg: 50\n     * @param unit the unit of the humidity\n     */\n    //% blockId=input_on_humidity_condition_changed block=\"on humidity %condition|at %humidity percent\"\n    //% help=input/on-humidity-condition-changed blockExternalInputs=0\n    //% parts=\"humidity\"\n    //% group=\"Humidity\" weight=76 shim=input::onHumidityConditionChanged\n    function onHumidityConditionChanged(condition: HumidityCondition, humidity: int32, handler: () => void): void;\n\n    /**\n     * Get the relative humidity in percent.\n     */\n    //% help=input/humidity\n    //% blockId=device_humidity block=\"relative humidity in percent\"\n    //% parts=\"humidity\"\n    //% group=\"Humidity\"\n    //% weight=26 shim=input::humidity\n    function humidity(): int32;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "target_hygrometer.h": "#include \"HTS221_Humidity.h\"\n#include \"Sensor.h\"\n#include \"pxt.h\"\n\nnamespace pxt {\nclass WHygrometer {\n  private:\n    CODAL_I2C *i2c;\n\n  public:\n    codal::HTS221_Humidity *sensor;\n\n    WHygrometer()\n        : i2c(getI2C(LOOKUP_PIN(HTS221_SDA), LOOKUP_PIN(HTS221_SCL))),\n          sensor(new codal::HTS221_Humidity(DEVICE_ID_HUMIDITY, i2c, 0xBE, 1023)) {}\n\n    ~WHygrometer() { delete sensor; }\n};\n} // namespace pxt"
        },
        "oled": {
            "SSD1306_128x64.svg": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xml:space=\"preserve\" enable-background=\"new 0 0 82 82\" viewBox=\"0 0 171.054 170.16701\" height=\"170.16701\" width=\"171.054\" y=\"0px\" x=\"0px\" id=\"Layer_1\" version=\"1.1\"><metadata id=\"metadata4617\"><rdf:RDF><cc:Work rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata>\n<defs id=\"defs4615\">\n\t<style>\n\t@font-face{\n\t\tfont-family:\"LCD Dot Matrix HD44780U\";\n\t\tfont-style:normal;\n\t\tfont-weight:400;\n\t\tsrc:url(\"data:font/ttf;base64,\") format(\"truetype\");\n\t}\n\t</style>\n</defs>\n<g transform=\"matrix(2.0830003,0,0,2.0830003,0.12498002,-0.318243)\" id=\"main_group\">\n\t<path style=\"fill:#006699\" id=\"path4554\" d=\"M 77.363,0.153 H 3.946 c -1.66,0 -4.006,2.571 -4.006,5.745 v 70.205 c 0,3.171 2.346,5.743 4.006,5.743 H 78.05 c 1.66,0 4.009,-2.572 4.009,-5.743 V 5.897 c 0,-3.173 -3.036,-5.744 -4.696,-5.744 z M 13.052,80.501 v 0.006 h -0.047 c -0.094,0.006 -0.183,0.026 -0.276,0.026 -0.112,0 -0.22,-0.021 -0.328,-0.026 H 8.052 c -0.108,0.008 -0.215,0.026 -0.327,0.026 -2.313,0 -4.188,-1.875 -4.188,-4.188 0,-2.312 1.875,-4.188 4.188,-4.188 h 5.327 v 0.033 c 2.158,0.168 3.863,1.953 3.863,4.154 0,2.204 -1.703,3.989 -3.863,4.157 z m 0.625,-69.875 v 0.005 H 13.63 c -0.094,0.006 -0.183,0.028 -0.276,0.028 -0.112,0 -0.22,-0.019 -0.328,-0.028 H 8.677 C 8.569,10.64 8.462,10.659 8.35,10.659 6.037,10.659 4.162,8.784 4.162,6.471 4.162,4.158 6.036,2.283 8.35,2.283 h 5.327 v 0.033 c 2.158,0.168 3.863,1.953 3.863,4.155 0,2.202 -1.703,3.987 -3.863,4.155 z m 60.5,69.625 v 0.006 H 74.13 c -0.094,0.006 -0.183,0.026 -0.276,0.026 -0.112,0 -0.22,-0.021 -0.328,-0.026 h -4.349 c -0.108,0.008 -0.215,0.026 -0.327,0.026 -2.313,0 -4.188,-1.875 -4.188,-4.188 0,-2.312 1.875,-4.188 4.188,-4.188 h 5.327 v 0.033 c 2.158,0.168 3.863,1.953 3.863,4.154 0,2.204 -1.703,3.989 -3.863,4.157 z m 1,-69.251 v 0.006 H 75.13 c -0.094,0.006 -0.183,0.027 -0.276,0.027 -0.112,0 -0.22,-0.02 -0.328,-0.027 h -4.349 c -0.108,0.008 -0.215,0.027 -0.327,0.027 -2.313,0 -4.188,-1.875 -4.188,-4.188 0,-2.313 1.875,-4.188 4.188,-4.188 h 5.327 V 2.69 c 2.158,0.168 3.863,1.953 3.863,4.155 0,2.202 -1.703,3.988 -3.863,4.155 z\" />\n\t<rect style=\"fill:#454545\" id=\"rect4556\" height=\"7.427\" width=\"3.7130001\" y=\"1.473\" x=\"28.021\" />\n\t<polygon style=\"fill:#454545\" id=\"polygon4558\" points=\"26.163,7.041 26.163,3.328 28.021,1.473 28.021,8.899 \" />\n\t<polygon style=\"fill:#454545\" id=\"polygon4560\" points=\"31.732,8.899 31.732,1.473 33.593,3.328 33.593,7.041 \" />\n\t<rect style=\"fill:#b68b2d\" id=\"rect4562\" height=\"1.668\" width=\"1.312\" y=\"4.349\" x=\"29.223\" />\n\t<rect style=\"fill:#454545\" id=\"rect4564\" height=\"7.427\" width=\"3.7130001\" y=\"1.473\" x=\"35.223\" />\n\t<polygon style=\"fill:#454545\" id=\"polygon4566\" points=\"33.363,7.041 33.363,3.328 35.223,1.473 35.223,8.899 \" />\n\t<polygon style=\"fill:#454545\" id=\"polygon4568\" points=\"38.934,8.899 38.934,1.473 40.792,3.328 40.792,7.041 \" />\n\t<rect style=\"fill:#b68b2d\" id=\"rect4570\" height=\"1.668\" width=\"1.312\" y=\"4.349\" x=\"36.421001\" />\n\t<rect style=\"fill:#454545\" id=\"rect4572\" height=\"7.427\" width=\"3.7130001\" y=\"1.473\" x=\"42.421001\" />\n\t<polygon style=\"fill:#454545\" id=\"polygon4574\" points=\"40.564,7.041 40.564,3.328 42.421,1.473 42.421,8.899 \" />\n\t<polygon style=\"fill:#454545\" id=\"polygon4576\" points=\"46.134,8.899 46.134,1.473 47.992,3.328 47.992,7.041 \" />\n\t<rect style=\"fill:#b68b2d\" id=\"rect4578\" height=\"1.668\" width=\"1.312\" y=\"4.349\" x=\"43.622002\" />\n\t<rect style=\"fill:#454545\" id=\"rect4580\" height=\"7.427\" width=\"3.7130001\" y=\"1.473\" x=\"49.622002\" />\n\t<polygon style=\"fill:#454545\" id=\"polygon4582\" points=\"47.764,7.041 47.764,3.328 49.622,1.473 49.622,8.899 \" />\n\t<polygon style=\"fill:#454545\" id=\"polygon4584\" points=\"53.333,8.899 53.333,1.473 55.191,3.328 55.191,7.041 \" />\n\t<rect style=\"fill:#b68b2d\" id=\"rect4586\" height=\"1.668\" width=\"1.312\" y=\"4.349\" x=\"50.82\" />\n\t<text style=\"font-size:2.5px;font-family:OCRA;fill:#ffffff\" id=\"text4588\" font-size=\"2.5\" transform=\"translate(27.165,12.1396)\">VCC</text>\n\n\t<text style=\"font-size:2.5px;font-family:OCRA;fill:#ffffff\" id=\"text4590\" font-size=\"2.5\" transform=\"translate(34.4883,12.1377)\">GND</text>\n\n\t<text style=\"font-size:2.5px;font-family:OCRA;fill:#ffffff\" id=\"text4592\" font-size=\"2.5\" transform=\"translate(41.8115,12.1396)\">SCL</text>\n\n\t<text style=\"font-size:2.5px;font-family:OCRA;fill:#ffffff\" id=\"text4594\" font-size=\"2.5\" transform=\"translate(49.1348,12.1377)\">SDA</text>\n\n\t<rect style=\"fill:#231f20\" id=\"rect4596\" height=\"46\" width=\"79.125\" y=\"12.726\" x=\"1.238\" />\n\t<rect style=\"fill:#00435e\" id=\"4598\" height=\"43.5\" width=\"76.125\" y=\"14.101\" x=\"3.1129999\" />\n\t<g transform=\"translate (3.1129999 14.101)\" id=\"print_zone\" style=\"font-size:5.4376px;font-family:'LCD Dot Matrix HD44780U';\" >\n\t</g>\n\t<rect style=\"fill:#231f20\" id=\"rect4600\" height=\"23.375\" width=\"30\" y=\"57.726002\" x=\"25.988001\" />\n\t<text style=\"font-size:2.5px;font-family:OCRA;fill:#ffffff\" id=\"text4602\" font-size=\"2.5\" transform=\"translate(30.7334,64.6006)\">OLED 128x64 </text>\n\n\t<text style=\"font-size:2.5px;font-family:OCRA;fill:#ffffff\" id=\"text4604\" font-size=\"2.5\" transform=\"translate(34.3076,67.6006)\">SSD1306 </text>\n\n\t<text style=\"font-size:2.5px;font-family:OCRA;fill:#ffffff\" id=\"text4606\" font-size=\"2.5\" transform=\"translate(37.8823,70.6006)\">I2C</text>\n\n\t<text style=\"font-size:2.5px;font-family:OCRA;fill:#ffffff\" id=\"text4608\" font-size=\"2.5\" transform=\"translate(29.2227,77.0986)\">blog.squix.ch</text>\n</g>\n</svg>",
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum PixelColor {\n    //% block=\"Black\"\n    Black = 0,\n    //% block=\"White\"\n    White = 1,\n    }\n\n\n    declare const enum AddressScreen {\n    //% block=\"0x78\"\n    x74 = 0x78,\n    //% block=\"0x7A\"\n    x7A = 0x7A,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "ns.ts": "//% color=\"#FF9933\" weight=50 icon=\"\\uf120\"\n//% groups='[\"Oled\", \"More\"]'\nnamespace oled {\n}\n",
            "pxt.json": "{\n    \"name\": \"oled\",\n    \"description\": \"Support for OLED display based on the SSD1306\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"ns.ts\",\n        \"screen.ts\",\n        \"ssd1306.cpp\",\n        \"target_ssd1306.h\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"pxtparts.json\",\n        \"SSD1306_128x64.svg\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "pxtparts.json": "{\n  \"ssd1306\": {\n    \"simulationBehavior\": \"ssd1306\",\n    \"visual\": {\n      \"builtIn\": \"ssd1306\",\n      \"width\": 171.054,\n      \"height\": 170.167,\n      \"pinDistance\": 15,\n      \"pinLocations\": [\n        {\n          \"x\": 62,\n          \"y\": 10.167\n        },\n        {\n          \"x\": 77,\n          \"y\": 10.167\n        },\n        {\n          \"x\": 92,\n          \"y\": 10.167\n        },\n        {\n          \"x\": 107,\n          \"y\": 10.167\n        }\n      ]\n    },\n    \"numberOfPins\": 4,\n    \"instantiation\": {\n      \"kind\": \"singleton\"\n    },\n    \"pinDefinitions\": [\n      {\n        \"target\": \"threeVolt\",\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      },\n      {\n        \"target\": \"ground\",\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      },\n      {\n        \"target\": \"SCL\",\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      },\n      {\n        \"target\": \"SDA\",\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      }\n    ],\n    \"assembly\": [\n      {\n        \"pinIndices\": [\n          0,\n          1,\n          2,\n          3\n        ]\n      }\n    ]\n  }\n}",
            "screen.ts": "/**\n * Basic screen display functionalities\n */\n//% color=\"#FF9933\" weight=50 icon=\"\\uf120\"\n//% groups='[\"Oled\", \"More\"]'\nnamespace oled {\n    const textOffset = 4;\n    const lineOffset = 2;\n\n    const screenHeight = 64;\n    const screenWidth = 64;\n\n    /**\n     * Gets the text line height\n     */\n    export function lineHeight(): number {\n        return 8\n    }\n\n    /**\n     * Number of lines\n     */\n    export function lineCount(): number {\n        return ((screenHeight - textOffset) / lineHeight()) >> 0\n    }\n\n\n    /**\n     * Fill a rectangle with specific color\n     * @param x x-coordinate in pixel of the upper left corner\n     * @param y y-coordinate in pixel of the upper left corner\n     * @param width width of the rectangle\n     * @param height height of the rectangle\n     * @param color filling color of the rectangle\n     */\n    //% group=\"More\" advanced=true\n    //% help=screen/fillRect\n    //% blockId=fill_rect_ssd1306 block=\"fill the rectangle at %x %y with %width %height in %color\"\n    //% parts=\"ssd1306\"\n    export function fillRect(x: number, y: number, width: number, height: number, color: PixelColor): void{\n\n    }\n\n    /**\n     * Show text on the screen at a specific line.\n     * @param text the text to print on the screen, eg: \"Hello world\"\n     * @param line the line number to print the text at (starting at 1), eg: 1\n     */\n    //% blockId=displayshowstring block=\"show string %text|at line %line\"\n    //% weight=98 inlineInputMode=\"inline\" blockGap=8\n    //% group=\"Screen\"\n    //% help=display/show-string\n    export function showString(text: string, line: number) {\n        // line indexing starts at 1.\n        line = (line - 1) >> 0;\n        const nlines = lineCount();\n        if (line < 0 || line >= nlines) return; // out of screen\n        \n        const h = lineHeight();\n        const y = textOffset + h * line;\n        fillRect(0, y, screenWidth, h, PixelColor.Black); // clear background\n        printString(text, PixelColor.White, 0, y)\n    }\n\n    /**\n     * Shows a number on the screen\n     * @param value the numeric value\n     * @param line the line number to print the text at (starting at 1), eg: 1\n     */\n    //% blockId=displayshownumber block=\"show number %name|at line %line\"\n    //% weight=96 inlineInputMode=\"inline\" blockGap=8\n    //% group=\"Screen\"\n    //% help=display/show-number\n    //% line.min=1 line.max=10\n    export function showNumber(value: number, line: number) {\n        showString(\"\" + value, line);\n    }\n\n    /**\n     * Shows a name, value pair on the screen\n     * @param value the numeric value\n     * @param line the line number to print the text at (starting at 1), eg: 1\n     */\n    //% blockId=displayshowvalue block=\"show value %name|: %text|at line %line\"\n    //% weight=94 inlineInputMode=\"inline\" blockGap=8\n    //% group=\"Screen\"\n    //% help=display/show-value\n    //% line.min=1 line.max=10\n    export function showValue(name: string, value: number, line: number) {\n        value = Math.round(value * 1000) / 1000;\n        showString((name ? name + \": \" : \"\") + value, line);\n    }\n\n    /**\n     * Clear the screen\n     */\n    //% blockId=displayclear block=\"clear display\"\n    //% weight=90\n    //% group=\"Screen\"\n    //% help=display/clear\n    export function clear() {\n        fillScreen(PixelColor.Black)\n    }\n\n}\n\n\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace oled {\n\n    /**\n     * @brief Initialized screen\n     *\n     */\n    //% group=\"More\" advanced=true\n    //% help=screen/ssd1306_init_screen\n    //% blockId=ssd1306_init_screen block=\"Initialized screen on address %address, with width %width and height %height\"\n    //% parts=\"ssd1306\" weight=95 address.defl=0x74 width.defl=128 height.defl=64 shim=oled::initScreen\n    function initScreen(address?: AddressScreen, width?: uint16, height?: uint16): void;\n\n    /**\n     * @brief Print string on screen at the given position\n     *\n     * @param x pixel coordinate on X axis\n     * @param y pixel coordinate on Y axis\n     * @param str the string to print\n     * @param color the color use to print on screen\n     */\n    //% group=\"More\" advanced=true\n    //% help=screen/printString\n    //% blockId=print_string_ssd1306 block=\"print %str on screen in %color at x: %x|y: %y\"\n    //% parts=\"ssd1306\" shim=oled::printString\n    function printString(str: string, color: PixelColor, x: uint8, y: uint8): void;\n\n    /**\n     * @brief Fill the screen with specific color\n     *\n     * @param color the color use to fill the screen\n     */\n    //% group=\"More\" advanced=true\n    //% help=screen/fillScreen\n    //% blockId=fill_screen_ssd1306 block=\"fill the screen in %color\"\n    //% parts=\"ssd1306\" shim=oled::fillScreen\n    function fillScreen(color: PixelColor): void;\n\n    /**\n     * @brief set the color of a specific pixel\n     *\n     * @param x the coordinate pixel on X axis\n     * @param y the coordinate pixel on Y axis\n     * @param color the color of the pixel\n     */\n    //% group=\"More\" advanced=true\n    //% help=screen/setPixel\n    //% blockId=set_pixel_ssd1306 block=\"set pixel at %x, %y to %color\"\n    //% parts=\"ssd1306\" shim=oled::setPixel\n    function setPixel(x: uint8, y: uint8, color: PixelColor): void;\n\n    /**\n     * @brief Define if the screen should be inverted\n     *\n     * @param invert if True the screen is inverted, otherwise False\n     */\n    //% group=\"More\" advanced=true\n    //% help=screen/invertScreen\n    //% blockId=invert_screen_ssd1306 block=\"invert the screen : %invert\"\n    //% parts=\"ssd1306\" shim=oled::invertScreen\n    function invertScreen(invert: boolean): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "ssd1306.cpp": "#include \"pxt.h\"\n#include \"target_ssd1306.h\"\n\nenum class PixelColor {\n    //% block=\"Black\"\n    Black = 0,\n    //% block=\"White\"\n    White = 1\n};\n\nenum class AddressScreen {\n    //% block=\"0x78\"\n    x74 = 0x78,\n    //% block=\"0x7A\"\n    x7A = 0x7A\n};\n\nnamespace pxt {\nSINGLETON(WSSD1306);\n}\n\nnamespace oled {\n\n/**\n * @brief Transform a pixel color in unsigned int\n *\n * @param color the color to transform\n *\n * @return the unsigned integer representing the Color inside the driver\n */\nconstexpr uint16_t toLocalColor(PixelColor color) {\n    return (color == PixelColor::Black ? 0 : 1);\n}\n\n/**\n * @brief Initialized screen\n *\n */\n//% group=\"More\" advanced=true\n//% help=screen/ssd1306_init_screen\n//% blockId=ssd1306_init_screen block=\"Initialized screen on address %address, with width %width and height %height\"\n//% parts=\"ssd1306\" weight=95 address.defl=0x74 width.defl=128 height.defl=64\nvoid initScreen(AddressScreen address, uint16_t width, uint16_t height) {\n    getWSSD1306()->initScreen((uint16_t)address, width, height);\n}\n\n/**\n * @brief Print string on screen at the given position\n *\n * @param x pixel coordinate on X axis\n * @param y pixel coordinate on Y axis\n * @param str the string to print\n * @param color the color use to print on screen\n */\n//% group=\"More\" advanced=true\n//% help=screen/printString\n//% blockId=print_string_ssd1306 block=\"print %str on screen in %color at x: %x|y: %y\"\n//% parts=\"ssd1306\"\nvoid printString(String str, PixelColor color, uint8_t x, uint8_t y) {\n    getWSSD1306()->screen.drawText(str->getUTF8Data(), x, y, toLocalColor(color));\n    getWSSD1306()->screen.show();\n}\n\n/**\n * @brief Fill the screen with specific color\n *\n * @param color the color use to fill the screen\n */\n//% group=\"More\" advanced=true\n//% help=screen/fillScreen\n//% blockId=fill_screen_ssd1306 block=\"fill the screen in %color\"\n//% parts=\"ssd1306\"\nvoid fillScreen(PixelColor color) {\n    getWSSD1306()->screen.fill(toLocalColor(color));\n    getWSSD1306()->screen.show();\n}\n\n/**\n * @brief set the color of a specific pixel\n *\n * @param x the coordinate pixel on X axis\n * @param y the coordinate pixel on Y axis\n * @param color the color of the pixel\n */\n//% group=\"More\" advanced=true\n//% help=screen/setPixel\n//% blockId=set_pixel_ssd1306 block=\"set pixel at %x, %y to %color\"\n//% parts=\"ssd1306\"\nvoid setPixel(uint8_t x, uint8_t y, PixelColor color) {\n    getWSSD1306()->screen.drawPixel(x, y, toLocalColor(color));\n    getWSSD1306()->screen.show();\n}\n\n/**\n * @brief Define if the screen should be inverted\n *\n * @param invert if True the screen is inverted, otherwise False\n */\n//% group=\"More\" advanced=true\n//% help=screen/invertScreen\n//% blockId=invert_screen_ssd1306 block=\"invert the screen : %invert\"\n//% parts=\"ssd1306\"\nvoid invertScreen(bool invert) {\n    getWSSD1306()->screen.invert(invert);\n    getWSSD1306()->screen.show();\n}\n} // namespace oled\n",
            "target_ssd1306.h": "#include \"pxt.h\"\n#include \"ssd1306.h\"\n\nnamespace pxt {\nclass WSSD1306 {\n  private:\n    CODAL_I2C *i2c;\n\n  public:\n    static constexpr uint16_t I2C_ADDRESS = 0x78;\n    static constexpr uint16_t WIDTH = 128;\n    static constexpr uint16_t HEIGHT = 64;\n\n    codal::SSD1306_I2C screen;\n\n    WSSD1306() : i2c(pxt::getI2C(LOOKUP_PIN(SDA), LOOKUP_PIN(SCL))), screen(i2c, I2C_ADDRESS, WIDTH, HEIGHT, false) {\n        screen.init();\n    }\n\n    void initScreen(uint16_t address, uint16_t width, uint16_t height) {\n        screen = codal::SSD1306_I2C(i2c, address, width, height, false);\n        screen.init();\n    }\n};\n} // namespace pxt\n"
        },
        "wifi": {
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum HttpMethod {\n    //%\n    GET = 0,\n    //%\n    POST = 1,\n    //%\n    PUT = 2,\n    //%\n    HEAD = 3,\n    //%\n    DELETE = 4,\n    //%\n    PATCH = 5,\n    //%\n    OPTIONS = 6,\n    //%\n    CONNECT = 7,\n    //%\n    TRACE = 8,\n    }\ndeclare namespace wifi {\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "pxt.json": "{\n    \"name\": \"wifi\",\n    \"description\": \"Wifi support for the module ISM43362-M3G-L44\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"enums.d.ts\",\n        \"shims.d.ts\",\n        \"wifi.ts\",\n        \"wifi.cpp\",\n        \"target_wifi.h\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\n\n\n    /**\n     * Support for additional wifi services.\n     */\n    //%weight=40 icon=\"\\uf1eb\"\ndeclare namespace wifi {\n\n    /**\n     * @brief Execute HTTP method.\n     * @param method HTTP method, eg: HttpMethod.GET\n     * @param host Host, eg: \"google.com\"\n     * @param port Port, eg: 80\n     * @param urlPath Path, eg: \"/search?q=something\"\n     * @param headers Headers\n     * @param body Body\n     */\n    //% blockId=wifi_execute_http_method blockHidden=1 shim=wifi::executeHttpMethod\n    function executeHttpMethod(method: HttpMethod, host: string, port: int32, urlPath: string, headers: string, body: string, time: int32): void;\n\n    /**\n     * Used internally by the library.\n     */\n    //% shim=wifi::onReceivedData\n    function onReceivedData(handler: () => void): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "target_wifi.h": "#include \"pxt.h\"\n#include \"ISM43362_M3G_L44_driver.h\"\n\nnamespace pxt {\nclass WWifi {\n  private:\n    CODAL_SPI *spi;\n\n  public:\n    IsmDrvClass wifi;\n    uint8_t wifi_status = WL_IDLE_STATUS;\n\n    WWifi()\n        : spi(pxt::getSPI(LOOKUP_PIN(WIFI_ISM43362_MOSI), LOOKUP_PIN(WIFI_ISM43362_MISO), LOOKUP_PIN(WIFI_ISM43362_SCK))),\n          wifi(spi, LOOKUP_PIN(WIFI_ISM43362_CS), LOOKUP_PIN(WIFI_ISM43362_COMMAND_DATA_READY), LOOKUP_PIN(WIFI_ISM43362_RESET),\n               LOOKUP_PIN(WIFI_ISM43362_WAKE_UP)) {}\n};\n} // namespace pxt",
            "wifi.cpp": "#include \"pxt.h\"\n#include \"target_wifi.h\"\n\n#define DEVICE_ID_WIFI_ISM43362_DATA_READY 2510\n#define WIFI_ISM43362_EVT_DATA_READY 1\n\nenum class HttpMethod {\n    //%\n    GET,\n    //%\n    POST,\n    //%\n    PUT,\n    //%\n    HEAD,\n    //%\n    DELETE,\n    //%\n    PATCH,\n    //%\n    OPTIONS,\n    //%\n    CONNECT,\n    //%\n    TRACE\n};\n\nnamespace pxt {\nSINGLETON(WWifi);\n}\n\nuint8_t _sock;\n\n/**\n * Support for additional wifi services.\n */\n//%weight=40 icon=\"\\uf1eb\"\nnamespace wifi {\n\nint networksVisible() {\n    IsmDrvClass &wifi = getWWifi()->wifi;\n    wifi.ES_WIFI_ListAccessPoints();\n    return wifi.ES_WIFI_GetApNbr();\n}\n\nvoid attach(String ssid, String passphrase) {\n    IsmDrvClass &wifi = getWWifi()->wifi;\n    uint8_t &wifi_status = getWWifi()->wifi_status;\n\n    if (wifi.ES_WIFI_Connect(ssid->getUTF8Data(), passphrase->getUTF8Data(), ES_WIFI_SEC_WPA_WPA2) == ES_WIFI_STATUS_OK) {\n        wifi_status = WL_CONNECTED;\n    } else {\n        wifi.ES_WIFI_Disconnect();\n        wifi_status = WL_CONNECT_FAILED;\n    }\n}\n\nbool isAttached() {\n    uint8_t &wifi_status = getWWifi()->wifi_status;\n    return wifi_status == WL_CONNECTED;\n}\n\nvoid detach() {\n    IsmDrvClass &wifi = getWWifi()->wifi;\n    uint8_t &wifi_status = getWWifi()->wifi_status;\n    if (wifi_status != WL_NO_SHIELD) {\n        wifi.ES_WIFI_Disconnect();\n        wifi_status = WL_DISCONNECTED;\n    }\n}\n\n/**\n * @brief  Start building up a packet to send to the remote host\n * @param  ip : IP to which to send the packet\n * @param  port : port to which to send the packet\n * @retval 1 if successful, 0 if there was a problem with the supplied IP address or port\n */\nint connect(IPAddress ip, uint16_t port) {\n    IsmDrvClass &wifi = getWWifi()->wifi;\n\n    int8_t sock;\n    if (_sock == NO_SOCKET_AVAIL) {\n        sock = wifi.getFreeSocket(); // get next free socket\n        if (sock != -1) {\n            _sock = sock;\n        }\n    }\n    if (_sock != NO_SOCKET_AVAIL) {\n        // set connection parameter and start client\n        wifi.ES_WIFI_SetConnectionParam(_sock, ES_WIFI_TCP_CONNECTION, port, ip);\n        wifi.ES_WIFI_StartClientConnection(_sock);\n        return 1;\n    }\n    return 0;\n}\n\n/**\n * @brief  Start building up a packet to send to the remote host\n * @param  host : host to which to send the packet\n * @param  port : port to which to send the packet\n * @retval 1 if successful, 0 if there was a problem with the supplied IP address or port\n */\nint connect(String host, uint16_t port) {\n    IsmDrvClass &wifi = getWWifi()->wifi;\n\n    IPAddress remote_addr; // IP address of the host\n\n    wifi.ES_WIFI_DNS_LookUp(host->getUTF8Data(), &remote_addr);\n    return connect(remote_addr, port);\n}\n\n/**\n * @brief  Get socket state\n   @param  None\n * @retval socket state\n */\nuint8_t status() {\n    IsmDrvClass &wifi = getWWifi()->wifi;\n\n    if (_sock == 255) {\n        return SOCKET_FREE;\n    } else {\n        return wifi.getSocketState(_sock);\n    }\n}\n\n/**\n * @brief  Get connection state\n   @param  None\n * @retval Socket state, FREE or BUSY\n */\nuint8_t connected() {\n    if (_sock == 255) {\n        return 0;\n    } else {\n        return status();\n    }\n}\n\n/**\n * @brief  Close the client connection\n * @param  None\n * @retval None\n */\nvoid stop() {\n    IsmDrvClass &wifi = getWWifi()->wifi;\n\n    if (_sock == NO_SOCKET_AVAIL) {\n        return;\n    }\n    wifi.ES_WIFI_StopServerSingleConn(_sock);\n    _sock = NO_SOCKET_AVAIL;\n}\n\n/**\n * @brief  Read up to size bytes from the current packet and place them into buffer\n * @param  buffer : Where to place read data\n * @param  size : length of data to read\n * @retval Returns the number of bytes read, or 0 if none are available\n */\nint read(char *buf, size_t size) {\n    IsmDrvClass &wifi = getWWifi()->wifi;\n\n    uint16_t receivedLength = 0; // number of data received\n\n    wifi.ES_WIFI_ReceiveData(_sock, (uint8_t *)buf, size, &receivedLength, WIFI_TIMEOUT);\n    if (receivedLength < size) {\n        buf[receivedLength] = '\\0'; // string end\n    }\n    return receivedLength;\n}\n\n/**\n * @brief  Write size bytes from buffer into the packet\n * @param  buf : data to write\n * @param  size : size of data to write\n * @retval size of write data\n */\nsize_t write(const char *buf, size_t size) {\n    IsmDrvClass &wifi = getWWifi()->wifi;\n\n    uint16_t sentLength = 0; // number of data really send\n    uint8_t *temp = (uint8_t *)buf;\n\n    wifi.ES_WIFI_SendResp(_sock, temp, size, &sentLength, WIFI_TIMEOUT);\n    return sentLength;\n}\n\nString getHttpMethodString(HttpMethod method) {\n    switch (method) {\n    case HttpMethod::GET:\n        return String(\"GET\");\n    case HttpMethod::POST:\n        return String(\"POST\");\n    default:\n        return String();\n    }\n}\n\n/**\n * @brief Execute HTTP method.\n * @param method HTTP method, eg: HttpMethod.GET\n * @param host Host, eg: \"google.com\"\n * @param port Port, eg: 80\n * @param urlPath Path, eg: \"/search?q=something\"\n * @param headers Headers\n * @param body Body\n */\n//% blockId=wifi_execute_http_method blockHidden=1\nvoid executeHttpMethod(HttpMethod method, String host, int port, String urlPath, String headers, String body, int time) {\n    String methodName = getHttpMethodString(method);\n\n    if (connect(host, 80)) {\n        write(methodName->getUTF8Data(), methodName->getUTF8Size());\n        write(\" \", 1);\n        write(host->getUTF8Data(), host->getUTF8Size());\n        write(\" HTTP/1.1\\r\\n\", 11);\n\n        write(\"Host: \", 6);\n        write(host->getUTF8Data(), host->getUTF8Size());\n        write(\"\\r\\n\", 2);\n\n        write(\"Connection: Close\\r\\n\", 19);\n\n        if (headers->getLength() > 0) {\n            write(headers->getUTF8Data(), headers->getUTF8Size());\n        }\n        if (body->getLength() > 0) {\n            write(\"\\r\\n\", 2);\n            write(body->getUTF8Data(), body->getUTF8Size());\n        }\n        write(\"\\r\\n\", 2);\n    }\n}\n\n/**\n * Used internally by the library.\n */\n//%\nvoid onReceivedData(Action handler) {\n    registerWithDal(DEVICE_ID_WIFI_ISM43362_DATA_READY, WIFI_ISM43362_EVT_DATA_READY, handler);\n}\n\n} // namespace wifi",
            "wifi.ts": "/**\n * Support for additional wifi services.\n */\n//%weight=40 icon=\"\\uf1eb\" color=#ff5caa\nnamespace wifi {\n  let attached: boolean = false;\n  let initialized: boolean = false;\n\n  let onReceivedHttpResponseHandler: (code: number, message: string) => void;\n\n  function handleDataReceived(): void {\n    onReceivedHttpResponseHandler(200, \"OK\");\n  }\n\n  function init() {\n    if (initialized) return;\n    onReceivedData(handleDataReceived);\n    initialized = true;\n  }\n\n  /**\n   * Registers code to run when data are available on the socket.\n   */\n  //% group=HTTP\n  //% blockId=wifi_http_on_received_response\n  //% block=\"on HTTP-Response received\"\n  //% draggableParameters=reporter\n  //% blockGap = 16\n  //% weight=39\n  export function onReceivedHttpResponse(\n    cb: (code: number, message: string) => void\n  ): void {\n    init();\n    onReceivedHttpResponseHandler = cb;\n  }\n\n  /**\n   * Get the number of networks visible.\n   */\n  //% weight=209\n  //% blockId=wifi_networks_visible block=\"Get the number of visible wifi networks\"\n  //% shim=wifi::networksVisible\n  export function networksVisible(): number {\n    return 1;\n  }\n\n  /**\n   * Connect to the wifi network.\n   */\n  //% weight=209\n  //% blockId=wifi_attach block=\"connect to the wifi network|SSID %ssid|password %password\"\n  //% blockExternalInputs=1\n  //% shim=wifi::attach\n  export function attach(ssid: string, passphrase: string): void {\n    attached = true;\n  }\n\n  /**\n   * Check if we are connected to the wifi network.\n   */\n  //% weight=209\n  //% blockId=wifi_is_connected block=\"network connected?\"\n  //% shim=wifi::isAttached\n  export function isAttached(): boolean {\n    return attached;\n  }\n\n  /**\n   * Disconnect from the wifi network.\n   */\n  //% weight=209\n  //% blockId=wifi_detach block=\"disconnect from wifi network\"\n  //% shim=wifi::detach\n  export function detach(): void {\n    attached = false;\n  }\n\n  /**\n   * The HTTP get request.\n   * @param url url to get\n   * @param time set timeout, eg: 10000\n   */\n  //%group=HTTP\n  //% weight=79\n  //% blockId=wifi_http_get\n  //% block=\"HTTP GET|host %host|path %urlPath|timeout(ms) %time\"\n  //% advanced=false\n  export function sendHttpGet(\n    host: string,\n    urlPath: string,\n    time: number\n  ): void {\n    executeHttpMethod(HttpMethod.GET, host, 80, urlPath, \"\", \"\", time);\n\n    let url = \"http://\" + host + urlPath;\n    console.log(\"HTTP GET: \" + url);\n  }\n\n  /**\n   * The HTTP post request.\n   * @param time set timeout, eg: 10000\n   */\n  //%group=HTTP advanced=true\n  //% weight=78\n  //% blockId=wifi_http_post\n  //% block=\"HTTP POST|host %host|path %urlPath|content %content|timeout(ms) %time\"\n  export function sendHttpPost(\n    host: string,\n    urlPath: string,\n    content: string,\n    time: number\n  ): void {\n    executeHttpMethod(HttpMethod.POST, host, 80, urlPath, \"\", content, time);\n    let url = \"http://\" + host + urlPath;\n    console.log(\"HTTP POST: \" + url + \" \" + content);\n  }\n}\n"
        },
        "magnetics": {
            "enums.d.ts": "",
            "ns.ts": "\n//% color=\"#B4009E\" weight=40 icon=\"\\uf076\"\nnamespace magnetics {\n}",
            "pxt.json": "{\n    \"name\": \"magnetics\",\n    \"description\": \"Radio service for mesh networking\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"radioBLE.cpp\",\n        \"target_radioBLE.h\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"ns.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "radioBLE.cpp": "#include \"pxt.h\"\n#include \"target_radioBLE.h\"\n#include \"HCI_SPI.h\"\n#include \"BLERemoteDevice.h\"\n\n#include <vector>\n\n// CODAL_SPI spiBLE(*LOOKUP_PIN(BLE_SPI_MISO), *LOOKUP_PIN(BLE_SPI_MOSI), *LOOKUP_PIN(BLE_SPI_SCLK));\nCODAL_SPI spiBLE(*lookupPin(43), *lookupPin(44), *lookupPin(42));\nHCI_SPI *hci = new HCI_SPI(spiBLE, *lookupPin(61U), *lookupPin(70U), *lookupPin(8U));\n\nchar stringBuffer[32] = {0};\n\nnamespace pxt {\nSINGLETON(WRadioBLE);\n\nvoid WRadioBLE::configure() {\n    if (isConfigured) {\n        return;\n    }\n\n    ble = new BLEDevice_Component(12345, hci);\n    ble->init();\n\n    isConfigured = true;\n}\n\n} // namespace pxt\n\nnamespace magnetics {\nString get_safe_string(std::vector<uint8_t> &data) {\n\n    std::string result = \"\";\n\n    for (auto c : data) {\n        if (c >= 32 && c <= 126) {\n            result += (char)c;\n        }\n    }\n\n    return mkString(result.c_str(), result.size());\n}\n\n/**\n *  Start the device to sending data (by default the sending is activated)\n *\n */\n//% blockId=ble_start_emitting block=\"Start Send mode\"\n//% help=magnetics/ble_start_emitting weight=95\nvoid startEmitting() {\n    auto radio = getWRadioBLE();\n    radio->configure();\n\n    radio->ble->startAdvertising();\n    radio->isAdvertisingStarted = true;\n}\n\n/**\n *  Stop the device to sending data\n *\n */\n//% blockId=ble_stop_emitting block=\"Stop Send mode\"\n//% help=magnetics/ble_stop_emitting weight=95\nvoid stopEmitting() {\n    auto radio = getWRadioBLE();\n    radio->configure();\n\n    radio->ble->stopAdvertising();\n    radio->isAdvertisingStarted = false;\n}\n\n/**\n * Start the device to receiving data (by default the receiving is activated)\n *\n */\n//% blockId=ble_start_scanning block=\"Start Scan mode\"\n//% help=magnetics/ble_start_scanning weight=91\nvoid startScanning() {\n    auto radio = getWRadioBLE();\n    radio->configure();\n\n    radio->ble->startScanning();\n    radio->isScanningStarted = true;\n}\n\n/**\n * Stop the device to receiving data\n *\n */\n//% blockId=ble_stop_scanning block=\"Stop Scan mode\"\n//% help=magnetics/ble_stop_scanning weight=91\nvoid stopScanning() {\n    auto radio = getWRadioBLE();\n    radio->configure();\n\n    radio->ble->stopScanning();\n    radio->isScanningStarted = false;\n}\n\n/**\n * Set the BLE device local name\n *\n * @param name The name\n */\n//% blockId=ble_set_local_name block=\"BLE device name : %name\"\n//% help=magnetics/ble_set_local_name weight=90\nvoid setLocalName(String name) {\n    auto radio = getWRadioBLE();\n    radio->configure();\n\n    radio->advData.setLocalName(name->getUTF8Data());\n    radio->ble->setAdvertisingData(radio->advData);\n}\n\n/**\n * Send string data\n *\n */\n//% blockId=ble_set_string_data block=\"BLE send string %data\"\n//% help=magnetics/ble_set_string_data weight=71\nvoid setAdvertisingStringData(String data) {\n    auto radio = getWRadioBLE();\n    radio->configure();\n\n    radio->scanData.setUserData(data->getUTF8Data());\n    radio->ble->setScanResponseData(radio->scanData);\n}\n\n/**\n * Send \"key:value\" data\n *\n */\n//% blockId=ble_set_keyvalue_data block=\"BLE send key %key: value %value\"\n//% help=magnetics/ble_set_keyvalue_data weight=70\nvoid setAdvertisingKeyValueData(String key, float value) {\n    auto radio = getWRadioBLE();\n    radio->configure();\n\n    int32_t intPart = (int32_t)value;\n    int8_t fracPart = ((int32_t)value * 100) - (intPart * 100);\n    int size = sprintf(stringBuffer, \"%s:%d.%d\", key->getUTF8Data(), intPart, fracPart);\n\n    if (size < 0) {\n        setAdvertisingStringData(mkString(\"ERROR. KEY/VALUE\", 16));\n    } else {\n        setAdvertisingStringData(mkString(stringBuffer, size));\n    }\n}\n\n/**\n * Is there any data from a device with specific name ?\n *\n */\n//% blockId=ble_available_data_from_name block=\"is available BLE data from %name\"\n//% help=magnetics/ble_available_data_from_name weight=65\nbool availableDataFromName(String name) {\n    auto radio = getWRadioBLE();\n    radio->configure();\n\n    return radio->ble->availableScan(name->getUTF8Data()) > 0;\n}\n\n/**\n * Get the data from the device with a specific name (if there are multiple device with the same name, the first who emit will\n * be use)\n *\n */\n//% blockId=ble_receive_data_from_name block=\"BLE receive data from %name\"\n//% help=magnetics/ble_receive_data_from_name weight=65\nString readDataFromName(String name) {\n    auto radio = getWRadioBLE();\n    radio->configure();\n\n    std::vector<BLERemoteDevice> result = radio->ble->getScanResult(name->getUTF8Data());\n\n    if (result.size() > 0) {\n        auto firstDevice = result[0];\n        auto servicesDatas = firstDevice.getAllServiceDatas();\n\n        if (servicesDatas.size() > 0) {\n            return get_safe_string(servicesDatas[0].data);\n        }\n    }\n    return mkString(\"\", 0);\n}\n\n/**\n * Run some code when we receive new message from device\n */\n//% blockId=ble_on_new_message block=\"on new message from %name\"\n//% help=magnetics/ble_on_new_message weight=60\nvoid onNewMessageReceived(String name, Action handler) {}\n\n} // namespace magnetics\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace magnetics {\n\n    /**\n     *  Start the device to sending data (by default the sending is activated)\n     *\n     */\n    //% blockId=ble_start_emitting block=\"Start Send mode\"\n    //% help=magnetics/ble_start_emitting weight=95 shim=magnetics::startEmitting\n    function startEmitting(): void;\n\n    /**\n     *  Stop the device to sending data\n     *\n     */\n    //% blockId=ble_stop_emitting block=\"Stop Send mode\"\n    //% help=magnetics/ble_stop_emitting weight=95 shim=magnetics::stopEmitting\n    function stopEmitting(): void;\n\n    /**\n     * Start the device to receiving data (by default the receiving is activated)\n     *\n     */\n    //% blockId=ble_start_scanning block=\"Start Scan mode\"\n    //% help=magnetics/ble_start_scanning weight=91 shim=magnetics::startScanning\n    function startScanning(): void;\n\n    /**\n     * Stop the device to receiving data\n     *\n     */\n    //% blockId=ble_stop_scanning block=\"Stop Scan mode\"\n    //% help=magnetics/ble_stop_scanning weight=91 shim=magnetics::stopScanning\n    function stopScanning(): void;\n\n    /**\n     * Set the BLE device local name\n     *\n     * @param name The name\n     */\n    //% blockId=ble_set_local_name block=\"BLE device name : %name\"\n    //% help=magnetics/ble_set_local_name weight=90 shim=magnetics::setLocalName\n    function setLocalName(name: string): void;\n\n    /**\n     * Send string data\n     *\n     */\n    //% blockId=ble_set_string_data block=\"BLE send string %data\"\n    //% help=magnetics/ble_set_string_data weight=71 shim=magnetics::setAdvertisingStringData\n    function setAdvertisingStringData(data: string): void;\n\n    /**\n     * Send \"key:value\" data\n     *\n     */\n    //% blockId=ble_set_keyvalue_data block=\"BLE send key %key: value %value\"\n    //% help=magnetics/ble_set_keyvalue_data weight=70 shim=magnetics::setAdvertisingKeyValueData\n    function setAdvertisingKeyValueData(key: string, value: number): void;\n\n    /**\n     * Is there any data from a device with specific name ?\n     *\n     */\n    //% blockId=ble_available_data_from_name block=\"is available BLE data from %name\"\n    //% help=magnetics/ble_available_data_from_name weight=65 shim=magnetics::availableDataFromName\n    function availableDataFromName(name: string): boolean;\n\n    /**\n     * Get the data from the device with a specific name (if there are multiple device with the same name, the first who emit will\n     * be use)\n     *\n     */\n    //% blockId=ble_receive_data_from_name block=\"BLE receive data from %name\"\n    //% help=magnetics/ble_receive_data_from_name weight=65 shim=magnetics::readDataFromName\n    function readDataFromName(name: string): string;\n\n    /**\n     * Run some code when we receive new message from device\n     */\n    //% blockId=ble_on_new_message block=\"on new message from %name\"\n    //% help=magnetics/ble_on_new_message weight=60 shim=magnetics::onNewMessageReceived\n    function onNewMessageReceived(name: string, handler: () => void): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "target_radioBLE.h": "#pragma once\n\n#include \"pxt.h\"\n\n#include \"BLEDevice_Component.h\"\n#include \"AdvertisingData.h\"\n#include \"AdvertisingFlagsBuilder.h\"\n\nnamespace pxt {\nclass WRadioBLE {\n  private:\n  public:\n    codal::BLEDevice_Component *ble;\n    AdvertisingData advData;\n    AdvertisingData scanData;\n    bool isAdvertisingStarted;\n    bool isScanningStarted;\n\n    WRadioBLE() : ble(nullptr), isAdvertisingStarted(false), isScanningStarted(false), isConfigured(false) {\n        advData.setFlags(AdvertisingFlagsBuilder().addBrEdrNotSupported().addLeGeneralDiscoverableMode().build());\n    }\n\n    void configure();\n\n  private:\n    bool isConfigured;\n};\n} // namespace pxt\n"
        },
        "datalogger": {
            "datalogger.ts": "/**\n * A tiny data logging framework\n */\n//% weight=80 color=#00a0a0 icon=\"\" blockGap=8\n//% groups='[\"Data\", \"Configuration\"]'\nnamespace datalogger {\n\n    let separator = ',';\n    let _headers: string[] = undefined;\n    let _headersWritten: boolean = false;\n    let _row: number[] = undefined;\n    let _samples: number[] = undefined;\n    let _start: number;\n    let _enabled = true;\n    let _samplingInterval = -1;\n    let _lastSampleTime = -1;\n    let _console = false;\n\n    function clear() {\n        _headers = undefined;\n        _row = undefined;\n    }\n\n    function sendHeaders(){\n        const line = _headers.join(separator);\n        Serial.writeLine(`sep=${separator}`);\n        Serial.writeLine(line);\n    }\n\n    function sendRow(){\n        const line = _row.join(separator);\n        Serial.writeLine(line);\n    }\n\n    function initRow() {\n        if (_row) return;\n\n        if (!_headers) {\n            _headers = [];\n            _headersWritten = false;\n            _start = control.millis();\n        }\n        _row = [];\n        _samples = [];\n        _lastSampleTime = control.millis();\n        const s = (_lastSampleTime - _start) / 1000;\n        addValue(\"time\", s);\n    }\n\n    function commitRow() {\n        // write row if any data\n        if (_row && _row.length > 0) {\n            \n            // write headers for the first row\n            if (!_headersWritten) {\n                sendHeaders();\n                if (_console){\n                    console.log(_headers.slice(1).join(separator));\n                }\n                _headersWritten = true;\n            }\n\n            // commit row data\n            if (_samplingInterval <= 0 || control.millis() - _lastSampleTime >= _samplingInterval) {\n\n                // average data\n                for(let i = 1; i < _row.length; ++i) {\n                    _row[i] /= _samples[i];\n                }\n\n                // append row\n                sendRow();\n\n                if (_console) {\n                    // drop time\n                    console.log(_row.slice(1).join(separator));\n                }\n\n                // clear values\n                _row = undefined;\n                _lastSampleTime = -1;\n            }\n        }\n    }\n\n    /**\n     * Start a new row of data\n     */\n    //% group=\"Data\"\n    //% weight=100\n    //% blockId=datalogAddRow block=\"data logger add row\"\n    //% help=datalogger/add-row\n    export function addRow(): void {\n        if (!_enabled) return;\n\n        commitRow();\n        initRow();\n    }\n\n    /**\n     * Add a named value to the row of data\n     * @param name name of the cell, eg: \"x\"\n     * @param value value of the cell, eg: 0\n     */\n    //% group=\"Data\"\n    //% weight=99\n    //% blockId=datalogAddValue block=\"data logger add %name|=%value\"\n    //% blockGap=12\n    //% help=datalogger/add-value\n    export function addValue(name: string, value: number) {\n        if (!_row) return;\n\n        let idx = -1;\n\n        // happy path\n        if (_headers[_row.length] === name)\n            idx = _row.length;\n        else {\n            idx = _headers.indexOf(name);\n            if (idx < 0) {\n                _headers.push(name);\n                idx = _headers.length - 1;\n            }\n        }\n\n        if( _row[idx] == undefined ){\n            _row[idx] = value;\n            _samples[idx] = 1;\n        }\n        else{\n            _row[idx] += value;\n            _samples[idx] += 1;\n        }\n    }\n\n    /**\n     * Commits any buffered row to disk\n     */\n    //%\n    export function flush() {\n    }\n\n    /**\n     * Set the minimum number of milliseconds between rows\n     * @param millis milliseconds between each sample, eg: 50\n     */\n    //% group=\"Configuration\"\n    //% blockId=datalogSetSamplingInterval block=\"set data logger sampling interval to $millis|(ms)\"\n    //% millis.shadow=timePicker\n    //% help=datalogger/set-sample-interval\n    export function setSampleInterval(millis: number) {\n        _samplingInterval = millis >> 0;\n    }\n\n    /**\n     * Turn on or off datalogging\n     * @param enabled \n     */\n    //% group=\"Configuration\"\n    //% blockId=datalogEnabled block=\"data logger $enabled\"\n    //% enabled.shadow=toggleOnOff\n    //% help=datalogger/set-enabled\n    export function setEnabled(enabled: boolean) {\n        flush();\n        _enabled = enabled;\n    }\n\n    /**\n     * Send the data logger output to the console\n     * @param enabled \n     */\n    //% group=\"Configuration\"\n    //% blockId=\"datalogConsole\" block=\"data logger to console $enabled\"\n    //% enabled.shadow=toggleOnOff\n    //% help=datalogger/send-to-console\n    export function sendToConsole(enabled: boolean) {\n        _console = enabled;\n    }\n}\n",
            "pxt.json": "{\n    \"name\": \"datalogger\",\n    \"description\": \"Tiny data serial logging framework\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"serial\": \"*\"\n    },\n    \"files\": [\n        \"datalogger.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n"
        },
        "hcsr04": {
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum MHCSR04Unit {\n    //% block=\"m\"\n    M = 0,\n    //% block=\"dm\"\n    Dm = 1,\n    //% block=\"cm\"\n    Cm = 2,\n    //% block=\"mm\"\n    Mm = 3,\n    }\n\n\n    declare const enum MDistanceBehold {\n    //% block=\"Near\"\n    Near = 0,\n    //% block=\"Far\"\n    Far = 1,\n    }\ndeclare namespace HCSR04 {\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "hcsr04.cpp": "#include \"pxt.h\"\n#include \"target_hcsr04.h\"\n\nenum class MHCSR04Unit {\n    //% block=\"m\"\n    M = 0, \n    //% block=\"dm\"\n    Dm = 1, \n    //% block=\"cm\"\n    Cm = 2, \n    //% block=\"mm\"\n    Mm = 3\n};\n\nenum class MDistanceBehold {\n    //% block=\"Near\"\n    Near = 0, \n    //% block=\"Far\"\n    Far = 1\n};\n\n\nnamespace pxt {\n    SINGLETON(WHCSR04);\n}\n\n//% color=\"#456F93\" icon=\"\\uf028\" blockGap=8\nnamespace HCSR04 {\n    \n/**\n * @brief Get the value of the sensor \n *\n * @param unit the unit of the distance\n * @return uint16_t\n */\n//% block=\"get distance in %unit\"\n//% blockId=\"hcsr04_get_distance\"\n//% group=\"HCSR04\" weight=76\n//% parts=\"hcsr04\"\nuint16_t getDistance(MHCSR04Unit unit) {\n    return getWHCSR04()->hcsr04->getDistance(static_cast<codal::HCSR04Unit>(unit));\n}\n\nvoid callActionNear() {\n    runInParallel(getWHCSR04()->actNear);\n}\n\nvoid callActionFar() {\n    runInParallel(getWHCSR04()->actFar);\n}\n\n/**\n * @brief Creates a new event that triggers when the sensor is near or far of the distance\n *\n * @param fromDistanceIs the direction that triggers the event\n * @param distance the value \n * @param unit the unit of the distance\n * @param handler what the event does\n */\n//% block=\"on distance %fromDistanceIs from %distance %unit\"\n//% blockId=\"hcsr04_register_distance_event\"\n//% group=\"HCSR04\" weight=67\n//% parts=\"hcsr04\"\nvoid onDistanceFrom(MDistanceBehold fromDistanceIs, uint16_t distance, MHCSR04Unit unit, Action handler) {\n    switch (fromDistanceIs)\n    {\n    case MDistanceBehold::Near : \n        getWHCSR04()->actNear = handler;\n        getWHCSR04()->hcsr04->registerDistanceEvent(static_cast<codal::DistanceBehold>(fromDistanceIs), distance, static_cast<codal::HCSR04Unit>(unit), callActionNear);\n        break;\n    case MDistanceBehold::Far : \n        getWHCSR04()->actFar = handler;\n        getWHCSR04()->hcsr04->registerDistanceEvent(static_cast<codal::DistanceBehold>(fromDistanceIs), distance, static_cast<codal::HCSR04Unit>(unit), callActionFar);\n        break;\n    default:\n        break;\n    }\n}\n \n} // namespace HCSR04\n",
            "pxt.json": "{\n    \"name\": \"hcsr04\",\n    \"description\": \"Library for the HC-SR04 sensor\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"hcsr04.cpp\",\n        \"target_hcsr04.h\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"pxtparts.json\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "pxtparts.json": "{\n  \"hcsr04\": {\n    \"simulationBehavior\": \"hcsr04\",\n    \"visual\": {\n      \"builtIn\": \"hcsr04\",\n      \"width\": 250,\n      \"height\": 116.3769,\n      \"pinDistance\": 15,\n      \"pinLocations\": [\n        {\n          \"x\": 110,\n          \"y\": 10\n        },\n        {\n          \"x\": 121,\n          \"y\": 10\n        },\n        {\n          \"x\": 132,\n          \"y\": 10\n        },\n        {\n          \"x\": 143,\n          \"y\": 10\n        }\n      ]\n    },\n    \"numberOfPins\": 4,\n    \"instantiation\": {\n      \"kind\": \"singleton\"\n    },\n    \"pinDefinitions\": [\n      {\n        \"target\": \"fiveVolt\",\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      },\n      {\n        \"target\": \"D6\",\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      },\n      {\n        \"target\": \"D7\",\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      },\n      {\n        \"target\": \"ground\",\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      }\n    ],\n    \"assembly\": [\n      {\n        \"pinIndices\": [0, 1, 2, 3]\n      }\n    ]\n  }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\n\n\n\n    //% color=\"#456F93\" icon=\"\\uf028\" blockGap=8\ndeclare namespace HCSR04 {\n\n    /**\n     * @brief Get the value of the sensor \n     *\n     * @param unit the unit of the distance\n     * @return uint16_t\n     */\n    //% block=\"get distance in %unit\"\n    //% blockId=\"hcsr04_get_distance\"\n    //% group=\"HCSR04\" weight=76\n    //% parts=\"hcsr04\" shim=HCSR04::getDistance\n    function getDistance(unit: MHCSR04Unit): uint16;\n\n    /**\n     * @brief Creates a new event that triggers when the sensor is near or far of the distance\n     *\n     * @param fromDistanceIs the direction that triggers the event\n     * @param distance the value \n     * @param unit the unit of the distance\n     * @param handler what the event does\n     */\n    //% block=\"on distance %fromDistanceIs from %distance %unit\"\n    //% blockId=\"hcsr04_register_distance_event\"\n    //% group=\"HCSR04\" weight=67\n    //% parts=\"hcsr04\" shim=HCSR04::onDistanceFrom\n    function onDistanceFrom(fromDistanceIs: MDistanceBehold, distance: uint16, unit: MHCSR04Unit, handler: () => void): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "target_hcsr04.h": "#include \"HCSR04Sensor.h\"\n#include \"pxt.h\"\n\nnamespace pxt {\nclass WHCSR04 {\n  public:\n    codal::HCSR04Sensor *hcsr04;\n    Action actNear;\n    Action actFar;\n\n    WHCSR04() { \n      hcsr04 = new codal::HCSR04Sensor(*LOOKUP_PIN(D6), *LOOKUP_PIN(D7), 1337);\n    }\n};\n} // namespace pxt\n"
        },
        "lcd_i2c": {
            "README.md": "# lcd\n\nPorted from STM32 lcd Support.\n",
            "lcd_i2c.cpp": "#include \"pxt.h\"\n#include \"target_lcd_i2c.h\"\n\nnamespace pxt {\nSINGLETON(WLCDI2C);\n}\n\nnamespace lcd_i2c {\nuint8_t strAddressToNumber(String addr) {\n    uint8_t result = 0;\n\n    for (uint8_t i = 0; i < 2 && i < addr->getLength(); i++) {\n        char c = *(addr->getUTF8DataAt(i));\n\n        if (c >= '0' && c <= '9') {\n            result += c - '0';\n        } else if (c >= 'A' && c <= 'F') {\n            result += 10 + (c - 'A');\n        } else if (c >= 'a' && c <= 'f') {\n            result += 10 + (c - 'a');\n        } else {\n            return 0;\n        }\n    }\n\n    return result;\n}\n\n/**\n * @brief Initialise the 16x2 screen with address 0x4E\n */\n//% blockId=\"I2C_LCD_INIT\"\n//% block=\"init i2c LCD\"\n//% weight=100\n//% blockGap=8\n//% parts=lcd_i2c\nvoid initScreen() {\n    if (getWLCDI2C()->lcd != nullptr) {\n        delete getWLCDI2C()->lcd;\n    }\n\n    getWLCDI2C()->lcd = new codal::I2C_LCD(getWLCDI2C()->i2c, 0x4E, 16, 2);\n    getWLCDI2C()->lcd->init();\n    getWLCDI2C()->lcd->backlightOn();\n}\n\n/**\n * @brief Initialise the 16x2 screen with specific address\n *\n * @param address the hexadecimal address of the screen, eg: \"4E\"\n */\n//% blockId=\"I2C_LCD_INIT_ADDRESS\"\n//% block=\"init i2c LCD 0x%address\"\n//% weight=99\n//% blockGap=8\n//% parts=lcd_i2c trackArgs=0\nvoid initScreenAddress(String address) {\n    if (getWLCDI2C()->lcd != nullptr) {\n        delete getWLCDI2C()->lcd;\n    }\n\n    getWLCDI2C()->lcd = new codal::I2C_LCD(getWLCDI2C()->i2c, strAddressToNumber(address), 16, 2);\n    getWLCDI2C()->lcd->init();\n    getWLCDI2C()->lcd->backlightOn();\n}\n\n/**\n * Set cursor position at given position\n * @param x is lcd column position, eg: 0\n * @param y is lcd row position, eg: 0\n */\n//% blockId=\"I2C_LCD_SET_CURSOR\"\n//% block=\"set cursor position |at x %x|y %y\"\n//% weight=89\n//% blockGap=8\n//% x.min=0 x.max=15\n//% y.min=0 y.max=1\n//% parts=lcd_i2c trackArgs=0\nvoid setCursor(uint8_t x, uint8_t y) {\n    if (getWLCDI2C()->lcd == nullptr)\n        return;\n\n    getWLCDI2C()->lcd->setCursor(x, y);\n}\n\n/**\n * Show a number in lcd at given position\n * @param n is number will be show, eg: 10, 100, 200\n */\n//% blockId=\"I2C_LCD_SHOW_NUMBER\"\n//% block=\"show number %n\"\n//% weight=90\n//% blockGap=8\n//% parts=lcd_i2c trackArgs=0\nvoid ShowNumber(int n) {\n    if (getWLCDI2C()->lcd == nullptr)\n        return;\n\n    getWLCDI2C()->lcd->print(n);\n}\n\n/**\n * Show a string in lcd at given position\n * @param s is string will be show, eg: \"Hello\"\n */\n//% blockId=\"I2C_LCD_SHOW_STRING\"\n//% block=\"show string %s\"\n//% weight=90\n//% blockGap=8\n//% parts=lcd_i2c trackArgs=0\nvoid ShowString(String s) {\n    if (getWLCDI2C()->lcd == nullptr)\n        return;\n\n    getWLCDI2C()->lcd->print(s->getUTF8Data());\n}\n\n/**\n * Show a name:value pair in lcd at given position\n * @param name : a string that is the name part of the name:value pair, eg: \"x\"\n * @param value : a number that is the value part of the name:value pair, eg: 0\n */\n//% blockId=\"I2C_LCD_SHOW_VALUE\"\n//% block=\"show value %name = %value\"\n//% weight=90\n//% blockGap=8\n//% parts=lcd_i2c trackArgs=0\nvoid ShowValue(String name, int value) {\n    if (getWLCDI2C()->lcd == nullptr)\n        return;\n\n    getWLCDI2C()->lcd->print(name->getUTF8Data());\n    getWLCDI2C()->lcd->print(':');\n    getWLCDI2C()->lcd->print(value);\n}\n\n/**\n * Clear all display content\n */\n//% blockId=\"I2C_LCD_CLEAR\"\n//% block=\"clear screen\"\n//% weight=85\n//% blockGap=8\n//% parts=lcd_i2c trackArgs=0\nvoid clear() {\n    if (getWLCDI2C()->lcd == nullptr)\n        return;\n\n    getWLCDI2C()->lcd->clear();\n}\n\n/**\n * Turn on lcd backlight\n */\n//% blockId=\"I2C_LCD_BACKLIGHT_ON\"\n//% block=\"turn on backlight\"\n//% group=\"Backlight\"\n//% weight=71\n//% blockGap=8\n//% parts=lcd_i2c trackArgs=0\nvoid BacklightOn() {\n    if (getWLCDI2C()->lcd == nullptr)\n        return;\n\n    getWLCDI2C()->lcd->backlightOn();\n}\n\n/**\n * Turn off lcd backlight\n */\n//% blockId=\"I2C_LCD_BACKLIGHT_OFF\"\n//% block=\"turn off backlight\"\n//% group=\"Backlight\"\n//% weight=70\n//% blockGap=8\n//% parts=lcd_i2c trackArgs=0\nvoid BacklightOff() {\n    if (getWLCDI2C()->lcd == nullptr)\n        return;\n\n    getWLCDI2C()->lcd->backlightOff();\n}\n\n/**\n * Show a number in lcd at given position\n * @param n is number will be show, eg: 10, 100, 200\n * @param x is lcd column position, eg: 0\n * @param y is lcd row position, eg: 0\n */\n//% blockId=\"I2C_LCD_SHOW_NUMBER_AT_POS\"\n//% block=\"show number %n|at x %x|y %y\"\n//% group=\"More\"\n//% weight=10\n//% blockGap=8\n//% x.min=0 x.max=15\n//% y.min=0 y.max=1\n//% parts=lcd_i2c trackArgs=0\nvoid ShowNumberAtPos(int n, uint8_t x, uint8_t y) {\n    if (getWLCDI2C()->lcd == nullptr)\n        return;\n\n    getWLCDI2C()->lcd->setCursor(x, y);\n    ShowNumber(n);\n}\n\n/**\n * Show a string in lcd at given position\n * @param s is string will be show, eg: \"Hello\"\n * @param x is lcd column position, [0 - 15], eg: 0\n * @param y is lcd row position, [0 - 1], eg: 0\n */\n//% blockId=\"I2C_LCD_SHOW_STRING_AT_POS\"\n//% block=\"show string %s|at x %x|y %y\"\n//% group=\"More\"\n//% weight=10\n//% blockGap=8\n//% x.min=0 x.max=15\n//% y.min=0 y.max=1\n//% parts=lcd_i2c trackArgs=0\nvoid ShowStringAtPos(String s, uint8_t x, uint8_t y) {\n    if (getWLCDI2C()->lcd == nullptr)\n        return;\n\n    getWLCDI2C()->lcd->setCursor(x, y);\n    ShowString(s);\n}\n} // namespace lcd_i2c",
            "ns.ts": "/**\n * Character lcd support\n */\n//% icon=\"\\uf0ae\" color=\"#219E42\" blockGap=8\n//% groups='[\"Display\", \"Configuration\"]'\n//% block=\"LCD I2C\"\nnamespace lcd_i2c {\n\n}",
            "pxt.json": "{\n    \"name\": \"lcd_i2c\",\n    \"description\": \"Support for I2C Characeter LCD display (not grove one)\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"lcd_i2c.cpp\",\n        \"pxtparts.json\",\n        \"shims.d.ts\",\n        \"target_lcd_i2c.h\",\n        \"ns.ts\"\n    ],\n    \"public\": \"true\",\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "pxtparts.json": "{\n  \"lcd_i2c\": {\n    \"simulationBehavior\": \"lcd_i2c\",\n    \"visual\": {\n      \"builtIn\": \"lcd_i2c\",\n      \"width\": 322.7900085449219,\n      \"height\": 147.52467,\n      \"pinDistance\": 15,\n      \"pinLocations\": [\n        {\n          \"x\": 15,\n          \"y\": 8.037069860858837\n        },\n        {\n          \"x\": 30,\n          \"y\": 8.037069860858837\n        },\n        {\n          \"x\": 45,\n          \"y\": 8.037069860858837\n        },\n        {\n          \"x\": 60,\n          \"y\": 8.037069860858837\n        }\n      ]\n    },\n    \"numberOfPins\": 4,\n    \"instantiation\": {\n      \"kind\": \"singleton\"\n    },\n    \"pinDefinitions\": [\n      {\n        \"target\": \"ground\",\n        \"style\": \"croc\",\n        \"orientation\": \"-Z\"\n      },\n      {\n        \"target\": \"threeVolt\",\n        \"style\": \"croc\",\n        \"orientation\": \"-Z\"\n      },\n      {\n        \"target\": \"SDA\",\n        \"style\": \"croc\",\n        \"orientation\": \"-Z\"\n      },\n      {\n        \"target\": \"SCL\",\n        \"style\": \"croc\",\n        \"orientation\": \"-Z\"\n      }\n    ],\n    \"assembly\": [\n      { \"part\": true },\n      { \"pinIndices\": [0] },\n      { \"pinIndices\": [1] },\n      { \"pinIndices\": [2, 3] }\n    ]\n  }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace lcd_i2c {\n\n    /**\n     * @brief Initialise the 16x2 screen with address 0x4E\n     */\n    //% blockId=\"I2C_LCD_INIT\"\n    //% block=\"init i2c LCD\"\n    //% weight=100\n    //% blockGap=8\n    //% parts=lcd_i2c shim=lcd_i2c::initScreen\n    function initScreen(): void;\n\n    /**\n     * @brief Initialise the 16x2 screen with specific address\n     *\n     * @param address the hexadecimal address of the screen, eg: \"4E\"\n     */\n    //% blockId=\"I2C_LCD_INIT_ADDRESS\"\n    //% block=\"init i2c LCD 0x%address\"\n    //% weight=99\n    //% blockGap=8\n    //% parts=lcd_i2c trackArgs=0 shim=lcd_i2c::initScreenAddress\n    function initScreenAddress(address: string): void;\n\n    /**\n     * Set cursor position at given position\n     * @param x is lcd column position, eg: 0\n     * @param y is lcd row position, eg: 0\n     */\n    //% blockId=\"I2C_LCD_SET_CURSOR\"\n    //% block=\"set cursor position |at x %x|y %y\"\n    //% weight=89\n    //% blockGap=8\n    //% x.min=0 x.max=15\n    //% y.min=0 y.max=1\n    //% parts=lcd_i2c trackArgs=0 shim=lcd_i2c::setCursor\n    function setCursor(x: uint8, y: uint8): void;\n\n    /**\n     * Show a number in lcd at given position\n     * @param n is number will be show, eg: 10, 100, 200\n     */\n    //% blockId=\"I2C_LCD_SHOW_NUMBER\"\n    //% block=\"show number %n\"\n    //% weight=90\n    //% blockGap=8\n    //% parts=lcd_i2c trackArgs=0 shim=lcd_i2c::ShowNumber\n    function ShowNumber(n: int32): void;\n\n    /**\n     * Show a string in lcd at given position\n     * @param s is string will be show, eg: \"Hello\"\n     */\n    //% blockId=\"I2C_LCD_SHOW_STRING\"\n    //% block=\"show string %s\"\n    //% weight=90\n    //% blockGap=8\n    //% parts=lcd_i2c trackArgs=0 shim=lcd_i2c::ShowString\n    function ShowString(s: string): void;\n\n    /**\n     * Show a name:value pair in lcd at given position\n     * @param name : a string that is the name part of the name:value pair, eg: \"x\"\n     * @param value : a number that is the value part of the name:value pair, eg: 0\n     */\n    //% blockId=\"I2C_LCD_SHOW_VALUE\"\n    //% block=\"show value %name = %value\"\n    //% weight=90\n    //% blockGap=8\n    //% parts=lcd_i2c trackArgs=0 shim=lcd_i2c::ShowValue\n    function ShowValue(name: string, value: int32): void;\n\n    /**\n     * Clear all display content\n     */\n    //% blockId=\"I2C_LCD_CLEAR\"\n    //% block=\"clear screen\"\n    //% weight=85\n    //% blockGap=8\n    //% parts=lcd_i2c trackArgs=0 shim=lcd_i2c::clear\n    function clear(): void;\n\n    /**\n     * Turn on lcd backlight\n     */\n    //% blockId=\"I2C_LCD_BACKLIGHT_ON\"\n    //% block=\"turn on backlight\"\n    //% group=\"Backlight\"\n    //% weight=71\n    //% blockGap=8\n    //% parts=lcd_i2c trackArgs=0 shim=lcd_i2c::BacklightOn\n    function BacklightOn(): void;\n\n    /**\n     * Turn off lcd backlight\n     */\n    //% blockId=\"I2C_LCD_BACKLIGHT_OFF\"\n    //% block=\"turn off backlight\"\n    //% group=\"Backlight\"\n    //% weight=70\n    //% blockGap=8\n    //% parts=lcd_i2c trackArgs=0 shim=lcd_i2c::BacklightOff\n    function BacklightOff(): void;\n\n    /**\n     * Show a number in lcd at given position\n     * @param n is number will be show, eg: 10, 100, 200\n     * @param x is lcd column position, eg: 0\n     * @param y is lcd row position, eg: 0\n     */\n    //% blockId=\"I2C_LCD_SHOW_NUMBER_AT_POS\"\n    //% block=\"show number %n|at x %x|y %y\"\n    //% group=\"More\"\n    //% weight=10\n    //% blockGap=8\n    //% x.min=0 x.max=15\n    //% y.min=0 y.max=1\n    //% parts=lcd_i2c trackArgs=0 shim=lcd_i2c::ShowNumberAtPos\n    function ShowNumberAtPos(n: int32, x: uint8, y: uint8): void;\n\n    /**\n     * Show a string in lcd at given position\n     * @param s is string will be show, eg: \"Hello\"\n     * @param x is lcd column position, [0 - 15], eg: 0\n     * @param y is lcd row position, [0 - 1], eg: 0\n     */\n    //% blockId=\"I2C_LCD_SHOW_STRING_AT_POS\"\n    //% block=\"show string %s|at x %x|y %y\"\n    //% group=\"More\"\n    //% weight=10\n    //% blockGap=8\n    //% x.min=0 x.max=15\n    //% y.min=0 y.max=1\n    //% parts=lcd_i2c trackArgs=0 shim=lcd_i2c::ShowStringAtPos\n    function ShowStringAtPos(s: string, x: uint8, y: uint8): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "target_lcd_i2c.h": "#include \"pxt.h\"\n#include \"STM32I2C.h\"\n#include \"i2c_lcd.h\"\n\nnamespace pxt {\nclass WLCDI2C {\n  public:\n    codal::STM32I2C i2c;\n    codal::I2C_LCD *lcd;\n    WLCDI2C() : i2c(*LOOKUP_PIN(SDA), *LOOKUP_PIN(SCL)), lcd(nullptr) {}\n};\n} // namespace pxt"
        },
        "mh_z19b": {
            "enums.d.ts": "",
            "mh_z19b.cpp": "#include \"pxt.h\"\n#include \"PulseIn.h\"\n#include <vector>\n\nconstexpr int TIMEOUT_PULSE = 2500;\n\nnamespace input {\n\n/**\n * @brief Get the CO2 concentration\n *\n * @param pin the pin where the sensor is connected\n * @return int\n */\n//% blockId=input_get_co2_concentration block=\"read CO2 concentration %pin\"\n//% help=input/input_get_co2_concentration\n//% parts=\"mh_z19b\"\n//% group=\"CO2\" weight=\"90\"\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\n//% trackArgs=0\nint getCO2Concentration(DigitalInOutPin pin) {\n    int start = current_time_ms();\n\n    while (pin->getDigitalValue() == 1) {\n        if ((current_time_ms() - start) >= TIMEOUT_PULSE) {\n            return -10;\n        }\n    }\n\n    while (pin->getDigitalValue() == 0) {\n        if ((current_time_ms() - start) >= TIMEOUT_PULSE) {\n            return -20;\n        }\n    }\n\n    int begin = current_time_ms();\n\n    while (pin->getDigitalValue() == 1) {\n        if ((current_time_ms() - begin) >= TIMEOUT_PULSE) {\n            return -30;\n        }\n    }\n\n    int pulse = current_time_ms() - begin;\n\n    return 5000 * (pulse - 2) / 1000;\n}\n\n} // namespace input",
            "pxt.json": "{\n    \"name\": \"mh_z19b\",\n    \"description\": \"An infrared CO2 sensor 0-5000 ppm\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"mh_z19b.cpp\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"pxtparts.json\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "pxtparts.json": "{\n  \"mh_z19b\": {\n    \"simulationBehavior\": \"mh_z19b\",\n    \"visual\": {\n      \"builtIn\": \"mh_z19b\",\n      \"width\": 196.28,\n      \"height\": 253.446,\n      \"pinDistance\": 15,\n      \"pinLocations\": [\n        {\n          \"x\": 97.825,\n          \"y\": 10.775\n        },\n        {\n          \"x\": 41.02,\n          \"y\": 10.775\n        },\n        {\n          \"x\": 59.215,\n          \"y\": 10.775\n        }\n      ]\n    },\n    \"numberOfPins\": 3,\n    \"instantiation\": {\n      \"kind\": \"function\",\n      \"fullyQualifiedName\": \"input.getCO2Concentration\",\n      \"argumentRoles\": [\n        {\n          \"pinInstantiationIdx\": 0,\n          \"partParameter\": \"pin\"\n        }\n      ]\n    },\n    \"pinDefinitions\": [\n      {\n        \"target\": {\n          \"pinInstantiationIdx\": 0\n        },\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      },\n      {\n        \"target\": \"fiveVolt\",\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      },\n      {\n        \"target\": \"ground\",\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      }\n    ],\n    \"assembly\": [\n      { \"part\": true },\n      { \"pinIndices\": [0] },\n      { \"pinIndices\": [1] },\n      { \"pinIndices\": [2] }\n    ]\n  }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace input {\n\n    /**\n     * @brief Get the CO2 concentration\n     *\n     * @param pin the pin where the sensor is connected\n     * @return int\n     */\n    //% blockId=input_get_co2_concentration block=\"read CO2 concentration %pin\"\n    //% help=input/input_get_co2_concentration\n    //% parts=\"mh_z19b\"\n    //% group=\"CO2\" weight=\"90\"\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% trackArgs=0 shim=input::getCO2Concentration\n    function getCO2Concentration(pin: DigitalInOutPin): int32;\n}\n\n// Auto-generated. Do not edit. Really.\n"
        },
        "soil-hygrometer": {
            "enums.d.ts": "",
            "pxt.json": "{\n    \"name\": \"soil-hygrometer\",\n    \"description\": \"A soil hygrometer analog sensor\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"soil-hygrometer.cpp\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"pxtparts.json\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"1.0.32\",\n        \"pxt\": \"7.4.12\"\n    }\n}\n",
            "pxtparts.json": "{\n  \"soil_hygrometer\": {\n    \"simulationBehavior\": \"soil_hygrometer\",\n    \"visual\": {\n      \"builtIn\": \"soil_hygrometer\",\n      \"width\": 209.811,\n      \"height\": 595.812,\n      \"pinDistance\": 15,\n      \"pinLocations\": [\n        {\n          \"x\": 87.825,\n          \"y\": 32.775\n        },\n        {\n          \"x\": 105.02,\n          \"y\": 32.775\n        },\n        {\n          \"x\": 122.215,\n          \"y\": 32.775\n        }\n      ]\n    },\n    \"numberOfPins\": 3,\n    \"instantiation\": {\n      \"kind\": \"function\",\n      \"fullyQualifiedName\": \"input.getSoilHumidity\",\n      \"argumentRoles\": [\n        {\n          \"pinInstantiationIdx\": 0,\n          \"partParameter\": \"pin\"\n        }\n      ]\n    },\n    \"pinDefinitions\": [\n      {\n        \"target\": {\n          \"pinInstantiationIdx\": 0\n        },\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      },\n      {\n        \"target\": \"fiveVolt\",\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      },\n      {\n        \"target\": \"ground\",\n        \"style\": \"croc\",\n        \"orientation\": \"+Z\"\n      }\n    ],\n    \"assembly\": [\n      { \"part\": true },\n      { \"pinIndices\": [0] },\n      { \"pinIndices\": [1] },\n      { \"pinIndices\": [2] }\n    ]\n  }\n}\n",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace input {\n\n    /**\n     * @brief Get the Soil Humidity data\n     *\n     * @param pin the pin where the sensor is connected\n     * @return int\n     */\n    //% blockId=input_get_soil_humidity block=\"read soil humidity from %pin\"\n    //% help=input/input_get_soil_humidity\n    //% parts=\"soil_hygrometer\"\n    //% group=\"Soil Hygrometer\" weight=\"90\"\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% trackArgs=0 shim=input::getSoilHumidity\n    function getSoilHumidity(pin: AnalogInPin): int32;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "soil-hygrometer.cpp": "#include \"pxt.h\"\n\nnamespace input {\n\n/**\n * @brief Get the Soil Humidity data\n *\n * @param pin the pin where the sensor is connected\n * @return int\n */\n//% blockId=input_get_soil_humidity block=\"read soil humidity from %pin\"\n//% help=input/input_get_soil_humidity\n//% parts=\"soil_hygrometer\"\n//% group=\"Soil Hygrometer\" weight=\"90\"\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\n//% trackArgs=0\nint getSoilHumidity(AnalogInPin pin) {\n    return pin->getAnalogValue();\n}\n\n} // namespace input"
        }
    },
    "apiInfo": {}
}